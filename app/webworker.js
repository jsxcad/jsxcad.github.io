/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// If the loader is already loaded, just stop.
if (!self.define) {
  const singleRequire = async name => {
    if (!registry[name]) {
      
        await new Promise(async resolve => {
          if ("document" in self) {
            const script = document.createElement("script");
            
              script.src = name;
            
            // Ya never know
            script.defer = true;
            document.head.appendChild(script);
            script.onload = resolve;
          } else {
            importScripts(name);
            resolve();
          }
        });
      

      if (!registry[name]) {
        throw new Error(`Module ${name} didn’t register its module`);
      }
    }
    return registry[name];
  };

  const require = async (names, resolve) => {
    const modules = await Promise.all(names.map(singleRequire));
    resolve(modules.length === 1 ? modules[0] : modules);
  };

  const registry = {
    require: Promise.resolve(require)
  };

  self.define = (moduleName, depsNames, factory) => {
    if (registry[moduleName]) {
      // Module is already loading or loaded.
      return;
    }
    registry[moduleName] = new Promise(async resolve => {
      let exports = {};
      const module = {
        
          uri: location.origin + moduleName.slice(1)
        
      };
      const deps = await Promise.all(
        depsNames.map(depName => {
          if (depName === "exports") {
            return exports;
          }
          if (depName === "module") {
            return module;
          }
          return singleRequire(depName);
        })
      );
      const facValue = factory(...deps);
      if(!exports.default) {
        exports.default = facValue;
      }
      resolve(exports);
    });
  };
}
define("./webworker.js",[],function () { 'use strict';

  // radians = degrees * PI / 180

  // TODO: Clean this up.

  // degrees = radians * 180 / PI

  const spatialResolution = 1e5;

  // Quantize values for use in spatial coordinates, and so on, even if the usual quantizeForSpace is disabled.
  const reallyQuantizeForSpace = (value) => (Math.round(value * spatialResolution) / spatialResolution);

  /**
   * Adds two mat4's
   *
   * @param {mat4} a the first operand
   * @param {mat4} b the second operand
   * @returns {mat4} out
   */

  /**
   * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
   *
   * @param {mat4} a The first matrix.
   * @param {mat4} b The second matrix.
   * @returns {Boolean} True if the matrices are equal, false otherwise.
   */

  /**
   * Creates a matrix from a vector scaling
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.scale(dest, dest, vec);
   *
   * @param {vec3} v Scaling vector
   * @returns {mat4} out
   */
  const fromScaling = ([x = 1, y = 1, z = 1]) => [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];

  /**
   * Creates a matrix from a vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, dest, vec);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {vec3} v Translation vector
   * @returns {mat4} out
   */
  const fromTranslation = ([x = 0, y = 0, z = 0]) => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];

  /**
   * Create a new mat4 with the given values
   *
   * @param {Number} m00 Component in column 0, row 0 position (index 0)
   * @param {Number} m01 Component in column 0, row 1 position (index 1)
   * @param {Number} m02 Component in column 0, row 2 position (index 2)
   * @param {Number} m03 Component in column 0, row 3 position (index 3)
   * @param {Number} m10 Component in column 1, row 0 position (index 4)
   * @param {Number} m11 Component in column 1, row 1 position (index 5)
   * @param {Number} m12 Component in column 1, row 2 position (index 6)
   * @param {Number} m13 Component in column 1, row 3 position (index 7)
   * @param {Number} m20 Component in column 2, row 0 position (index 8)
   * @param {Number} m21 Component in column 2, row 1 position (index 9)
   * @param {Number} m22 Component in column 2, row 2 position (index 10)
   * @param {Number} m23 Component in column 2, row 3 position (index 11)
   * @param {Number} m30 Component in column 3, row 0 position (index 12)
   * @param {Number} m31 Component in column 3, row 1 position (index 13)
   * @param {Number} m32 Component in column 3, row 2 position (index 14)
   * @param {Number} m33 Component in column 3, row 3 position (index 15)
   * @returns {mat4} A new mat4
   */
  const fromValues = (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) =>
    [m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33];

  /**
   * Creates a matrix from the given angle around the X axis
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateX(dest, dest, rad);
   *
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */
  const fromXRotation = (rad) => {
    const s = Math.sin(rad);
    const c = Math.cos(rad);

    // Perform axis-specific matrix multiplication
    return [1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1];
  };

  /**
   * Creates a matrix from the given angle around the Y axis
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateY(dest, dest, rad);
   *
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */
  const fromYRotation = (rad) => {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    // Perform axis-specific matrix multiplication
    return [c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1];
  };

  /**
   * Creates a matrix from the given angle around the Z axis
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateZ(dest, dest, rad);
   *
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */
  const fromZRotation = (rad) => {
    const s = Math.sin(rad);
    const c = Math.cos(rad);
    // Perform axis-specific matrix multiplication
    return [c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  };

  /**
   * Set a mat4 to the identity matrix
   *
   * @returns {mat4} out
   */

  /**
   * Calculates the absolute value of the give vector
   *
   * @param {vec3} [out] - receiving vector
   * @param {vec3} vec - given value
   * @returns {vec3} absolute value of the vector
   */
  const abs = ([x, y, z]) => [Math.abs(x), Math.abs(y), Math.abs(z)];

  /**
   * Adds two vec3's
   *
   * @param {vec3} a the first vector to add
   * @param {vec3} b the second vector to add
   * @returns {vec3} the added vectors
   */
  const add = ([ax, ay, az], [bx, by, bz]) => [(ax + bx), (ay + by), (az + bz)];

  /**
   * Calculates the dot product of two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} dot product of a and b
   */
  const dot = ([ax, ay, az], [bx, by, bz]) => (ax * bx) + (ay * by) + (az * bz);

  /**
   * Scales a vec3 by a scalar number
   *
   * @param {Number} amount amount to scale the vector by
   * @param {vec3} vector the vector to scale
   * @returns {vec3} out
   */
  const scale = (amount, [x, y, z]) => [(x * amount), (y * amount), (z * amount)];

  const canonicalize = ([x = 0, y = 0, z = 0]) => [reallyQuantizeForSpace(x), reallyQuantizeForSpace(y), reallyQuantizeForSpace(z)];

  /**
   * Computes the cross product of two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  const cross = ([ax, ay, az], [bx, by, bz]) => [ay * bz - az * by,
                                                        az * bx - ax * bz,
                                                        ax * by - ay * bx];

  /**
   * Calculates the euclidian distance between two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} distance between a and b
   */
  const distance = ([ax, ay, az], [bx, by, bz]) => {
    const x = bx - ax;
    const y = by - ay;
    const z = bz - az;
    return Math.sqrt(x * x + y * y + z * z);
  };

  /**
   * Divides two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */

  const equals = ([ax, ay, az], [bx, by, bz]) => (ax === bx) && (ay === by) && (az === bz);

  /**
   * Creates a new vec3 from the point given.
   * Missing ranks are implicitly zero.
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @returns {vec3} a new 3D vector
   */
  const fromPoint = ([x = 0, y = 0, z = 0]) => [x, y, z];

  /** create a vec3 from a single scalar value
   * all components of the resulting vec3 have the value of the
   * input scalar
   * @param  {Float} scalar
   * @returns {Vec3}
   */
  const fromScalar = (scalar) => [scalar, scalar, scalar];

  /**
   * Creates a new vec3 initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @returns {vec3} a new 3D vector
   */

  // extend to a 3D vector by adding a z coordinate:

  /**
   * Calculates the length of a vec3
   *
   * @param {vec3} a vector to calculate length of
   * @returns {Number} length of a
   */
  const length = ([x = 0, y = 0, z = 0]) => Math.sqrt((x * x) + (y * y) + (z * z));

  /**
   * Performs a linear interpolation between two vec3's
   *
   * @param {Number} t interpolant (0.0 to 1.0) applied between the two inputs
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  const lerp = (t, [ax, ay, az], [bx, by, bz]) => [ax + t * (bx - ax),
                                                          ay + t * (by - ay),
                                                          az + t * (bz - az)];

  /**
   * Returns the maximum of two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  const max = ([ax, ay, az], [bx, by, bz]) => [Math.max(ax, bx),
                                                      Math.max(ay, by),
                                                      Math.max(az, bz)];

  /**
   * Returns the minimum of two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  const min = ([ax, ay, az], [bx, by, bz]) => [Math.min(ax, bx),
                                                      Math.min(ay, by),
                                                      Math.min(az, bz)];

  /**
   * Multiplies two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  const multiply = ([ax, ay, az], [bx, by, bz]) => [(ax * bx), (ay * by), (az * bz)];

  /**
   * Negates the components of a vec3
   *
   * @param {vec3} a vector to negate
   * @returns {vec3} out
   */
  const negate = ([x, y, z]) => [-x, -y, -z];

  // find a vector that is somewhat perpendicular to this one
  const random = (vec) => {
    const temp = abs(vec);
    if ((temp[0] <= temp[1]) && (temp[0] <= temp[2])) {
      return [1, 0, 0];
    } else if ((temp[1] <= temp[0]) && (temp[1] <= temp[2])) {
      return [0, 1, 0];
    } else {
      return [0, 0, 1];
    }
  };

  /**
   * Subtracts vector b from vector a
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  const subtract = ([ax, ay, az], [bx, by, bz]) => [(ax - bx), (ay - by), (az - bz)];

  /**
   * Calculates the squared euclidian distance between two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} squared distance between a and b
   */
  const squaredDistance = ([ax, ay, az], [bx, by, bz]) => {
    const x = bx - ax;
    const y = by - ay;
    const z = bz - az;
    return (x * x) + (y * y) + (z * z);
  };

  /**
   * Calculates the squared length of a vec3
   *
   * @param {vec3} a vector to calculate squared length of
   * @returns {Number} squared length of a
   */

  /**
   * Transforms the vec3 with a mat4.
   * 4th vector component is implicitly '1'
   * @param {[[<vec3>], <mat4> , <vec3>]} params
   * @param {mat4} params[1] matrix matrix to transform with
   * @param {vec3} params[2] vector the vector to transform
   * @returns {vec3} out
   */
  const transform = (matrix, [x = 0, y = 0, z = 0]) => {
    let w = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15];
    w = w || 1.0;
    return [(matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]) / w,
            (matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]) / w,
            (matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]) / w];
  };

  /**
   * Calculates the unit vector of the given vector
   *
   * @param {vec3} vector - the base vector for calculations
   * @returns {vec3} unit vector of the given vector
   */
  const unit = (vector) => {
    const [x, y, z] = vector;
    const magnitude = length(vector);
    return [x / magnitude,
            y / magnitude,
            z / magnitude];
  };

  /**
   * determine whether the input matrix is a mirroring transformation
   *
   * @param {mat4} mat the input matrix
   * @returns {boolean} output
   */
  const isMirroring = (mat) => {
    const u = [mat[0], mat[4], mat[8]];
    const v = [mat[1], mat[5], mat[9]];
    const w = [mat[2], mat[6], mat[10]];

    // for a true orthogonal, non-mirrored base, u.cross(v) == w
    // If they have an opposite direction then we are mirroring
    const mirrorvalue = dot(cross(u, v), w);
    const ismirror = (mirrorvalue < 0);
    return ismirror;
  };

  /**
   * m the mat4 by the dimensions in the given vec3
   * create an affine matrix for mirroring into an arbitrary plane:
   *
   * @param {vec3} v the vec3 to mirror the matrix by
   * @param {mat4} a the matrix to mirror
   * @returns {mat4} out
   */

  /**
   * Create an affine matrix for mirroring onto an arbitrary plane
   *
   * @param {vec4} plane to mirror the matrix by
   * @returns {mat4} out
   */

  /**
   * Multiplies two mat4's
   *
   * @param {mat4} a the first operand
   * @param {mat4} b the second operand
   * @returns {mat4} out
   */
  const multiply$1 = (a, b) => {
    const out = Array(16);
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];

    // Cache only the current line of the second matrix
    let b0 = b[0];
    let b1 = b[1];
    let b2 = b[2];
    let b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  };

  /**
   * Calculates the absolute value of the give vector
   *
   * @param {vec2} vec - given value
   * @returns {vec2} absolute value of the vector
   */

  /**
   * Adds two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */

  // y=sin, x=cos

  /**
   * Computes the cross product (3D) of two vectors
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec3} cross product
   */

  /**
   * Calculates the euclidian distance between two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {Number} distance between a and b
   */

  /**
   * Divides two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */

  /**
   * Calculates the dot product of two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {Number} dot product of a and b
   */

  const equals$1 = ([ax, ay], [bx, by]) => (ax === bx) && (ay === by);

  const fromAngleRadians = (radians) => [Math.cos(radians), Math.sin(radians)];

  /**
   * Creates a new vec2 from the point given.
   * Missing ranks are implicitly zero.
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @returns {vec2} a new 2D vector
   */

  /** Create a vec2 from a single scalar value
   * @param  {Float} scalar
   * @returns {Vec2} a new vec2
   */

  /**
   * Creates a new vec3 initialized with the given values
   * Any missing ranks are implicitly zero.
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @returns {vec3} a new 2D vector
   */

  /**
   * Calculates the length of a vec2
   *
   * @param {vec2} a vector to calculate length of
   * @returns {Number} length of a
   */

  /**
   * Performs a linear interpolation between two vec2's
   *
   * @param {Number} t interpolation amount between the two inputs
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */

  /**
   * Returns the maximum of two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */

  /**
   * Returns the minimum of two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */

  /**
   * Multiplies two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */

  /**
   * Negates the components of a vec2
   *
   * @param {vec2} a vector to negate
   * @returns {vec2} out
   */

  /**
   * Rotates a vec2 by an angle
   *
   * @param {Number} angle the angle of rotation (in radians)
   * @param {vec2} vector the vector to rotate
   * @returns {vec2} out
   */

  /**
   * Normalize the given vector.
   *
   * @param {vec2} a vector to normalize
   * @returns {vec2} normalized (unit) vector
   */

  /**
   * Scales a vec2 by a scalar number
   *
   * @param {Number} amount amount to scale the vector by
   * @param {vec2} vector the vector to scale
   * @returns {vec2} out
   */

  /**
   * Calculates the squared euclidian distance between two vec2's
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {Number} squared distance between a and b
   */

  /**
   * Calculates the squared length of a vec2
   *
   * @param {vec2} a vector to calculate squared length of
   * @returns {Number} squared length of a
   */

  /**
   * Subtracts vector b from vector a
   *
   * @param {vec2} a the first operand
   * @param {vec2} b the second operand
   * @returns {vec2} out
   */

  /**
   * Transforms the vec2 with a mat4
   * 3rd vector component is implicitly '0'
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} matrix matrix to transform with
   * @param {vec2} vector the vector to transform
   * @returns {vec2} out
   */

  /**
   * Subtracts matrix b from matrix a
   *
   * @param {mat4} out the receiving matrix
   * @param {mat4} a the first operand
   * @param {mat4} b the second operand
   * @returns {mat4} out
   */

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  //[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
  //[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
  //[5]   	Name	   ::=   	NameStartChar (NameChar)*
  var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;//\u10000-\uEFFFF
  var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
  var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
  //var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
  //var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

  //S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
  //S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
  var S_TAG = 0;//tag name offerring
  var S_ATTR = 1;//attr name offerring 
  var S_ATTR_SPACE=2;//attr name end and space offer
  var S_EQ = 3;//=space?
  var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
  var S_ATTR_END = 5;//attr value end and no space(quot end)
  var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
  var S_TAG_CLOSE = 7;//closed el<el />

  function XMLReader(){
  	
  }

  XMLReader.prototype = {
  	parse:function(source,defaultNSMap,entityMap){
  		var domBuilder = this.domBuilder;
  		domBuilder.startDocument();
  		_copy(defaultNSMap ,defaultNSMap = {});
  		parse(source,defaultNSMap,entityMap,
  				domBuilder,this.errorHandler);
  		domBuilder.endDocument();
  	}
  };
  function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
  	function fixedFromCharCode(code) {
  		// String.prototype.fromCharCode does not supports
  		// > 2 bytes unicode chars directly
  		if (code > 0xffff) {
  			code -= 0x10000;
  			var surrogate1 = 0xd800 + (code >> 10)
  				, surrogate2 = 0xdc00 + (code & 0x3ff);

  			return String.fromCharCode(surrogate1, surrogate2);
  		} else {
  			return String.fromCharCode(code);
  		}
  	}
  	function entityReplacer(a){
  		var k = a.slice(1,-1);
  		if(k in entityMap){
  			return entityMap[k]; 
  		}else if(k.charAt(0) === '#'){
  			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
  		}else{
  			errorHandler.error('entity not found:'+a);
  			return a;
  		}
  	}
  	function appendText(end){//has some bugs
  		if(end>start){
  			var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
  			locator&&position(start);
  			domBuilder.characters(xt,0,end-start);
  			start = end;
  		}
  	}
  	function position(p,m){
  		while(p>=lineEnd && (m = linePattern.exec(source))){
  			lineStart = m.index;
  			lineEnd = lineStart + m[0].length;
  			locator.lineNumber++;
  			//console.log('line++:',locator,startPos,endPos)
  		}
  		locator.columnNumber = p-lineStart+1;
  	}
  	var lineStart = 0;
  	var lineEnd = 0;
  	var linePattern = /.*(?:\r\n?|\n)|.*$/g;
  	var locator = domBuilder.locator;
  	
  	var parseStack = [{currentNSMap:defaultNSMapCopy}];
  	var closeMap = {};
  	var start = 0;
  	while(true){
  		try{
  			var tagStart = source.indexOf('<',start);
  			if(tagStart<0){
  				if(!source.substr(start).match(/^\s*$/)){
  					var doc = domBuilder.doc;
  	    			var text = doc.createTextNode(source.substr(start));
  	    			doc.appendChild(text);
  	    			domBuilder.currentElement = text;
  				}
  				return;
  			}
  			if(tagStart>start){
  				appendText(tagStart);
  			}
  			switch(source.charAt(tagStart+1)){
  			case '/':
  				var end = source.indexOf('>',tagStart+3);
  				var tagName = source.substring(tagStart+2,end);
  				var config = parseStack.pop();
  				if(end<0){
  					
  	        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
  	        		//console.error('#@@@@@@'+tagName)
  	        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
  	        		end = tagStart+1+tagName.length;
  	        	}else if(tagName.match(/\s</)){
  	        		tagName = tagName.replace(/[\s<].*/,'');
  	        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
  	        		end = tagStart+1+tagName.length;
  				}
  				//console.error(parseStack.length,parseStack)
  				//console.error(config);
  				var localNSMap = config.localNSMap;
  				var endMatch = config.tagName == tagName;
  				var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase();
  		        if(endIgnoreCaseMach){
  		        	domBuilder.endElement(config.uri,config.localName,tagName);
  					if(localNSMap){
  						for(var prefix in localNSMap){
  							domBuilder.endPrefixMapping(prefix) ;
  						}
  					}
  					if(!endMatch){
  		            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName );
  					}
  		        }else{
  		        	parseStack.push(config);
  		        }
  				
  				end++;
  				break;
  				// end elment
  			case '?':// <?...?>
  				locator&&position(tagStart);
  				end = parseInstruction(source,tagStart,domBuilder);
  				break;
  			case '!':// <!doctype,<![CDATA,<!--
  				locator&&position(tagStart);
  				end = parseDCC(source,tagStart,domBuilder,errorHandler);
  				break;
  			default:
  				locator&&position(tagStart);
  				var el = new ElementAttributes();
  				var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
  				//elStartEnd
  				var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
  				var len = el.length;
  				
  				
  				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
  					el.closed = true;
  					if(!entityMap.nbsp){
  						errorHandler.warning('unclosed xml attribute');
  					}
  				}
  				if(locator && len){
  					var locator2 = copyLocator(locator,{});
  					//try{//attribute position fixed
  					for(var i = 0;i<len;i++){
  						var a = el[i];
  						position(a.offset);
  						a.locator = copyLocator(locator,{});
  					}
  					//}catch(e){console.error('@@@@@'+e)}
  					domBuilder.locator = locator2;
  					if(appendElement(el,domBuilder,currentNSMap)){
  						parseStack.push(el);
  					}
  					domBuilder.locator = locator;
  				}else{
  					if(appendElement(el,domBuilder,currentNSMap)){
  						parseStack.push(el);
  					}
  				}
  				
  				
  				
  				if(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){
  					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder);
  				}else{
  					end++;
  				}
  			}
  		}catch(e){
  			errorHandler.error('element parse error: '+e);
  			//errorHandler.error('element parse error: '+e);
  			end = -1;
  			//throw e;
  		}
  		if(end>start){
  			start = end;
  		}else{
  			//TODO: 这里有可能sax回退，有位置错误风险
  			appendText(Math.max(tagStart,start)+1);
  		}
  	}
  }
  function copyLocator(f,t){
  	t.lineNumber = f.lineNumber;
  	t.columnNumber = f.columnNumber;
  	return t;
  }

  /**
   * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
   * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
   */
  function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){
  	var attrName;
  	var value;
  	var p = ++start;
  	var s = S_TAG;//status
  	while(true){
  		var c = source.charAt(p);
  		switch(c){
  		case '=':
  			if(s === S_ATTR){//attrName
  				attrName = source.slice(start,p);
  				s = S_EQ;
  			}else if(s === S_ATTR_SPACE){
  				s = S_EQ;
  			}else{
  				//fatalError: equal must after attrName or space after attrName
  				throw new Error('attribute equal must after attrName');
  			}
  			break;
  		case '\'':
  		case '"':
  			if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
  				){//equal
  				if(s === S_ATTR){
  					errorHandler.warning('attribute value must after "="');
  					attrName = source.slice(start,p);
  				}
  				start = p+1;
  				p = source.indexOf(c,start);
  				if(p>0){
  					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
  					el.add(attrName,value,start-1);
  					s = S_ATTR_END;
  				}else{
  					//fatalError: no end quot match
  					throw new Error('attribute value no end \''+c+'\' match');
  				}
  			}else if(s == S_ATTR_NOQUOT_VALUE){
  				value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
  				//console.log(attrName,value,start,p)
  				el.add(attrName,value,start);
  				//console.dir(el)
  				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
  				start = p+1;
  				s = S_ATTR_END;
  			}else{
  				//fatalError: no equal before
  				throw new Error('attribute value must after "="');
  			}
  			break;
  		case '/':
  			switch(s){
  			case S_TAG:
  				el.setTagName(source.slice(start,p));
  			case S_ATTR_END:
  			case S_TAG_SPACE:
  			case S_TAG_CLOSE:
  				s =S_TAG_CLOSE;
  				el.closed = true;
  			case S_ATTR_NOQUOT_VALUE:
  			case S_ATTR:
  			case S_ATTR_SPACE:
  				break;
  			//case S_EQ:
  			default:
  				throw new Error("attribute invalid close char('/')")
  			}
  			break;
  		case ''://end document
  			//throw new Error('unexpected end of input')
  			errorHandler.error('unexpected end of input');
  			if(s == S_TAG){
  				el.setTagName(source.slice(start,p));
  			}
  			return p;
  		case '>':
  			switch(s){
  			case S_TAG:
  				el.setTagName(source.slice(start,p));
  			case S_ATTR_END:
  			case S_TAG_SPACE:
  			case S_TAG_CLOSE:
  				break;//normal
  			case S_ATTR_NOQUOT_VALUE://Compatible state
  			case S_ATTR:
  				value = source.slice(start,p);
  				if(value.slice(-1) === '/'){
  					el.closed  = true;
  					value = value.slice(0,-1);
  				}
  			case S_ATTR_SPACE:
  				if(s === S_ATTR_SPACE){
  					value = attrName;
  				}
  				if(s == S_ATTR_NOQUOT_VALUE){
  					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
  					el.add(attrName,value.replace(/&#?\w+;/g,entityReplacer),start);
  				}else{
  					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)){
  						errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!');
  					}
  					el.add(value,value,start);
  				}
  				break;
  			case S_EQ:
  				throw new Error('attribute value missed!!');
  			}
  //			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
  			return p;
  		/*xml space '\x20' | #x9 | #xD | #xA; */
  		case '\u0080':
  			c = ' ';
  		default:
  			if(c<= ' '){//space
  				switch(s){
  				case S_TAG:
  					el.setTagName(source.slice(start,p));//tagName
  					s = S_TAG_SPACE;
  					break;
  				case S_ATTR:
  					attrName = source.slice(start,p);
  					s = S_ATTR_SPACE;
  					break;
  				case S_ATTR_NOQUOT_VALUE:
  					var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
  					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
  					el.add(attrName,value,start);
  				case S_ATTR_END:
  					s = S_TAG_SPACE;
  					break;
  				//case S_TAG_SPACE:
  				//case S_EQ:
  				//case S_ATTR_SPACE:
  				//	void();break;
  				//case S_TAG_CLOSE:
  					//ignore warning
  				}
  			}else{//not space
  //S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
  //S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
  				switch(s){
  				//case S_TAG:void();break;
  				//case S_ATTR:void();break;
  				//case S_ATTR_NOQUOT_VALUE:void();break;
  				case S_ATTR_SPACE:
  					var tagName =  el.tagName;
  					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)){
  						errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!');
  					}
  					el.add(attrName,attrName,start);
  					start = p;
  					s = S_ATTR;
  					break;
  				case S_ATTR_END:
  					errorHandler.warning('attribute space is required"'+attrName+'"!!');
  				case S_TAG_SPACE:
  					s = S_ATTR;
  					start = p;
  					break;
  				case S_EQ:
  					s = S_ATTR_NOQUOT_VALUE;
  					start = p;
  					break;
  				case S_TAG_CLOSE:
  					throw new Error("elements closed character '/' and '>' must be connected to");
  				}
  			}
  		}//end outer switch
  		//console.log('p++',p)
  		p++;
  	}
  }
  /**
   * @return true if has new namespace define
   */
  function appendElement(el,domBuilder,currentNSMap){
  	var tagName = el.tagName;
  	var localNSMap = null;
  	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
  	var i = el.length;
  	while(i--){
  		var a = el[i];
  		var qName = a.qName;
  		var value = a.value;
  		var nsp = qName.indexOf(':');
  		if(nsp>0){
  			var prefix = a.prefix = qName.slice(0,nsp);
  			var localName = qName.slice(nsp+1);
  			var nsPrefix = prefix === 'xmlns' && localName;
  		}else{
  			localName = qName;
  			prefix = null;
  			nsPrefix = qName === 'xmlns' && '';
  		}
  		//can not set prefix,because prefix !== ''
  		a.localName = localName ;
  		//prefix == null for no ns prefix attribute 
  		if(nsPrefix !== false){//hack!!
  			if(localNSMap == null){
  				localNSMap = {};
  				//console.log(currentNSMap,0)
  				_copy(currentNSMap,currentNSMap={});
  				//console.log(currentNSMap,1)
  			}
  			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
  			a.uri = 'http://www.w3.org/2000/xmlns/';
  			domBuilder.startPrefixMapping(nsPrefix, value); 
  		}
  	}
  	var i = el.length;
  	while(i--){
  		a = el[i];
  		var prefix = a.prefix;
  		if(prefix){//no prefix attribute has no namespace
  			if(prefix === 'xml'){
  				a.uri = 'http://www.w3.org/XML/1998/namespace';
  			}if(prefix !== 'xmlns'){
  				a.uri = currentNSMap[prefix || ''];
  				
  				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
  			}
  		}
  	}
  	var nsp = tagName.indexOf(':');
  	if(nsp>0){
  		prefix = el.prefix = tagName.slice(0,nsp);
  		localName = el.localName = tagName.slice(nsp+1);
  	}else{
  		prefix = null;//important!!
  		localName = el.localName = tagName;
  	}
  	//no prefix element has default namespace
  	var ns = el.uri = currentNSMap[prefix || ''];
  	domBuilder.startElement(ns,localName,tagName,el);
  	//endPrefixMapping and startPrefixMapping have not any help for dom builder
  	//localNSMap = null
  	if(el.closed){
  		domBuilder.endElement(ns,localName,tagName);
  		if(localNSMap){
  			for(prefix in localNSMap){
  				domBuilder.endPrefixMapping(prefix); 
  			}
  		}
  	}else{
  		el.currentNSMap = currentNSMap;
  		el.localNSMap = localNSMap;
  		//parseStack.push(el);
  		return true;
  	}
  }
  function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
  	if(/^(?:script|textarea)$/i.test(tagName)){
  		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
  		var text = source.substring(elStartEnd+1,elEndStart);
  		if(/[&<]/.test(text)){
  			if(/^script$/i.test(tagName)){
  				//if(!/\]\]>/.test(text)){
  					//lexHandler.startCDATA();
  					domBuilder.characters(text,0,text.length);
  					//lexHandler.endCDATA();
  					return elEndStart;
  				//}
  			}//}else{//text area
  				text = text.replace(/&#?\w+;/g,entityReplacer);
  				domBuilder.characters(text,0,text.length);
  				return elEndStart;
  			//}
  			
  		}
  	}
  	return elStartEnd+1;
  }
  function fixSelfClosed(source,elStartEnd,tagName,closeMap){
  	//if(tagName in closeMap){
  	var pos = closeMap[tagName];
  	if(pos == null){
  		//console.log(tagName)
  		pos =  source.lastIndexOf('</'+tagName+'>');
  		if(pos<elStartEnd){//忘记闭合
  			pos = source.lastIndexOf('</'+tagName);
  		}
  		closeMap[tagName] =pos;
  	}
  	return pos<elStartEnd;
  	//} 
  }
  function _copy(source,target){
  	for(var n in source){target[n] = source[n];}
  }
  function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
  	var next= source.charAt(start+2);
  	switch(next){
  	case '-':
  		if(source.charAt(start + 3) === '-'){
  			var end = source.indexOf('-->',start+4);
  			//append comment source.substring(4,end)//<!--
  			if(end>start){
  				domBuilder.comment(source,start+4,end-start-4);
  				return end+3;
  			}else{
  				errorHandler.error("Unclosed comment");
  				return -1;
  			}
  		}else{
  			//error
  			return -1;
  		}
  	default:
  		if(source.substr(start+3,6) == 'CDATA['){
  			var end = source.indexOf(']]>',start+9);
  			domBuilder.startCDATA();
  			domBuilder.characters(source,start+9,end-start-9);
  			domBuilder.endCDATA(); 
  			return end+3;
  		}
  		//<!DOCTYPE
  		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
  		var matchs = split(source,start);
  		var len = matchs.length;
  		if(len>1 && /!doctype/i.test(matchs[0][0])){
  			var name = matchs[1][0];
  			var pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0];
  			var sysid = len>4 && matchs[4][0];
  			var lastMatch = matchs[len-1];
  			domBuilder.startDTD(name,pubid && pubid.replace(/^(['"])(.*?)\1$/,'$2'),
  					sysid && sysid.replace(/^(['"])(.*?)\1$/,'$2'));
  			domBuilder.endDTD();
  			
  			return lastMatch.index+lastMatch[0].length
  		}
  	}
  	return -1;
  }



  function parseInstruction(source,start,domBuilder){
  	var end = source.indexOf('?>',start);
  	if(end){
  		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
  		if(match){
  			var len = match[0].length;
  			domBuilder.processingInstruction(match[1], match[2]) ;
  			return end+2;
  		}else{//error
  			return -1;
  		}
  	}
  	return -1;
  }

  /**
   * @param source
   */
  function ElementAttributes(source){
  	
  }
  ElementAttributes.prototype = {
  	setTagName:function(tagName){
  		if(!tagNamePattern.test(tagName)){
  			throw new Error('invalid tagName:'+tagName)
  		}
  		this.tagName = tagName;
  	},
  	add:function(qName,value,offset){
  		if(!tagNamePattern.test(qName)){
  			throw new Error('invalid attribute:'+qName)
  		}
  		this[this.length++] = {qName:qName,value:value,offset:offset};
  	},
  	length:0,
  	getLocalName:function(i){return this[i].localName},
  	getLocator:function(i){return this[i].locator},
  	getQName:function(i){return this[i].qName},
  	getURI:function(i){return this[i].uri},
  	getValue:function(i){return this[i].value}
  //	,getIndex:function(uri, localName)){
  //		if(localName){
  //			
  //		}else{
  //			var qName = uri
  //		}
  //	},
  //	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
  //	getType:function(uri,localName){}
  //	getType:function(i){},
  };




  function _set_proto_(thiz,parent){
  	thiz.__proto__ = parent;
  	return thiz;
  }
  if(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){
  	_set_proto_ = function(thiz,parent){
  		function p(){}		p.prototype = parent;
  		p = new p();
  		for(parent in thiz){
  			p[parent] = thiz[parent];
  		}
  		return p;
  	};
  }

  function split(source,start){
  	var match;
  	var buf = [];
  	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
  	reg.lastIndex = start;
  	reg.exec(source);//skip <
  	while(match = reg.exec(source)){
  		buf.push(match);
  		if(match[1])return buf;
  	}
  }

  var XMLReader_1 = XMLReader;

  var sax = {
  	XMLReader: XMLReader_1
  };

  /*
   * DOM Level 2
   * Object DOMException
   * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
   */

  function copy(src,dest){
  	for(var p in src){
  		dest[p] = src[p];
  	}
  }
  /**
  ^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
  ^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
   */
  function _extends(Class,Super){
  	var pt = Class.prototype;
  	if(Object.create){
  		var ppt = Object.create(Super.prototype);
  		pt.__proto__ = ppt;
  	}
  	if(!(pt instanceof Super)){
  		function t(){}		t.prototype = Super.prototype;
  		t = new t();
  		copy(pt,t);
  		Class.prototype = pt = t;
  	}
  	if(pt.constructor != Class){
  		if(typeof Class != 'function'){
  			console.error("unknow Class:"+Class);
  		}
  		pt.constructor = Class;
  	}
  }
  var htmlns = 'http://www.w3.org/1999/xhtml' ;
  // Node Types
  var NodeType = {};
  var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
  var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
  var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
  var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
  var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
  var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
  var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
  var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
  var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
  var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
  var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
  var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

  // ExceptionCode
  var ExceptionCode = {};
  var ExceptionMessage = {};
  var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
  var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
  var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
  var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
  var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
  var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
  var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
  var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
  var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
  var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
  //level2
  var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
  var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
  var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
  var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
  var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);


  function DOMException(code, message) {
  	if(message instanceof Error){
  		var error = message;
  	}else{
  		error = this;
  		Error.call(this, ExceptionMessage[code]);
  		this.message = ExceptionMessage[code];
  		if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
  	}
  	error.code = code;
  	if(message) this.message = this.message + ": " + message;
  	return error;
  }DOMException.prototype = Error.prototype;
  copy(ExceptionCode,DOMException);
  /**
   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
   * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
   * The items in the NodeList are accessible via an integral index, starting from 0.
   */
  function NodeList() {
  }NodeList.prototype = {
  	/**
  	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
  	 * @standard level1
  	 */
  	length:0, 
  	/**
  	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
  	 * @standard level1
  	 * @param index  unsigned long 
  	 *   Index into the collection.
  	 * @return Node
  	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
  	 */
  	item: function(index) {
  		return this[index] || null;
  	},
  	toString:function(isHTML,nodeFilter){
  		for(var buf = [], i = 0;i<this.length;i++){
  			serializeToString(this[i],buf,isHTML,nodeFilter);
  		}
  		return buf.join('');
  	}
  };
  function LiveNodeList(node,refresh){
  	this._node = node;
  	this._refresh = refresh;
  	_updateLiveList(this);
  }
  function _updateLiveList(list){
  	var inc = list._node._inc || list._node.ownerDocument._inc;
  	if(list._inc != inc){
  		var ls = list._refresh(list._node);
  		//console.log(ls.length)
  		__set__(list,'length',ls.length);
  		copy(ls,list);
  		list._inc = inc;
  	}
  }
  LiveNodeList.prototype.item = function(i){
  	_updateLiveList(this);
  	return this[i];
  };

  _extends(LiveNodeList,NodeList);
  /**
   * 
   * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
   * NamedNodeMap objects in the DOM are live.
   * used for attributes or DocumentType entities 
   */
  function NamedNodeMap() {
  }
  function _findNodeIndex(list,node){
  	var i = list.length;
  	while(i--){
  		if(list[i] === node){return i}
  	}
  }

  function _addNamedNode(el,list,newAttr,oldAttr){
  	if(oldAttr){
  		list[_findNodeIndex(list,oldAttr)] = newAttr;
  	}else{
  		list[list.length++] = newAttr;
  	}
  	if(el){
  		newAttr.ownerElement = el;
  		var doc = el.ownerDocument;
  		if(doc){
  			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
  			_onAddAttribute(doc,el,newAttr);
  		}
  	}
  }
  function _removeNamedNode(el,list,attr){
  	//console.log('remove attr:'+attr)
  	var i = _findNodeIndex(list,attr);
  	if(i>=0){
  		var lastIndex = list.length-1;
  		while(i<lastIndex){
  			list[i] = list[++i];
  		}
  		list.length = lastIndex;
  		if(el){
  			var doc = el.ownerDocument;
  			if(doc){
  				_onRemoveAttribute(doc,el,attr);
  				attr.ownerElement = null;
  			}
  		}
  	}else{
  		throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
  	}
  }
  NamedNodeMap.prototype = {
  	length:0,
  	item:NodeList.prototype.item,
  	getNamedItem: function(key) {
  //		if(key.indexOf(':')>0 || key == 'xmlns'){
  //			return null;
  //		}
  		//console.log()
  		var i = this.length;
  		while(i--){
  			var attr = this[i];
  			//console.log(attr.nodeName,key)
  			if(attr.nodeName == key){
  				return attr;
  			}
  		}
  	},
  	setNamedItem: function(attr) {
  		var el = attr.ownerElement;
  		if(el && el!=this._ownerElement){
  			throw new DOMException(INUSE_ATTRIBUTE_ERR);
  		}
  		var oldAttr = this.getNamedItem(attr.nodeName);
  		_addNamedNode(this._ownerElement,this,attr,oldAttr);
  		return oldAttr;
  	},
  	/* returns Node */
  	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
  		var el = attr.ownerElement, oldAttr;
  		if(el && el!=this._ownerElement){
  			throw new DOMException(INUSE_ATTRIBUTE_ERR);
  		}
  		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
  		_addNamedNode(this._ownerElement,this,attr,oldAttr);
  		return oldAttr;
  	},

  	/* returns Node */
  	removeNamedItem: function(key) {
  		var attr = this.getNamedItem(key);
  		_removeNamedNode(this._ownerElement,this,attr);
  		return attr;
  		
  		
  	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
  	
  	//for level2
  	removeNamedItemNS:function(namespaceURI,localName){
  		var attr = this.getNamedItemNS(namespaceURI,localName);
  		_removeNamedNode(this._ownerElement,this,attr);
  		return attr;
  	},
  	getNamedItemNS: function(namespaceURI, localName) {
  		var i = this.length;
  		while(i--){
  			var node = this[i];
  			if(node.localName == localName && node.namespaceURI == namespaceURI){
  				return node;
  			}
  		}
  		return null;
  	}
  };
  /**
   * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
   */
  function DOMImplementation(/* Object */ features) {
  	this._features = {};
  	if (features) {
  		for (var feature in features) {
  			 this._features = features[feature];
  		}
  	}
  }
  DOMImplementation.prototype = {
  	hasFeature: function(/* string */ feature, /* string */ version) {
  		var versions = this._features[feature.toLowerCase()];
  		if (versions && (!version || version in versions)) {
  			return true;
  		} else {
  			return false;
  		}
  	},
  	// Introduced in DOM Level 2:
  	createDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR
  		var doc = new Document();
  		doc.implementation = this;
  		doc.childNodes = new NodeList();
  		doc.doctype = doctype;
  		if(doctype){
  			doc.appendChild(doctype);
  		}
  		if(qualifiedName){
  			var root = doc.createElementNS(namespaceURI,qualifiedName);
  			doc.appendChild(root);
  		}
  		return doc;
  	},
  	// Introduced in DOM Level 2:
  	createDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR
  		var node = new DocumentType();
  		node.name = qualifiedName;
  		node.nodeName = qualifiedName;
  		node.publicId = publicId;
  		node.systemId = systemId;
  		// Introduced in DOM Level 2:
  		//readonly attribute DOMString        internalSubset;
  		
  		//TODO:..
  		//  readonly attribute NamedNodeMap     entities;
  		//  readonly attribute NamedNodeMap     notations;
  		return node;
  	}
  };


  /**
   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
   */

  function Node() {
  }
  Node.prototype = {
  	firstChild : null,
  	lastChild : null,
  	previousSibling : null,
  	nextSibling : null,
  	attributes : null,
  	parentNode : null,
  	childNodes : null,
  	ownerDocument : null,
  	nodeValue : null,
  	namespaceURI : null,
  	prefix : null,
  	localName : null,
  	// Modified in DOM Level 2:
  	insertBefore:function(newChild, refChild){//raises 
  		return _insertBefore(this,newChild,refChild);
  	},
  	replaceChild:function(newChild, oldChild){//raises 
  		this.insertBefore(newChild,oldChild);
  		if(oldChild){
  			this.removeChild(oldChild);
  		}
  	},
  	removeChild:function(oldChild){
  		return _removeChild(this,oldChild);
  	},
  	appendChild:function(newChild){
  		return this.insertBefore(newChild,null);
  	},
  	hasChildNodes:function(){
  		return this.firstChild != null;
  	},
  	cloneNode:function(deep){
  		return cloneNode(this.ownerDocument||this,this,deep);
  	},
  	// Modified in DOM Level 2:
  	normalize:function(){
  		var child = this.firstChild;
  		while(child){
  			var next = child.nextSibling;
  			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
  				this.removeChild(next);
  				child.appendData(next.data);
  			}else{
  				child.normalize();
  				child = next;
  			}
  		}
  	},
    	// Introduced in DOM Level 2:
  	isSupported:function(feature, version){
  		return this.ownerDocument.implementation.hasFeature(feature,version);
  	},
      // Introduced in DOM Level 2:
      hasAttributes:function(){
      	return this.attributes.length>0;
      },
      lookupPrefix:function(namespaceURI){
      	var el = this;
      	while(el){
      		var map = el._nsMap;
      		//console.dir(map)
      		if(map){
      			for(var n in map){
      				if(map[n] == namespaceURI){
      					return n;
      				}
      			}
      		}
      		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
      	}
      	return null;
      },
      // Introduced in DOM Level 3:
      lookupNamespaceURI:function(prefix){
      	var el = this;
      	while(el){
      		var map = el._nsMap;
      		//console.dir(map)
      		if(map){
      			if(prefix in map){
      				return map[prefix] ;
      			}
      		}
      		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
      	}
      	return null;
      },
      // Introduced in DOM Level 3:
      isDefaultNamespace:function(namespaceURI){
      	var prefix = this.lookupPrefix(namespaceURI);
      	return prefix == null;
      }
  };


  function _xmlEncoder(c){
  	return c == '<' && '&lt;' ||
           c == '>' && '&gt;' ||
           c == '&' && '&amp;' ||
           c == '"' && '&quot;' ||
           '&#'+c.charCodeAt()+';'
  }


  copy(NodeType,Node);
  copy(NodeType,Node.prototype);

  /**
   * @param callback return true for continue,false for break
   * @return boolean true: break visit;
   */
  function _visitNode(node,callback){
  	if(callback(node)){
  		return true;
  	}
  	if(node = node.firstChild){
  		do{
  			if(_visitNode(node,callback)){return true}
          }while(node=node.nextSibling)
      }
  }



  function Document(){
  }
  function _onAddAttribute(doc,el,newAttr){
  	doc && doc._inc++;
  	var ns = newAttr.namespaceURI ;
  	if(ns == 'http://www.w3.org/2000/xmlns/'){
  		//update namespace
  		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value;
  	}
  }
  function _onRemoveAttribute(doc,el,newAttr,remove){
  	doc && doc._inc++;
  	var ns = newAttr.namespaceURI ;
  	if(ns == 'http://www.w3.org/2000/xmlns/'){
  		//update namespace
  		delete el._nsMap[newAttr.prefix?newAttr.localName:''];
  	}
  }
  function _onUpdateChild(doc,el,newChild){
  	if(doc && doc._inc){
  		doc._inc++;
  		//update childNodes
  		var cs = el.childNodes;
  		if(newChild){
  			cs[cs.length++] = newChild;
  		}else{
  			//console.log(1)
  			var child = el.firstChild;
  			var i = 0;
  			while(child){
  				cs[i++] = child;
  				child =child.nextSibling;
  			}
  			cs.length = i;
  		}
  	}
  }

  /**
   * attributes;
   * children;
   * 
   * writeable properties:
   * nodeValue,Attr:value,CharacterData:data
   * prefix
   */
  function _removeChild(parentNode,child){
  	var previous = child.previousSibling;
  	var next = child.nextSibling;
  	if(previous){
  		previous.nextSibling = next;
  	}else{
  		parentNode.firstChild = next;
  	}
  	if(next){
  		next.previousSibling = previous;
  	}else{
  		parentNode.lastChild = previous;
  	}
  	_onUpdateChild(parentNode.ownerDocument,parentNode);
  	return child;
  }
  /**
   * preformance key(refChild == null)
   */
  function _insertBefore(parentNode,newChild,nextChild){
  	var cp = newChild.parentNode;
  	if(cp){
  		cp.removeChild(newChild);//remove and update
  	}
  	if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
  		var newFirst = newChild.firstChild;
  		if (newFirst == null) {
  			return newChild;
  		}
  		var newLast = newChild.lastChild;
  	}else{
  		newFirst = newLast = newChild;
  	}
  	var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;

  	newFirst.previousSibling = pre;
  	newLast.nextSibling = nextChild;
  	
  	
  	if(pre){
  		pre.nextSibling = newFirst;
  	}else{
  		parentNode.firstChild = newFirst;
  	}
  	if(nextChild == null){
  		parentNode.lastChild = newLast;
  	}else{
  		nextChild.previousSibling = newLast;
  	}
  	do{
  		newFirst.parentNode = parentNode;
  	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
  	_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);
  	//console.log(parentNode.lastChild.nextSibling == null)
  	if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
  		newChild.firstChild = newChild.lastChild = null;
  	}
  	return newChild;
  }
  function _appendSingleChild(parentNode,newChild){
  	var cp = newChild.parentNode;
  	if(cp){
  		var pre = parentNode.lastChild;
  		cp.removeChild(newChild);//remove and update
  		var pre = parentNode.lastChild;
  	}
  	var pre = parentNode.lastChild;
  	newChild.parentNode = parentNode;
  	newChild.previousSibling = pre;
  	newChild.nextSibling = null;
  	if(pre){
  		pre.nextSibling = newChild;
  	}else{
  		parentNode.firstChild = newChild;
  	}
  	parentNode.lastChild = newChild;
  	_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
  	return newChild;
  	//console.log("__aa",parentNode.lastChild.nextSibling == null)
  }
  Document.prototype = {
  	//implementation : null,
  	nodeName :  '#document',
  	nodeType :  DOCUMENT_NODE,
  	doctype :  null,
  	documentElement :  null,
  	_inc : 1,
  	
  	insertBefore :  function(newChild, refChild){//raises 
  		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
  			var child = newChild.firstChild;
  			while(child){
  				var next = child.nextSibling;
  				this.insertBefore(child,refChild);
  				child = next;
  			}
  			return newChild;
  		}
  		if(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){
  			this.documentElement = newChild;
  		}
  		
  		return _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;
  	},
  	removeChild :  function(oldChild){
  		if(this.documentElement == oldChild){
  			this.documentElement = null;
  		}
  		return _removeChild(this,oldChild);
  	},
  	// Introduced in DOM Level 2:
  	importNode : function(importedNode,deep){
  		return importNode(this,importedNode,deep);
  	},
  	// Introduced in DOM Level 2:
  	getElementById :	function(id){
  		var rtv = null;
  		_visitNode(this.documentElement,function(node){
  			if(node.nodeType == ELEMENT_NODE){
  				if(node.getAttribute('id') == id){
  					rtv = node;
  					return true;
  				}
  			}
  		});
  		return rtv;
  	},
  	
  	//document factory method:
  	createElement :	function(tagName){
  		var node = new Element();
  		node.ownerDocument = this;
  		node.nodeName = tagName;
  		node.tagName = tagName;
  		node.childNodes = new NodeList();
  		var attrs	= node.attributes = new NamedNodeMap();
  		attrs._ownerElement = node;
  		return node;
  	},
  	createDocumentFragment :	function(){
  		var node = new DocumentFragment();
  		node.ownerDocument = this;
  		node.childNodes = new NodeList();
  		return node;
  	},
  	createTextNode :	function(data){
  		var node = new Text();
  		node.ownerDocument = this;
  		node.appendData(data);
  		return node;
  	},
  	createComment :	function(data){
  		var node = new Comment();
  		node.ownerDocument = this;
  		node.appendData(data);
  		return node;
  	},
  	createCDATASection :	function(data){
  		var node = new CDATASection();
  		node.ownerDocument = this;
  		node.appendData(data);
  		return node;
  	},
  	createProcessingInstruction :	function(target,data){
  		var node = new ProcessingInstruction();
  		node.ownerDocument = this;
  		node.tagName = node.target = target;
  		node.nodeValue= node.data = data;
  		return node;
  	},
  	createAttribute :	function(name){
  		var node = new Attr();
  		node.ownerDocument	= this;
  		node.name = name;
  		node.nodeName	= name;
  		node.localName = name;
  		node.specified = true;
  		return node;
  	},
  	createEntityReference :	function(name){
  		var node = new EntityReference();
  		node.ownerDocument	= this;
  		node.nodeName	= name;
  		return node;
  	},
  	// Introduced in DOM Level 2:
  	createElementNS :	function(namespaceURI,qualifiedName){
  		var node = new Element();
  		var pl = qualifiedName.split(':');
  		var attrs	= node.attributes = new NamedNodeMap();
  		node.childNodes = new NodeList();
  		node.ownerDocument = this;
  		node.nodeName = qualifiedName;
  		node.tagName = qualifiedName;
  		node.namespaceURI = namespaceURI;
  		if(pl.length == 2){
  			node.prefix = pl[0];
  			node.localName = pl[1];
  		}else{
  			//el.prefix = null;
  			node.localName = qualifiedName;
  		}
  		attrs._ownerElement = node;
  		return node;
  	},
  	// Introduced in DOM Level 2:
  	createAttributeNS :	function(namespaceURI,qualifiedName){
  		var node = new Attr();
  		var pl = qualifiedName.split(':');
  		node.ownerDocument = this;
  		node.nodeName = qualifiedName;
  		node.name = qualifiedName;
  		node.namespaceURI = namespaceURI;
  		node.specified = true;
  		if(pl.length == 2){
  			node.prefix = pl[0];
  			node.localName = pl[1];
  		}else{
  			//el.prefix = null;
  			node.localName = qualifiedName;
  		}
  		return node;
  	}
  };
  _extends(Document,Node);


  function Element() {
  	this._nsMap = {};
  }Element.prototype = {
  	nodeType : ELEMENT_NODE,
  	hasAttribute : function(name){
  		return this.getAttributeNode(name)!=null;
  	},
  	getAttribute : function(name){
  		var attr = this.getAttributeNode(name);
  		return attr && attr.value || '';
  	},
  	getAttributeNode : function(name){
  		return this.attributes.getNamedItem(name);
  	},
  	setAttribute : function(name, value){
  		var attr = this.ownerDocument.createAttribute(name);
  		attr.value = attr.nodeValue = "" + value;
  		this.setAttributeNode(attr);
  	},
  	removeAttribute : function(name){
  		var attr = this.getAttributeNode(name);
  		attr && this.removeAttributeNode(attr);
  	},
  	
  	//four real opeartion method
  	appendChild:function(newChild){
  		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
  			return this.insertBefore(newChild,null);
  		}else{
  			return _appendSingleChild(this,newChild);
  		}
  	},
  	setAttributeNode : function(newAttr){
  		return this.attributes.setNamedItem(newAttr);
  	},
  	setAttributeNodeNS : function(newAttr){
  		return this.attributes.setNamedItemNS(newAttr);
  	},
  	removeAttributeNode : function(oldAttr){
  		//console.log(this == oldAttr.ownerElement)
  		return this.attributes.removeNamedItem(oldAttr.nodeName);
  	},
  	//get real attribute name,and remove it by removeAttributeNode
  	removeAttributeNS : function(namespaceURI, localName){
  		var old = this.getAttributeNodeNS(namespaceURI, localName);
  		old && this.removeAttributeNode(old);
  	},
  	
  	hasAttributeNS : function(namespaceURI, localName){
  		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
  	},
  	getAttributeNS : function(namespaceURI, localName){
  		var attr = this.getAttributeNodeNS(namespaceURI, localName);
  		return attr && attr.value || '';
  	},
  	setAttributeNS : function(namespaceURI, qualifiedName, value){
  		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
  		attr.value = attr.nodeValue = "" + value;
  		this.setAttributeNode(attr);
  	},
  	getAttributeNodeNS : function(namespaceURI, localName){
  		return this.attributes.getNamedItemNS(namespaceURI, localName);
  	},
  	
  	getElementsByTagName : function(tagName){
  		return new LiveNodeList(this,function(base){
  			var ls = [];
  			_visitNode(base,function(node){
  				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
  					ls.push(node);
  				}
  			});
  			return ls;
  		});
  	},
  	getElementsByTagNameNS : function(namespaceURI, localName){
  		return new LiveNodeList(this,function(base){
  			var ls = [];
  			_visitNode(base,function(node){
  				if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
  					ls.push(node);
  				}
  			});
  			return ls;
  			
  		});
  	}
  };
  Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
  Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


  _extends(Element,Node);
  function Attr() {
  }Attr.prototype.nodeType = ATTRIBUTE_NODE;
  _extends(Attr,Node);


  function CharacterData() {
  }CharacterData.prototype = {
  	data : '',
  	substringData : function(offset, count) {
  		return this.data.substring(offset, offset+count);
  	},
  	appendData: function(text) {
  		text = this.data+text;
  		this.nodeValue = this.data = text;
  		this.length = text.length;
  	},
  	insertData: function(offset,text) {
  		this.replaceData(offset,0,text);
  	
  	},
  	appendChild:function(newChild){
  		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
  	},
  	deleteData: function(offset, count) {
  		this.replaceData(offset,count,"");
  	},
  	replaceData: function(offset, count, text) {
  		var start = this.data.substring(0,offset);
  		var end = this.data.substring(offset+count);
  		text = start + text + end;
  		this.nodeValue = this.data = text;
  		this.length = text.length;
  	}
  };
  _extends(CharacterData,Node);
  function Text() {
  }Text.prototype = {
  	nodeName : "#text",
  	nodeType : TEXT_NODE,
  	splitText : function(offset) {
  		var text = this.data;
  		var newText = text.substring(offset);
  		text = text.substring(0, offset);
  		this.data = this.nodeValue = text;
  		this.length = text.length;
  		var newNode = this.ownerDocument.createTextNode(newText);
  		if(this.parentNode){
  			this.parentNode.insertBefore(newNode, this.nextSibling);
  		}
  		return newNode;
  	}
  };
  _extends(Text,CharacterData);
  function Comment() {
  }Comment.prototype = {
  	nodeName : "#comment",
  	nodeType : COMMENT_NODE
  };
  _extends(Comment,CharacterData);

  function CDATASection() {
  }CDATASection.prototype = {
  	nodeName : "#cdata-section",
  	nodeType : CDATA_SECTION_NODE
  };
  _extends(CDATASection,CharacterData);


  function DocumentType() {
  }DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
  _extends(DocumentType,Node);

  function Notation() {
  }Notation.prototype.nodeType = NOTATION_NODE;
  _extends(Notation,Node);

  function Entity() {
  }Entity.prototype.nodeType = ENTITY_NODE;
  _extends(Entity,Node);

  function EntityReference() {
  }EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
  _extends(EntityReference,Node);

  function DocumentFragment() {
  }DocumentFragment.prototype.nodeName =	"#document-fragment";
  DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
  _extends(DocumentFragment,Node);


  function ProcessingInstruction() {
  }
  ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
  _extends(ProcessingInstruction,Node);
  function XMLSerializer(){}
  XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
  	return nodeSerializeToString.call(node,isHtml,nodeFilter);
  };
  Node.prototype.toString = nodeSerializeToString;
  function nodeSerializeToString(isHtml,nodeFilter){
  	var buf = [];
  	var refNode = this.nodeType == 9?this.documentElement:this;
  	var prefix = refNode.prefix;
  	var uri = refNode.namespaceURI;
  	
  	if(uri && prefix == null){
  		//console.log(prefix)
  		var prefix = refNode.lookupPrefix(uri);
  		if(prefix == null){
  			//isHTML = true;
  			var visibleNamespaces=[
  			{namespace:uri,prefix:null}
  			//{namespace:uri,prefix:''}
  			];
  		}
  	}
  	serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
  	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
  	return buf.join('');
  }
  function needNamespaceDefine(node,isHTML, visibleNamespaces) {
  	var prefix = node.prefix||'';
  	var uri = node.namespaceURI;
  	if (!prefix && !uri){
  		return false;
  	}
  	if (prefix === "xml" && uri === "http://www.w3.org/XML/1998/namespace" 
  		|| uri == 'http://www.w3.org/2000/xmlns/'){
  		return false;
  	}
  	
  	var i = visibleNamespaces.length; 
  	//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)
  	while (i--) {
  		var ns = visibleNamespaces[i];
  		// get namespace prefix
  		//console.log(node.nodeType,node.tagName,ns.prefix,prefix)
  		if (ns.prefix == prefix){
  			return ns.namespace != uri;
  		}
  	}
  	//console.log(isHTML,uri,prefix=='')
  	//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){
  	//	return false;
  	//}
  	//node.flag = '11111'
  	//console.error(3,true,node.flag,node.prefix,node.namespaceURI)
  	return true;
  }
  function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
  	if(nodeFilter){
  		node = nodeFilter(node);
  		if(node){
  			if(typeof node == 'string'){
  				buf.push(node);
  				return;
  			}
  		}else{
  			return;
  		}
  		//buf.sort.apply(attrs, attributeSorter);
  	}
  	switch(node.nodeType){
  	case ELEMENT_NODE:
  		if (!visibleNamespaces) visibleNamespaces = [];
  		var startVisibleNamespaces = visibleNamespaces.length;
  		var attrs = node.attributes;
  		var len = attrs.length;
  		var child = node.firstChild;
  		var nodeName = node.tagName;
  		
  		isHTML =  (htmlns === node.namespaceURI) ||isHTML; 
  		buf.push('<',nodeName);
  		
  		
  		
  		for(var i=0;i<len;i++){
  			// add namespaces for attributes
  			var attr = attrs.item(i);
  			if (attr.prefix == 'xmlns') {
  				visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
  			}else if(attr.nodeName == 'xmlns'){
  				visibleNamespaces.push({ prefix: '', namespace: attr.value });
  			}
  		}
  		for(var i=0;i<len;i++){
  			var attr = attrs.item(i);
  			if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
  				var prefix = attr.prefix||'';
  				var uri = attr.namespaceURI;
  				var ns = prefix ? ' xmlns:' + prefix : " xmlns";
  				buf.push(ns, '="' , uri , '"');
  				visibleNamespaces.push({ prefix: prefix, namespace:uri });
  			}
  			serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
  		}
  		// add namespace for current node		
  		if (needNamespaceDefine(node,isHTML, visibleNamespaces)) {
  			var prefix = node.prefix||'';
  			var uri = node.namespaceURI;
  			var ns = prefix ? ' xmlns:' + prefix : " xmlns";
  			buf.push(ns, '="' , uri , '"');
  			visibleNamespaces.push({ prefix: prefix, namespace:uri });
  		}
  		
  		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
  			buf.push('>');
  			//if is cdata child node
  			if(isHTML && /^script$/i.test(nodeName)){
  				while(child){
  					if(child.data){
  						buf.push(child.data);
  					}else{
  						serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
  					}
  					child = child.nextSibling;
  				}
  			}else
  			{
  				while(child){
  					serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
  					child = child.nextSibling;
  				}
  			}
  			buf.push('</',nodeName,'>');
  		}else{
  			buf.push('/>');
  		}
  		// remove added visible namespaces
  		//visibleNamespaces.length = startVisibleNamespaces;
  		return;
  	case DOCUMENT_NODE:
  	case DOCUMENT_FRAGMENT_NODE:
  		var child = node.firstChild;
  		while(child){
  			serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
  			child = child.nextSibling;
  		}
  		return;
  	case ATTRIBUTE_NODE:
  		return buf.push(' ',node.name,'="',node.value.replace(/[<&"]/g,_xmlEncoder),'"');
  	case TEXT_NODE:
  		return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));
  	case CDATA_SECTION_NODE:
  		return buf.push( '<![CDATA[',node.data,']]>');
  	case COMMENT_NODE:
  		return buf.push( "<!--",node.data,"-->");
  	case DOCUMENT_TYPE_NODE:
  		var pubid = node.publicId;
  		var sysid = node.systemId;
  		buf.push('<!DOCTYPE ',node.name);
  		if(pubid){
  			buf.push(' PUBLIC "',pubid);
  			if (sysid && sysid!='.') {
  				buf.push( '" "',sysid);
  			}
  			buf.push('">');
  		}else if(sysid && sysid!='.'){
  			buf.push(' SYSTEM "',sysid,'">');
  		}else{
  			var sub = node.internalSubset;
  			if(sub){
  				buf.push(" [",sub,"]");
  			}
  			buf.push(">");
  		}
  		return;
  	case PROCESSING_INSTRUCTION_NODE:
  		return buf.push( "<?",node.target," ",node.data,"?>");
  	case ENTITY_REFERENCE_NODE:
  		return buf.push( '&',node.nodeName,';');
  	//case ENTITY_NODE:
  	//case NOTATION_NODE:
  	default:
  		buf.push('??',node.nodeName);
  	}
  }
  function importNode(doc,node,deep){
  	var node2;
  	switch (node.nodeType) {
  	case ELEMENT_NODE:
  		node2 = node.cloneNode(false);
  		node2.ownerDocument = doc;
  		//var attrs = node2.attributes;
  		//var len = attrs.length;
  		//for(var i=0;i<len;i++){
  			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
  		//}
  	case DOCUMENT_FRAGMENT_NODE:
  		break;
  	case ATTRIBUTE_NODE:
  		deep = true;
  		break;
  	//case ENTITY_REFERENCE_NODE:
  	//case PROCESSING_INSTRUCTION_NODE:
  	////case TEXT_NODE:
  	//case CDATA_SECTION_NODE:
  	//case COMMENT_NODE:
  	//	deep = false;
  	//	break;
  	//case DOCUMENT_NODE:
  	//case DOCUMENT_TYPE_NODE:
  	//cannot be imported.
  	//case ENTITY_NODE:
  	//case NOTATION_NODE：
  	//can not hit in level3
  	//default:throw e;
  	}
  	if(!node2){
  		node2 = node.cloneNode(false);//false
  	}
  	node2.ownerDocument = doc;
  	node2.parentNode = null;
  	if(deep){
  		var child = node.firstChild;
  		while(child){
  			node2.appendChild(importNode(doc,child,deep));
  			child = child.nextSibling;
  		}
  	}
  	return node2;
  }
  //
  //var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
  //					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
  function cloneNode(doc,node,deep){
  	var node2 = new node.constructor();
  	for(var n in node){
  		var v = node[n];
  		if(typeof v != 'object' ){
  			if(v != node2[n]){
  				node2[n] = v;
  			}
  		}
  	}
  	if(node.childNodes){
  		node2.childNodes = new NodeList();
  	}
  	node2.ownerDocument = doc;
  	switch (node2.nodeType) {
  	case ELEMENT_NODE:
  		var attrs	= node.attributes;
  		var attrs2	= node2.attributes = new NamedNodeMap();
  		var len = attrs.length;
  		attrs2._ownerElement = node2;
  		for(var i=0;i<len;i++){
  			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
  		}
  		break;
  	case ATTRIBUTE_NODE:
  		deep = true;
  	}
  	if(deep){
  		var child = node.firstChild;
  		while(child){
  			node2.appendChild(cloneNode(doc,child,deep));
  			child = child.nextSibling;
  		}
  	}
  	return node2;
  }

  function __set__(object,key,value){
  	object[key] = value;
  }
  //do dynamic
  try{
  	if(Object.defineProperty){
  		Object.defineProperty(LiveNodeList.prototype,'length',{
  			get:function(){
  				_updateLiveList(this);
  				return this.$$length;
  			}
  		});
  		Object.defineProperty(Node.prototype,'textContent',{
  			get:function(){
  				return getTextContent(this);
  			},
  			set:function(data){
  				switch(this.nodeType){
  				case ELEMENT_NODE:
  				case DOCUMENT_FRAGMENT_NODE:
  					while(this.firstChild){
  						this.removeChild(this.firstChild);
  					}
  					if(data || String(data)){
  						this.appendChild(this.ownerDocument.createTextNode(data));
  					}
  					break;
  				default:
  					//TODO:
  					this.data = data;
  					this.value = data;
  					this.nodeValue = data;
  				}
  			}
  		});
  		
  		function getTextContent(node){
  			switch(node.nodeType){
  			case ELEMENT_NODE:
  			case DOCUMENT_FRAGMENT_NODE:
  				var buf = [];
  				node = node.firstChild;
  				while(node){
  					if(node.nodeType!==7 && node.nodeType !==8){
  						buf.push(getTextContent(node));
  					}
  					node = node.nextSibling;
  				}
  				return buf.join('');
  			default:
  				return node.nodeValue;
  			}
  		}
  		__set__ = function(object,key,value){
  			//console.log(value)
  			object['$$'+key] = value;
  		};
  	}
  }catch(e){//ie8
  }

  //if(typeof require == 'function'){
  	var DOMImplementation_1 = DOMImplementation;
  	var XMLSerializer_1 = XMLSerializer;
  //}

  var dom = {
  	DOMImplementation: DOMImplementation_1,
  	XMLSerializer: XMLSerializer_1
  };

  var domParser = createCommonjsModule(function (module, exports) {
  function DOMParser(options){
  	this.options = options ||{locator:{}};
  	
  }
  DOMParser.prototype.parseFromString = function(source,mimeType){
  	var options = this.options;
  	var sax =  new XMLReader();
  	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
  	var errorHandler = options.errorHandler;
  	var locator = options.locator;
  	var defaultNSMap = options.xmlns||{};
  	var entityMap = {'lt':'<','gt':'>','amp':'&','quot':'"','apos':"'"};
  	if(locator){
  		domBuilder.setDocumentLocator(locator);
  	}
  	
  	sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
  	sax.domBuilder = options.domBuilder || domBuilder;
  	if(/\/x?html?$/.test(mimeType)){
  		entityMap.nbsp = '\xa0';
  		entityMap.copy = '\xa9';
  		defaultNSMap['']= 'http://www.w3.org/1999/xhtml';
  	}
  	defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';
  	if(source){
  		sax.parse(source,defaultNSMap,entityMap);
  	}else{
  		sax.errorHandler.error("invalid doc source");
  	}
  	return domBuilder.doc;
  };
  function buildErrorHandler(errorImpl,domBuilder,locator){
  	if(!errorImpl){
  		if(domBuilder instanceof DOMHandler){
  			return domBuilder;
  		}
  		errorImpl = domBuilder ;
  	}
  	var errorHandler = {};
  	var isCallback = errorImpl instanceof Function;
  	locator = locator||{};
  	function build(key){
  		var fn = errorImpl[key];
  		if(!fn && isCallback){
  			fn = errorImpl.length == 2?function(msg){errorImpl(key,msg);}:errorImpl;
  		}
  		errorHandler[key] = fn && function(msg){
  			fn('[xmldom '+key+']\t'+msg+_locator(locator));
  		}||function(){};
  	}
  	build('warning');
  	build('error');
  	build('fatalError');
  	return errorHandler;
  }

  //console.log('#\n\n\n\n\n\n\n####')
  /**
   * +ContentHandler+ErrorHandler
   * +LexicalHandler+EntityResolver2
   * -DeclHandler-DTDHandler 
   * 
   * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
   * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
   * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
   */
  function DOMHandler() {
      this.cdata = false;
  }
  function position(locator,node){
  	node.lineNumber = locator.lineNumber;
  	node.columnNumber = locator.columnNumber;
  }
  /**
   * @see org.xml.sax.ContentHandler#startDocument
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
   */ 
  DOMHandler.prototype = {
  	startDocument : function() {
      	this.doc = new DOMImplementation().createDocument(null, null, null);
      	if (this.locator) {
          	this.doc.documentURI = this.locator.systemId;
      	}
  	},
  	startElement:function(namespaceURI, localName, qName, attrs) {
  		var doc = this.doc;
  	    var el = doc.createElementNS(namespaceURI, qName||localName);
  	    var len = attrs.length;
  	    appendElement(this, el);
  	    this.currentElement = el;
  	    
  		this.locator && position(this.locator,el);
  	    for (var i = 0 ; i < len; i++) {
  	        var namespaceURI = attrs.getURI(i);
  	        var value = attrs.getValue(i);
  	        var qName = attrs.getQName(i);
  			var attr = doc.createAttributeNS(namespaceURI, qName);
  			this.locator &&position(attrs.getLocator(i),attr);
  			attr.value = attr.nodeValue = value;
  			el.setAttributeNode(attr);
  	    }
  	},
  	endElement:function(namespaceURI, localName, qName) {
  		var current = this.currentElement;
  		var tagName = current.tagName;
  		this.currentElement = current.parentNode;
  	},
  	startPrefixMapping:function(prefix, uri) {
  	},
  	endPrefixMapping:function(prefix) {
  	},
  	processingInstruction:function(target, data) {
  	    var ins = this.doc.createProcessingInstruction(target, data);
  	    this.locator && position(this.locator,ins);
  	    appendElement(this, ins);
  	},
  	ignorableWhitespace:function(ch, start, length) {
  	},
  	characters:function(chars, start, length) {
  		chars = _toString.apply(this,arguments);
  		//console.log(chars)
  		if(chars){
  			if (this.cdata) {
  				var charNode = this.doc.createCDATASection(chars);
  			} else {
  				var charNode = this.doc.createTextNode(chars);
  			}
  			if(this.currentElement){
  				this.currentElement.appendChild(charNode);
  			}else if(/^\s*$/.test(chars)){
  				this.doc.appendChild(charNode);
  				//process xml
  			}
  			this.locator && position(this.locator,charNode);
  		}
  	},
  	skippedEntity:function(name) {
  	},
  	endDocument:function() {
  		this.doc.normalize();
  	},
  	setDocumentLocator:function (locator) {
  	    if(this.locator = locator){// && !('lineNumber' in locator)){
  	    	locator.lineNumber = 0;
  	    }
  	},
  	//LexicalHandler
  	comment:function(chars, start, length) {
  		chars = _toString.apply(this,arguments);
  	    var comm = this.doc.createComment(chars);
  	    this.locator && position(this.locator,comm);
  	    appendElement(this, comm);
  	},
  	
  	startCDATA:function() {
  	    //used in characters() methods
  	    this.cdata = true;
  	},
  	endCDATA:function() {
  	    this.cdata = false;
  	},
  	
  	startDTD:function(name, publicId, systemId) {
  		var impl = this.doc.implementation;
  	    if (impl && impl.createDocumentType) {
  	        var dt = impl.createDocumentType(name, publicId, systemId);
  	        this.locator && position(this.locator,dt);
  	        appendElement(this, dt);
  	    }
  	},
  	/**
  	 * @see org.xml.sax.ErrorHandler
  	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
  	 */
  	warning:function(error) {
  		console.warn('[xmldom warning]\t'+error,_locator(this.locator));
  	},
  	error:function(error) {
  		console.error('[xmldom error]\t'+error,_locator(this.locator));
  	},
  	fatalError:function(error) {
  		console.error('[xmldom fatalError]\t'+error,_locator(this.locator));
  	    throw error;
  	}
  };
  function _locator(l){
  	if(l){
  		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
  	}
  }
  function _toString(chars,start,length){
  	if(typeof chars == 'string'){
  		return chars.substr(start,length)
  	}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
  		if(chars.length >= start+length || start){
  			return new java.lang.String(chars,start,length)+'';
  		}
  		return chars;
  	}
  }

  /*
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
   * used method of org.xml.sax.ext.LexicalHandler:
   *  #comment(chars, start, length)
   *  #startCDATA()
   *  #endCDATA()
   *  #startDTD(name, publicId, systemId)
   *
   *
   * IGNORED method of org.xml.sax.ext.LexicalHandler:
   *  #endDTD()
   *  #startEntity(name)
   *  #endEntity(name)
   *
   *
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
   * IGNORED method of org.xml.sax.ext.DeclHandler
   * 	#attributeDecl(eName, aName, type, mode, value)
   *  #elementDecl(name, model)
   *  #externalEntityDecl(name, publicId, systemId)
   *  #internalEntityDecl(name, value)
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
   * IGNORED method of org.xml.sax.EntityResolver2
   *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
   *  #resolveEntity(publicId, systemId)
   *  #getExternalSubset(name, baseURI)
   * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
   * IGNORED method of org.xml.sax.DTDHandler
   *  #notationDecl(name, publicId, systemId) {};
   *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
   */
  "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
  	DOMHandler.prototype[key] = function(){return null};
  });

  /* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
  function appendElement (hander,node) {
      if (!hander.currentElement) {
          hander.doc.appendChild(node);
      } else {
          hander.currentElement.appendChild(node);
      }
  }//appendChild and setAttributeNS are preformance key

  //if(typeof require == 'function'){
  	var XMLReader = sax.XMLReader;
  	var DOMImplementation = exports.DOMImplementation = dom.DOMImplementation;
  	exports.XMLSerializer = dom.XMLSerializer ;
  	exports.DOMParser = DOMParser;
  //}
  });
  var domParser_1 = domParser.DOMImplementation;
  var domParser_2 = domParser.XMLSerializer;
  var domParser_3 = domParser.DOMParser;

  var absSvgPath = absolutize;

  /**
   * redefine `path` with absolute coordinates
   *
   * @param {Array} path
   * @return {Array}
   */

  function absolutize(path){
  	var startX = 0;
  	var startY = 0;
  	var x = 0;
  	var y = 0;

  	return path.map(function(seg){
  		seg = seg.slice();
  		var type = seg[0];
  		var command = type.toUpperCase();

  		// is relative
  		if (type != command) {
  			seg[0] = command;
  			switch (type) {
  				case 'a':
  					seg[6] += x;
  					seg[7] += y;
  					break
  				case 'v':
  					seg[1] += y;
  					break
  				case 'h':
  					seg[1] += x;
  					break
  				default:
  					for (var i = 1; i < seg.length;) {
  						seg[i++] += x;
  						seg[i++] += y;
  					}
  			}
  		}

  		// update cursor state
  		switch (command) {
  			case 'Z':
  				x = startX;
  				y = startY;
  				break
  			case 'H':
  				x = seg[1];
  				break
  			case 'V':
  				y = seg[1];
  				break
  			case 'M':
  				x = startX = seg[1];
  				y = startY = seg[2];
  				break
  			default:
  				x = seg[seg.length - 2];
  				y = seg[seg.length - 1];
  		}

  		return seg
  	})
  }

  function clone(point) { //TODO: use gl-vec2 for this
      return [point[0], point[1]]
  }

  function vec2(x, y) {
      return [x, y]
  }

  var _function = function createBezierBuilder(opt) {
      opt = opt||{};

      var RECURSION_LIMIT = typeof opt.recursion === 'number' ? opt.recursion : 8;
      var FLT_EPSILON = typeof opt.epsilon === 'number' ? opt.epsilon : 1.19209290e-7;
      var PATH_DISTANCE_EPSILON = typeof opt.pathEpsilon === 'number' ? opt.pathEpsilon : 1.0;

      var curve_angle_tolerance_epsilon = typeof opt.angleEpsilon === 'number' ? opt.angleEpsilon : 0.01;
      var m_angle_tolerance = opt.angleTolerance || 0;
      var m_cusp_limit = opt.cuspLimit || 0;

      return function bezierCurve(start, c1, c2, end, scale, points) {
          if (!points)
              points = [];

          scale = typeof scale === 'number' ? scale : 1.0;
          var distanceTolerance = PATH_DISTANCE_EPSILON / scale;
          distanceTolerance *= distanceTolerance;
          begin(start, c1, c2, end, points, distanceTolerance);
          return points
      }


      ////// Based on:
      ////// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp

      function begin(start, c1, c2, end, points, distanceTolerance) {
          points.push(clone(start));
          var x1 = start[0],
              y1 = start[1],
              x2 = c1[0],
              y2 = c1[1],
              x3 = c2[0],
              y3 = c2[1],
              x4 = end[0],
              y4 = end[1];
          recursive(x1, y1, x2, y2, x3, y3, x4, y4, points, distanceTolerance, 0);
          points.push(clone(end));
      }

      function recursive(x1, y1, x2, y2, x3, y3, x4, y4, points, distanceTolerance, level) {
          if(level > RECURSION_LIMIT) 
              return

          var pi = Math.PI;

          // Calculate all the mid-points of the line segments
          //----------------------
          var x12   = (x1 + x2) / 2;
          var y12   = (y1 + y2) / 2;
          var x23   = (x2 + x3) / 2;
          var y23   = (y2 + y3) / 2;
          var x34   = (x3 + x4) / 2;
          var y34   = (y3 + y4) / 2;
          var x123  = (x12 + x23) / 2;
          var y123  = (y12 + y23) / 2;
          var x234  = (x23 + x34) / 2;
          var y234  = (y23 + y34) / 2;
          var x1234 = (x123 + x234) / 2;
          var y1234 = (y123 + y234) / 2;

          if(level > 0) { // Enforce subdivision first time
              // Try to approximate the full cubic curve by a single straight line
              //------------------
              var dx = x4-x1;
              var dy = y4-y1;

              var d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx);
              var d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx);

              var da1, da2;

              if(d2 > FLT_EPSILON && d3 > FLT_EPSILON) {
                  // Regular care
                  //-----------------
                  if((d2 + d3)*(d2 + d3) <= distanceTolerance * (dx*dx + dy*dy)) {
                      // If the curvature doesn't exceed the distanceTolerance value
                      // we tend to finish subdivisions.
                      //----------------------
                      if(m_angle_tolerance < curve_angle_tolerance_epsilon) {
                          points.push(vec2(x1234, y1234));
                          return
                      }

                      // Angle & Cusp Condition
                      //----------------------
                      var a23 = Math.atan2(y3 - y2, x3 - x2);
                      da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1));
                      da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23);
                      if(da1 >= pi) da1 = 2*pi - da1;
                      if(da2 >= pi) da2 = 2*pi - da2;

                      if(da1 + da2 < m_angle_tolerance) {
                          // Finally we can stop the recursion
                          //----------------------
                          points.push(vec2(x1234, y1234));
                          return
                      }

                      if(m_cusp_limit !== 0.0) {
                          if(da1 > m_cusp_limit) {
                              points.push(vec2(x2, y2));
                              return
                          }

                          if(da2 > m_cusp_limit) {
                              points.push(vec2(x3, y3));
                              return
                          }
                      }
                  }
              }
              else {
                  if(d2 > FLT_EPSILON) {
                      // p1,p3,p4 are collinear, p2 is considerable
                      //----------------------
                      if(d2 * d2 <= distanceTolerance * (dx*dx + dy*dy)) {
                          if(m_angle_tolerance < curve_angle_tolerance_epsilon) {
                              points.push(vec2(x1234, y1234));
                              return
                          }

                          // Angle Condition
                          //----------------------
                          da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));
                          if(da1 >= pi) da1 = 2*pi - da1;

                          if(da1 < m_angle_tolerance) {
                              points.push(vec2(x2, y2));
                              points.push(vec2(x3, y3));
                              return
                          }

                          if(m_cusp_limit !== 0.0) {
                              if(da1 > m_cusp_limit) {
                                  points.push(vec2(x2, y2));
                                  return
                              }
                          }
                      }
                  }
                  else if(d3 > FLT_EPSILON) {
                      // p1,p2,p4 are collinear, p3 is considerable
                      //----------------------
                      if(d3 * d3 <= distanceTolerance * (dx*dx + dy*dy)) {
                          if(m_angle_tolerance < curve_angle_tolerance_epsilon) {
                              points.push(vec2(x1234, y1234));
                              return
                          }

                          // Angle Condition
                          //----------------------
                          da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2));
                          if(da1 >= pi) da1 = 2*pi - da1;

                          if(da1 < m_angle_tolerance) {
                              points.push(vec2(x2, y2));
                              points.push(vec2(x3, y3));
                              return
                          }

                          if(m_cusp_limit !== 0.0) {
                              if(da1 > m_cusp_limit)
                              {
                                  points.push(vec2(x3, y3));
                                  return
                              }
                          }
                      }
                  }
                  else {
                      // Collinear case
                      //-----------------
                      dx = x1234 - (x1 + x4) / 2;
                      dy = y1234 - (y1 + y4) / 2;
                      if(dx*dx + dy*dy <= distanceTolerance) {
                          points.push(vec2(x1234, y1234));
                          return
                      }
                  }
              }
          }

          // Continue subdivision
          //----------------------
          recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1); 
          recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1); 
      }
  };

  var adaptiveBezierCurve = _function();

  const buildAdaptiveCubicBezierCurve = ({ scale = 2 }, [start, c1, c2, end]) => adaptiveBezierCurve(start, c1, c2, end, scale);

  /**
   * Transforms the vertices of a polygon, producing a new poly3.
   *
   * The polygon does not need to be a poly3, but may be any array of
   * points. The points being represented as arrays of values.
   *
   * If the original has a 'plane' property, the result will have a clone
   * of the plane.
   *
   * @param {Function} [transform=vec3.clone] - function used to transform the vertices.
   * @returns {Array} a copy with transformed vertices and copied properties.
   *
   * @example
   * const vertices = [ [0, 0, 0], [0, 10, 0], [0, 10, 10] ]
   * let observed = poly3.map(vertices)
   */
  const map = (original, transform) => {
    if (original === undefined) {
      original = [];
    }
    if (transform === undefined) {
      transform = _ => _;
    }
    return original.map(vertex => transform(vertex));
  };

  const canonicalize$1 = polygon => map(polygon, canonicalize);

  /**
   * Emits the edges of a polygon in order.
   *
   * @param {function} the function to call with each edge in order.
   * @param {Polygon} the polygon of which to emit the edges.
   */

  const eachEdge = (options = {}, thunk, polygon) => {
    if (polygon.length >= 2) {
      for (let nth = 1; nth < polygon.length; nth++) {
        thunk(polygon[nth - 1], polygon[nth]);
      }
      thunk(polygon[polygon.length - 1], polygon[0]);
    }
  };

  /**
   * Flip the give polygon to face the opposite direction.
   *
   * @param {poly3} polygon - the polygon to flip
   * @returns {poly3} a new poly3
   */
  const flip = (polygon) => [...polygon].reverse();

  /**
   * Create a poly3 from the given points.
   *
   * @param {Array[]} points - list of points
   * @param {plane} [planeof] - plane of the polygon
   *
   * @example
   * const points = [
   *   [0,  0, 0],
   *   [0, 10, 0],
   *   [0, 10, 10]
   * ]
   * const polygon = createFromPoints(points)
   */
  const fromPoints = (points, planeof) => [...points];

  /**
   * Compare the given planes for equality
   * @return {boolean} true if planes are equal
   */
  const equals$2 = (a, b) => (a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2]) && (a[3] === b[3]);

  /**
   * Flip the given plane (vec4)
   *
   * @param {vec4} vec - plane to flip
   * @return {vec4} flipped plane
   */
  const flip$1 = ([x = 0, y = 0, z = 0, w = 0]) => [-x, -y, -z, -w];

  /**
   * Create a new plane from the given points
   *
   * @param {Vec3} a - 3D point
   * @param {Vec3} b - 3D point
   * @param {Vec3} c - 3D point
   * @returns {Vec4} a new plane with properly typed values
   */
  const fromPoints$1 = (a, b, c) => {
    // let n = b.minus(a).cross(c.minus(a)).unit()
    // FIXME optimize later
    const ba = subtract(b, a);
    const ca = subtract(c, a);
    const cr = cross(ba, ca);
    const normal = unit(cr); // normal part
    //
    const w = dot(normal, a);
    return [normal[0], normal[1], normal[2], w];
  };

  const W = 3;

  /**
   * Calculate the distance to the given point
   * @return {Number} signed distance to point
   */
  const signedDistanceToPoint = (plane, point) => dot(plane, point) - plane[W];

  /**
   * Split the given line by the given plane.
   * Robust splitting, even if the line is parallel to the plane
   * @return {vec3} a new point
   */
  const splitLineSegmentByPlane = (plane, p1, p2) => {
    const direction = subtract(p2, p1);
    let lambda = (plane[3] - dot(plane, p1)) / dot(plane, direction);
    if (Number.isNaN(lambda)) lambda = 0;
    if (lambda > 1) lambda = 1;
    if (lambda < 0) lambda = 0;
    return add(p1, scale(lambda, direction));
  };

  const X = 0;
  const Y = 1;
  const Z = 2;
  const W$1 = 3;

  const toXYPlaneTransforms = (plane, rightVector) => {
    if (rightVector === undefined) {
      rightVector = random(plane);
    }

    const v = unit(cross(plane, rightVector));
    const u = cross(v, plane);
    const p = multiply(plane, fromScalar(plane[W$1]));

    return [
      // to
      fromValues(
        u[X], v[X], plane[X], 0,
        u[Y], v[Y], plane[Y], 0,
        u[Z], v[Z], plane[Z], 0,
        0, 0, -plane[W$1], 1),
      // from
      fromValues(
        u[X], u[Y], u[Z], 0,
        v[X], v[Y], v[Z], 0,
        plane[X], plane[Y], plane[Z], 0,
        p[X], p[Y], p[Z], 1)
    ];
  };

  const toPlane = (polygon) => {
    if (polygon.plane === undefined) {
      if (polygon.length >= 3) {
        polygon.plane = fromPoints$1(...polygon);
      } else {
        throw Error('die');
      }
    }
    return polygon.plane;
  };

  /**
   * Check whether the polygon is convex.
   * @returns {boolean}
   */
  const areVerticesConvex = (vertices, plane) => {
    const numvertices = vertices.length;
    if (numvertices > 2) {
      let prevprevpos = vertices[numvertices - 2];
      let prevpos = vertices[numvertices - 1];
      for (let i = 0; i < numvertices; i++) {
        const pos = vertices[i];
        if (!isConvexPoint(prevprevpos, prevpos, pos, plane)) {
          return false;
        }
        prevprevpos = prevpos;
        prevpos = pos;
      }
    }
    return true;
  };

  // calculate whether three points form a convex corner
  //  prevpoint, point, nextpoint: the 3 coordinates (Vector3D instances)
  //  normal: the normal vector of the plane
  const isConvexPoint = (prevpoint, point, nextpoint, plane) => {
    const crossproduct = cross(
      subtract(point, prevpoint),
      subtract(nextpoint, point)
    );
    // note: plane ~= normal point
    const crossdotnormal = dot(crossproduct, plane);
    return crossdotnormal >= 0;
  };

  // FIXME: not used anywhere ???
  /* const isStrictlyConvexPoint = function (prevpoint, point, nextpoint, normal) {
    let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point))
    let crossdotnormal = crossproduct.dot(normal)
    return (crossdotnormal >= EPS)
  } */

  const isConvex = (polygon) => areVerticesConvex(polygon, toPlane(polygon));

  const isCoplanar = (polygon) => {
    const plane = toPlane(polygon);
    for (const point of polygon) {
      if (signedDistanceToPoint(plane, point) > 1e-5) {
        return false;
      }
    }
    return true;
  };

  const isStrictlyCoplanar = (polygon) => {
    const plane = toPlane(polygon);
    for (let nth = 1; nth < polygon.length - 2; nth++) {
      if (!equals$2(plane, toPlane(polygon.slice(nth)))) {
        return false;
      }
    }
    return true;
  };

  // measure the area of the given poly3 (3D planar polygon)
  // translated from the orginal C++ code from Dan Sunday
  // 2000 softSurfer http://geomalgorithms.com
  const measureArea = (poly3) => {
    let area = poly3.area;
    if (area !== undefined) {
      return area;
    }

    area = 0;
    const n = poly3.length;
    if (n < 3) {
      return 0; // degenerate polygon
    }
    const vertices = poly3;

    // calculate a real normal
    const a = vertices[0];
    const b = vertices[1];
    const c = vertices[2];
    const ba = subtract(b, a);
    const ca = subtract(c, a);
    const normal = cross(ba, ca);
    // let normal = b.minus(a).cross(c.minus(a))
    // let normal = poly3.plane.normal // unit based normal, CANNOT use

    // determin direction of projection
    const ax = Math.abs(normal[0]);
    const ay = Math.abs(normal[1]);
    const az = Math.abs(normal[2]);
    const an = Math.sqrt((ax * ax) + (ay * ay) + (az * az)); // length of normal

    let coord = 3; // ignore Z coordinates
    if ((ax > ay) && (ax > az)) {
      coord = 1; // ignore X coordinates
    } else
    if (ay > az) {
      coord = 2; // ignore Y coordinates
    }

    let h = 0;
    let i = 1;
    let j = 2;
    switch (coord) {
      case 1: // ignore X coordinates
      // compute area of 2D projection
        for (i = 1; i < n; i++) {
          h = i - 1;
          j = (i + 1) % n;
          area += (vertices[i][1] * (vertices[j][2] - vertices[h][2]));
        }
        area += (vertices[0][1] * (vertices[1][2] - vertices[n - 1][2]));
        // scale to get area
        area *= (an / (2 * normal[0]));
        break;

      case 2: // ignore Y coordinates
      // compute area of 2D projection
        for (i = 1; i < n; i++) {
          h = i - 1;
          j = (i + 1) % n;
          area += (vertices[i][2] * (vertices[j][0] - vertices[h][0]));
        }
        area += (vertices[0][2] * (vertices[1][0] - vertices[n - 1][0]));
        // scale to get area
        area *= (an / (2 * normal[1]));
        break;

      case 3: // ignore Z coordinates
      default:
      // compute area of 2D projection
        for (i = 1; i < n; i++) {
          h = i - 1;
          j = (i + 1) % n;
          area += (vertices[i][0] * (vertices[j][1] - vertices[h][1]));
        }
        area += (vertices[0][0] * (vertices[1][1] - vertices[n - 1][1]));
        // scale to get area
        area *= (an / (2 * normal[2]));
        break;
    }

    poly3.area = area;
    return area;
  };

  /**
   * Returns the polygon as an array of points.
   * @param {Polygon}
   * @returns {Points}
   */

  // Affine transformation of polygon. Returns a new polygon.
  const transform$1 = (matrix, polygon) => {
    const transformed = map(polygon, vertex => transform(matrix, vertex));
    if (isMirroring(matrix)) {
      // Reverse the order to preserve the orientation.
      transformed.reverse();
    }
    return transformed;
  };

  const isDegenerate = (polygon) => {
    for (let nth = 0; nth < polygon.length; nth++) {
      if (equals(polygon[nth], polygon[(nth + 1) % polygon.length])) {
        return true;
      }
    }
    return false;
  };

  const canonicalize$2 = (polygons) => {
    const canonicalized = [];
    for (let polygon of polygons) {
      polygon = canonicalize$1(polygon);
      if (!isDegenerate(polygon)) {
        canonicalized.push(polygon);
      }
    }
    return canonicalized;
  };

  const EPSILON = 1e-5;

  // Point Classification.
  const COPLANAR = 0;
  const FRONT = 1;
  const BACK = 2;

  // Edge Properties.
  const START = 0;
  const END = 1;

  // Plane Properties.
  const W$2 = 3;

  const toType = (plane, point) => {
    let t = dot(plane, point) - plane[W$2];
    if (t < -EPSILON) {
      return BACK;
    } else if (t > EPSILON) {
      return FRONT;
    } else {
      return COPLANAR;
    }
  };

  const spanPoint = (plane, startPoint, endPoint) => {
    let t = (plane[W$2] - dot(plane, startPoint)) / dot(plane, subtract(endPoint, startPoint));
    return canonicalize(lerp(t, startPoint, endPoint));
  };

  const lexicographcalPointOrder = ([aX, aY, aZ], [bX, bY, bZ]) => {
    if (aX < bX) { return -1; }
    if (aX > bX) { return 1; }
    if (aY < bY) { return -1; }
    if (aY > bY) { return 1; }
    if (aZ < bZ) { return -1; }
    if (aZ > bZ) { return 1; }
    return 0;
  };

  /**
   * Takes a cross-section of a triangulated solid at a plane, yielding surface defining loops
   * in that plane.
   *
   * FIX: Make sure this works properly for solids with holes in them, etc.
   * FIX: Figure out where the duplicate paths are coming from and see if we can avoid deduplication.
   */
  const cutTrianglesByPlane = ({ allowOpenPaths = false }, plane, triangles) => {
    let edges = [];
    const addEdge = (start, end) => {
      edges.push([start, end]);
    };

    // Find the edges along the plane and fold them into paths to produce a set of closed loops.
    for (let nth = 0; nth < triangles.length; nth++) {
      const triangle = triangles[nth];
      const [a, b, c] = triangle;
      const [aType, bType, cType] = [toType(plane, a), toType(plane, b), toType(plane, c)];

      switch (aType) {
        case FRONT:
          switch (bType) {
            case FRONT:
              switch (cType) {
                case FRONT:
                  // No intersection.
                  break;
                case COPLANAR:
                  // Corner touches.
                  break;
                case BACK:
                  // b-c down c-a up
                  addEdge(spanPoint(plane, b, c), spanPoint(plane, c, a));
                  break;
              }
              break;
            case COPLANAR:
              switch (cType) {
                case FRONT:
                  // Corner touches.
                  break;
                case COPLANAR:
                  // b-c along plane.
                  addEdge(b, c);
                  break;
                case BACK:
                  // down at b, up c-a.
                  addEdge(b, spanPoint(plane, c, a));
                  break;
              }
              break;
            case BACK:
              switch (cType) {
                case FRONT:
                  // a-b down, b-c up.
                  addEdge(spanPoint(plane, a, b), spanPoint(plane, b, c));
                  break;
                case COPLANAR:
                  // a-b down, c up.
                  addEdge(spanPoint(plane, a, b), c);
                  break;
                case BACK:
                  // a-b down, c-a up.
                  addEdge(spanPoint(plane, a, b), spanPoint(plane, c, a));
                  break;
              }
              break;
          }
          break;
        case COPLANAR:
          switch (bType) {
            case FRONT:
              switch (cType) {
                case FRONT:
                  // Corner touches.
                  break;
                case COPLANAR:
                  // c-a along plane.
                  addEdge(c, a);
                  break;
                case BACK:
                  // down at b-c, up at a
                  addEdge(spanPoint(plane, b, c), a);
                  break;
              }
              break;
            case COPLANAR:
              switch (cType) {
                case FRONT:
                  // a-b along plane.
                  addEdge(a, b);
                  break;
                case COPLANAR:
                  // Entirely coplanar -- doesn't cut.
                  break;
                case BACK:
                  // Wrong half-space.
                  break;
              }
              break;
            case BACK:
              switch (cType) {
                case FRONT:
                  // down at a, up at b-c.
                  addEdge(a, spanPoint(plane, b, c));
                  break;
                case COPLANAR:
                  // Wrong half-space.
                  break;
                case BACK:
                  // Wrong half-space.
                  break;
              }
              break;
          }
          break;
        case BACK:
          switch (bType) {
            case FRONT:
              switch (cType) {
                case FRONT:
                  // down at c-a, up at a-b
                  addEdge(spanPoint(plane, c, a), spanPoint(plane, a, b));
                  break;
                case COPLANAR:
                  // down at c, up at a-b
                  addEdge(c, spanPoint(plane, a, b));
                  break;
                case BACK:
                  // down at b-c, up at a-b.
                  addEdge(spanPoint(plane, b, c), spanPoint(plane, a, b));
                  break;
              }
              break;
            case COPLANAR:
              switch (cType) {
                case FRONT:
                  // down at c-a, up at b.
                  addEdge(spanPoint(plane, c, a), b);
                  break;
                case COPLANAR:
                  // Wrong half-space.
                  break;
                case BACK:
                  // Wrong half-space.
                  break;
              }
              break;
            case BACK:
              switch (cType) {
                case FRONT:
                  // down at c-a, up at b-c.
                  addEdge(spanPoint(plane, c, a), spanPoint(plane, b, c));
                  break;
                case COPLANAR:
                  // Wrong half-space.
                  break;
                case BACK:
                  // Wrong half-space.
                  break;
              }
              break;
          }
          break;
      }
    }

    const extractSuccessor = (edges, start) => {
      // FIX: Use a binary search to take advantage of the sorting of the edges.
      for (let nth = 0; nth < edges.length; nth++) {
        const candidate = edges[nth];
        if (equals(candidate[START], start)) {
          edges.splice(nth, 1);
          return candidate;
        }
      }
      // Given manifold geometry, there must always be a successor.
      throw Error('Non-manifold');
    };

    // Sort the edges so that deduplication is efficient.
    edges.sort(lexicographcalPointOrder);

    // Assemble the edges into loops which are closed paths.
    const loops = [];
    while (edges.length > 0) {
      let edge = edges.shift();
      const loop = [edge[START]];
      try {
        while (!equals(edge[END], loop[0])) {
          edge = extractSuccessor(edges, edge[END]);
          loop.push(edge[START]);
        }
      } catch (e) {
        if (allowOpenPaths) {
          // FIX: Check the error.
          loop.unshift(null);
        } else {
          throw e;
        }
      }
      loops.push(loop);
    }

    return loops;
  };

  const eachPoint = (options = {}, thunk, polygons) => {
    for (const polygon of polygons) {
      for (const point of polygon) {
        thunk(point);
      }
    }
  };

  /**
   * Transforms each polygon of Polygons.
   *
   * @param {Polygons} original - the Polygons to transform.
   * @param {Function} [transform=identity] - function used to transform the polygons.
   * @returns {Polygons} a copy with transformed polygons.
   */

  const canonicalizePoint = (point, index) => {
    if (point === null) {
      if (index !== 0) throw Error('Path has null not at head');
      return point;
    } else {
      return canonicalize(point);
    }
  };

  const canonicalize$3 = (path) => path.map(canonicalizePoint);

  const isClosed = (path) => (path.length === 0) || (path[0] !== null);

  const close = (path) => isClosed(path) ? path : path.slice(1);

  const concatenate = (...paths) => {
    if (!paths.every(path => !isClosed(path))) {
      throw Error('Cannot concatenate closed paths.');
    }
    const result = [null, ...[].concat(...paths.map(path => path.slice(1)))];
    return result;
  };

  const flip$2 = (path) => {
    if (path[0] === null) {
      return [null, ...path.slice(1).reverse()];
    } else {
      return path.slice().reverse();
    }
  };

  const open = (path) => isClosed(path) ? [null, ...path] : path;

  const toSegments = (options = {}, path) => {
    const segments = [];
    if (path[0] !== null) {
      segments.push([path[path.length - 1], path[0]]);
      segments.push([path[0], path[1]]);
    }
    for (let nth = 2; nth < path.length; nth++) {
      segments.push([path[nth - 1], path[nth]]);
    }
    return segments;
  };

  const transform$2 = (matrix, path) =>
    path.map((point, index) => (point === null) ? null : transform(matrix, point));

  const translate = (vector, path) => transform$2(fromTranslation(vector), path);
  const scale$1 = (vector, path) => transform$2(fromScaling(vector), path);

  const isTriangle = (path) => isClosed(path) && path.length === 3;

  /*
  ** SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008) 
  ** Copyright (C) [dates of first publication] Silicon Graphics, Inc.
  ** All Rights Reserved.
  **
  ** Permission is hereby granted, free of charge, to any person obtaining a copy
  ** of this software and associated documentation files (the "Software"), to deal
  ** in the Software without restriction, including without limitation the rights
  ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  ** of the Software, and to permit persons to whom the Software is furnished to do so,
  ** subject to the following conditions:
  ** 
  ** The above copyright notice including the dates of first publication and either this
  ** permission notice or a reference to http://oss.sgi.com/projects/FreeB/ shall be
  ** included in all copies or substantial portions of the Software. 
  **
  ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  ** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  ** PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL SILICON GRAPHICS, INC.
  ** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
  ** OR OTHER DEALINGS IN THE SOFTWARE.
  ** 
  ** Except as contained in this notice, the name of Silicon Graphics, Inc. shall not
  ** be used in advertising or otherwise to promote the sale, use or other dealings in
  ** this Software without prior written authorization from Silicon Graphics, Inc.
  */

  	/* Public API */

  	var Tess2 = {};

  	var tess2 = Tess2;
  	
  	Tess2.WINDING_ODD = 0;
  	Tess2.WINDING_NONZERO = 1;
  	Tess2.WINDING_POSITIVE = 2;
  	Tess2.WINDING_NEGATIVE = 3;
  	Tess2.WINDING_ABS_GEQ_TWO = 4;

  	Tess2.POLYGONS = 0;
  	Tess2.CONNECTED_POLYGONS = 1;
  	Tess2.BOUNDARY_CONTOURS = 2;

  	Tess2.tesselate = function(opts) {
  		var debug =  opts.debug || false;
  		var tess = new Tesselator();
  		for (var i = 0; i < opts.contours.length; i++) {
  			tess.addContour(opts.vertexSize || 2, opts.contours[i]);
  		}
  		tess.tesselate(opts.windingRule || Tess2.WINDING_ODD,
  					   opts.elementType || Tess2.POLYGONS,
  					   opts.polySize || 3,
  					   opts.vertexSize || 2,
  					   opts.normal || [0,0,1]);
  		return {
  			vertices: tess.vertices,
  			vertexIndices: tess.vertexIndices,
  			vertexCount: tess.vertexCount,
  			elements: tess.elements,
  			elementCount: tess.elementCount,
  			mesh: debug ? tess.mesh : undefined
  		};
  	};

  	/* Internal */

  	var assert = function(cond) {
  		if (!cond) {
  			throw "Assertion Failed!";
  		}
  	};

  	/* The mesh structure is similar in spirit, notation, and operations
  	* to the "quad-edge" structure (see L. Guibas and J. Stolfi, Primitives
  	* for the manipulation of general subdivisions and the computation of
  	* Voronoi diagrams, ACM Transactions on Graphics, 4(2):74-123, April 1985).
  	* For a simplified description, see the course notes for CS348a,
  	* "Mathematical Foundations of Computer Graphics", available at the
  	* Stanford bookstore (and taught during the fall quarter).
  	* The implementation also borrows a tiny subset of the graph-based approach
  	* use in Mantyla's Geometric Work Bench (see M. Mantyla, An Introduction
  	* to Sold Modeling, Computer Science Press, Rockville, Maryland, 1988).
  	*
  	* The fundamental data structure is the "half-edge".  Two half-edges
  	* go together to make an edge, but they point in opposite directions.
  	* Each half-edge has a pointer to its mate (the "symmetric" half-edge Sym),
  	* its origin vertex (Org), the face on its left side (Lface), and the
  	* adjacent half-edges in the CCW direction around the origin vertex
  	* (Onext) and around the left face (Lnext).  There is also a "next"
  	* pointer for the global edge list (see below).
  	*
  	* The notation used for mesh navigation:
  	*  Sym   = the mate of a half-edge (same edge, but opposite direction)
  	*  Onext = edge CCW around origin vertex (keep same origin)
  	*  Dnext = edge CCW around destination vertex (keep same dest)
  	*  Lnext = edge CCW around left face (dest becomes new origin)
  	*  Rnext = edge CCW around right face (origin becomes new dest)
  	*
  	* "prev" means to substitute CW for CCW in the definitions above.
  	*
  	* The mesh keeps global lists of all vertices, faces, and edges,
  	* stored as doubly-linked circular lists with a dummy header node.
  	* The mesh stores pointers to these dummy headers (vHead, fHead, eHead).
  	*
  	* The circular edge list is special; since half-edges always occur
  	* in pairs (e and e->Sym), each half-edge stores a pointer in only
  	* one direction.  Starting at eHead and following the e->next pointers
  	* will visit each *edge* once (ie. e or e->Sym, but not both).
  	* e->Sym stores a pointer in the opposite direction, thus it is
  	* always true that e->Sym->next->Sym->next == e.
  	*
  	* Each vertex has a pointer to next and previous vertices in the
  	* circular list, and a pointer to a half-edge with this vertex as
  	* the origin (NULL if this is the dummy header).  There is also a
  	* field "data" for client data.
  	*
  	* Each face has a pointer to the next and previous faces in the
  	* circular list, and a pointer to a half-edge with this face as
  	* the left face (NULL if this is the dummy header).  There is also
  	* a field "data" for client data.
  	*
  	* Note that what we call a "face" is really a loop; faces may consist
  	* of more than one loop (ie. not simply connected), but there is no
  	* record of this in the data structure.  The mesh may consist of
  	* several disconnected regions, so it may not be possible to visit
  	* the entire mesh by starting at a half-edge and traversing the edge
  	* structure.
  	*
  	* The mesh does NOT support isolated vertices; a vertex is deleted along
  	* with its last edge.  Similarly when two faces are merged, one of the
  	* faces is deleted (see tessMeshDelete below).  For mesh operations,
  	* all face (loop) and vertex pointers must not be NULL.  However, once
  	* mesh manipulation is finished, TESSmeshZapFace can be used to delete
  	* faces of the mesh, one at a time.  All external faces can be "zapped"
  	* before the mesh is returned to the client; then a NULL face indicates
  	* a region which is not part of the output polygon.
  	*/

  	function TESSvertex() {
  		this.next = null;	/* next vertex (never NULL) */
  		this.prev = null;	/* previous vertex (never NULL) */
  		this.anEdge = null;	/* a half-edge with this origin */

  		/* Internal data (keep hidden) */
  		this.coords = [0,0,0];	/* vertex location in 3D */
  		this.s = 0.0;
  		this.t = 0.0;			/* projection onto the sweep plane */
  		this.pqHandle = 0;		/* to allow deletion from priority queue */
  		this.n = 0;				/* to allow identify unique vertices */
  		this.idx = 0;			/* to allow map result to original verts */
  	} 

  	function TESSface() {
  		this.next = null;		/* next face (never NULL) */
  		this.prev = null;		/* previous face (never NULL) */
  		this.anEdge = null;		/* a half edge with this left face */

  		/* Internal data (keep hidden) */
  		this.trail = null;		/* "stack" for conversion to strips */
  		this.n = 0;				/* to allow identiy unique faces */
  		this.marked = false;	/* flag for conversion to strips */
  		this.inside = false;	/* this face is in the polygon interior */
  	}
  	function TESShalfEdge(side) {
  		this.next = null;		/* doubly-linked list (prev==Sym->next) */
  		this.Sym = null;		/* same edge, opposite direction */
  		this.Onext = null;		/* next edge CCW around origin */
  		this.Lnext = null;		/* next edge CCW around left face */
  		this.Org = null;		/* origin vertex (Overtex too long) */
  		this.Lface = null;		/* left face */

  		/* Internal data (keep hidden) */
  		this.activeRegion = null;	/* a region with this upper edge (sweep.c) */
  		this.winding = 0;			/* change in winding number when crossing
  									   from the right face to the left face */
  		this.side = side;
  	}
  	TESShalfEdge.prototype = {
  		get Rface() { return this.Sym.Lface; },
  		set Rface(v) { this.Sym.Lface = v; },
  		get Dst() { return this.Sym.Org; },
  		set Dst(v) { this.Sym.Org = v; },
  		get Oprev() { return this.Sym.Lnext; },
  		set Oprev(v) { this.Sym.Lnext = v; },
  		get Lprev() { return this.Onext.Sym; },
  		set Lprev(v) { this.Onext.Sym = v; },
  		get Dprev() { return this.Lnext.Sym; },
  		set Dprev(v) { this.Lnext.Sym = v; },
  		get Rprev() { return this.Sym.Onext; },
  		set Rprev(v) { this.Sym.Onext = v; },
  		get Dnext() { return /*this.Rprev*/this.Sym.Onext.Sym; },  /* 3 pointers */
  		set Dnext(v) { /*this.Rprev*/this.Sym.Onext.Sym = v; },  /* 3 pointers */
  		get Rnext() { return /*this.Oprev*/this.Sym.Lnext.Sym; },  /* 3 pointers */
  		set Rnext(v) { /*this.Oprev*/this.Sym.Lnext.Sym = v; },  /* 3 pointers */
  	};



  	function TESSmesh() {
  		var v = new TESSvertex();
  		var f = new TESSface();
  		var e = new TESShalfEdge(0);
  		var eSym = new TESShalfEdge(1);

  		v.next = v.prev = v;
  		v.anEdge = null;

  		f.next = f.prev = f;
  		f.anEdge = null;
  		f.trail = null;
  		f.marked = false;
  		f.inside = false;

  		e.next = e;
  		e.Sym = eSym;
  		e.Onext = null;
  		e.Lnext = null;
  		e.Org = null;
  		e.Lface = null;
  		e.winding = 0;
  		e.activeRegion = null;

  		eSym.next = eSym;
  		eSym.Sym = e;
  		eSym.Onext = null;
  		eSym.Lnext = null;
  		eSym.Org = null;
  		eSym.Lface = null;
  		eSym.winding = 0;
  		eSym.activeRegion = null;

  		this.vHead = v;		/* dummy header for vertex list */
  		this.fHead = f;		/* dummy header for face list */
  		this.eHead = e;		/* dummy header for edge list */
  		this.eHeadSym = eSym;	/* and its symmetric counterpart */
  	}
  	/* The mesh operations below have three motivations: completeness,
  	* convenience, and efficiency.  The basic mesh operations are MakeEdge,
  	* Splice, and Delete.  All the other edge operations can be implemented
  	* in terms of these.  The other operations are provided for convenience
  	* and/or efficiency.
  	*
  	* When a face is split or a vertex is added, they are inserted into the
  	* global list *before* the existing vertex or face (ie. e->Org or e->Lface).
  	* This makes it easier to process all vertices or faces in the global lists
  	* without worrying about processing the same data twice.  As a convenience,
  	* when a face is split, the "inside" flag is copied from the old face.
  	* Other internal data (v->data, v->activeRegion, f->data, f->marked,
  	* f->trail, e->winding) is set to zero.
  	*
  	* ********************** Basic Edge Operations **************************
  	*
  	* tessMeshMakeEdge( mesh ) creates one edge, two vertices, and a loop.
  	* The loop (face) consists of the two new half-edges.
  	*
  	* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the
  	* mesh connectivity and topology.  It changes the mesh so that
  	*  eOrg->Onext <- OLD( eDst->Onext )
  	*  eDst->Onext <- OLD( eOrg->Onext )
  	* where OLD(...) means the value before the meshSplice operation.
  	*
  	* This can have two effects on the vertex structure:
  	*  - if eOrg->Org != eDst->Org, the two vertices are merged together
  	*  - if eOrg->Org == eDst->Org, the origin is split into two vertices
  	* In both cases, eDst->Org is changed and eOrg->Org is untouched.
  	*
  	* Similarly (and independently) for the face structure,
  	*  - if eOrg->Lface == eDst->Lface, one loop is split into two
  	*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one
  	* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.
  	*
  	* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:
  	* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop
  	* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;
  	* the newly created loop will contain eDel->Dst.  If the deletion of eDel
  	* would create isolated vertices, those are deleted as well.
  	*
  	* ********************** Other Edge Operations **************************
  	*
  	* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that
  	* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.
  	* eOrg and eNew will have the same left face.
  	*
  	* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,
  	* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.
  	* eOrg and eNew will have the same left face.
  	*
  	* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst
  	* to eDst->Org, and returns the corresponding half-edge eNew.
  	* If eOrg->Lface == eDst->Lface, this splits one loop into two,
  	* and the newly created loop is eNew->Lface.  Otherwise, two disjoint
  	* loops are merged into one, and the loop eDst->Lface is destroyed.
  	*
  	* ************************ Other Operations *****************************
  	*
  	* tessMeshNewMesh() creates a new mesh with no edges, no vertices,
  	* and no loops (what we usually call a "face").
  	*
  	* tessMeshUnion( mesh1, mesh2 ) forms the union of all structures in
  	* both meshes, and returns the new mesh (the old meshes are destroyed).
  	*
  	* tessMeshDeleteMesh( mesh ) will free all storage for any valid mesh.
  	*
  	* tessMeshZapFace( fZap ) destroys a face and removes it from the
  	* global face list.  All edges of fZap will have a NULL pointer as their
  	* left face.  Any edges which also have a NULL pointer as their right face
  	* are deleted entirely (along with any isolated vertices this produces).
  	* An entire mesh can be deleted by zapping its faces, one at a time,
  	* in any order.  Zapped faces cannot be used in further mesh operations!
  	*
  	* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.
  	*/

  	TESSmesh.prototype = {

  		/* MakeEdge creates a new pair of half-edges which form their own loop.
  		* No vertex or face structures are allocated, but these must be assigned
  		* before the current edge operation is completed.
  		*/
  		//static TESShalfEdge *MakeEdge( TESSmesh* mesh, TESShalfEdge *eNext )
  		makeEdge_: function(eNext) {
  			var e = new TESShalfEdge(0);
  			var eSym = new TESShalfEdge(1);

  			/* Make sure eNext points to the first edge of the edge pair */
  			if( eNext.Sym.side < eNext.side ) { eNext = eNext.Sym; }

  			/* Insert in circular doubly-linked list before eNext.
  			* Note that the prev pointer is stored in Sym->next.
  			*/
  			var ePrev = eNext.Sym.next;
  			eSym.next = ePrev;
  			ePrev.Sym.next = e;
  			e.next = eNext;
  			eNext.Sym.next = eSym;

  			e.Sym = eSym;
  			e.Onext = e;
  			e.Lnext = eSym;
  			e.Org = null;
  			e.Lface = null;
  			e.winding = 0;
  			e.activeRegion = null;

  			eSym.Sym = e;
  			eSym.Onext = eSym;
  			eSym.Lnext = e;
  			eSym.Org = null;
  			eSym.Lface = null;
  			eSym.winding = 0;
  			eSym.activeRegion = null;

  			return e;
  		},

  		/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the
  		* CS348a notes (see mesh.h).  Basically it modifies the mesh so that
  		* a->Onext and b->Onext are exchanged.  This can have various effects
  		* depending on whether a and b belong to different face or vertex rings.
  		* For more explanation see tessMeshSplice() below.
  		*/
  		// static void Splice( TESShalfEdge *a, TESShalfEdge *b )
  		splice_: function(a, b) {
  			var aOnext = a.Onext;
  			var bOnext = b.Onext;
  			aOnext.Sym.Lnext = b;
  			bOnext.Sym.Lnext = a;
  			a.Onext = bOnext;
  			b.Onext = aOnext;
  		},

  		/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the
  		* origin of all edges in the vertex loop to which eOrig belongs. "vNext" gives
  		* a place to insert the new vertex in the global vertex list.  We insert
  		* the new vertex *before* vNext so that algorithms which walk the vertex
  		* list will not see the newly created vertices.
  		*/
  		//static void MakeVertex( TESSvertex *newVertex, TESShalfEdge *eOrig, TESSvertex *vNext )
  		makeVertex_: function(newVertex, eOrig, vNext) {
  			var vNew = newVertex;
  			assert(vNew !== null);

  			/* insert in circular doubly-linked list before vNext */
  			var vPrev = vNext.prev;
  			vNew.prev = vPrev;
  			vPrev.next = vNew;
  			vNew.next = vNext;
  			vNext.prev = vNew;

  			vNew.anEdge = eOrig;
  			/* leave coords, s, t undefined */

  			/* fix other edges on this vertex loop */
  			var e = eOrig;
  			do {
  				e.Org = vNew;
  				e = e.Onext;
  			} while(e !== eOrig);
  		},

  		/* MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left
  		* face of all edges in the face loop to which eOrig belongs.  "fNext" gives
  		* a place to insert the new face in the global face list.  We insert
  		* the new face *before* fNext so that algorithms which walk the face
  		* list will not see the newly created faces.
  		*/
  		// static void MakeFace( TESSface *newFace, TESShalfEdge *eOrig, TESSface *fNext )
  		makeFace_: function(newFace, eOrig, fNext) {
  			var fNew = newFace;
  			assert(fNew !== null); 

  			/* insert in circular doubly-linked list before fNext */
  			var fPrev = fNext.prev;
  			fNew.prev = fPrev;
  			fPrev.next = fNew;
  			fNew.next = fNext;
  			fNext.prev = fNew;

  			fNew.anEdge = eOrig;
  			fNew.trail = null;
  			fNew.marked = false;

  			/* The new face is marked "inside" if the old one was.  This is a
  			* convenience for the common case where a face has been split in two.
  			*/
  			fNew.inside = fNext.inside;

  			/* fix other edges on this face loop */
  			var e = eOrig;
  			do {
  				e.Lface = fNew;
  				e = e.Lnext;
  			} while(e !== eOrig);
  		},

  		/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),
  		* and removes from the global edge list.
  		*/
  		//static void KillEdge( TESSmesh *mesh, TESShalfEdge *eDel )
  		killEdge_: function(eDel) {
  			/* Half-edges are allocated in pairs, see EdgePair above */
  			if( eDel.Sym.side < eDel.side ) { eDel = eDel.Sym; }

  			/* delete from circular doubly-linked list */
  			var eNext = eDel.next;
  			var ePrev = eDel.Sym.next;
  			eNext.Sym.next = ePrev;
  			ePrev.Sym.next = eNext;
  		},


  		/* KillVertex( vDel ) destroys a vertex and removes it from the global
  		* vertex list.  It updates the vertex loop to point to a given new vertex.
  		*/
  		//static void KillVertex( TESSmesh *mesh, TESSvertex *vDel, TESSvertex *newOrg )
  		killVertex_: function(vDel, newOrg) {
  			var eStart = vDel.anEdge;
  			/* change the origin of all affected edges */
  			var e = eStart;
  			do {
  				e.Org = newOrg;
  				e = e.Onext;
  			} while(e !== eStart);

  			/* delete from circular doubly-linked list */
  			var vPrev = vDel.prev;
  			var vNext = vDel.next;
  			vNext.prev = vPrev;
  			vPrev.next = vNext;
  		},

  		/* KillFace( fDel ) destroys a face and removes it from the global face
  		* list.  It updates the face loop to point to a given new face.
  		*/
  		//static void KillFace( TESSmesh *mesh, TESSface *fDel, TESSface *newLface )
  		killFace_: function(fDel, newLface) {
  			var eStart = fDel.anEdge;

  			/* change the left face of all affected edges */
  			var e = eStart;
  			do {
  				e.Lface = newLface;
  				e = e.Lnext;
  			} while(e !== eStart);

  			/* delete from circular doubly-linked list */
  			var fPrev = fDel.prev;
  			var fNext = fDel.next;
  			fNext.prev = fPrev;
  			fPrev.next = fNext;
  		},

  		/****************** Basic Edge Operations **********************/

  		/* tessMeshMakeEdge creates one edge, two vertices, and a loop (face).
  		* The loop consists of the two new half-edges.
  		*/
  		//TESShalfEdge *tessMeshMakeEdge( TESSmesh *mesh )
  		makeEdge: function() {
  			var newVertex1 = new TESSvertex();
  			var newVertex2 = new TESSvertex();
  			var newFace = new TESSface();
  			var e = this.makeEdge_( this.eHead);
  			this.makeVertex_( newVertex1, e, this.vHead );
  			this.makeVertex_( newVertex2, e.Sym, this.vHead );
  			this.makeFace_( newFace, e, this.fHead );
  			return e;
  		},

  		/* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the
  		* mesh connectivity and topology.  It changes the mesh so that
  		*	eOrg->Onext <- OLD( eDst->Onext )
  		*	eDst->Onext <- OLD( eOrg->Onext )
  		* where OLD(...) means the value before the meshSplice operation.
  		*
  		* This can have two effects on the vertex structure:
  		*  - if eOrg->Org != eDst->Org, the two vertices are merged together
  		*  - if eOrg->Org == eDst->Org, the origin is split into two vertices
  		* In both cases, eDst->Org is changed and eOrg->Org is untouched.
  		*
  		* Similarly (and independently) for the face structure,
  		*  - if eOrg->Lface == eDst->Lface, one loop is split into two
  		*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one
  		* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.
  		*
  		* Some special cases:
  		* If eDst == eOrg, the operation has no effect.
  		* If eDst == eOrg->Lnext, the new face will have a single edge.
  		* If eDst == eOrg->Lprev, the old face will have a single edge.
  		* If eDst == eOrg->Onext, the new vertex will have a single edge.
  		* If eDst == eOrg->Oprev, the old vertex will have a single edge.
  		*/
  		//int tessMeshSplice( TESSmesh* mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst )
  		splice: function(eOrg, eDst) {
  			var joiningLoops = false;
  			var joiningVertices = false;

  			if( eOrg === eDst ) return;

  			if( eDst.Org !== eOrg.Org ) {
  				/* We are merging two disjoint vertices -- destroy eDst->Org */
  				joiningVertices = true;
  				this.killVertex_( eDst.Org, eOrg.Org );
  			}
  			if( eDst.Lface !== eOrg.Lface ) {
  				/* We are connecting two disjoint loops -- destroy eDst->Lface */
  				joiningLoops = true;
  				this.killFace_( eDst.Lface, eOrg.Lface );
  			}

  			/* Change the edge structure */
  			this.splice_( eDst, eOrg );

  			if( ! joiningVertices ) {
  				var newVertex = new TESSvertex();

  				/* We split one vertex into two -- the new vertex is eDst->Org.
  				* Make sure the old vertex points to a valid half-edge.
  				*/
  				this.makeVertex_( newVertex, eDst, eOrg.Org );
  				eOrg.Org.anEdge = eOrg;
  			}
  			if( ! joiningLoops ) {
  				var newFace = new TESSface();  

  				/* We split one loop into two -- the new loop is eDst->Lface.
  				* Make sure the old face points to a valid half-edge.
  				*/
  				this.makeFace_( newFace, eDst, eOrg.Lface );
  				eOrg.Lface.anEdge = eOrg;
  			}
  		},

  		/* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:
  		* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop
  		* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;
  		* the newly created loop will contain eDel->Dst.  If the deletion of eDel
  		* would create isolated vertices, those are deleted as well.
  		*
  		* This function could be implemented as two calls to tessMeshSplice
  		* plus a few calls to memFree, but this would allocate and delete
  		* unnecessary vertices and faces.
  		*/
  		//int tessMeshDelete( TESSmesh *mesh, TESShalfEdge *eDel )
  		delete: function(eDel) {
  			var eDelSym = eDel.Sym;
  			var joiningLoops = false;

  			/* First step: disconnect the origin vertex eDel->Org.  We make all
  			* changes to get a consistent mesh in this "intermediate" state.
  			*/
  			if( eDel.Lface !== eDel.Rface ) {
  				/* We are joining two loops into one -- remove the left face */
  				joiningLoops = true;
  				this.killFace_( eDel.Lface, eDel.Rface );
  			}

  			if( eDel.Onext === eDel ) {
  				this.killVertex_( eDel.Org, null );
  			} else {
  				/* Make sure that eDel->Org and eDel->Rface point to valid half-edges */
  				eDel.Rface.anEdge = eDel.Oprev;
  				eDel.Org.anEdge = eDel.Onext;

  				this.splice_( eDel, eDel.Oprev );
  				if( ! joiningLoops ) {
  					var newFace = new TESSface();

  					/* We are splitting one loop into two -- create a new loop for eDel. */
  					this.makeFace_( newFace, eDel, eDel.Lface );
  				}
  			}

  			/* Claim: the mesh is now in a consistent state, except that eDel->Org
  			* may have been deleted.  Now we disconnect eDel->Dst.
  			*/
  			if( eDelSym.Onext === eDelSym ) {
  				this.killVertex_( eDelSym.Org, null );
  				this.killFace_( eDelSym.Lface, null );
  			} else {
  				/* Make sure that eDel->Dst and eDel->Lface point to valid half-edges */
  				eDel.Lface.anEdge = eDelSym.Oprev;
  				eDelSym.Org.anEdge = eDelSym.Onext;
  				this.splice_( eDelSym, eDelSym.Oprev );
  			}

  			/* Any isolated vertices or faces have already been freed. */
  			this.killEdge_( eDel );
  		},

  		/******************** Other Edge Operations **********************/

  		/* All these routines can be implemented with the basic edge
  		* operations above.  They are provided for convenience and efficiency.
  		*/


  		/* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that
  		* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.
  		* eOrg and eNew will have the same left face.
  		*/
  		// TESShalfEdge *tessMeshAddEdgeVertex( TESSmesh *mesh, TESShalfEdge *eOrg );
  		addEdgeVertex: function(eOrg) {
  			var eNew = this.makeEdge_( eOrg );
  			var eNewSym = eNew.Sym;

  			/* Connect the new edge appropriately */
  			this.splice_( eNew, eOrg.Lnext );

  			/* Set the vertex and face information */
  			eNew.Org = eOrg.Dst;

  			var newVertex = new TESSvertex();
  			this.makeVertex_( newVertex, eNewSym, eNew.Org );

  			eNew.Lface = eNewSym.Lface = eOrg.Lface;

  			return eNew;
  		},


  		/* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,
  		* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.
  		* eOrg and eNew will have the same left face.
  		*/
  		// TESShalfEdge *tessMeshSplitEdge( TESSmesh *mesh, TESShalfEdge *eOrg );
  		splitEdge: function(eOrg, eDst) {
  			var tempHalfEdge = this.addEdgeVertex( eOrg );
  			var eNew = tempHalfEdge.Sym;

  			/* Disconnect eOrg from eOrg->Dst and connect it to eNew->Org */
  			this.splice_( eOrg.Sym, eOrg.Sym.Oprev );
  			this.splice_( eOrg.Sym, eNew );

  			/* Set the vertex and face information */
  			eOrg.Dst = eNew.Org;
  			eNew.Dst.anEdge = eNew.Sym;	/* may have pointed to eOrg->Sym */
  			eNew.Rface = eOrg.Rface;
  			eNew.winding = eOrg.winding;	/* copy old winding information */
  			eNew.Sym.winding = eOrg.Sym.winding;

  			return eNew;
  		},


  		/* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst
  		* to eDst->Org, and returns the corresponding half-edge eNew.
  		* If eOrg->Lface == eDst->Lface, this splits one loop into two,
  		* and the newly created loop is eNew->Lface.  Otherwise, two disjoint
  		* loops are merged into one, and the loop eDst->Lface is destroyed.
  		*
  		* If (eOrg == eDst), the new face will have only two edges.
  		* If (eOrg->Lnext == eDst), the old face is reduced to a single edge.
  		* If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.
  		*/

  		// TESShalfEdge *tessMeshConnect( TESSmesh *mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst );
  		connect: function(eOrg, eDst) {
  			var joiningLoops = false;  
  			var eNew = this.makeEdge_( eOrg );
  			var eNewSym = eNew.Sym;

  			if( eDst.Lface !== eOrg.Lface ) {
  				/* We are connecting two disjoint loops -- destroy eDst->Lface */
  				joiningLoops = true;
  				this.killFace_( eDst.Lface, eOrg.Lface );
  			}

  			/* Connect the new edge appropriately */
  			this.splice_( eNew, eOrg.Lnext );
  			this.splice_( eNewSym, eDst );

  			/* Set the vertex and face information */
  			eNew.Org = eOrg.Dst;
  			eNewSym.Org = eDst.Org;
  			eNew.Lface = eNewSym.Lface = eOrg.Lface;

  			/* Make sure the old face points to a valid half-edge */
  			eOrg.Lface.anEdge = eNewSym;

  			if( ! joiningLoops ) {
  				var newFace = new TESSface();
  				/* We split one loop into two -- the new loop is eNew->Lface */
  				this.makeFace_( newFace, eNew, eOrg.Lface );
  			}
  			return eNew;
  		},

  		/* tessMeshZapFace( fZap ) destroys a face and removes it from the
  		* global face list.  All edges of fZap will have a NULL pointer as their
  		* left face.  Any edges which also have a NULL pointer as their right face
  		* are deleted entirely (along with any isolated vertices this produces).
  		* An entire mesh can be deleted by zapping its faces, one at a time,
  		* in any order.  Zapped faces cannot be used in further mesh operations!
  		*/
  		zapFace: function( fZap )
  		{
  			var eStart = fZap.anEdge;
  			var e, eNext, eSym;
  			var fPrev, fNext;

  			/* walk around face, deleting edges whose right face is also NULL */
  			eNext = eStart.Lnext;
  			do {
  				e = eNext;
  				eNext = e.Lnext;

  				e.Lface = null;
  				if( e.Rface === null ) {
  					/* delete the edge -- see TESSmeshDelete above */

  					if( e.Onext === e ) {
  						this.killVertex_( e.Org, null );
  					} else {
  						/* Make sure that e->Org points to a valid half-edge */
  						e.Org.anEdge = e.Onext;
  						this.splice_( e, e.Oprev );
  					}
  					eSym = e.Sym;
  					if( eSym.Onext === eSym ) {
  						this.killVertex_( eSym.Org, null );
  					} else {
  						/* Make sure that eSym->Org points to a valid half-edge */
  						eSym.Org.anEdge = eSym.Onext;
  						this.splice_( eSym, eSym.Oprev );
  					}
  					this.killEdge_( e );
  				}
  			} while( e != eStart );

  			/* delete from circular doubly-linked list */
  			fPrev = fZap.prev;
  			fNext = fZap.next;
  			fNext.prev = fPrev;
  			fPrev.next = fNext;
  		},

  		countFaceVerts_: function(f) {
  			var eCur = f.anEdge;
  			var n = 0;
  			do
  			{
  				n++;
  				eCur = eCur.Lnext;
  			}
  			while (eCur !== f.anEdge);
  			return n;
  		},

  		//int tessMeshMergeConvexFaces( TESSmesh *mesh, int maxVertsPerFace )
  		mergeConvexFaces: function(maxVertsPerFace) {
  			var f;
  			var eCur, eNext, eSym;
  			var vStart;
  			var curNv, symNv;

  			for( f = this.fHead.next; f !== this.fHead; f = f.next )
  			{
  				// Skip faces which are outside the result.
  				if( !f.inside )
  					continue;

  				eCur = f.anEdge;
  				vStart = eCur.Org;
  					
  				while (true)
  				{
  					eNext = eCur.Lnext;
  					eSym = eCur.Sym;

  					// Try to merge if the neighbour face is valid.
  					if( eSym && eSym.Lface && eSym.Lface.inside )
  					{
  						// Try to merge the neighbour faces if the resulting polygons
  						// does not exceed maximum number of vertices.
  						curNv = this.countFaceVerts_( f );
  						symNv = this.countFaceVerts_( eSym.Lface );
  						if( (curNv+symNv-2) <= maxVertsPerFace )
  						{
  							// Merge if the resulting poly is convex.
  							if( Geom.vertCCW( eCur.Lprev.Org, eCur.Org, eSym.Lnext.Lnext.Org ) &&
  								Geom.vertCCW( eSym.Lprev.Org, eSym.Org, eCur.Lnext.Lnext.Org ) )
  							{
  								eNext = eSym.Lnext;
  								this.delete( eSym );
  								eCur = null;
  								eSym = null;
  							}
  						}
  					}
  					
  					if( eCur && eCur.Lnext.Org === vStart )
  						break;
  						
  					// Continue to next edge.
  					eCur = eNext;
  				}
  			}
  			
  			return true;
  		},

  		/* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.
  		*/
  		check: function() {
  			var fHead = this.fHead;
  			var vHead = this.vHead;
  			var eHead = this.eHead;
  			var f, fPrev, v, vPrev, e, ePrev;

  			fPrev = fHead;
  			for( fPrev = fHead ; (f = fPrev.next) !== fHead; fPrev = f) {
  				assert( f.prev === fPrev );
  				e = f.anEdge;
  				do {
  					assert( e.Sym !== e );
  					assert( e.Sym.Sym === e );
  					assert( e.Lnext.Onext.Sym === e );
  					assert( e.Onext.Sym.Lnext === e );
  					assert( e.Lface === f );
  					e = e.Lnext;
  				} while( e !== f.anEdge );
  			}
  			assert( f.prev === fPrev && f.anEdge === null );

  			vPrev = vHead;
  			for( vPrev = vHead ; (v = vPrev.next) !== vHead; vPrev = v) {
  				assert( v.prev === vPrev );
  				e = v.anEdge;
  				do {
  					assert( e.Sym !== e );
  					assert( e.Sym.Sym === e );
  					assert( e.Lnext.Onext.Sym === e );
  					assert( e.Onext.Sym.Lnext === e );
  					assert( e.Org === v );
  					e = e.Onext;
  				} while( e !== v.anEdge );
  			}
  			assert( v.prev === vPrev && v.anEdge === null );

  			ePrev = eHead;
  			for( ePrev = eHead ; (e = ePrev.next) !== eHead; ePrev = e) {
  				assert( e.Sym.next === ePrev.Sym );
  				assert( e.Sym !== e );
  				assert( e.Sym.Sym === e );
  				assert( e.Org !== null );
  				assert( e.Dst !== null );
  				assert( e.Lnext.Onext.Sym === e );
  				assert( e.Onext.Sym.Lnext === e );
  			}
  			assert( e.Sym.next === ePrev.Sym
  				&& e.Sym === this.eHeadSym
  				&& e.Sym.Sym === e
  				&& e.Org === null && e.Dst === null
  				&& e.Lface === null && e.Rface === null );
  		}

  	};

  	var Geom = {};

  	Geom.vertEq = function(u,v) {
  		return (u.s === v.s && u.t === v.t);
  	};

  	/* Returns TRUE if u is lexicographically <= v. */
  	Geom.vertLeq = function(u,v) {
  		return ((u.s < v.s) || (u.s === v.s && u.t <= v.t));
  	};

  	/* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */
  	Geom.transLeq = function(u,v) {
  		return ((u.t < v.t) || (u.t === v.t && u.s <= v.s));
  	};

  	Geom.edgeGoesLeft = function(e) {
  		return Geom.vertLeq( e.Dst, e.Org );
  	};

  	Geom.edgeGoesRight = function(e) {
  		return Geom.vertLeq( e.Org, e.Dst );
  	};

  	Geom.vertL1dist = function(u,v) {
  		return (Math.abs(u.s - v.s) + Math.abs(u.t - v.t));
  	};

  	//TESSreal tesedgeEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )
  	Geom.edgeEval = function( u, v, w ) {
  		/* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),
  		* evaluates the t-coord of the edge uw at the s-coord of the vertex v.
  		* Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.
  		* If uw is vertical (and thus passes thru v), the result is zero.
  		*
  		* The calculation is extremely accurate and stable, even when v
  		* is very close to u or w.  In particular if we set v->t = 0 and
  		* let r be the negated result (this evaluates (uw)(v->s)), then
  		* r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).
  		*/
  		assert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));

  		var gapL = v.s - u.s;
  		var gapR = w.s - v.s;

  		if( gapL + gapR > 0.0 ) {
  			if( gapL < gapR ) {
  				return (v.t - u.t) + (u.t - w.t) * (gapL / (gapL + gapR));
  			} else {
  				return (v.t - w.t) + (w.t - u.t) * (gapR / (gapL + gapR));
  			}
  		}
  		/* vertical line */
  		return 0.0;
  	};

  	//TESSreal tesedgeSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )
  	Geom.edgeSign = function( u, v, w ) {
  		/* Returns a number whose sign matches EdgeEval(u,v,w) but which
  		* is cheaper to evaluate.  Returns > 0, == 0 , or < 0
  		* as v is above, on, or below the edge uw.
  		*/
  		assert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));

  		var gapL = v.s - u.s;
  		var gapR = w.s - v.s;

  		if( gapL + gapR > 0.0 ) {
  			return (v.t - w.t) * gapL + (v.t - u.t) * gapR;
  		}
  		/* vertical line */
  		return 0.0;
  	};


  	/***********************************************************************
  	* Define versions of EdgeSign, EdgeEval with s and t transposed.
  	*/

  	//TESSreal testransEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )
  	Geom.transEval = function( u, v, w ) {
  		/* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),
  		* evaluates the t-coord of the edge uw at the s-coord of the vertex v.
  		* Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.
  		* If uw is vertical (and thus passes thru v), the result is zero.
  		*
  		* The calculation is extremely accurate and stable, even when v
  		* is very close to u or w.  In particular if we set v->s = 0 and
  		* let r be the negated result (this evaluates (uw)(v->t)), then
  		* r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).
  		*/
  		assert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));

  		var gapL = v.t - u.t;
  		var gapR = w.t - v.t;

  		if( gapL + gapR > 0.0 ) {
  			if( gapL < gapR ) {
  				return (v.s - u.s) + (u.s - w.s) * (gapL / (gapL + gapR));
  			} else {
  				return (v.s - w.s) + (w.s - u.s) * (gapR / (gapL + gapR));
  			}
  		}
  		/* vertical line */
  		return 0.0;
  	};

  	//TESSreal testransSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )
  	Geom.transSign = function( u, v, w ) {
  		/* Returns a number whose sign matches TransEval(u,v,w) but which
  		* is cheaper to evaluate.  Returns > 0, == 0 , or < 0
  		* as v is above, on, or below the edge uw.
  		*/
  		assert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));

  		var gapL = v.t - u.t;
  		var gapR = w.t - v.t;

  		if( gapL + gapR > 0.0 ) {
  			return (v.s - w.s) * gapL + (v.s - u.s) * gapR;
  		}
  		/* vertical line */
  		return 0.0;
  	};


  	//int tesvertCCW( TESSvertex *u, TESSvertex *v, TESSvertex *w )
  	Geom.vertCCW = function( u, v, w ) {
  		/* For almost-degenerate situations, the results are not reliable.
  		* Unless the floating-point arithmetic can be performed without
  		* rounding errors, *any* implementation will give incorrect results
  		* on some degenerate inputs, so the client must have some way to
  		* handle this situation.
  		*/
  		return (u.s*(v.t - w.t) + v.s*(w.t - u.t) + w.s*(u.t - v.t)) >= 0.0;
  	};

  	/* Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),
  	* or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces
  	* this in the rare case that one argument is slightly negative.
  	* The implementation is extremely stable numerically.
  	* In particular it guarantees that the result r satisfies
  	* MIN(x,y) <= r <= MAX(x,y), and the results are very accurate
  	* even when a and b differ greatly in magnitude.
  	*/
  	Geom.interpolate = function(a,x,b,y) {
  		return (a = (a < 0) ? 0 : a, b = (b < 0) ? 0 : b, ((a <= b) ? ((b == 0) ? ((x+y) / 2) : (x + (y-x) * (a/(a+b)))) : (y + (x-y) * (b/(a+b)))));
  	};

  	/*
  	#ifndef FOR_TRITE_TEST_PROGRAM
  	#define Interpolate(a,x,b,y)	RealInterpolate(a,x,b,y)
  	#else

  	// Claim: the ONLY property the sweep algorithm relies on is that
  	// MIN(x,y) <= r <= MAX(x,y).  This is a nasty way to test that.
  	#include <stdlib.h>
  	extern int RandomInterpolate;

  	double Interpolate( double a, double x, double b, double y)
  	{
  		printf("*********************%d\n",RandomInterpolate);
  		if( RandomInterpolate ) {
  			a = 1.2 * drand48() - 0.1;
  			a = (a < 0) ? 0 : ((a > 1) ? 1 : a);
  			b = 1.0 - a;
  		}
  		return RealInterpolate(a,x,b,y);
  	}
  	#endif*/

  	Geom.intersect = function( o1, d1, o2, d2, v ) {
  		/* Given edges (o1,d1) and (o2,d2), compute their point of intersection.
  		* The computed point is guaranteed to lie in the intersection of the
  		* bounding rectangles defined by each edge.
  		*/
  		var z1, z2;
  		var t;

  		/* This is certainly not the most efficient way to find the intersection
  		* of two line segments, but it is very numerically stable.
  		*
  		* Strategy: find the two middle vertices in the VertLeq ordering,
  		* and interpolate the intersection s-value from these.  Then repeat
  		* using the TransLeq ordering to find the intersection t-value.
  		*/

  		if( ! Geom.vertLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }
  		if( ! Geom.vertLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }
  		if( ! Geom.vertLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; }//swap( o1, o2 ); swap( d1, d2 ); }

  		if( ! Geom.vertLeq( o2, d1 )) {
  			/* Technically, no intersection -- do our best */
  			v.s = (o2.s + d1.s) / 2;
  		} else if( Geom.vertLeq( d1, d2 )) {
  			/* Interpolate between o2 and d1 */
  			z1 = Geom.edgeEval( o1, o2, d1 );
  			z2 = Geom.edgeEval( o2, d1, d2 );
  			if( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }
  			v.s = Geom.interpolate( z1, o2.s, z2, d1.s );
  		} else {
  			/* Interpolate between o2 and d2 */
  			z1 = Geom.edgeSign( o1, o2, d1 );
  			z2 = -Geom.edgeSign( o1, d2, d1 );
  			if( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }
  			v.s = Geom.interpolate( z1, o2.s, z2, d2.s );
  		}

  		/* Now repeat the process for t */

  		if( ! Geom.transLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }
  		if( ! Geom.transLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }
  		if( ! Geom.transLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; } //swap( o1, o2 ); swap( d1, d2 ); }

  		if( ! Geom.transLeq( o2, d1 )) {
  			/* Technically, no intersection -- do our best */
  			v.t = (o2.t + d1.t) / 2;
  		} else if( Geom.transLeq( d1, d2 )) {
  			/* Interpolate between o2 and d1 */
  			z1 = Geom.transEval( o1, o2, d1 );
  			z2 = Geom.transEval( o2, d1, d2 );
  			if( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }
  			v.t = Geom.interpolate( z1, o2.t, z2, d1.t );
  		} else {
  			/* Interpolate between o2 and d2 */
  			z1 = Geom.transSign( o1, o2, d1 );
  			z2 = -Geom.transSign( o1, d2, d1 );
  			if( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }
  			v.t = Geom.interpolate( z1, o2.t, z2, d2.t );
  		}
  	};



  	function DictNode() {
  		this.key = null;
  		this.next = null;
  		this.prev = null;
  	}
  	function Dict(frame, leq) {
  		this.head = new DictNode();
  		this.head.next = this.head;
  		this.head.prev = this.head;
  		this.frame = frame;
  		this.leq = leq;
  	}
  	Dict.prototype = {
  		min: function() {
  			return this.head.next;
  		},

  		max: function() {
  			return this.head.prev;
  		},

  		insert: function(k) {
  			return this.insertBefore(this.head, k);
  		},

  		search: function(key) {
  			/* Search returns the node with the smallest key greater than or equal
  			* to the given key.  If there is no such key, returns a node whose
  			* key is NULL.  Similarly, Succ(Max(d)) has a NULL key, etc.
  			*/
  			var node = this.head;
  			do {
  				node = node.next;
  			} while( node.key !== null && ! this.leq(this.frame, key, node.key));

  			return node;
  		},

  		insertBefore: function(node, key) {
  			do {
  				node = node.prev;
  			} while( node.key !== null && ! this.leq(this.frame, node.key, key));

  			var newNode = new DictNode();
  			newNode.key = key;
  			newNode.next = node.next;
  			node.next.prev = newNode;
  			newNode.prev = node;
  			node.next = newNode;

  			return newNode;
  		},

  		delete: function(node) {
  			node.next.prev = node.prev;
  			node.prev.next = node.next;
  		}
  	};


  	function PQnode() {
  		this.handle = null;
  	}

  	function PQhandleElem() {
  		this.key = null;
  		this.node = null;
  	}

  	function PriorityQ(size, leq) {
  		this.size = 0;
  		this.max = size;

  		this.nodes = [];
  		this.nodes.length = size+1;
  		for (var i = 0; i < this.nodes.length; i++)
  			this.nodes[i] = new PQnode();

  		this.handles = [];
  		this.handles.length = size+1;
  		for (var i = 0; i < this.handles.length; i++)
  			this.handles[i] = new PQhandleElem();

  		this.initialized = false;
  		this.freeList = 0;
  		this.leq = leq;

  		this.nodes[1].handle = 1;	/* so that Minimum() returns NULL */
  		this.handles[1].key = null;
  	}
  	PriorityQ.prototype = {

  		floatDown_: function( curr )
  		{
  			var n = this.nodes;
  			var h = this.handles;
  			var hCurr, hChild;
  			var child;

  			hCurr = n[curr].handle;
  			for( ;; ) {
  				child = curr << 1;
  				if( child < this.size && this.leq( h[n[child+1].handle].key, h[n[child].handle].key )) {
  					++child;
  				}

  				assert(child <= this.max);

  				hChild = n[child].handle;
  				if( child > this.size || this.leq( h[hCurr].key, h[hChild].key )) {
  					n[curr].handle = hCurr;
  					h[hCurr].node = curr;
  					break;
  				}
  				n[curr].handle = hChild;
  				h[hChild].node = curr;
  				curr = child;
  			}
  		},

  		floatUp_: function( curr )
  		{
  			var n = this.nodes;
  			var h = this.handles;
  			var hCurr, hParent;
  			var parent;

  			hCurr = n[curr].handle;
  			for( ;; ) {
  				parent = curr >> 1;
  				hParent = n[parent].handle;
  				if( parent == 0 || this.leq( h[hParent].key, h[hCurr].key )) {
  					n[curr].handle = hCurr;
  					h[hCurr].node = curr;
  					break;
  				}
  				n[curr].handle = hParent;
  				h[hParent].node = curr;
  				curr = parent;
  			}
  		},

  		init: function() {
  			/* This method of building a heap is O(n), rather than O(n lg n). */
  			for( var i = this.size; i >= 1; --i ) {
  				this.floatDown_( i );
  			}
  			this.initialized = true;
  		},

  		min: function() {
  			return this.handles[this.nodes[1].handle].key;
  		},

  		isEmpty: function() {
  			this.size === 0;
  		},

  		/* really pqHeapInsert */
  		/* returns INV_HANDLE iff out of memory */
  		//PQhandle pqHeapInsert( TESSalloc* alloc, PriorityQHeap *pq, PQkey keyNew )
  		insert: function(keyNew)
  		{
  			var curr;
  			var free;

  			curr = ++this.size;
  			if( (curr*2) > this.max ) {
  				this.max *= 2;
  				var s;
  				s = this.nodes.length;
  				this.nodes.length = this.max+1;
  				for (var i = s; i < this.nodes.length; i++)
  					this.nodes[i] = new PQnode();

  				s = this.handles.length;
  				this.handles.length = this.max+1;
  				for (var i = s; i < this.handles.length; i++)
  					this.handles[i] = new PQhandleElem();
  			}

  			if( this.freeList === 0 ) {
  				free = curr;
  			} else {
  				free = this.freeList;
  				this.freeList = this.handles[free].node;
  			}

  			this.nodes[curr].handle = free;
  			this.handles[free].node = curr;
  			this.handles[free].key = keyNew;

  			if( this.initialized ) {
  				this.floatUp_( curr );
  			}
  			return free;
  		},

  		//PQkey pqHeapExtractMin( PriorityQHeap *pq )
  		extractMin: function() {
  			var n = this.nodes;
  			var h = this.handles;
  			var hMin = n[1].handle;
  			var min = h[hMin].key;

  			if( this.size > 0 ) {
  				n[1].handle = n[this.size].handle;
  				h[n[1].handle].node = 1;

  				h[hMin].key = null;
  				h[hMin].node = this.freeList;
  				this.freeList = hMin;

  				--this.size;
  				if( this.size > 0 ) {
  					this.floatDown_( 1 );
  				}
  			}
  			return min;
  		},

  		delete: function( hCurr ) {
  			var n = this.nodes;
  			var h = this.handles;
  			var curr;

  			assert( hCurr >= 1 && hCurr <= this.max && h[hCurr].key !== null );

  			curr = h[hCurr].node;
  			n[curr].handle = n[this.size].handle;
  			h[n[curr].handle].node = curr;

  			--this.size;
  			if( curr <= this.size ) {
  				if( curr <= 1 || this.leq( h[n[curr>>1].handle].key, h[n[curr].handle].key )) {
  					this.floatDown_( curr );
  				} else {
  					this.floatUp_( curr );
  				}
  			}
  			h[hCurr].key = null;
  			h[hCurr].node = this.freeList;
  			this.freeList = hCurr;
  		}
  	};


  	/* For each pair of adjacent edges crossing the sweep line, there is
  	* an ActiveRegion to represent the region between them.  The active
  	* regions are kept in sorted order in a dynamic dictionary.  As the
  	* sweep line crosses each vertex, we update the affected regions.
  	*/

  	function ActiveRegion() {
  		this.eUp = null;		/* upper edge, directed right to left */
  		this.nodeUp = null;	/* dictionary node corresponding to eUp */
  		this.windingNumber = 0;	/* used to determine which regions are
  								* inside the polygon */
  		this.inside = false;		/* is this region inside the polygon? */
  		this.sentinel = false;	/* marks fake edges at t = +/-infinity */
  		this.dirty = false;		/* marks regions where the upper or lower
  						* edge has changed, but we haven't checked
  						* whether they intersect yet */
  		this.fixUpperEdge = false;	/* marks temporary edges introduced when
  							* we process a "right vertex" (one without
  							* any edges leaving to the right) */
  	}
  	var Sweep = {};

  	Sweep.regionBelow = function(r) {
  		return r.nodeUp.prev.key;
  	};

  	Sweep.regionAbove = function(r) {
  		return r.nodeUp.next.key;
  	};

  	Sweep.debugEvent = function( tess ) {
  		// empty
  	};


  	/*
  	* Invariants for the Edge Dictionary.
  	* - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)
  	*   at any valid location of the sweep event
  	* - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2
  	*   share a common endpoint
  	* - for each e, e->Dst has been processed, but not e->Org
  	* - each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)
  	*   where "event" is the current sweep line event.
  	* - no edge e has zero length
  	*
  	* Invariants for the Mesh (the processed portion).
  	* - the portion of the mesh left of the sweep line is a planar graph,
  	*   ie. there is *some* way to embed it in the plane
  	* - no processed edge has zero length
  	* - no two processed vertices have identical coordinates
  	* - each "inside" region is monotone, ie. can be broken into two chains
  	*   of monotonically increasing vertices according to VertLeq(v1,v2)
  	*   - a non-invariant: these chains may intersect (very slightly)
  	*
  	* Invariants for the Sweep.
  	* - if none of the edges incident to the event vertex have an activeRegion
  	*   (ie. none of these edges are in the edge dictionary), then the vertex
  	*   has only right-going edges.
  	* - if an edge is marked "fixUpperEdge" (it is a temporary edge introduced
  	*   by ConnectRightVertex), then it is the only right-going edge from
  	*   its associated vertex.  (This says that these edges exist only
  	*   when it is necessary.)
  	*/

  	/* When we merge two edges into one, we need to compute the combined
  	* winding of the new edge.
  	*/
  	Sweep.addWinding = function(eDst,eSrc) {
  		eDst.winding += eSrc.winding;
  		eDst.Sym.winding += eSrc.Sym.winding;
  	};


  	//static int EdgeLeq( TESStesselator *tess, ActiveRegion *reg1, ActiveRegion *reg2 )
  	Sweep.edgeLeq = function( tess, reg1, reg2 ) {
  		/*
  		* Both edges must be directed from right to left (this is the canonical
  		* direction for the upper edge of each region).
  		*
  		* The strategy is to evaluate a "t" value for each edge at the
  		* current sweep line position, given by tess->event.  The calculations
  		* are designed to be very stable, but of course they are not perfect.
  		*
  		* Special case: if both edge destinations are at the sweep event,
  		* we sort the edges by slope (they would otherwise compare equally).
  		*/
  		var ev = tess.event;
  		var t1, t2;

  		var e1 = reg1.eUp;
  		var e2 = reg2.eUp;

  		if( e1.Dst === ev ) {
  			if( e2.Dst === ev ) {
  				/* Two edges right of the sweep line which meet at the sweep event.
  				* Sort them by slope.
  				*/
  				if( Geom.vertLeq( e1.Org, e2.Org )) {
  					return Geom.edgeSign( e2.Dst, e1.Org, e2.Org ) <= 0;
  				}
  				return Geom.edgeSign( e1.Dst, e2.Org, e1.Org ) >= 0;
  			}
  			return Geom.edgeSign( e2.Dst, ev, e2.Org ) <= 0;
  		}
  		if( e2.Dst === ev ) {
  			return Geom.edgeSign( e1.Dst, ev, e1.Org ) >= 0;
  		}

  		/* General case - compute signed distance *from* e1, e2 to event */
  		var t1 = Geom.edgeEval( e1.Dst, ev, e1.Org );
  		var t2 = Geom.edgeEval( e2.Dst, ev, e2.Org );
  		return (t1 >= t2);
  	};


  	//static void DeleteRegion( TESStesselator *tess, ActiveRegion *reg )
  	Sweep.deleteRegion = function( tess, reg ) {
  		if( reg.fixUpperEdge ) {
  			/* It was created with zero winding number, so it better be
  			* deleted with zero winding number (ie. it better not get merged
  			* with a real edge).
  			*/
  			assert( reg.eUp.winding === 0 );
  		}
  		reg.eUp.activeRegion = null;
  		tess.dict.delete( reg.nodeUp );
  	};

  	//static int FixUpperEdge( TESStesselator *tess, ActiveRegion *reg, TESShalfEdge *newEdge )
  	Sweep.fixUpperEdge = function( tess, reg, newEdge ) {
  		/*
  		* Replace an upper edge which needs fixing (see ConnectRightVertex).
  		*/
  		assert( reg.fixUpperEdge );
  		tess.mesh.delete( reg.eUp );
  		reg.fixUpperEdge = false;
  		reg.eUp = newEdge;
  		newEdge.activeRegion = reg;
  	};

  	//static ActiveRegion *TopLeftRegion( TESStesselator *tess, ActiveRegion *reg )
  	Sweep.topLeftRegion = function( tess, reg ) {
  		var org = reg.eUp.Org;
  		var e;

  		/* Find the region above the uppermost edge with the same origin */
  		do {
  			reg = Sweep.regionAbove( reg );
  		} while( reg.eUp.Org === org );

  		/* If the edge above was a temporary edge introduced by ConnectRightVertex,
  		* now is the time to fix it.
  		*/
  		if( reg.fixUpperEdge ) {
  			e = tess.mesh.connect( Sweep.regionBelow(reg).eUp.Sym, reg.eUp.Lnext );
  			if (e === null) return null;
  			Sweep.fixUpperEdge( tess, reg, e );
  			reg = Sweep.regionAbove( reg );
  		}
  		return reg;
  	};

  	//static ActiveRegion *TopRightRegion( ActiveRegion *reg )
  	Sweep.topRightRegion = function( reg )
  	{
  		var dst = reg.eUp.Dst;
  		var reg = null;
  		/* Find the region above the uppermost edge with the same destination */
  		do {
  			reg = Sweep.regionAbove( reg );
  		} while( reg.eUp.Dst === dst );
  		return reg;
  	};

  	//static ActiveRegion *AddRegionBelow( TESStesselator *tess, ActiveRegion *regAbove, TESShalfEdge *eNewUp )
  	Sweep.addRegionBelow = function( tess, regAbove, eNewUp ) {
  		/*
  		* Add a new active region to the sweep line, *somewhere* below "regAbove"
  		* (according to where the new edge belongs in the sweep-line dictionary).
  		* The upper edge of the new region will be "eNewUp".
  		* Winding number and "inside" flag are not updated.
  		*/
  		var regNew = new ActiveRegion();
  		regNew.eUp = eNewUp;
  		regNew.nodeUp = tess.dict.insertBefore( regAbove.nodeUp, regNew );
  	//	if (regNew->nodeUp == NULL) longjmp(tess->env,1);
  		regNew.fixUpperEdge = false;
  		regNew.sentinel = false;
  		regNew.dirty = false;

  		eNewUp.activeRegion = regNew;
  		return regNew;
  	};

  	//static int IsWindingInside( TESStesselator *tess, int n )
  	Sweep.isWindingInside = function( tess, n ) {
  		switch( tess.windingRule ) {
  			case Tess2.WINDING_ODD:
  				return (n & 1) != 0;
  			case Tess2.WINDING_NONZERO:
  				return (n != 0);
  			case Tess2.WINDING_POSITIVE:
  				return (n > 0);
  			case Tess2.WINDING_NEGATIVE:
  				return (n < 0);
  			case Tess2.WINDING_ABS_GEQ_TWO:
  				return (n >= 2) || (n <= -2);
  		}
  		assert( false );
  		return false;
  	};

  	//static void ComputeWinding( TESStesselator *tess, ActiveRegion *reg )
  	Sweep.computeWinding = function( tess, reg ) {
  		reg.windingNumber = Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;
  		reg.inside = Sweep.isWindingInside( tess, reg.windingNumber );
  	};


  	//static void FinishRegion( TESStesselator *tess, ActiveRegion *reg )
  	Sweep.finishRegion = function( tess, reg ) {
  		/*
  		* Delete a region from the sweep line.  This happens when the upper
  		* and lower chains of a region meet (at a vertex on the sweep line).
  		* The "inside" flag is copied to the appropriate mesh face (we could
  		* not do this before -- since the structure of the mesh is always
  		* changing, this face may not have even existed until now).
  		*/
  		var e = reg.eUp;
  		var f = e.Lface;

  		f.inside = reg.inside;
  		f.anEdge = e;   /* optimization for tessMeshTessellateMonoRegion() */
  		Sweep.deleteRegion( tess, reg );
  	};


  	//static TESShalfEdge *FinishLeftRegions( TESStesselator *tess, ActiveRegion *regFirst, ActiveRegion *regLast )
  	Sweep.finishLeftRegions = function( tess, regFirst, regLast ) {
  		/*
  		* We are given a vertex with one or more left-going edges.  All affected
  		* edges should be in the edge dictionary.  Starting at regFirst->eUp,
  		* we walk down deleting all regions where both edges have the same
  		* origin vOrg.  At the same time we copy the "inside" flag from the
  		* active region to the face, since at this point each face will belong
  		* to at most one region (this was not necessarily true until this point
  		* in the sweep).  The walk stops at the region above regLast; if regLast
  		* is NULL we walk as far as possible.  At the same time we relink the
  		* mesh if necessary, so that the ordering of edges around vOrg is the
  		* same as in the dictionary.
  		*/
  		var e, ePrev;
  		var reg = null;
  		var regPrev = regFirst;
  		var ePrev = regFirst.eUp;
  		while( regPrev !== regLast ) {
  			regPrev.fixUpperEdge = false;	/* placement was OK */
  			reg = Sweep.regionBelow( regPrev );
  			e = reg.eUp;
  			if( e.Org != ePrev.Org ) {
  				if( ! reg.fixUpperEdge ) {
  					/* Remove the last left-going edge.  Even though there are no further
  					* edges in the dictionary with this origin, there may be further
  					* such edges in the mesh (if we are adding left edges to a vertex
  					* that has already been processed).  Thus it is important to call
  					* FinishRegion rather than just DeleteRegion.
  					*/
  					Sweep.finishRegion( tess, regPrev );
  					break;
  				}
  				/* If the edge below was a temporary edge introduced by
  				* ConnectRightVertex, now is the time to fix it.
  				*/
  				e = tess.mesh.connect( ePrev.Lprev, e.Sym );
  	//			if (e == NULL) longjmp(tess->env,1);
  				Sweep.fixUpperEdge( tess, reg, e );
  			}

  			/* Relink edges so that ePrev->Onext == e */
  			if( ePrev.Onext !== e ) {
  				tess.mesh.splice( e.Oprev, e );
  				tess.mesh.splice( ePrev, e );
  			}
  			Sweep.finishRegion( tess, regPrev );	/* may change reg->eUp */
  			ePrev = reg.eUp;
  			regPrev = reg;
  		}
  		return ePrev;
  	};


  	//static void AddRightEdges( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eFirst, TESShalfEdge *eLast, TESShalfEdge *eTopLeft, int cleanUp )
  	Sweep.addRightEdges = function( tess, regUp, eFirst, eLast, eTopLeft, cleanUp ) {
  		/*
  		* Purpose: insert right-going edges into the edge dictionary, and update
  		* winding numbers and mesh connectivity appropriately.  All right-going
  		* edges share a common origin vOrg.  Edges are inserted CCW starting at
  		* eFirst; the last edge inserted is eLast->Oprev.  If vOrg has any
  		* left-going edges already processed, then eTopLeft must be the edge
  		* such that an imaginary upward vertical segment from vOrg would be
  		* contained between eTopLeft->Oprev and eTopLeft; otherwise eTopLeft
  		* should be NULL.
  		*/
  		var reg, regPrev;
  		var e, ePrev;
  		var firstTime = true;

  		/* Insert the new right-going edges in the dictionary */
  		e = eFirst;
  		do {
  			assert( Geom.vertLeq( e.Org, e.Dst ));
  			Sweep.addRegionBelow( tess, regUp, e.Sym );
  			e = e.Onext;
  		} while ( e !== eLast );

  		/* Walk *all* right-going edges from e->Org, in the dictionary order,
  		* updating the winding numbers of each region, and re-linking the mesh
  		* edges to match the dictionary ordering (if necessary).
  		*/
  		if( eTopLeft === null ) {
  			eTopLeft = Sweep.regionBelow( regUp ).eUp.Rprev;
  		}
  		regPrev = regUp;
  		ePrev = eTopLeft;
  		for( ;; ) {
  			reg = Sweep.regionBelow( regPrev );
  			e = reg.eUp.Sym;
  			if( e.Org !== ePrev.Org ) break;

  			if( e.Onext !== ePrev ) {
  				/* Unlink e from its current position, and relink below ePrev */
  				tess.mesh.splice( e.Oprev, e );
  				tess.mesh.splice( ePrev.Oprev, e );
  			}
  			/* Compute the winding number and "inside" flag for the new regions */
  			reg.windingNumber = regPrev.windingNumber - e.winding;
  			reg.inside = Sweep.isWindingInside( tess, reg.windingNumber );

  			/* Check for two outgoing edges with same slope -- process these
  			* before any intersection tests (see example in tessComputeInterior).
  			*/
  			regPrev.dirty = true;
  			if( ! firstTime && Sweep.checkForRightSplice( tess, regPrev )) {
  				Sweep.addWinding( e, ePrev );
  				Sweep.deleteRegion( tess, regPrev );
  				tess.mesh.delete( ePrev );
  			}
  			firstTime = false;
  			regPrev = reg;
  			ePrev = e;
  		}
  		regPrev.dirty = true;
  		assert( regPrev.windingNumber - e.winding === reg.windingNumber );

  		if( cleanUp ) {
  			/* Check for intersections between newly adjacent edges. */
  			Sweep.walkDirtyRegions( tess, regPrev );
  		}
  	};


  	//static void SpliceMergeVertices( TESStesselator *tess, TESShalfEdge *e1, TESShalfEdge *e2 )
  	Sweep.spliceMergeVertices = function( tess, e1, e2 ) {
  		/*
  		* Two vertices with idential coordinates are combined into one.
  		* e1->Org is kept, while e2->Org is discarded.
  		*/
  		tess.mesh.splice( e1, e2 ); 
  	};

  	//static void VertexWeights( TESSvertex *isect, TESSvertex *org, TESSvertex *dst, TESSreal *weights )
  	Sweep.vertexWeights = function( isect, org, dst ) {
  		/*
  		* Find some weights which describe how the intersection vertex is
  		* a linear combination of "org" and "dest".  Each of the two edges
  		* which generated "isect" is allocated 50% of the weight; each edge
  		* splits the weight between its org and dst according to the
  		* relative distance to "isect".
  		*/
  		var t1 = Geom.vertL1dist( org, isect );
  		var t2 = Geom.vertL1dist( dst, isect );
  		var w0 = 0.5 * t2 / (t1 + t2);
  		var w1 = 0.5 * t1 / (t1 + t2);
  		isect.coords[0] += w0*org.coords[0] + w1*dst.coords[0];
  		isect.coords[1] += w0*org.coords[1] + w1*dst.coords[1];
  		isect.coords[2] += w0*org.coords[2] + w1*dst.coords[2];
  	};


  	//static void GetIntersectData( TESStesselator *tess, TESSvertex *isect, TESSvertex *orgUp, TESSvertex *dstUp, TESSvertex *orgLo, TESSvertex *dstLo )
  	Sweep.getIntersectData = function( tess, isect, orgUp, dstUp, orgLo, dstLo ) {
  		 /*
  		 * We've computed a new intersection point, now we need a "data" pointer
  		 * from the user so that we can refer to this new vertex in the
  		 * rendering callbacks.
  		 */
  		isect.coords[0] = isect.coords[1] = isect.coords[2] = 0;
  		isect.idx = -1;
  		Sweep.vertexWeights( isect, orgUp, dstUp );
  		Sweep.vertexWeights( isect, orgLo, dstLo );
  	};

  	//static int CheckForRightSplice( TESStesselator *tess, ActiveRegion *regUp )
  	Sweep.checkForRightSplice = function( tess, regUp ) {
  		/*
  		* Check the upper and lower edge of "regUp", to make sure that the
  		* eUp->Org is above eLo, or eLo->Org is below eUp (depending on which
  		* origin is leftmost).
  		*
  		* The main purpose is to splice right-going edges with the same
  		* dest vertex and nearly identical slopes (ie. we can't distinguish
  		* the slopes numerically).  However the splicing can also help us
  		* to recover from numerical errors.  For example, suppose at one
  		* point we checked eUp and eLo, and decided that eUp->Org is barely
  		* above eLo.  Then later, we split eLo into two edges (eg. from
  		* a splice operation like this one).  This can change the result of
  		* our test so that now eUp->Org is incident to eLo, or barely below it.
  		* We must correct this condition to maintain the dictionary invariants.
  		*
  		* One possibility is to check these edges for intersection again
  		* (ie. CheckForIntersect).  This is what we do if possible.  However
  		* CheckForIntersect requires that tess->event lies between eUp and eLo,
  		* so that it has something to fall back on when the intersection
  		* calculation gives us an unusable answer.  So, for those cases where
  		* we can't check for intersection, this routine fixes the problem
  		* by just splicing the offending vertex into the other edge.
  		* This is a guaranteed solution, no matter how degenerate things get.
  		* Basically this is a combinatorial solution to a numerical problem.
  		*/
  		var regLo = Sweep.regionBelow(regUp);
  		var eUp = regUp.eUp;
  		var eLo = regLo.eUp;

  		if( Geom.vertLeq( eUp.Org, eLo.Org )) {
  			if( Geom.edgeSign( eLo.Dst, eUp.Org, eLo.Org ) > 0 ) return false;

  			/* eUp->Org appears to be below eLo */
  			if( ! Geom.vertEq( eUp.Org, eLo.Org )) {
  				/* Splice eUp->Org into eLo */
  				tess.mesh.splitEdge( eLo.Sym );
  				tess.mesh.splice( eUp, eLo.Oprev );
  				regUp.dirty = regLo.dirty = true;

  			} else if( eUp.Org !== eLo.Org ) {
  				/* merge the two vertices, discarding eUp->Org */
  				tess.pq.delete( eUp.Org.pqHandle );
  				Sweep.spliceMergeVertices( tess, eLo.Oprev, eUp );
  			}
  		} else {
  			if( Geom.edgeSign( eUp.Dst, eLo.Org, eUp.Org ) < 0 ) return false;

  			/* eLo->Org appears to be above eUp, so splice eLo->Org into eUp */
  			Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
  			tess.mesh.splitEdge( eUp.Sym );
  			tess.mesh.splice( eLo.Oprev, eUp );
  		}
  		return true;
  	};

  	//static int CheckForLeftSplice( TESStesselator *tess, ActiveRegion *regUp )
  	Sweep.checkForLeftSplice = function( tess, regUp ) {
  		/*
  		* Check the upper and lower edge of "regUp", to make sure that the
  		* eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which
  		* destination is rightmost).
  		*
  		* Theoretically, this should always be true.  However, splitting an edge
  		* into two pieces can change the results of previous tests.  For example,
  		* suppose at one point we checked eUp and eLo, and decided that eUp->Dst
  		* is barely above eLo.  Then later, we split eLo into two edges (eg. from
  		* a splice operation like this one).  This can change the result of
  		* the test so that now eUp->Dst is incident to eLo, or barely below it.
  		* We must correct this condition to maintain the dictionary invariants
  		* (otherwise new edges might get inserted in the wrong place in the
  		* dictionary, and bad stuff will happen).
  		*
  		* We fix the problem by just splicing the offending vertex into the
  		* other edge.
  		*/
  		var regLo = Sweep.regionBelow(regUp);
  		var eUp = regUp.eUp;
  		var eLo = regLo.eUp;
  		var e;

  		assert( ! Geom.vertEq( eUp.Dst, eLo.Dst ));

  		if( Geom.vertLeq( eUp.Dst, eLo.Dst )) {
  			if( Geom.edgeSign( eUp.Dst, eLo.Dst, eUp.Org ) < 0 ) return false;

  			/* eLo->Dst is above eUp, so splice eLo->Dst into eUp */
  			Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
  			e = tess.mesh.splitEdge( eUp );
  			tess.mesh.splice( eLo.Sym, e );
  			e.Lface.inside = regUp.inside;
  		} else {
  			if( Geom.edgeSign( eLo.Dst, eUp.Dst, eLo.Org ) > 0 ) return false;

  			/* eUp->Dst is below eLo, so splice eUp->Dst into eLo */
  			regUp.dirty = regLo.dirty = true;
  			e = tess.mesh.splitEdge( eLo );
  			tess.mesh.splice( eUp.Lnext, eLo.Sym );
  			e.Rface.inside = regUp.inside;
  		}
  		return true;
  	};


  	//static int CheckForIntersect( TESStesselator *tess, ActiveRegion *regUp )
  	Sweep.checkForIntersect = function( tess, regUp ) {
  		/*
  		* Check the upper and lower edges of the given region to see if
  		* they intersect.  If so, create the intersection and add it
  		* to the data structures.
  		*
  		* Returns TRUE if adding the new intersection resulted in a recursive
  		* call to AddRightEdges(); in this case all "dirty" regions have been
  		* checked for intersections, and possibly regUp has been deleted.
  		*/
  		var regLo = Sweep.regionBelow(regUp);
  		var eUp = regUp.eUp;
  		var eLo = regLo.eUp;
  		var orgUp = eUp.Org;
  		var orgLo = eLo.Org;
  		var dstUp = eUp.Dst;
  		var dstLo = eLo.Dst;
  		var tMinUp, tMaxLo;
  		var isect = new TESSvertex, orgMin;
  		var e;

  		assert( ! Geom.vertEq( dstLo, dstUp ));
  		assert( Geom.edgeSign( dstUp, tess.event, orgUp ) <= 0 );
  		assert( Geom.edgeSign( dstLo, tess.event, orgLo ) >= 0 );
  		assert( orgUp !== tess.event && orgLo !== tess.event );
  		assert( ! regUp.fixUpperEdge && ! regLo.fixUpperEdge );

  		if( orgUp === orgLo ) return false;	/* right endpoints are the same */

  		tMinUp = Math.min( orgUp.t, dstUp.t );
  		tMaxLo = Math.max( orgLo.t, dstLo.t );
  		if( tMinUp > tMaxLo ) return false;	/* t ranges do not overlap */

  		if( Geom.vertLeq( orgUp, orgLo )) {
  			if( Geom.edgeSign( dstLo, orgUp, orgLo ) > 0 ) return false;
  		} else {
  			if( Geom.edgeSign( dstUp, orgLo, orgUp ) < 0 ) return false;
  		}

  		/* At this point the edges intersect, at least marginally */
  		Sweep.debugEvent( tess );

  		Geom.intersect( dstUp, orgUp, dstLo, orgLo, isect );
  		/* The following properties are guaranteed: */
  		assert( Math.min( orgUp.t, dstUp.t ) <= isect.t );
  		assert( isect.t <= Math.max( orgLo.t, dstLo.t ));
  		assert( Math.min( dstLo.s, dstUp.s ) <= isect.s );
  		assert( isect.s <= Math.max( orgLo.s, orgUp.s ));

  		if( Geom.vertLeq( isect, tess.event )) {
  			/* The intersection point lies slightly to the left of the sweep line,
  			* so move it until it''s slightly to the right of the sweep line.
  			* (If we had perfect numerical precision, this would never happen
  			* in the first place).  The easiest and safest thing to do is
  			* replace the intersection by tess->event.
  			*/
  			isect.s = tess.event.s;
  			isect.t = tess.event.t;
  		}
  		/* Similarly, if the computed intersection lies to the right of the
  		* rightmost origin (which should rarely happen), it can cause
  		* unbelievable inefficiency on sufficiently degenerate inputs.
  		* (If you have the test program, try running test54.d with the
  		* "X zoom" option turned on).
  		*/
  		orgMin = Geom.vertLeq( orgUp, orgLo ) ? orgUp : orgLo;
  		if( Geom.vertLeq( orgMin, isect )) {
  			isect.s = orgMin.s;
  			isect.t = orgMin.t;
  		}

  		if( Geom.vertEq( isect, orgUp ) || Geom.vertEq( isect, orgLo )) {
  			/* Easy case -- intersection at one of the right endpoints */
  			Sweep.checkForRightSplice( tess, regUp );
  			return false;
  		}

  		if(    (! Geom.vertEq( dstUp, tess.event )
  			&& Geom.edgeSign( dstUp, tess.event, isect ) >= 0)
  			|| (! Geom.vertEq( dstLo, tess.event )
  			&& Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ))
  		{
  			/* Very unusual -- the new upper or lower edge would pass on the
  			* wrong side of the sweep event, or through it.  This can happen
  			* due to very small numerical errors in the intersection calculation.
  			*/
  			if( dstLo === tess.event ) {
  				/* Splice dstLo into eUp, and process the new region(s) */
  				tess.mesh.splitEdge( eUp.Sym );
  				tess.mesh.splice( eLo.Sym, eUp );
  				regUp = Sweep.topLeftRegion( tess, regUp );
  	//			if (regUp == NULL) longjmp(tess->env,1);
  				eUp = Sweep.regionBelow(regUp).eUp;
  				Sweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );
  				Sweep.addRightEdges( tess, regUp, eUp.Oprev, eUp, eUp, true );
  				return TRUE;
  			}
  			if( dstUp === tess.event ) {
  				/* Splice dstUp into eLo, and process the new region(s) */
  				tess.mesh.splitEdge( eLo.Sym );
  				tess.mesh.splice( eUp.Lnext, eLo.Oprev ); 
  				regLo = regUp;
  				regUp = Sweep.topRightRegion( regUp );
  				e = Sweep.regionBelow(regUp).eUp.Rprev;
  				regLo.eUp = eLo.Oprev;
  				eLo = Sweep.finishLeftRegions( tess, regLo, null );
  				Sweep.addRightEdges( tess, regUp, eLo.Onext, eUp.Rprev, e, true );
  				return true;
  			}
  			/* Special case: called from ConnectRightVertex.  If either
  			* edge passes on the wrong side of tess->event, split it
  			* (and wait for ConnectRightVertex to splice it appropriately).
  			*/
  			if( Geom.edgeSign( dstUp, tess.event, isect ) >= 0 ) {
  				Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
  				tess.mesh.splitEdge( eUp.Sym );
  				eUp.Org.s = tess.event.s;
  				eUp.Org.t = tess.event.t;
  			}
  			if( Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ) {
  				regUp.dirty = regLo.dirty = true;
  				tess.mesh.splitEdge( eLo.Sym );
  				eLo.Org.s = tess.event.s;
  				eLo.Org.t = tess.event.t;
  			}
  			/* leave the rest for ConnectRightVertex */
  			return false;
  		}

  		/* General case -- split both edges, splice into new vertex.
  		* When we do the splice operation, the order of the arguments is
  		* arbitrary as far as correctness goes.  However, when the operation
  		* creates a new face, the work done is proportional to the size of
  		* the new face.  We expect the faces in the processed part of
  		* the mesh (ie. eUp->Lface) to be smaller than the faces in the
  		* unprocessed original contours (which will be eLo->Oprev->Lface).
  		*/
  		tess.mesh.splitEdge( eUp.Sym );
  		tess.mesh.splitEdge( eLo.Sym );
  		tess.mesh.splice( eLo.Oprev, eUp );
  		eUp.Org.s = isect.s;
  		eUp.Org.t = isect.t;
  		eUp.Org.pqHandle = tess.pq.insert( eUp.Org );
  		Sweep.getIntersectData( tess, eUp.Org, orgUp, dstUp, orgLo, dstLo );
  		Sweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;
  		return false;
  	};

  	//static void WalkDirtyRegions( TESStesselator *tess, ActiveRegion *regUp )
  	Sweep.walkDirtyRegions = function( tess, regUp ) {
  		/*
  		* When the upper or lower edge of any region changes, the region is
  		* marked "dirty".  This routine walks through all the dirty regions
  		* and makes sure that the dictionary invariants are satisfied
  		* (see the comments at the beginning of this file).  Of course
  		* new dirty regions can be created as we make changes to restore
  		* the invariants.
  		*/
  		var regLo = Sweep.regionBelow(regUp);
  		var eUp, eLo;

  		for( ;; ) {
  			/* Find the lowest dirty region (we walk from the bottom up). */
  			while( regLo.dirty ) {
  				regUp = regLo;
  				regLo = Sweep.regionBelow(regLo);
  			}
  			if( ! regUp.dirty ) {
  				regLo = regUp;
  				regUp = Sweep.regionAbove( regUp );
  				if( regUp == null || ! regUp.dirty ) {
  					/* We've walked all the dirty regions */
  					return;
  				}
  			}
  			regUp.dirty = false;
  			eUp = regUp.eUp;
  			eLo = regLo.eUp;

  			if( eUp.Dst !== eLo.Dst ) {
  				/* Check that the edge ordering is obeyed at the Dst vertices. */
  				if( Sweep.checkForLeftSplice( tess, regUp )) {

  					/* If the upper or lower edge was marked fixUpperEdge, then
  					* we no longer need it (since these edges are needed only for
  					* vertices which otherwise have no right-going edges).
  					*/
  					if( regLo.fixUpperEdge ) {
  						Sweep.deleteRegion( tess, regLo );
  						tess.mesh.delete( eLo );
  						regLo = Sweep.regionBelow( regUp );
  						eLo = regLo.eUp;
  					} else if( regUp.fixUpperEdge ) {
  						Sweep.deleteRegion( tess, regUp );
  						tess.mesh.delete( eUp );
  						regUp = Sweep.regionAbove( regLo );
  						eUp = regUp.eUp;
  					}
  				}
  			}
  			if( eUp.Org !== eLo.Org ) {
  				if(    eUp.Dst !== eLo.Dst
  					&& ! regUp.fixUpperEdge && ! regLo.fixUpperEdge
  					&& (eUp.Dst === tess.event || eLo.Dst === tess.event) )
  				{
  					/* When all else fails in CheckForIntersect(), it uses tess->event
  					* as the intersection location.  To make this possible, it requires
  					* that tess->event lie between the upper and lower edges, and also
  					* that neither of these is marked fixUpperEdge (since in the worst
  					* case it might splice one of these edges into tess->event, and
  					* violate the invariant that fixable edges are the only right-going
  					* edge from their associated vertex).
  					*/
  					if( Sweep.checkForIntersect( tess, regUp )) {
  						/* WalkDirtyRegions() was called recursively; we're done */
  						return;
  					}
  				} else {
  					/* Even though we can't use CheckForIntersect(), the Org vertices
  					* may violate the dictionary edge ordering.  Check and correct this.
  					*/
  					Sweep.checkForRightSplice( tess, regUp );
  				}
  			}
  			if( eUp.Org === eLo.Org && eUp.Dst === eLo.Dst ) {
  				/* A degenerate loop consisting of only two edges -- delete it. */
  				Sweep.addWinding( eLo, eUp );
  				Sweep.deleteRegion( tess, regUp );
  				tess.mesh.delete( eUp );
  				regUp = Sweep.regionAbove( regLo );
  			}
  		}
  	};


  	//static void ConnectRightVertex( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eBottomLeft )
  	Sweep.connectRightVertex = function( tess, regUp, eBottomLeft ) {
  		/*
  		* Purpose: connect a "right" vertex vEvent (one where all edges go left)
  		* to the unprocessed portion of the mesh.  Since there are no right-going
  		* edges, two regions (one above vEvent and one below) are being merged
  		* into one.  "regUp" is the upper of these two regions.
  		*
  		* There are two reasons for doing this (adding a right-going edge):
  		*  - if the two regions being merged are "inside", we must add an edge
  		*    to keep them separated (the combined region would not be monotone).
  		*  - in any case, we must leave some record of vEvent in the dictionary,
  		*    so that we can merge vEvent with features that we have not seen yet.
  		*    For example, maybe there is a vertical edge which passes just to
  		*    the right of vEvent; we would like to splice vEvent into this edge.
  		*
  		* However, we don't want to connect vEvent to just any vertex.  We don''t
  		* want the new edge to cross any other edges; otherwise we will create
  		* intersection vertices even when the input data had no self-intersections.
  		* (This is a bad thing; if the user's input data has no intersections,
  		* we don't want to generate any false intersections ourselves.)
  		*
  		* Our eventual goal is to connect vEvent to the leftmost unprocessed
  		* vertex of the combined region (the union of regUp and regLo).
  		* But because of unseen vertices with all right-going edges, and also
  		* new vertices which may be created by edge intersections, we don''t
  		* know where that leftmost unprocessed vertex is.  In the meantime, we
  		* connect vEvent to the closest vertex of either chain, and mark the region
  		* as "fixUpperEdge".  This flag says to delete and reconnect this edge
  		* to the next processed vertex on the boundary of the combined region.
  		* Quite possibly the vertex we connected to will turn out to be the
  		* closest one, in which case we won''t need to make any changes.
  		*/
  		var eNew;
  		var eTopLeft = eBottomLeft.Onext;
  		var regLo = Sweep.regionBelow(regUp);
  		var eUp = regUp.eUp;
  		var eLo = regLo.eUp;
  		var degenerate = false;

  		if( eUp.Dst !== eLo.Dst ) {
  			Sweep.checkForIntersect( tess, regUp );
  		}

  		/* Possible new degeneracies: upper or lower edge of regUp may pass
  		* through vEvent, or may coincide with new intersection vertex
  		*/
  		if( Geom.vertEq( eUp.Org, tess.event )) {
  			tess.mesh.splice( eTopLeft.Oprev, eUp );
  			regUp = Sweep.topLeftRegion( tess, regUp );
  			eTopLeft = Sweep.regionBelow( regUp ).eUp;
  			Sweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );
  			degenerate = true;
  		}
  		if( Geom.vertEq( eLo.Org, tess.event )) {
  			tess.mesh.splice( eBottomLeft, eLo.Oprev );
  			eBottomLeft = Sweep.finishLeftRegions( tess, regLo, null );
  			degenerate = true;
  		}
  		if( degenerate ) {
  			Sweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );
  			return;
  		}

  		/* Non-degenerate situation -- need to add a temporary, fixable edge.
  		* Connect to the closer of eLo->Org, eUp->Org.
  		*/
  		if( Geom.vertLeq( eLo.Org, eUp.Org )) {
  			eNew = eLo.Oprev;
  		} else {
  			eNew = eUp;
  		}
  		eNew = tess.mesh.connect( eBottomLeft.Lprev, eNew );

  		/* Prevent cleanup, otherwise eNew might disappear before we've even
  		* had a chance to mark it as a temporary edge.
  		*/
  		Sweep.addRightEdges( tess, regUp, eNew, eNew.Onext, eNew.Onext, false );
  		eNew.Sym.activeRegion.fixUpperEdge = true;
  		Sweep.walkDirtyRegions( tess, regUp );
  	};

  	/* Because vertices at exactly the same location are merged together
  	* before we process the sweep event, some degenerate cases can't occur.
  	* However if someone eventually makes the modifications required to
  	* merge features which are close together, the cases below marked
  	* TOLERANCE_NONZERO will be useful.  They were debugged before the
  	* code to merge identical vertices in the main loop was added.
  	*/
  	//#define TOLERANCE_NONZERO	FALSE

  	//static void ConnectLeftDegenerate( TESStesselator *tess, ActiveRegion *regUp, TESSvertex *vEvent )
  	Sweep.connectLeftDegenerate = function( tess, regUp, vEvent ) {
  		/*
  		* The event vertex lies exacty on an already-processed edge or vertex.
  		* Adding the new vertex involves splicing it into the already-processed
  		* part of the mesh.
  		*/
  		var e, eTopLeft, eTopRight, eLast;
  		var reg;

  		e = regUp.eUp;
  		if( Geom.vertEq( e.Org, vEvent )) {
  			/* e->Org is an unprocessed vertex - just combine them, and wait
  			* for e->Org to be pulled from the queue
  			*/
  			assert( false /*TOLERANCE_NONZERO*/ );
  			Sweep.spliceMergeVertices( tess, e, vEvent.anEdge );
  			return;
  		}

  		if( ! Geom.vertEq( e.Dst, vEvent )) {
  			/* General case -- splice vEvent into edge e which passes through it */
  			tess.mesh.splitEdge( e.Sym );
  			if( regUp.fixUpperEdge ) {
  				/* This edge was fixable -- delete unused portion of original edge */
  				tess.mesh.delete( e.Onext );
  				regUp.fixUpperEdge = false;
  			}
  			tess.mesh.splice( vEvent.anEdge, e );
  			Sweep.sweepEvent( tess, vEvent );	/* recurse */
  			return;
  		}

  		/* vEvent coincides with e->Dst, which has already been processed.
  		* Splice in the additional right-going edges.
  		*/
  		assert( false /*TOLERANCE_NONZERO*/ );
  		regUp = Sweep.topRightRegion( regUp );
  		reg = Sweep.regionBelow( regUp );
  		eTopRight = reg.eUp.Sym;
  		eTopLeft = eLast = eTopRight.Onext;
  		if( reg.fixUpperEdge ) {
  			/* Here e->Dst has only a single fixable edge going right.
  			* We can delete it since now we have some real right-going edges.
  			*/
  			assert( eTopLeft !== eTopRight );   /* there are some left edges too */
  			Sweep.deleteRegion( tess, reg );
  			tess.mesh.delete( eTopRight );
  			eTopRight = eTopLeft.Oprev;
  		}
  		tess.mesh.splice( vEvent.anEdge, eTopRight );
  		if( ! Geom.edgeGoesLeft( eTopLeft )) {
  			/* e->Dst had no left-going edges -- indicate this to AddRightEdges() */
  			eTopLeft = null;
  		}
  		Sweep.addRightEdges( tess, regUp, eTopRight.Onext, eLast, eTopLeft, true );
  	};


  	//static void ConnectLeftVertex( TESStesselator *tess, TESSvertex *vEvent )
  	Sweep.connectLeftVertex = function( tess, vEvent ) {
  		/*
  		* Purpose: connect a "left" vertex (one where both edges go right)
  		* to the processed portion of the mesh.  Let R be the active region
  		* containing vEvent, and let U and L be the upper and lower edge
  		* chains of R.  There are two possibilities:
  		*
  		* - the normal case: split R into two regions, by connecting vEvent to
  		*   the rightmost vertex of U or L lying to the left of the sweep line
  		*
  		* - the degenerate case: if vEvent is close enough to U or L, we
  		*   merge vEvent into that edge chain.  The subcases are:
  		*	- merging with the rightmost vertex of U or L
  		*	- merging with the active edge of U or L
  		*	- merging with an already-processed portion of U or L
  		*/
  		var regUp, regLo, reg;
  		var eUp, eLo, eNew;
  		var tmp = new ActiveRegion();

  		/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */

  		/* Get a pointer to the active region containing vEvent */
  		tmp.eUp = vEvent.anEdge.Sym;
  		/* __GL_DICTLISTKEY */ /* tessDictListSearch */
  		regUp = tess.dict.search( tmp ).key;
  		regLo = Sweep.regionBelow( regUp );
  		if( !regLo ) {
  			// This may happen if the input polygon is coplanar.
  			return;
  		}
  		eUp = regUp.eUp;
  		eLo = regLo.eUp;

  		/* Try merging with U or L first */
  		if( Geom.edgeSign( eUp.Dst, vEvent, eUp.Org ) === 0.0 ) {
  			Sweep.connectLeftDegenerate( tess, regUp, vEvent );
  			return;
  		}

  		/* Connect vEvent to rightmost processed vertex of either chain.
  		* e->Dst is the vertex that we will connect to vEvent.
  		*/
  		reg = Geom.vertLeq( eLo.Dst, eUp.Dst ) ? regUp : regLo;

  		if( regUp.inside || reg.fixUpperEdge) {
  			if( reg === regUp ) {
  				eNew = tess.mesh.connect( vEvent.anEdge.Sym, eUp.Lnext );
  			} else {
  				var tempHalfEdge = tess.mesh.connect( eLo.Dnext, vEvent.anEdge);
  				eNew = tempHalfEdge.Sym;
  			}
  			if( reg.fixUpperEdge ) {
  				Sweep.fixUpperEdge( tess, reg, eNew );
  			} else {
  				Sweep.computeWinding( tess, Sweep.addRegionBelow( tess, regUp, eNew ));
  			}
  			Sweep.sweepEvent( tess, vEvent );
  		} else {
  			/* The new vertex is in a region which does not belong to the polygon.
  			* We don''t need to connect this vertex to the rest of the mesh.
  			*/
  			Sweep.addRightEdges( tess, regUp, vEvent.anEdge, vEvent.anEdge, null, true );
  		}
  	};


  	//static void SweepEvent( TESStesselator *tess, TESSvertex *vEvent )
  	Sweep.sweepEvent = function( tess, vEvent ) {
  		/*
  		* Does everything necessary when the sweep line crosses a vertex.
  		* Updates the mesh and the edge dictionary.
  		*/

  		tess.event = vEvent;		/* for access in EdgeLeq() */
  		Sweep.debugEvent( tess );

  		/* Check if this vertex is the right endpoint of an edge that is
  		* already in the dictionary.  In this case we don't need to waste
  		* time searching for the location to insert new edges.
  		*/
  		var e = vEvent.anEdge;
  		while( e.activeRegion === null ) {
  			e = e.Onext;
  			if( e == vEvent.anEdge ) {
  				/* All edges go right -- not incident to any processed edges */
  				Sweep.connectLeftVertex( tess, vEvent );
  				return;
  			}
  		}

  		/* Processing consists of two phases: first we "finish" all the
  		* active regions where both the upper and lower edges terminate
  		* at vEvent (ie. vEvent is closing off these regions).
  		* We mark these faces "inside" or "outside" the polygon according
  		* to their winding number, and delete the edges from the dictionary.
  		* This takes care of all the left-going edges from vEvent.
  		*/
  		var regUp = Sweep.topLeftRegion( tess, e.activeRegion );
  		assert( regUp !== null );
  	//	if (regUp == NULL) longjmp(tess->env,1);
  		var reg = Sweep.regionBelow( regUp );
  		var eTopLeft = reg.eUp;
  		var eBottomLeft = Sweep.finishLeftRegions( tess, reg, null );

  		/* Next we process all the right-going edges from vEvent.  This
  		* involves adding the edges to the dictionary, and creating the
  		* associated "active regions" which record information about the
  		* regions between adjacent dictionary edges.
  		*/
  		if( eBottomLeft.Onext === eTopLeft ) {
  			/* No right-going edges -- add a temporary "fixable" edge */
  			Sweep.connectRightVertex( tess, regUp, eBottomLeft );
  		} else {
  			Sweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );
  		}
  	};


  	/* Make the sentinel coordinates big enough that they will never be
  	* merged with real input features.
  	*/

  	//static void AddSentinel( TESStesselator *tess, TESSreal smin, TESSreal smax, TESSreal t )
  	Sweep.addSentinel = function( tess, smin, smax, t ) {
  		/*
  		* We add two sentinel edges above and below all other edges,
  		* to avoid special cases at the top and bottom.
  		*/
  		var reg = new ActiveRegion();
  		var e = tess.mesh.makeEdge();
  	//	if (e == NULL) longjmp(tess->env,1);

  		e.Org.s = smax;
  		e.Org.t = t;
  		e.Dst.s = smin;
  		e.Dst.t = t;
  		tess.event = e.Dst;		/* initialize it */

  		reg.eUp = e;
  		reg.windingNumber = 0;
  		reg.inside = false;
  		reg.fixUpperEdge = false;
  		reg.sentinel = true;
  		reg.dirty = false;
  		reg.nodeUp = tess.dict.insert( reg );
  	//	if (reg->nodeUp == NULL) longjmp(tess->env,1);
  	};


  	//static void InitEdgeDict( TESStesselator *tess )
  	Sweep.initEdgeDict = function( tess ) {
  		/*
  		* We maintain an ordering of edge intersections with the sweep line.
  		* This order is maintained in a dynamic dictionary.
  		*/
  		tess.dict = new Dict( tess, Sweep.edgeLeq );
  	//	if (tess->dict == NULL) longjmp(tess->env,1);

  		var w = (tess.bmax[0] - tess.bmin[0]);
  		var h = (tess.bmax[1] - tess.bmin[1]);

  		var smin = tess.bmin[0] - w;
  		var smax = tess.bmax[0] + w;
  		var tmin = tess.bmin[1] - h;
  		var tmax = tess.bmax[1] + h;

  		Sweep.addSentinel( tess, smin, smax, tmin );
  		Sweep.addSentinel( tess, smin, smax, tmax );
  	};


  	Sweep.doneEdgeDict = function( tess )
  	{
  		var reg;
  		var fixedEdges = 0;

  		while( (reg = tess.dict.min().key) !== null ) {
  			/*
  			* At the end of all processing, the dictionary should contain
  			* only the two sentinel edges, plus at most one "fixable" edge
  			* created by ConnectRightVertex().
  			*/
  			if( ! reg.sentinel ) {
  				assert( reg.fixUpperEdge );
  				assert( ++fixedEdges == 1 );
  			}
  			assert( reg.windingNumber == 0 );
  			Sweep.deleteRegion( tess, reg );
  			/*    tessMeshDelete( reg->eUp );*/
  		}
  	//	dictDeleteDict( &tess->alloc, tess->dict );
  	};


  	Sweep.removeDegenerateEdges = function( tess ) {
  		/*
  		* Remove zero-length edges, and contours with fewer than 3 vertices.
  		*/
  		var e, eNext, eLnext;
  		var eHead = tess.mesh.eHead;

  		/*LINTED*/
  		for( e = eHead.next; e !== eHead; e = eNext ) {
  			eNext = e.next;
  			eLnext = e.Lnext;

  			if( Geom.vertEq( e.Org, e.Dst ) && e.Lnext.Lnext !== e ) {
  				/* Zero-length edge, contour has at least 3 edges */
  				Sweep.spliceMergeVertices( tess, eLnext, e );	/* deletes e->Org */
  				tess.mesh.delete( e ); /* e is a self-loop */
  				e = eLnext;
  				eLnext = e.Lnext;
  			}
  			if( eLnext.Lnext === e ) {
  				/* Degenerate contour (one or two edges) */
  				if( eLnext !== e ) {
  					if( eLnext === eNext || eLnext === eNext.Sym ) { eNext = eNext.next; }
  					tess.mesh.delete( eLnext );
  				}
  				if( e === eNext || e === eNext.Sym ) { eNext = eNext.next; }
  				tess.mesh.delete( e );
  			}
  		}
  	};

  	Sweep.initPriorityQ = function( tess ) {
  		/*
  		* Insert all vertices into the priority queue which determines the
  		* order in which vertices cross the sweep line.
  		*/
  		var pq;
  		var v, vHead;
  		var vertexCount = 0;
  		
  		vHead = tess.mesh.vHead;
  		for( v = vHead.next; v !== vHead; v = v.next ) {
  			vertexCount++;
  		}
  		/* Make sure there is enough space for sentinels. */
  		vertexCount += 8; //MAX( 8, tess->alloc.extraVertices );
  		
  		pq = tess.pq = new PriorityQ( vertexCount, Geom.vertLeq );
  	//	if (pq == NULL) return 0;

  		vHead = tess.mesh.vHead;
  		for( v = vHead.next; v !== vHead; v = v.next ) {
  			v.pqHandle = pq.insert( v );
  	//		if (v.pqHandle == INV_HANDLE)
  	//			break;
  		}

  		if (v !== vHead) {
  			return false;
  		}

  		pq.init();

  		return true;
  	};


  	Sweep.donePriorityQ = function( tess ) {
  		tess.pq = null;
  	};


  	Sweep.removeDegenerateFaces = function( tess, mesh ) {
  		/*
  		* Delete any degenerate faces with only two edges.  WalkDirtyRegions()
  		* will catch almost all of these, but it won't catch degenerate faces
  		* produced by splice operations on already-processed edges.
  		* The two places this can happen are in FinishLeftRegions(), when
  		* we splice in a "temporary" edge produced by ConnectRightVertex(),
  		* and in CheckForLeftSplice(), where we splice already-processed
  		* edges to ensure that our dictionary invariants are not violated
  		* by numerical errors.
  		*
  		* In both these cases it is *very* dangerous to delete the offending
  		* edge at the time, since one of the routines further up the stack
  		* will sometimes be keeping a pointer to that edge.
  		*/
  		var f, fNext;
  		var e;

  		/*LINTED*/
  		for( f = mesh.fHead.next; f !== mesh.fHead; f = fNext ) {
  			fNext = f.next;
  			e = f.anEdge;
  			assert( e.Lnext !== e );

  			if( e.Lnext.Lnext === e ) {
  				/* A face with only two edges */
  				Sweep.addWinding( e.Onext, e );
  				tess.mesh.delete( e );
  			}
  		}
  		return true;
  	};

  	Sweep.computeInterior = function( tess ) {
  		/*
  		* tessComputeInterior( tess ) computes the planar arrangement specified
  		* by the given contours, and further subdivides this arrangement
  		* into regions.  Each region is marked "inside" if it belongs
  		* to the polygon, according to the rule given by tess->windingRule.
  		* Each interior region is guaranteed be monotone.
  		*/
  		var v, vNext;

  		/* Each vertex defines an event for our sweep line.  Start by inserting
  		* all the vertices in a priority queue.  Events are processed in
  		* lexicographic order, ie.
  		*
  		*	e1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)
  		*/
  		Sweep.removeDegenerateEdges( tess );
  		if ( !Sweep.initPriorityQ( tess ) ) return false; /* if error */
  		Sweep.initEdgeDict( tess );

  		while( (v = tess.pq.extractMin()) !== null ) {
  			for( ;; ) {
  				vNext = tess.pq.min();
  				if( vNext === null || ! Geom.vertEq( vNext, v )) break;

  				/* Merge together all vertices at exactly the same location.
  				* This is more efficient than processing them one at a time,
  				* simplifies the code (see ConnectLeftDegenerate), and is also
  				* important for correct handling of certain degenerate cases.
  				* For example, suppose there are two identical edges A and B
  				* that belong to different contours (so without this code they would
  				* be processed by separate sweep events).  Suppose another edge C
  				* crosses A and B from above.  When A is processed, we split it
  				* at its intersection point with C.  However this also splits C,
  				* so when we insert B we may compute a slightly different
  				* intersection point.  This might leave two edges with a small
  				* gap between them.  This kind of error is especially obvious
  				* when using boundary extraction (TESS_BOUNDARY_ONLY).
  				*/
  				vNext = tess.pq.extractMin();
  				Sweep.spliceMergeVertices( tess, v.anEdge, vNext.anEdge );
  			}
  			Sweep.sweepEvent( tess, v );
  		}

  		/* Set tess->event for debugging purposes */
  		tess.event = tess.dict.min().key.eUp.Org;
  		Sweep.debugEvent( tess );
  		Sweep.doneEdgeDict( tess );
  		Sweep.donePriorityQ( tess );

  		if ( !Sweep.removeDegenerateFaces( tess, tess.mesh ) ) return false;
  		tess.mesh.check();

  		return true;
  	};


  	function Tesselator() {

  		/*** state needed for collecting the input data ***/
  		this.mesh = null;		/* stores the input contours, and eventually
  							the tessellation itself */

  		/*** state needed for projecting onto the sweep plane ***/

  		this.normal = [0.0, 0.0, 0.0];	/* user-specified normal (if provided) */
  		this.sUnit = [0.0, 0.0, 0.0];	/* unit vector in s-direction (debugging) */
  		this.tUnit = [0.0, 0.0, 0.0];	/* unit vector in t-direction (debugging) */

  		this.bmin = [0.0, 0.0];
  		this.bmax = [0.0, 0.0];

  		/*** state needed for the line sweep ***/
  		this.windingRule = Tess2.WINDING_ODD;	/* rule for determining polygon interior */

  		this.dict = null;		/* edge dictionary for sweep line */
  		this.pq = null;		/* priority queue of vertex events */
  		this.event = null;		/* current sweep event being processed */

  		this.vertexIndexCounter = 0;
  		
  		this.vertices = [];
  		this.vertexIndices = [];
  		this.vertexCount = 0;
  		this.elements = [];
  		this.elementCount = 0;
  	}
  	Tesselator.prototype = {

  		dot_: function(u, v) {
  			return (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);
  		},

  		normalize_: function( v ) {
  			var len = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];
  			assert( len > 0.0 );
  			len = Math.sqrt( len );
  			v[0] /= len;
  			v[1] /= len;
  			v[2] /= len;
  		},

  		longAxis_: function( v ) {
  			var i = 0;
  			if( Math.abs(v[1]) > Math.abs(v[0]) ) { i = 1; }
  			if( Math.abs(v[2]) > Math.abs(v[i]) ) { i = 2; }
  			return i;
  		},

  		computeNormal_: function( norm )
  		{
  			var v, v1, v2;
  			var c, tLen2, maxLen2;
  			var maxVal = [0,0,0], minVal = [0,0,0], d1 = [0,0,0], d2 = [0,0,0], tNorm = [0,0,0];
  			var maxVert = [null,null,null], minVert = [null,null,null];
  			var vHead = this.mesh.vHead;
  			var i;

  			v = vHead.next;
  			for( i = 0; i < 3; ++i ) {
  				c = v.coords[i];
  				minVal[i] = c;
  				minVert[i] = v;
  				maxVal[i] = c;
  				maxVert[i] = v;
  			}

  			for( v = vHead.next; v !== vHead; v = v.next ) {
  				for( i = 0; i < 3; ++i ) {
  					c = v.coords[i];
  					if( c < minVal[i] ) { minVal[i] = c; minVert[i] = v; }
  					if( c > maxVal[i] ) { maxVal[i] = c; maxVert[i] = v; }
  				}
  			}

  			/* Find two vertices separated by at least 1/sqrt(3) of the maximum
  			* distance between any two vertices
  			*/
  			i = 0;
  			if( maxVal[1] - minVal[1] > maxVal[0] - minVal[0] ) { i = 1; }
  			if( maxVal[2] - minVal[2] > maxVal[i] - minVal[i] ) { i = 2; }
  			if( minVal[i] >= maxVal[i] ) {
  				/* All vertices are the same -- normal doesn't matter */
  				norm[0] = 0; norm[1] = 0; norm[2] = 1;
  				return;
  			}

  			/* Look for a third vertex which forms the triangle with maximum area
  			* (Length of normal == twice the triangle area)
  			*/
  			maxLen2 = 0;
  			v1 = minVert[i];
  			v2 = maxVert[i];
  			d1[0] = v1.coords[0] - v2.coords[0];
  			d1[1] = v1.coords[1] - v2.coords[1];
  			d1[2] = v1.coords[2] - v2.coords[2];
  			for( v = vHead.next; v !== vHead; v = v.next ) {
  				d2[0] = v.coords[0] - v2.coords[0];
  				d2[1] = v.coords[1] - v2.coords[1];
  				d2[2] = v.coords[2] - v2.coords[2];
  				tNorm[0] = d1[1]*d2[2] - d1[2]*d2[1];
  				tNorm[1] = d1[2]*d2[0] - d1[0]*d2[2];
  				tNorm[2] = d1[0]*d2[1] - d1[1]*d2[0];
  				tLen2 = tNorm[0]*tNorm[0] + tNorm[1]*tNorm[1] + tNorm[2]*tNorm[2];
  				if( tLen2 > maxLen2 ) {
  					maxLen2 = tLen2;
  					norm[0] = tNorm[0];
  					norm[1] = tNorm[1];
  					norm[2] = tNorm[2];
  				}
  			}

  			if( maxLen2 <= 0 ) {
  				/* All points lie on a single line -- any decent normal will do */
  				norm[0] = norm[1] = norm[2] = 0;
  				norm[this.longAxis_(d1)] = 1;
  			}
  		},

  		checkOrientation_: function() {
  			var area;
  			var f, fHead = this.mesh.fHead;
  			var v, vHead = this.mesh.vHead;
  			var e;

  			/* When we compute the normal automatically, we choose the orientation
  			* so that the the sum of the signed areas of all contours is non-negative.
  			*/
  			area = 0;
  			for( f = fHead.next; f !== fHead; f = f.next ) {
  				e = f.anEdge;
  				if( e.winding <= 0 ) continue;
  				do {
  					area += (e.Org.s - e.Dst.s) * (e.Org.t + e.Dst.t);
  					e = e.Lnext;
  				} while( e !== f.anEdge );
  			}
  			if( area < 0 ) {
  				/* Reverse the orientation by flipping all the t-coordinates */
  				for( v = vHead.next; v !== vHead; v = v.next ) {
  					v.t = - v.t;
  				}
  				this.tUnit[0] = - this.tUnit[0];
  				this.tUnit[1] = - this.tUnit[1];
  				this.tUnit[2] = - this.tUnit[2];
  			}
  		},

  	/*	#ifdef FOR_TRITE_TEST_PROGRAM
  		#include <stdlib.h>
  		extern int RandomSweep;
  		#define S_UNIT_X	(RandomSweep ? (2*drand48()-1) : 1.0)
  		#define S_UNIT_Y	(RandomSweep ? (2*drand48()-1) : 0.0)
  		#else
  		#if defined(SLANTED_SWEEP) */
  		/* The "feature merging" is not intended to be complete.  There are
  		* special cases where edges are nearly parallel to the sweep line
  		* which are not implemented.  The algorithm should still behave
  		* robustly (ie. produce a reasonable tesselation) in the presence
  		* of such edges, however it may miss features which could have been
  		* merged.  We could minimize this effect by choosing the sweep line
  		* direction to be something unusual (ie. not parallel to one of the
  		* coordinate axes).
  		*/
  	/*	#define S_UNIT_X	(TESSreal)0.50941539564955385	// Pre-normalized
  		#define S_UNIT_Y	(TESSreal)0.86052074622010633
  		#else
  		#define S_UNIT_X	(TESSreal)1.0
  		#define S_UNIT_Y	(TESSreal)0.0
  		#endif
  		#endif*/

  		/* Determine the polygon normal and project vertices onto the plane
  		* of the polygon.
  		*/
  		projectPolygon_: function() {
  			var v, vHead = this.mesh.vHead;
  			var norm = [0,0,0];
  			var sUnit, tUnit;
  			var i, first, computedNormal = false;

  			norm[0] = this.normal[0];
  			norm[1] = this.normal[1];
  			norm[2] = this.normal[2];
  			if( norm[0] === 0.0 && norm[1] === 0.0 && norm[2] === 0.0 ) {
  				this.computeNormal_( norm );
  				computedNormal = true;
  			}
  			sUnit = this.sUnit;
  			tUnit = this.tUnit;
  			i = this.longAxis_( norm );

  	/*	#if defined(FOR_TRITE_TEST_PROGRAM) || defined(TRUE_PROJECT)
  			// Choose the initial sUnit vector to be approximately perpendicular
  			// to the normal.
  			
  			Normalize( norm );

  			sUnit[i] = 0;
  			sUnit[(i+1)%3] = S_UNIT_X;
  			sUnit[(i+2)%3] = S_UNIT_Y;

  			// Now make it exactly perpendicular 
  			w = Dot( sUnit, norm );
  			sUnit[0] -= w * norm[0];
  			sUnit[1] -= w * norm[1];
  			sUnit[2] -= w * norm[2];
  			Normalize( sUnit );

  			// Choose tUnit so that (sUnit,tUnit,norm) form a right-handed frame 
  			tUnit[0] = norm[1]*sUnit[2] - norm[2]*sUnit[1];
  			tUnit[1] = norm[2]*sUnit[0] - norm[0]*sUnit[2];
  			tUnit[2] = norm[0]*sUnit[1] - norm[1]*sUnit[0];
  			Normalize( tUnit );
  		#else*/
  			/* Project perpendicular to a coordinate axis -- better numerically */
  			sUnit[i] = 0;
  			sUnit[(i+1)%3] = 1.0;
  			sUnit[(i+2)%3] = 0.0;

  			tUnit[i] = 0;
  			tUnit[(i+1)%3] = 0.0;
  			tUnit[(i+2)%3] = (norm[i] > 0) ? 1.0 : -1.0;
  	//	#endif

  			/* Project the vertices onto the sweep plane */
  			for( v = vHead.next; v !== vHead; v = v.next ) {
  				v.s = this.dot_( v.coords, sUnit );
  				v.t = this.dot_( v.coords, tUnit );
  			}
  			if( computedNormal ) {
  				this.checkOrientation_();
  			}

  			/* Compute ST bounds. */
  			first = true;
  			for( v = vHead.next; v !== vHead; v = v.next ) {
  				if (first) {
  					this.bmin[0] = this.bmax[0] = v.s;
  					this.bmin[1] = this.bmax[1] = v.t;
  					first = false;
  				} else {
  					if (v.s < this.bmin[0]) this.bmin[0] = v.s;
  					if (v.s > this.bmax[0]) this.bmax[0] = v.s;
  					if (v.t < this.bmin[1]) this.bmin[1] = v.t;
  					if (v.t > this.bmax[1]) this.bmax[1] = v.t;
  				}
  			}
  		},

  		addWinding_: function(eDst,eSrc) {
  			eDst.winding += eSrc.winding;
  			eDst.Sym.winding += eSrc.Sym.winding;
  		},
  		
  		/* tessMeshTessellateMonoRegion( face ) tessellates a monotone region
  		* (what else would it do??)  The region must consist of a single
  		* loop of half-edges (see mesh.h) oriented CCW.  "Monotone" in this
  		* case means that any vertical line intersects the interior of the
  		* region in a single interval.  
  		*
  		* Tessellation consists of adding interior edges (actually pairs of
  		* half-edges), to split the region into non-overlapping triangles.
  		*
  		* The basic idea is explained in Preparata and Shamos (which I don''t
  		* have handy right now), although their implementation is more
  		* complicated than this one.  The are two edge chains, an upper chain
  		* and a lower chain.  We process all vertices from both chains in order,
  		* from right to left.
  		*
  		* The algorithm ensures that the following invariant holds after each
  		* vertex is processed: the untessellated region consists of two
  		* chains, where one chain (say the upper) is a single edge, and
  		* the other chain is concave.  The left vertex of the single edge
  		* is always to the left of all vertices in the concave chain.
  		*
  		* Each step consists of adding the rightmost unprocessed vertex to one
  		* of the two chains, and forming a fan of triangles from the rightmost
  		* of two chain endpoints.  Determining whether we can add each triangle
  		* to the fan is a simple orientation test.  By making the fan as large
  		* as possible, we restore the invariant (check it yourself).
  		*/
  	//	int tessMeshTessellateMonoRegion( TESSmesh *mesh, TESSface *face )
  		tessellateMonoRegion_: function( mesh, face ) {
  			var up, lo;

  			/* All edges are oriented CCW around the boundary of the region.
  			* First, find the half-edge whose origin vertex is rightmost.
  			* Since the sweep goes from left to right, face->anEdge should
  			* be close to the edge we want.
  			*/
  			up = face.anEdge;
  			assert( up.Lnext !== up && up.Lnext.Lnext !== up );

  			for( ; Geom.vertLeq( up.Dst, up.Org ); up = up.Lprev )
  				;
  			for( ; Geom.vertLeq( up.Org, up.Dst ); up = up.Lnext )
  				;
  			lo = up.Lprev;

  			while( up.Lnext !== lo ) {
  				if( Geom.vertLeq( up.Dst, lo.Org )) {
  					/* up->Dst is on the left.  It is safe to form triangles from lo->Org.
  					* The EdgeGoesLeft test guarantees progress even when some triangles
  					* are CW, given that the upper and lower chains are truly monotone.
  					*/
  					while( lo.Lnext !== up && (Geom.edgeGoesLeft( lo.Lnext )
  						|| Geom.edgeSign( lo.Org, lo.Dst, lo.Lnext.Dst ) <= 0.0 )) {
  							var tempHalfEdge = mesh.connect( lo.Lnext, lo );
  							//if (tempHalfEdge == NULL) return 0;
  							lo = tempHalfEdge.Sym;
  					}
  					lo = lo.Lprev;
  				} else {
  					/* lo->Org is on the left.  We can make CCW triangles from up->Dst. */
  					while( lo.Lnext != up && (Geom.edgeGoesRight( up.Lprev )
  						|| Geom.edgeSign( up.Dst, up.Org, up.Lprev.Org ) >= 0.0 )) {
  							var tempHalfEdge = mesh.connect( up, up.Lprev );
  							//if (tempHalfEdge == NULL) return 0;
  							up = tempHalfEdge.Sym;
  					}
  					up = up.Lnext;
  				}
  			}

  			/* Now lo->Org == up->Dst == the leftmost vertex.  The remaining region
  			* can be tessellated in a fan from this leftmost vertex.
  			*/
  			assert( lo.Lnext !== up );
  			while( lo.Lnext.Lnext !== up ) {
  				var tempHalfEdge = mesh.connect( lo.Lnext, lo );
  				//if (tempHalfEdge == NULL) return 0;
  				lo = tempHalfEdge.Sym;
  			}

  			return true;
  		},


  		/* tessMeshTessellateInterior( mesh ) tessellates each region of
  		* the mesh which is marked "inside" the polygon.  Each such region
  		* must be monotone.
  		*/
  		//int tessMeshTessellateInterior( TESSmesh *mesh )
  		tessellateInterior_: function( mesh ) {
  			var f, next;

  			/*LINTED*/
  			for( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {
  				/* Make sure we don''t try to tessellate the new triangles. */
  				next = f.next;
  				if( f.inside ) {
  					if ( !this.tessellateMonoRegion_( mesh, f ) ) return false;
  				}
  			}

  			return true;
  		},


  		/* tessMeshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces
  		* which are not marked "inside" the polygon.  Since further mesh operations
  		* on NULL faces are not allowed, the main purpose is to clean up the
  		* mesh so that exterior loops are not represented in the data structure.
  		*/
  		//void tessMeshDiscardExterior( TESSmesh *mesh )
  		discardExterior_: function( mesh ) {
  			var f, next;

  			/*LINTED*/
  			for( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {
  				/* Since f will be destroyed, save its next pointer. */
  				next = f.next;
  				if( ! f.inside ) {
  					mesh.zapFace( f );
  				}
  			}
  		},

  		/* tessMeshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the
  		* winding numbers on all edges so that regions marked "inside" the
  		* polygon have a winding number of "value", and regions outside
  		* have a winding number of 0.
  		*
  		* If keepOnlyBoundary is TRUE, it also deletes all edges which do not
  		* separate an interior region from an exterior one.
  		*/
  	//	int tessMeshSetWindingNumber( TESSmesh *mesh, int value, int keepOnlyBoundary )
  		setWindingNumber_: function( mesh, value, keepOnlyBoundary ) {
  			var e, eNext;

  			for( e = mesh.eHead.next; e !== mesh.eHead; e = eNext ) {
  				eNext = e.next;
  				if( e.Rface.inside !== e.Lface.inside ) {

  					/* This is a boundary edge (one side is interior, one is exterior). */
  					e.winding = (e.Lface.inside) ? value : -value;
  				} else {

  					/* Both regions are interior, or both are exterior. */
  					if( ! keepOnlyBoundary ) {
  						e.winding = 0;
  					} else {
  						mesh.delete( e );
  					}
  				}
  			}
  		},

  		getNeighbourFace_: function(edge)
  		{
  			if (!edge.Rface)
  				return -1;
  			if (!edge.Rface.inside)
  				return -1;
  			return edge.Rface.n;
  		},

  		outputPolymesh_: function( mesh, elementType, polySize, vertexSize ) {
  			var v;
  			var f;
  			var edge;
  			var maxFaceCount = 0;
  			var maxVertexCount = 0;
  			var faceVerts, i;

  			// Assume that the input data is triangles now.
  			// Try to merge as many polygons as possible
  			if (polySize > 3)
  			{
  				mesh.mergeConvexFaces( polySize );
  			}

  			// Mark unused
  			for ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )
  				v.n = -1;

  			// Create unique IDs for all vertices and faces.
  			for ( f = mesh.fHead.next; f != mesh.fHead; f = f.next )
  			{
  				f.n = -1;
  				if( !f.inside ) continue;

  				edge = f.anEdge;
  				faceVerts = 0;
  				do
  				{
  					v = edge.Org;
  					if ( v.n === -1 )
  					{
  						v.n = maxVertexCount;
  						maxVertexCount++;
  					}
  					faceVerts++;
  					edge = edge.Lnext;
  				}
  				while (edge !== f.anEdge);
  				
  				assert( faceVerts <= polySize );

  				f.n = maxFaceCount;
  				++maxFaceCount;
  			}

  			this.elementCount = maxFaceCount;
  			if (elementType == Tess2.CONNECTED_POLYGONS)
  				maxFaceCount *= 2;
  	/*		tess.elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,
  															  sizeof(TESSindex) * maxFaceCount * polySize );
  			if (!tess->elements)
  			{
  				tess->outOfMemory = 1;
  				return;
  			}*/
  			this.elements = [];
  			this.elements.length = maxFaceCount * polySize;
  			
  			this.vertexCount = maxVertexCount;
  	/*		tess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,
  															 sizeof(TESSreal) * tess->vertexCount * vertexSize );
  			if (!tess->vertices)
  			{
  				tess->outOfMemory = 1;
  				return;
  			}*/
  			this.vertices = [];
  			this.vertices.length = maxVertexCount * vertexSize;

  	/*		tess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,
  																    sizeof(TESSindex) * tess->vertexCount );
  			if (!tess->vertexIndices)
  			{
  				tess->outOfMemory = 1;
  				return;
  			}*/
  			this.vertexIndices = [];
  			this.vertexIndices.length = maxVertexCount;

  			
  			// Output vertices.
  			for ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )
  			{
  				if ( v.n != -1 )
  				{
  					// Store coordinate
  					var idx = v.n * vertexSize;
  					this.vertices[idx+0] = v.coords[0];
  					this.vertices[idx+1] = v.coords[1];
  					if ( vertexSize > 2 )
  						this.vertices[idx+2] = v.coords[2];
  					// Store vertex index.
  					this.vertexIndices[v.n] = v.idx;
  				}
  			}

  			// Output indices.
  			var nel = 0;
  			for ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )
  			{
  				if ( !f.inside ) continue;
  				
  				// Store polygon
  				edge = f.anEdge;
  				faceVerts = 0;
  				do
  				{
  					v = edge.Org;
  					this.elements[nel++] = v.n;
  					faceVerts++;
  					edge = edge.Lnext;
  				}
  				while (edge !== f.anEdge);
  				// Fill unused.
  				for (i = faceVerts; i < polySize; ++i)
  					this.elements[nel++] = -1;

  				// Store polygon connectivity
  				if ( elementType == Tess2.CONNECTED_POLYGONS )
  				{
  					edge = f.anEdge;
  					do
  					{
  						this.elements[nel++] = this.getNeighbourFace_( edge );
  						edge = edge.Lnext;
  					}
  					while (edge !== f.anEdge);
  					// Fill unused.
  					for (i = faceVerts; i < polySize; ++i)
  						this.elements[nel++] = -1;
  				}
  			}
  		},

  	//	void OutputContours( TESStesselator *tess, TESSmesh *mesh, int vertexSize )
  		outputContours_: function( mesh, vertexSize ) {
  			var f;
  			var edge;
  			var start;
  			var startVert = 0;
  			var vertCount = 0;

  			this.vertexCount = 0;
  			this.elementCount = 0;

  			for ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )
  			{
  				if ( !f.inside ) continue;

  				start = edge = f.anEdge;
  				do
  				{
  					this.vertexCount++;
  					edge = edge.Lnext;
  				}
  				while ( edge !== start );

  				this.elementCount++;
  			}

  	/*		tess->elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,
  															  sizeof(TESSindex) * tess->elementCount * 2 );
  			if (!tess->elements)
  			{
  				tess->outOfMemory = 1;
  				return;
  			}*/
  			this.elements = [];
  			this.elements.length = this.elementCount * 2;
  			
  	/*		tess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,
  															  sizeof(TESSreal) * tess->vertexCount * vertexSize );
  			if (!tess->vertices)
  			{
  				tess->outOfMemory = 1;
  				return;
  			}*/
  			this.vertices = [];
  			this.vertices.length = this.vertexCount * vertexSize;

  	/*		tess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,
  																    sizeof(TESSindex) * tess->vertexCount );
  			if (!tess->vertexIndices)
  			{
  				tess->outOfMemory = 1;
  				return;
  			}*/
  			this.vertexIndices = [];
  			this.vertexIndices.length = this.vertexCount;

  			var nv = 0;
  			var nvi = 0;
  			var nel = 0;
  			startVert = 0;

  			for ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )
  			{
  				if ( !f.inside ) continue;

  				vertCount = 0;
  				start = edge = f.anEdge;
  				do
  				{
  					this.vertices[nv++] = edge.Org.coords[0];
  					this.vertices[nv++] = edge.Org.coords[1];
  					if ( vertexSize > 2 )
  						this.vertices[nv++] = edge.Org.coords[2];
  					this.vertexIndices[nvi++] = edge.Org.idx;
  					vertCount++;
  					edge = edge.Lnext;
  				}
  				while ( edge !== start );

  				this.elements[nel++] = startVert;
  				this.elements[nel++] = vertCount;

  				startVert += vertCount;
  			}
  		},

  		addContour: function( size, vertices )
  		{
  			var e;
  			var i;

  			if ( this.mesh === null )
  			  	this.mesh = new TESSmesh();
  	/*	 	if ( tess->mesh == NULL ) {
  				tess->outOfMemory = 1;
  				return;
  			}*/

  			if ( size < 2 )
  				size = 2;
  			if ( size > 3 )
  				size = 3;

  			e = null;

  			for( i = 0; i < vertices.length; i += size )
  			{
  				if( e == null ) {
  					/* Make a self-loop (one vertex, one edge). */
  					e = this.mesh.makeEdge();
  	/*				if ( e == NULL ) {
  						tess->outOfMemory = 1;
  						return;
  					}*/
  					this.mesh.splice( e, e.Sym );
  				} else {
  					/* Create a new vertex and edge which immediately follow e
  					* in the ordering around the left face.
  					*/
  					this.mesh.splitEdge( e );
  					e = e.Lnext;
  				}

  				/* The new vertex is now e->Org. */
  				e.Org.coords[0] = vertices[i+0];
  				e.Org.coords[1] = vertices[i+1];
  				if ( size > 2 )
  					e.Org.coords[2] = vertices[i+2];
  				else
  					e.Org.coords[2] = 0.0;
  				/* Store the insertion number so that the vertex can be later recognized. */
  				e.Org.idx = this.vertexIndexCounter++;

  				/* The winding of an edge says how the winding number changes as we
  				* cross from the edge''s right face to its left face.  We add the
  				* vertices in such an order that a CCW contour will add +1 to
  				* the winding number of the region inside the contour.
  				*/
  				e.winding = 1;
  				e.Sym.winding = -1;
  			}
  		},

  	//	int tessTesselate( TESStesselator *tess, int windingRule, int elementType, int polySize, int vertexSize, const TESSreal* normal )
  		tesselate: function( windingRule, elementType, polySize, vertexSize, normal ) {
  			this.vertices = [];
  			this.elements = [];
  			this.vertexIndices = [];

  			this.vertexIndexCounter = 0;
  			
  			if (normal)
  			{
  				this.normal[0] = normal[0];
  				this.normal[1] = normal[1];
  				this.normal[2] = normal[2];
  			}

  			this.windingRule = windingRule;

  			if (vertexSize < 2)
  				vertexSize = 2;
  			if (vertexSize > 3)
  				vertexSize = 3;

  	/*		if (setjmp(tess->env) != 0) { 
  				// come back here if out of memory
  				return 0;
  			}*/

  			if (!this.mesh)
  			{
  				return false;
  			}

  			/* Determine the polygon normal and project vertices onto the plane
  			* of the polygon.
  			*/
  			this.projectPolygon_();

  			/* tessComputeInterior( tess ) computes the planar arrangement specified
  			* by the given contours, and further subdivides this arrangement
  			* into regions.  Each region is marked "inside" if it belongs
  			* to the polygon, according to the rule given by tess->windingRule.
  			* Each interior region is guaranteed be monotone.
  			*/
  			Sweep.computeInterior( this );

  			var mesh = this.mesh;

  			/* If the user wants only the boundary contours, we throw away all edges
  			* except those which separate the interior from the exterior.
  			* Otherwise we tessellate all the regions marked "inside".
  			*/
  			if (elementType == Tess2.BOUNDARY_CONTOURS) {
  				this.setWindingNumber_( mesh, 1, true );
  			} else {
  				this.tessellateInterior_( mesh ); 
  			}
  	//		if (rc == 0) longjmp(tess->env,1);  /* could've used a label */

  			mesh.check();

  			if (elementType == Tess2.BOUNDARY_CONTOURS) {
  				this.outputContours_( mesh, vertexSize );     /* output contours */
  			}
  			else
  			{
  				this.outputPolymesh_( mesh, elementType, polySize, vertexSize );     /* output polygons */
  			}

  //			tess.mesh = null;

  			return true;
  		}
  	};

  var tess2$1 = tess2;

  const blessAsConvex = (paths) => { paths.isConvex = true; return paths; };

  const toContour = (polygon) => {
    const points = [];
    for (const [x = 0, y = 0, z = 0] of polygon) {
      points.push(x, y, z);
    }
    return points;
  };

  const fromTessellation = (tessellation) => {
    const tessPolygons = tessellation.elements;
    const vertices = tessellation.vertices;
    const polygons = [];

    const toPoint = (offset) => {
      const vertex = tessPolygons[offset];
      return [vertices[vertex * 3 + 0], vertices[vertex * 3 + 1], vertices[vertex * 3 + 2]];
    };

    for (let nth = 0; nth < tessPolygons.length; nth += 3) {
      polygons.push([toPoint(nth + 0), toPoint(nth + 1), toPoint(nth + 2)]);
    }

    return polygons;
  };

  // This currently does triangulation.
  // Higher arities are possible, but end up being null padded.
  // Let's see if they're useful.

  // TODO: Call this toConvexPolygons
  const makeConvex = (options = {}, polygons) => {
    if (polygons.isConvex) {
      return polygons;
    }
    if (polygons.every(isConvex)) {
      return blessAsConvex(polygons);
    }
    const contours = polygons.map(toContour);
    // CONISDER: Migrating from tess2 to earclip, given we flatten in solid tessellation anyhow.
    const convex = fromTessellation(
      tess2$1.tesselate({ contours: contours,
                        windingRule: tess2$1.WINDING_ODD,
                        elementType: tess2$1.POLYGONS,
                        polySize: 3,
                        vertexSize: 3
      }));
    return blessAsConvex(convex);
  };

  // returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)
  const measureBoundingBox = (polygons) => {
    let max$1 = polygons[0][0];
    let min$1 = polygons[0][0];
    eachPoint({},
              point => {
                max$1 = max(max$1, point);
                min$1 = min(min$1, point);
              },
              polygons);
    return [min$1, max$1];
  };

  const blessAsTriangles = (paths) => { paths.isTriangles = true; return paths; };

  const toTriangles = (options = {}, paths) => {
    if (paths.isTriangles) {
      return paths;
    }
    if (paths.every(isTriangle)) {
      return blessAsTriangles(paths);
    }
    const triangles = [];
    for (const path of paths) {
      for (let nth = 2; nth < path.length; nth++) {
        triangles.push([path[0], path[nth - 1], path[nth]]);
      }
    }
    return blessAsTriangles(triangles);
  };

  const transform$3 = (matrix, polygons) => polygons.map(polygon => transform$1(matrix, polygon));

  const translate$1 = (vector, polygons) => transform$3(fromTranslation(vector), polygons);

  /**
   * Construct a regular unit polygon of a given edge count.
   * Note: radius and length must not conflict.
   *
   * @param {Object} [options] - options for construction
   * @param {Integer} [options.edges=32] - how many edges the polygon has.
   * @returns {PointArray} Array of points along the path of the circle in CCW winding.
   *
   * @example
   * const circlePoints = regularPolygon({ edges: 32 })
   *
   * @example
   * const squarePoints = regularPolygon({ edges: 4 })
   * })
   */
  const buildRegularPolygon = ({ edges = 32 }) => {
    let points = [];
    for (let i = 0; i < edges; i++) {
      let radians = 2 * Math.PI * i / edges;
      let point = fromAngleRadians(radians);
      points.push(point);
    }
    return points;
  };

  const extrudeLinear = ({ height = 1 }, polygons) => {
    const extruded = [];
    const up = [0, 0, height];

    // Build the walls.
    for (const polygon of polygons) {
      // Build floor outline. This need not be a convex polygon.
      const floor = polygon.map(point => [point[0], point[1], height / -2]).reverse();
      // Walk around the floor to build the walls.
      for (let i = 0; i < floor.length; i++) {
        const start = floor[i];
        const end = floor[(i + 1) % floor.length];
        // Remember that we are walking CCW.
        extruded.push([start, add(start, up), end]);
        extruded.push([end, add(start, up), add(end, up)]);
      }
    }

    // Build the roof and floor from convex polygons.
    for (const polygon of makeConvex({}, polygons)) {
      const floor = polygon.map(point => [point[0], point[1], height / -2]).reverse();
      const roof = floor.map(vertex => add(vertex, up)).reverse();
      extruded.push(roof, floor);
    }

    return extruded;
  };

  /**
   * Construct a regular unit prism of a given edge count.
   * Note: radius and length must not conflict.
   *
   * @param {Object} [options] - options for construction
   * @param {Integer} [options.edges=32] - how many edges the polygon has.
   * @returns {PointArray} Array of points along the path of the circle in CCW winding.
   *
   * @example
   * const circlePoints = regularPolygon({ edges: 32 })
   */

  const buildRegularPrism = ({ edges = 32 }) =>
    extrudeLinear({ height: 1 }, [buildRegularPolygon({ edges: edges })]);

  const transform$4 = (matrix, points) => points.map(point => transform(matrix, point));
  const translate$2 = ([x = 0, y = 0, z = 0], points) => transform$4(fromTranslation([x, y, z]), points);

  var subtract_1 = subtract$1;

  /**
   * Subtracts vector b from vector a
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  function subtract$1(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      return out
  }

  var cross_1 = cross$1;

  /**
   * Computes the cross product of two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  function cross$1(out, a, b) {
      var ax = a[0], ay = a[1], az = a[2],
          bx = b[0], by = b[1], bz = b[2];

      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
      return out
  }

  var squaredLength_1 = squaredLength;

  /**
   * Calculates the squared length of a vec3
   *
   * @param {vec3} a vector to calculate squared length of
   * @returns {Number} squared length of a
   */
  function squaredLength(a) {
      var x = a[0],
          y = a[1],
          z = a[2];
      return x*x + y*y + z*z
  }

  var ab = [];
  var ap = [];
  var cr = [];

  var squared = function (p, a, b) {
    // // == vector solution
    // var normalize = require('gl-vec3/normalize')
    // var scaleAndAdd = require('gl-vec3/scaleAndAdd')
    // var dot = require('gl-vec3/dot')
    // var squaredDistance = require('gl-vec3/squaredDistance')
    // // n = vector `ab` normalized
    // var n = []
    // // projection = projection of `point` on `n`
    // var projection = []
    // normalize(n, subtract(n, a, b))
    // scaleAndAdd(projection, a, n, dot(n, p))
    // return squaredDistance(projection, p)

    // == parallelogram solution
    //
    //            s
    //      __a________b__
    //       /   |    /
    //      /   h|   /
    //     /_____|__/
    //    p
    //
    //  s = b - a
    //  area = s * h
    //  |ap x s| = s * h
    //  h = |ap x s| / s
    //
    subtract_1(ab, b, a);
    subtract_1(ap, p, a);
    var area = squaredLength_1(cross_1(cr, ap, ab));
    var s = squaredLength_1(ab);
    if (s === 0) {
      throw Error('a and b are the same point')
    }
    return area / s
  };

  var pointLineDistance = function (point, a, b) {
    return Math.sqrt(squared(point, a, b))
  };

  var normalize_1 = normalize;

  /**
   * Normalize a vec3
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a vector to normalize
   * @returns {vec3} out
   */
  function normalize(out, a) {
      var x = a[0],
          y = a[1],
          z = a[2];
      var len = x*x + y*y + z*z;
      if (len > 0) {
          //TODO: evaluate use of glm_invsqrt here?
          len = 1 / Math.sqrt(len);
          out[0] = a[0] * len;
          out[1] = a[1] * len;
          out[2] = a[2] * len;
      }
      return out
  }

  var tmp = [0, 0, 0];

  var getPlaneNormal = planeNormal;

  function planeNormal (out, point1, point2, point3) {
    subtract_1(out, point1, point2);
    subtract_1(tmp, point2, point3);
    cross_1(out, out, tmp);
    return normalize_1(out, out)
  }

  var dot_1 = dot$1;

  /**
   * Calculates the dot product of two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} dot product of a and b
   */
  function dot$1(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
  }

  var VertexList_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var VertexList = function () {
    function VertexList() {
      _classCallCheck(this, VertexList);

      this.head = null;
      this.tail = null;
    }

    _createClass(VertexList, [{
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
      }

      /**
       * Inserts a `node` before `target`, it's assumed that
       * `target` belongs to this doubly linked list
       *
       * @param {*} target
       * @param {*} node
       */

    }, {
      key: "insertBefore",
      value: function insertBefore(target, node) {
        node.prev = target.prev;
        node.next = target;
        if (!node.prev) {
          this.head = node;
        } else {
          node.prev.next = node;
        }
        target.prev = node;
      }

      /**
       * Inserts a `node` after `target`, it's assumed that
       * `target` belongs to this doubly linked list
       *
       * @param {Vertex} target
       * @param {Vertex} node
       */

    }, {
      key: "insertAfter",
      value: function insertAfter(target, node) {
        node.prev = target;
        node.next = target.next;
        if (!node.next) {
          this.tail = node;
        } else {
          node.next.prev = node;
        }
        target.next = node;
      }

      /**
       * Appends a `node` to the end of this doubly linked list
       * Note: `node.next` will be unlinked from `node`
       * Note: if `node` is part of another linked list call `addAll` instead
       *
       * @param {*} node
       */

    }, {
      key: "add",
      value: function add(node) {
        if (!this.head) {
          this.head = node;
        } else {
          this.tail.next = node;
        }
        node.prev = this.tail;
        // since node is the new end it doesn't have a next node
        node.next = null;
        this.tail = node;
      }

      /**
       * Appends a chain of nodes where `node` is the head,
       * the difference with `add` is that it correctly sets the position
       * of the node list `tail` property
       *
       * @param {*} node
       */

    }, {
      key: "addAll",
      value: function addAll(node) {
        if (!this.head) {
          this.head = node;
        } else {
          this.tail.next = node;
        }
        node.prev = this.tail;

        // find the end of the list
        while (node.next) {
          node = node.next;
        }
        this.tail = node;
      }

      /**
       * Deletes a `node` from this linked list, it's assumed that `node` is a
       * member of this linked list
       *
       * @param {*} node
       */

    }, {
      key: "remove",
      value: function remove(node) {
        if (!node.prev) {
          this.head = node.next;
        } else {
          node.prev.next = node.next;
        }

        if (!node.next) {
          this.tail = node.prev;
        } else {
          node.next.prev = node.prev;
        }
      }

      /**
       * Removes a chain of nodes whose head is `a` and whose tail is `b`,
       * it's assumed that `a` and `b` belong to this list and also that `a`
       * comes before `b` in the linked list
       *
       * @param {*} a
       * @param {*} b
       */

    }, {
      key: "removeChain",
      value: function removeChain(a, b) {
        if (!a.prev) {
          this.head = b.next;
        } else {
          a.prev.next = b.next;
        }

        if (!b.next) {
          this.tail = a.prev;
        } else {
          b.next.prev = a.prev;
        }
      }
    }, {
      key: "first",
      value: function first() {
        return this.head;
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return !this.head;
      }
    }]);

    return VertexList;
  }();

  exports.default = VertexList;
  module.exports = exports["default"];
  });

  unwrapExports(VertexList_1);

  var Vertex_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Vertex = function Vertex(point, index) {
    _classCallCheck(this, Vertex);

    this.point = point;
    // index in the input array
    this.index = index;
    // vertex is a double linked list node
    this.next = null;
    this.prev = null;
    // the face that is able to see this point
    this.face = null;
  };

  exports.default = Vertex;
  module.exports = exports["default"];
  });

  unwrapExports(Vertex_1);

  var add_1 = add$1;

  /**
   * Adds two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {vec3} out
   */
  function add$1(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      return out
  }

  var copy_1 = copy$1;

  /**
   * Copy the values from one vec3 to another
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the source vector
   * @returns {vec3} out
   */
  function copy$1(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out
  }

  var length_1 = length$1;

  /**
   * Calculates the length of a vec3
   *
   * @param {vec3} a vector to calculate length of
   * @returns {Number} length of a
   */
  function length$1(a) {
      var x = a[0],
          y = a[1],
          z = a[2];
      return Math.sqrt(x*x + y*y + z*z)
  }

  var scale_1 = scale$2;

  /**
   * Scales a vec3 by a scalar number
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the vector to scale
   * @param {Number} b amount to scale the vector by
   * @returns {vec3} out
   */
  function scale$2(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      return out
  }

  var scaleAndAdd_1 = scaleAndAdd;

  /**
   * Adds two vec3's after scaling the second operand by a scalar value
   *
   * @param {vec3} out the receiving vector
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @param {Number} scale the amount to scale b by before adding
   * @returns {vec3} out
   */
  function scaleAndAdd(out, a, b, scale) {
      out[0] = a[0] + (b[0] * scale);
      out[1] = a[1] + (b[1] * scale);
      out[2] = a[2] + (b[2] * scale);
      return out
  }

  var distance_1 = distance$1;

  /**
   * Calculates the euclidian distance between two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} distance between a and b
   */
  function distance$1(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1],
          z = b[2] - a[2];
      return Math.sqrt(x*x + y*y + z*z)
  }

  var squaredDistance_1 = squaredDistance$1;

  /**
   * Calculates the squared euclidian distance between two vec3's
   *
   * @param {vec3} a the first operand
   * @param {vec3} b the second operand
   * @returns {Number} squared distance between a and b
   */
  function squaredDistance$1(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1],
          z = b[2] - a[2];
      return x*x + y*y + z*z
  }

  var global$1 = (typeof global !== "undefined" ? global :
              typeof self !== "undefined" ? self :
              typeof window !== "undefined" ? window : {});

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance$1 = global$1.performance || {};
  var performanceNow =
    performance$1.now        ||
    performance$1.mozNow     ||
    performance$1.msNow      ||
    performance$1.oNow       ||
    performance$1.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance$1)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var process = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var browser$1 = true;

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse$1(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse$1(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'weeks':
      case 'week':
      case 'w':
        return n * w;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
  }

  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = ms;
    Object.keys(env).forEach(function (key) {
      createDebug[key] = env[key];
    });
    /**
    * Active `debug` instances.
    */

    createDebug.instances = [];
    /**
    * The currently active debug mode names, and names to skip.
    */

    createDebug.names = [];
    createDebug.skips = [];
    /**
    * Map of special "%n" handling functions, for the debug "format" argument.
    *
    * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    */

    createDebug.formatters = {};
    /**
    * Selects a color for a debug namespace
    * @param {String} namespace The namespace string for the for the debug instance to be colored
    * @return {Number|String} An ANSI color code for the given namespace
    * @api private
    */

    function selectColor(namespace) {
      var hash = 0;

      for (var i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }

      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }

    createDebug.selectColor = selectColor;
    /**
    * Create a debugger with the given `namespace`.
    *
    * @param {String} namespace
    * @return {Function}
    * @api public
    */

    function createDebug(namespace) {
      var prevTime;

      function debug() {
        // Disabled?
        if (!debug.enabled) {
          return;
        }

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var self = debug; // Set `diff` timestamp

        var curr = Number(new Date());
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);

        if (typeof args[0] !== 'string') {
          // Anything else let's inspect with %O
          args.unshift('%O');
        } // Apply any `formatters` transformations


        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
          // If we encounter an escaped % then don't increase the array index
          if (match === '%%') {
            return match;
          }

          index++;
          var formatter = createDebug.formatters[format];

          if (typeof formatter === 'function') {
            var val = args[index];
            match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

            args.splice(index, 1);
            index--;
          }

          return match;
        }); // Apply env-specific formatting (colors, etc.)

        createDebug.formatArgs.call(self, args);
        var logFn = self.log || createDebug.log;
        logFn.apply(self, args);
      }

      debug.namespace = namespace;
      debug.enabled = createDebug.enabled(namespace);
      debug.useColors = createDebug.useColors();
      debug.color = selectColor(namespace);
      debug.destroy = destroy;
      debug.extend = extend; // Debug.formatArgs = formatArgs;
      // debug.rawLog = rawLog;
      // env-specific initialization logic for debug instances

      if (typeof createDebug.init === 'function') {
        createDebug.init(debug);
      }

      createDebug.instances.push(debug);
      return debug;
    }

    function destroy() {
      var index = createDebug.instances.indexOf(this);

      if (index !== -1) {
        createDebug.instances.splice(index, 1);
        return true;
      }

      return false;
    }

    function extend(namespace, delimiter) {
      return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    }
    /**
    * Enables a debug mode by namespaces. This can include modes
    * separated by a colon and wildcards.
    *
    * @param {String} namespaces
    * @api public
    */


    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.names = [];
      createDebug.skips = [];
      var i;
      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;

      for (i = 0; i < len; i++) {
        if (!split[i]) {
          // ignore empty strings
          continue;
        }

        namespaces = split[i].replace(/\*/g, '.*?');

        if (namespaces[0] === '-') {
          createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
        } else {
          createDebug.names.push(new RegExp('^' + namespaces + '$'));
        }
      }

      for (i = 0; i < createDebug.instances.length; i++) {
        var instance = createDebug.instances[i];
        instance.enabled = createDebug.enabled(instance.namespace);
      }
    }
    /**
    * Disable debug output.
    *
    * @api public
    */


    function disable() {
      createDebug.enable('');
    }
    /**
    * Returns true if the given mode name is enabled, false otherwise.
    *
    * @param {String} name
    * @return {Boolean}
    * @api public
    */


    function enabled(name) {
      if (name[name.length - 1] === '*') {
        return true;
      }

      var i;
      var len;

      for (i = 0, len = createDebug.skips.length; i < len; i++) {
        if (createDebug.skips[i].test(name)) {
          return false;
        }
      }

      for (i = 0, len = createDebug.names.length; i < len; i++) {
        if (createDebug.names[i].test(name)) {
          return true;
        }
      }

      return false;
    }
    /**
    * Coerce `val`.
    *
    * @param {Mixed} val
    * @return {Mixed}
    * @api private
    */


    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }

      return val;
    }

    createDebug.enable(createDebug.load());
    return createDebug;
  }

  var common = setup;

  var browser$2 = createCommonjsModule(function (module, exports) {

  function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  /* eslint-env browser */

  /**
   * This is the web browser implementation of `debug()`.
   */
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  /**
   * Colors.
   */

  exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */
  // eslint-disable-next-line complexity

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
      return true;
    } // Internet Explorer and Edge do not support colors.


    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    } // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */


  function formatArgs(args) {
    args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

    if (!this.useColors) {
      return;
    }

    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into

    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function (match) {
      if (match === '%%') {
        return;
      }

      index++;

      if (match === '%c') {
        // We only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */


  function log() {
    var _console;

    // This hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
  }
  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */


  function save(namespaces) {
    try {
      if (namespaces) {
        exports.storage.setItem('debug', namespaces);
      } else {
        exports.storage.removeItem('debug');
      }
    } catch (error) {// Swallow
      // XXX (@Qix-) should we be logging these?
    }
  }
  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */


  function load() {
    var r;

    try {
      r = exports.storage.getItem('debug');
    } catch (error) {} // Swallow
    // XXX (@Qix-) should we be logging these?
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }
  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */


  function localstorage() {
    try {
      // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
      // The Browser also has localStorage in the global context.
      return localStorage;
    } catch (error) {// Swallow
      // XXX (@Qix-) should we be logging these?
    }
  }

  module.exports = common(exports);
  var formatters = module.exports.formatters;
  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  formatters.j = function (v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return '[UnexpectedJSONParseError]: ' + error.message;
    }
  };
  });
  var browser_1 = browser$2.log;
  var browser_2 = browser$2.formatArgs;
  var browser_3 = browser$2.save;
  var browser_4 = browser$2.load;
  var browser_5 = browser$2.useColors;
  var browser_6 = browser$2.storage;
  var browser_7 = browser$2.colors;



  var tty = /*#__PURE__*/Object.freeze({

  });

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  var base64 = /*#__PURE__*/Object.freeze({
    toByteArray: toByteArray,
    fromByteArray: fromByteArray
  });

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var isBuffer$1 = function isBuffer(arg) {
    return arg instanceof Buffer;
  };

  var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  });

  var inherits = createCommonjsModule(function (module) {
  try {
    var util$1 = util;
    if (typeof util$1.inherits !== 'function') throw '';
    module.exports = util$1.inherits;
  } catch (e) {
    module.exports = inherits_browser;
  }
  });

  var util = createCommonjsModule(function (module, exports) {
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
    function getOwnPropertyDescriptors(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors;
    };

  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };


  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    if (typeof process !== 'undefined' && process.noDeprecation === true) {
      return fn;
    }

    // Allow for deprecating things in the process of starting up.
    if (typeof process === 'undefined') {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  };


  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };


  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;


  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = isBuffer$1;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };


  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = inherits;

  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

  exports.promisify = function promisify(original) {
    if (typeof original !== 'function')
      throw new TypeError('The "original" argument must be of type Function');

    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
      var fn = original[kCustomPromisifiedSymbol];
      if (typeof fn !== 'function') {
        throw new TypeError('The "util.promisify.custom" argument must be of type Function');
      }
      Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn, enumerable: false, writable: false, configurable: true
      });
      return fn;
    }

    function fn() {
      var promiseResolve, promiseReject;
      var promise = new Promise(function (resolve, reject) {
        promiseResolve = resolve;
        promiseReject = reject;
      });

      var args = [];
      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      args.push(function (err, value) {
        if (err) {
          promiseReject(err);
        } else {
          promiseResolve(value);
        }
      });

      try {
        original.apply(this, args);
      } catch (err) {
        promiseReject(err);
      }

      return promise;
    }

    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return Object.defineProperties(
      fn,
      getOwnPropertyDescriptors(original)
    );
  };

  exports.promisify.custom = kCustomPromisifiedSymbol;

  function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
      var newReason = new Error('Promise was rejected with a falsy value');
      newReason.reason = reason;
      reason = newReason;
    }
    return cb(reason);
  }

  function callbackify(original) {
    if (typeof original !== 'function') {
      throw new TypeError('The "original" argument must be of type Function');
    }

    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
      var args = [];
      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }

      var maybeCb = args.pop();
      if (typeof maybeCb !== 'function') {
        throw new TypeError('The last argument must be of type Function');
      }
      var self = this;
      var cb = function() {
        return maybeCb.apply(self, arguments);
      };
      // In true node style we process the callback on `nextTick` with all the
      // implications (stack, `uncaughtException`, `async_hooks`)
      original.apply(this, args)
        .then(function(ret) { nextTick(cb, null, ret); },
              function(rej) { nextTick(callbackifyOnRejected, rej, cb); });
    }

    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified,
                            getOwnPropertyDescriptors(original));
    return callbackified;
  }
  exports.callbackify = callbackify;
  });
  var util_1 = util.format;
  var util_2 = util.deprecate;
  var util_3 = util.debuglog;
  var util_4 = util.inspect;
  var util_5 = util.isArray;
  var util_6 = util.isBoolean;
  var util_7 = util.isNull;
  var util_8 = util.isNullOrUndefined;
  var util_9 = util.isNumber;
  var util_10 = util.isString;
  var util_11 = util.isSymbol;
  var util_12 = util.isUndefined;
  var util_13 = util.isRegExp;
  var util_14 = util.isObject;
  var util_15 = util.isDate;
  var util_16 = util.isError;
  var util_17 = util.isFunction;
  var util_18 = util.isPrimitive;
  var util_19 = util.isBuffer;
  var util_20 = util.log;
  var util_21 = util.inherits;
  var util_22 = util._extend;
  var util_23 = util.promisify;
  var util_24 = util.callbackify;



  var os = /*#__PURE__*/Object.freeze({

  });

  var hasFlag = function (flag, argv) {
  	argv = argv || process.argv;

  	var terminatorPos = argv.indexOf('--');
  	var prefix = /^-{1,2}/.test(flag) ? '' : '--';
  	var pos = argv.indexOf(prefix + flag);

  	return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
  };

  getCjsExportFromNamespace(os);

  const env$1 = process.env;

  const support = level => {
  	if (level === 0) {
  		return false;
  	}

  	return {
  		level,
  		hasBasic: true,
  		has256: level >= 2,
  		has16m: level >= 3
  	};
  };

  let supportLevel = (() => {
  	if (hasFlag('no-color') ||
  		hasFlag('no-colors') ||
  		hasFlag('color=false')) {
  		return 0;
  	}

  	if (hasFlag('color=16m') ||
  		hasFlag('color=full') ||
  		hasFlag('color=truecolor')) {
  		return 3;
  	}

  	if (hasFlag('color=256')) {
  		return 2;
  	}

  	if (hasFlag('color') ||
  		hasFlag('colors') ||
  		hasFlag('color=true') ||
  		hasFlag('color=always')) {
  		return 1;
  	}

  	if ('CI' in env$1) {
  		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env$1) || env$1.CI_NAME === 'codeship') {
  			return 1;
  		}

  		return 0;
  	}

  	if ('TEAMCITY_VERSION' in env$1) {
  		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;
  	}

  	if ('TERM_PROGRAM' in env$1) {
  		const version = parseInt((env$1.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

  		switch (env$1.TERM_PROGRAM) {
  			case 'iTerm.app':
  				return version >= 3 ? 3 : 2;
  			case 'Hyper':
  				return 3;
  			case 'Apple_Terminal':
  				return 2;
  			// No default
  		}
  	}

  	if (/-256(color)?$/i.test(env$1.TERM)) {
  		return 2;
  	}

  	if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {
  		return 1;
  	}

  	if ('COLORTERM' in env$1) {
  		return 1;
  	}

  	if (env$1.TERM === 'dumb') {
  		return 0;
  	}

  	return 0;
  })();

  if ('FORCE_COLOR' in env$1) {
  	supportLevel = parseInt(env$1.FORCE_COLOR, 10) === 0 ? 0 : (supportLevel || 1);
  }

  var supportsColor = process && support(supportLevel);

  var tty$1 = getCjsExportFromNamespace(tty);

  var node = createCommonjsModule(function (module, exports) {

  /**
   * Module dependencies.
   */



  /**
   * This is the Node.js implementation of `debug()`.
   */


  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  /**
   * Colors.
   */

  exports.colors = [6, 2, 3, 4, 5, 1];

  try {
    // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    // eslint-disable-next-line import/no-extraneous-dependencies
    var supportsColor$1 = supportsColor;

    if (supportsColor$1 && (supportsColor$1.stderr || supportsColor$1).level >= 2) {
      exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
    }
  } catch (error) {} // Swallow - we only care if `supports-color` is available; it doesn't have to be.

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */


  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    // Camel-case
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
      return k.toUpperCase();
    }); // Coerce string value into JS value

    var val = process.env[key];

    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === 'null') {
      val = null;
    } else {
      val = Number(val);
    }

    obj[prop] = val;
    return obj;
  }, {});
  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty$1.isatty(process.stderr.fd);
  }
  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */


  function formatArgs(args) {
    var name = this.namespace,
        useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var colorCode = "\x1B[3" + (c < 8 ? c : '8;5;' + c);
      var prefix = "  ".concat(colorCode, ";1m").concat(name, " \x1B[0m");
      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = getDate() + name + ' ' + args[0];
    }
  }

  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return '';
    }

    return new Date().toISOString() + ' ';
  }
  /**
   * Invokes `util.format()` with the specified arguments and writes to stderr.
   */


  function log() {
    return process.stderr.write(util.format.apply(util, arguments) + '\n');
  }
  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */


  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG;
    }
  }
  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */


  function load() {
    return process.env.DEBUG;
  }
  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */


  function init(debug) {
    debug.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);

    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  module.exports = common(exports);
  var formatters = module.exports.formatters;
  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  formatters.o = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).replace(/\s*\n\s*/g, ' ');
  };
  /**
   * Map %O to `util.inspect()`, allowing multiple lines if needed.
   */


  formatters.O = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  });
  var node_1 = node.init;
  var node_2 = node.log;
  var node_3 = node.formatArgs;
  var node_4 = node.save;
  var node_5 = node.load;
  var node_6 = node.useColors;
  var node_7 = node.colors;
  var node_8 = node.inspectOpts;

  var src = createCommonjsModule(function (module) {

  /**
   * Detect Electron renderer / nwjs process, which is node, but we should
   * treat as a browser.
   */
  if (typeof process === 'undefined' || process.type === 'renderer' || browser$1 === true || process.__nwjs) {
    module.exports = browser$2;
  } else {
    module.exports = node;
  }
  });

  var HalfEdge_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _distance2 = _interopRequireDefault(distance_1);



  var _squaredDistance2 = _interopRequireDefault(squaredDistance_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var debug = src('halfedge');

  var HalfEdge = function () {
    function HalfEdge(vertex, face) {
      _classCallCheck(this, HalfEdge);

      this.vertex = vertex;
      this.face = face;
      this.next = null;
      this.prev = null;
      this.opposite = null;
    }

    _createClass(HalfEdge, [{
      key: 'head',
      value: function head() {
        return this.vertex;
      }
    }, {
      key: 'tail',
      value: function tail() {
        return this.prev ? this.prev.vertex : null;
      }
    }, {
      key: 'length',
      value: function length() {
        if (this.tail()) {
          return (0, _distance2.default)(this.tail().point, this.head().point);
        }
        return -1;
      }
    }, {
      key: 'lengthSquared',
      value: function lengthSquared() {
        if (this.tail()) {
          return (0, _squaredDistance2.default)(this.tail().point, this.head().point);
        }
        return -1;
      }
    }, {
      key: 'setOpposite',
      value: function setOpposite(edge) {
        var me = this;
        if (debug.enabled) {
          debug('opposite ' + me.tail().index + ' <--> ' + me.head().index + ' between ' + me.face.collectIndices() + ', ' + edge.face.collectIndices());
        }
        this.opposite = edge;
        edge.opposite = this;
      }
    }]);

    return HalfEdge;
  }();

  exports.default = HalfEdge;
  module.exports = exports['default'];
  });

  unwrapExports(HalfEdge_1);

  var Face_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DELETED = exports.NON_CONVEX = exports.VISIBLE = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _dot2 = _interopRequireDefault(dot_1);



  var _add2 = _interopRequireDefault(add_1);



  var _subtract2 = _interopRequireDefault(subtract_1);



  var _cross2 = _interopRequireDefault(cross_1);



  var _copy2 = _interopRequireDefault(copy_1);



  var _length2 = _interopRequireDefault(length_1);



  var _scale2 = _interopRequireDefault(scale_1);



  var _scaleAndAdd2 = _interopRequireDefault(scaleAndAdd_1);



  var _normalize2 = _interopRequireDefault(normalize_1);



  var _HalfEdge2 = _interopRequireDefault(HalfEdge_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var debug = src('face');

  var VISIBLE = exports.VISIBLE = 0;
  var NON_CONVEX = exports.NON_CONVEX = 1;
  var DELETED = exports.DELETED = 2;

  var Face = function () {
    function Face() {
      _classCallCheck(this, Face);

      this.normal = [];
      this.centroid = [];
      // signed distance from face to the origin
      this.offset = 0;
      // pointer to the a vertex in a double linked list this face can see
      this.outside = null;
      this.mark = VISIBLE;
      this.edge = null;
      this.nVertices = 0;
    }

    _createClass(Face, [{
      key: 'getEdge',
      value: function getEdge(i) {
        if (typeof i !== 'number') {
          throw Error('requires a number');
        }
        var it = this.edge;
        while (i > 0) {
          it = it.next;
          i -= 1;
        }
        while (i < 0) {
          it = it.prev;
          i += 1;
        }
        return it;
      }
    }, {
      key: 'computeNormal',
      value: function computeNormal() {
        var e0 = this.edge;
        var e1 = e0.next;
        var e2 = e1.next;
        var v2 = (0, _subtract2.default)([], e1.head().point, e0.head().point);
        var t = [];
        var v1 = [];

        this.nVertices = 2;
        this.normal = [0, 0, 0];
        while (e2 !== e0) {
          (0, _copy2.default)(v1, v2);
          (0, _subtract2.default)(v2, e2.head().point, e0.head().point);
          (0, _add2.default)(this.normal, this.normal, (0, _cross2.default)(t, v1, v2));
          e2 = e2.next;
          this.nVertices += 1;
        }
        this.area = (0, _length2.default)(this.normal);
        // normalize the vector, since we've already calculated the area
        // it's cheaper to scale the vector using this quantity instead of
        // doing the same operation again
        this.normal = (0, _scale2.default)(this.normal, this.normal, 1 / this.area);
      }
    }, {
      key: 'computeNormalMinArea',
      value: function computeNormalMinArea(minArea) {
        this.computeNormal();
        if (this.area < minArea) {
          // compute the normal without the longest edge
          var maxEdge = void 0;
          var maxSquaredLength = 0;
          var edge = this.edge;

          // find the longest edge (in length) in the chain of edges
          do {
            var lengthSquared = edge.lengthSquared();
            if (lengthSquared > maxSquaredLength) {
              maxEdge = edge;
              maxSquaredLength = lengthSquared;
            }
            edge = edge.next;
          } while (edge !== this.edge);

          var p1 = maxEdge.tail().point;
          var p2 = maxEdge.head().point;
          var maxVector = (0, _subtract2.default)([], p2, p1);
          var maxLength = Math.sqrt(maxSquaredLength);
          // maxVector is normalized after this operation
          (0, _scale2.default)(maxVector, maxVector, 1 / maxLength);
          // compute the projection of maxVector over this face normal
          var maxProjection = (0, _dot2.default)(this.normal, maxVector);
          // subtract the quantity maxEdge adds on the normal
          (0, _scaleAndAdd2.default)(this.normal, this.normal, maxVector, -maxProjection);
          // renormalize `this.normal`
          (0, _normalize2.default)(this.normal, this.normal);
        }
      }
    }, {
      key: 'computeCentroid',
      value: function computeCentroid() {
        this.centroid = [0, 0, 0];
        var edge = this.edge;
        do {
          (0, _add2.default)(this.centroid, this.centroid, edge.head().point);
          edge = edge.next;
        } while (edge !== this.edge);
        (0, _scale2.default)(this.centroid, this.centroid, 1 / this.nVertices);
      }
    }, {
      key: 'computeNormalAndCentroid',
      value: function computeNormalAndCentroid(minArea) {
        if (typeof minArea !== 'undefined') {
          this.computeNormalMinArea(minArea);
        } else {
          this.computeNormal();
        }
        this.computeCentroid();
        this.offset = (0, _dot2.default)(this.normal, this.centroid);
      }
    }, {
      key: 'distanceToPlane',
      value: function distanceToPlane(point) {
        return (0, _dot2.default)(this.normal, point) - this.offset;
      }

      /**
       * @private
       *
       * Connects two edges assuming that prev.head().point === next.tail().point
       *
       * @param {HalfEdge} prev
       * @param {HalfEdge} next
       */

    }, {
      key: 'connectHalfEdges',
      value: function connectHalfEdges(prev, next) {
        var discardedFace = void 0;
        if (prev.opposite.face === next.opposite.face) {
          // `prev` is remove a redundant edge
          var oppositeFace = next.opposite.face;
          var oppositeEdge = void 0;
          if (prev === this.edge) {
            this.edge = next;
          }
          if (oppositeFace.nVertices === 3) {
            // case:
            // remove the face on the right
            //
            //       /|\
            //      / | \ the face on the right
            //     /  |  \ --> opposite edge
            //    / a |   \
            //   *----*----*
            //  /     b  |  \
            //           ▾
            //      redundant edge
            //
            // Note: the opposite edge is actually in the face to the right
            // of the face to be destroyed
            oppositeEdge = next.opposite.prev.opposite;
            oppositeFace.mark = DELETED;
            discardedFace = oppositeFace;
          } else {
            // case:
            //          t
            //        *----
            //       /| <- right face's redundant edge
            //      / | opposite edge
            //     /  |  ▴   /
            //    / a |  |  /
            //   *----*----*
            //  /     b  |  \
            //           ▾
            //      redundant edge
            oppositeEdge = next.opposite.next;
            // make sure that the link `oppositeFace.edge` points correctly even
            // after the right face redundant edge is removed
            if (oppositeFace.edge === oppositeEdge.prev) {
              oppositeFace.edge = oppositeEdge;
            }

            //       /|   /
            //      / | t/opposite edge
            //     /  | / ▴  /
            //    / a |/  | /
            //   *----*----*
            //  /     b     \
            oppositeEdge.prev = oppositeEdge.prev.prev;
            oppositeEdge.prev.next = oppositeEdge;
          }
          //       /|
          //      / |
          //     /  |
          //    / a |
          //   *----*----*
          //  /     b  ▴  \
          //           |
          //     redundant edge
          next.prev = prev.prev;
          next.prev.next = next;

          //       / \  \
          //      /   \->\
          //     /     \<-\ opposite edge
          //    / a     \  \
          //   *----*----*
          //  /     b  ^  \
          next.setOpposite(oppositeEdge);

          oppositeFace.computeNormalAndCentroid();
        } else {
          // trivial case
          //        *
          //       /|\
          //      / | \
          //     /  |--> next
          //    / a |   \
          //   *----*----*
          //    \ b |   /
          //     \  |--> prev
          //      \ | /
          //       \|/
          //        *
          prev.next = next;
          next.prev = prev;
        }
        return discardedFace;
      }
    }, {
      key: 'mergeAdjacentFaces',
      value: function mergeAdjacentFaces(adjacentEdge, discardedFaces) {
        var oppositeEdge = adjacentEdge.opposite;
        var oppositeFace = oppositeEdge.face;

        discardedFaces.push(oppositeFace);
        oppositeFace.mark = DELETED;

        // find the chain of edges whose opposite face is `oppositeFace`
        //
        //                ===>
        //      \         face         /
        //       * ---- * ---- * ---- *
        //      /     opposite face    \
        //                <===
        //
        var adjacentEdgePrev = adjacentEdge.prev;
        var adjacentEdgeNext = adjacentEdge.next;
        var oppositeEdgePrev = oppositeEdge.prev;
        var oppositeEdgeNext = oppositeEdge.next;

        // left edge
        while (adjacentEdgePrev.opposite.face === oppositeFace) {
          adjacentEdgePrev = adjacentEdgePrev.prev;
          oppositeEdgeNext = oppositeEdgeNext.next;
        }
        // right edge
        while (adjacentEdgeNext.opposite.face === oppositeFace) {
          adjacentEdgeNext = adjacentEdgeNext.next;
          oppositeEdgePrev = oppositeEdgePrev.prev;
        }
        // adjacentEdgePrev  \         face         / adjacentEdgeNext
        //                    * ---- * ---- * ---- *
        // oppositeEdgeNext  /     opposite face    \ oppositeEdgePrev

        // fix the face reference of all the opposite edges that are not part of
        // the edges whose opposite face is not `face` i.e. all the edges that
        // `face` and `oppositeFace` do not have in common
        var edge = void 0;
        for (edge = oppositeEdgeNext; edge !== oppositeEdgePrev.next; edge = edge.next) {
          edge.face = this;
        }

        // make sure that `face.edge` is not one of the edges to be destroyed
        // Note: it's important for it to be a `next` edge since `prev` edges
        // might be destroyed on `connectHalfEdges`
        this.edge = adjacentEdgeNext;

        // connect the extremes
        // Note: it might be possible that after connecting the edges a triangular
        // face might be redundant
        var discardedFace = void 0;
        discardedFace = this.connectHalfEdges(oppositeEdgePrev, adjacentEdgeNext);
        if (discardedFace) {
          discardedFaces.push(discardedFace);
        }
        discardedFace = this.connectHalfEdges(adjacentEdgePrev, oppositeEdgeNext);
        if (discardedFace) {
          discardedFaces.push(discardedFace);
        }

        this.computeNormalAndCentroid();
        // TODO: additional consistency checks
        return discardedFaces;
      }
    }, {
      key: 'collectIndices',
      value: function collectIndices() {
        var indices = [];
        var edge = this.edge;
        do {
          indices.push(edge.head().index);
          edge = edge.next;
        } while (edge !== this.edge);
        return indices;
      }
    }], [{
      key: 'createTriangle',
      value: function createTriangle(v0, v1, v2) {
        var minArea = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        var face = new Face();
        var e0 = new _HalfEdge2.default(v0, face);
        var e1 = new _HalfEdge2.default(v1, face);
        var e2 = new _HalfEdge2.default(v2, face);

        // join edges
        e0.next = e2.prev = e1;
        e1.next = e0.prev = e2;
        e2.next = e1.prev = e0;

        // main half edge reference
        face.edge = e0;
        face.computeNormalAndCentroid(minArea);
        if (debug.enabled) {
          debug('face created %j', face.collectIndices());
        }
        return face;
      }
    }]);

    return Face;
  }();

  exports.default = Face;
  });

  unwrapExports(Face_1);
  var Face_2 = Face_1.DELETED;
  var Face_3 = Face_1.NON_CONVEX;
  var Face_4 = Face_1.VISIBLE;

  var QuickHull_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



  var _pointLineDistance2 = _interopRequireDefault(pointLineDistance);



  var _getPlaneNormal2 = _interopRequireDefault(getPlaneNormal);



  var _dot2 = _interopRequireDefault(dot_1);



  var _VertexList2 = _interopRequireDefault(VertexList_1);



  var _Vertex2 = _interopRequireDefault(Vertex_1);



  var _Face2 = _interopRequireDefault(Face_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var debug = src('quickhull');

  // merge types
  // non convex with respect to the large face
  var MERGE_NON_CONVEX_WRT_LARGER_FACE = 1;
  var MERGE_NON_CONVEX = 2;

  var QuickHull = function () {
    function QuickHull(points) {
      _classCallCheck(this, QuickHull);

      if (!Array.isArray(points)) {
        throw TypeError('input is not a valid array');
      }
      if (points.length < 4) {
        throw Error('cannot build a simplex out of <4 points');
      }

      this.tolerance = -1;

      // buffers
      this.nFaces = 0;
      this.nPoints = points.length;

      this.faces = [];
      this.newFaces = [];
      // helpers
      //
      // let `a`, `b` be `Face` instances
      // let `v` be points wrapped as instance of `Vertex`
      //
      //     [v, v, ..., v, v, v, ...]
      //      ^             ^
      //      |             |
      //  a.outside     b.outside
      //
      this.claimed = new _VertexList2.default();
      this.unclaimed = new _VertexList2.default();

      // vertices of the hull(internal representation of points)
      this.vertices = [];
      for (var i = 0; i < points.length; i += 1) {
        this.vertices.push(new _Vertex2.default(points[i], i));
      }
      this.discardedFaces = [];
      this.vertexPointIndices = [];
    }

    _createClass(QuickHull, [{
      key: 'addVertexToFace',
      value: function addVertexToFace(vertex, face) {
        vertex.face = face;
        if (!face.outside) {
          this.claimed.add(vertex);
        } else {
          this.claimed.insertBefore(face.outside, vertex);
        }
        face.outside = vertex;
      }

      /**
       * Removes `vertex` for the `claimed` list of vertices, it also makes sure
       * that the link from `face` to the first vertex it sees in `claimed` is
       * linked correctly after the removal
       *
       * @param {Vertex} vertex
       * @param {Face} face
       */

    }, {
      key: 'removeVertexFromFace',
      value: function removeVertexFromFace(vertex, face) {
        if (vertex === face.outside) {
          // fix face.outside link
          if (vertex.next && vertex.next.face === face) {
            // face has at least 2 outside vertices, move the `outside` reference
            face.outside = vertex.next;
          } else {
            // vertex was the only outside vertex that face had
            face.outside = null;
          }
        }
        this.claimed.remove(vertex);
      }

      /**
       * Removes all the visible vertices that `face` is able to see which are
       * stored in the `claimed` vertext list
       *
       * @param {Face} face
       * @return {Vertex|undefined} If face had visible vertices returns
       * `face.outside`, otherwise undefined
       */

    }, {
      key: 'removeAllVerticesFromFace',
      value: function removeAllVerticesFromFace(face) {
        if (face.outside) {
          // pointer to the last vertex of this face
          // [..., outside, ..., end, outside, ...]
          //          |           |      |
          //          a           a      b
          var end = face.outside;
          while (end.next && end.next.face === face) {
            end = end.next;
          }
          this.claimed.removeChain(face.outside, end);
          //                            b
          //                       [ outside, ...]
          //                            |  removes this link
          //     [ outside, ..., end ] -┘
          //          |           |
          //          a           a
          end.next = null;
          return face.outside;
        }
      }

      /**
       * Removes all the visible vertices that `face` is able to see, additionally
       * checking the following:
       *
       * If `absorbingFace` doesn't exist then all the removed vertices will be
       * added to the `unclaimed` vertex list
       *
       * If `absorbingFace` exists then this method will assign all the vertices of
       * `face` that can see `absorbingFace`, if a vertex cannot see `absorbingFace`
       * it's added to the `unclaimed` vertex list
       *
       * @param {Face} face
       * @param {Face} [absorbingFace]
       */

    }, {
      key: 'deleteFaceVertices',
      value: function deleteFaceVertices(face, absorbingFace) {
        var faceVertices = this.removeAllVerticesFromFace(face);
        if (faceVertices) {
          if (!absorbingFace) {
            // mark the vertices to be reassigned to some other face
            this.unclaimed.addAll(faceVertices);
          } else {
            // if there's an absorbing face try to assign as many vertices
            // as possible to it

            // the reference `vertex.next` might be destroyed on
            // `this.addVertexToFace` (see VertexList#add), nextVertex is a
            // reference to it
            var nextVertex = void 0;
            for (var vertex = faceVertices; vertex; vertex = nextVertex) {
              nextVertex = vertex.next;
              var distance = absorbingFace.distanceToPlane(vertex.point);

              // check if `vertex` is able to see `absorbingFace`
              if (distance > this.tolerance) {
                this.addVertexToFace(vertex, absorbingFace);
              } else {
                this.unclaimed.add(vertex);
              }
            }
          }
        }
      }

      /**
       * Reassigns as many vertices as possible from the unclaimed list to the new
       * faces
       *
       * @param {Faces[]} newFaces
       */

    }, {
      key: 'resolveUnclaimedPoints',
      value: function resolveUnclaimedPoints(newFaces) {
        // cache next vertex so that if `vertex.next` is destroyed it's still
        // recoverable
        var vertexNext = this.unclaimed.first();
        for (var vertex = vertexNext; vertex; vertex = vertexNext) {
          vertexNext = vertex.next;
          var maxDistance = this.tolerance;
          var maxFace = void 0;
          for (var i = 0; i < newFaces.length; i += 1) {
            var face = newFaces[i];
            if (face.mark === Face_1.VISIBLE) {
              var dist = face.distanceToPlane(vertex.point);
              if (dist > maxDistance) {
                maxDistance = dist;
                maxFace = face;
              }
              if (maxDistance > 1000 * this.tolerance) {
                break;
              }
            }
          }

          if (maxFace) {
            this.addVertexToFace(vertex, maxFace);
          }
        }
      }

      /**
       * Computes the extremes of a tetrahedron which will be the initial hull
       *
       * @return {number[]} The min/max vertices in the x,y,z directions
       */

    }, {
      key: 'computeExtremes',
      value: function computeExtremes() {
        var me = this;
        var min = [];
        var max = [];

        // min vertex on the x,y,z directions
        var minVertices = [];
        // max vertex on the x,y,z directions
        var maxVertices = [];

        var i = void 0,
            j = void 0;

        // initially assume that the first vertex is the min/max
        for (i = 0; i < 3; i += 1) {
          minVertices[i] = maxVertices[i] = this.vertices[0];
        }
        // copy the coordinates of the first vertex to min/max
        for (i = 0; i < 3; i += 1) {
          min[i] = max[i] = this.vertices[0].point[i];
        }

        // compute the min/max vertex on all 6 directions
        for (i = 1; i < this.vertices.length; i += 1) {
          var vertex = this.vertices[i];
          var point = vertex.point;
          // update the min coordinates
          for (j = 0; j < 3; j += 1) {
            if (point[j] < min[j]) {
              min[j] = point[j];
              minVertices[j] = vertex;
            }
          }
          // update the max coordinates
          for (j = 0; j < 3; j += 1) {
            if (point[j] > max[j]) {
              max[j] = point[j];
              maxVertices[j] = vertex;
            }
          }
        }

        // compute epsilon
        this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min[0]), Math.abs(max[0])) + Math.max(Math.abs(min[1]), Math.abs(max[1])) + Math.max(Math.abs(min[2]), Math.abs(max[2])));
        if (debug.enabled) {
          debug('tolerance %d', me.tolerance);
        }
        return [minVertices, maxVertices];
      }

      /**
       * Compues the initial tetrahedron assigning to its faces all the points that
       * are candidates to form part of the hull
       */

    }, {
      key: 'createInitialSimplex',
      value: function createInitialSimplex() {
        var vertices = this.vertices;

        var _computeExtremes = this.computeExtremes(),
            _computeExtremes2 = _slicedToArray(_computeExtremes, 2),
            min = _computeExtremes2[0],
            max = _computeExtremes2[1];

        var v0 = void 0,
            v1 = void 0,
            v2 = void 0,
            v3 = void 0;
        var i = void 0,
            j = void 0;

        // Find the two vertices with the greatest 1d separation
        // (max.x - min.x)
        // (max.y - min.y)
        // (max.z - min.z)
        var maxDistance = 0;
        var indexMax = 0;
        for (i = 0; i < 3; i += 1) {
          var distance = max[i].point[i] - min[i].point[i];
          if (distance > maxDistance) {
            maxDistance = distance;
            indexMax = i;
          }
        }
        v0 = min[indexMax];
        v1 = max[indexMax];

        // the next vertex is the one farthest to the line formed by `v0` and `v1`
        maxDistance = 0;
        for (i = 0; i < this.vertices.length; i += 1) {
          var vertex = this.vertices[i];
          if (vertex !== v0 && vertex !== v1) {
            var _distance = (0, _pointLineDistance2.default)(vertex.point, v0.point, v1.point);
            if (_distance > maxDistance) {
              maxDistance = _distance;
              v2 = vertex;
            }
          }
        }

        // the next vertes is the one farthest to the plane `v0`, `v1`, `v2`
        // normalize((v2 - v1) x (v0 - v1))
        var normal = (0, _getPlaneNormal2.default)([], v0.point, v1.point, v2.point);
        // distance from the origin to the plane
        var distPO = (0, _dot2.default)(v0.point, normal);
        maxDistance = -1;
        for (i = 0; i < this.vertices.length; i += 1) {
          var _vertex = this.vertices[i];
          if (_vertex !== v0 && _vertex !== v1 && _vertex !== v2) {
            var _distance2 = Math.abs((0, _dot2.default)(normal, _vertex.point) - distPO);
            if (_distance2 > maxDistance) {
              maxDistance = _distance2;
              v3 = _vertex;
            }
          }
        }

        // initial simplex
        // Taken from http://everything2.com/title/How+to+paint+a+tetrahedron
        //
        //                              v2
        //                             ,|,
        //                           ,7``\'VA,
        //                         ,7`   |, `'VA,
        //                       ,7`     `\    `'VA,
        //                     ,7`        |,      `'VA,
        //                   ,7`          `\         `'VA,
        //                 ,7`             |,           `'VA,
        //               ,7`               `\       ,..ooOOTK` v3
        //             ,7`                  |,.ooOOT''`    AV
        //           ,7`            ,..ooOOT`\`           /7
        //         ,7`      ,..ooOOT''`      |,          AV
        //        ,T,..ooOOT''`              `\         /7
        //     v0 `'TTs.,                     |,       AV
        //            `'TTs.,                 `\      /7
        //                 `'TTs.,             |,    AV
        //                      `'TTs.,        `\   /7
        //                           `'TTs.,    |, AV
        //                                `'TTs.,\/7
        //                                     `'T`
        //                                       v1
        //
        var faces = [];
        if ((0, _dot2.default)(v3.point, normal) - distPO < 0) {
          // the face is not able to see the point so `planeNormal`
          // is pointing outside the tetrahedron
          faces.push(_Face2.default.createTriangle(v0, v1, v2), _Face2.default.createTriangle(v3, v1, v0), _Face2.default.createTriangle(v3, v2, v1), _Face2.default.createTriangle(v3, v0, v2));

          // set the opposite edge
          for (i = 0; i < 3; i += 1) {
            var _j = (i + 1) % 3;
            // join face[i] i > 0, with the first face
            faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge(_j));
            // join face[i] with face[i + 1], 1 <= i <= 3
            faces[i + 1].getEdge(1).setOpposite(faces[_j + 1].getEdge(0));
          }
        } else {
          // the face is able to see the point so `planeNormal`
          // is pointing inside the tetrahedron
          faces.push(_Face2.default.createTriangle(v0, v2, v1), _Face2.default.createTriangle(v3, v0, v1), _Face2.default.createTriangle(v3, v1, v2), _Face2.default.createTriangle(v3, v2, v0));

          // set the opposite edge
          for (i = 0; i < 3; i += 1) {
            var _j2 = (i + 1) % 3;
            // join face[i] i > 0, with the first face
            faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge((3 - i) % 3));
            // join face[i] with face[i + 1]
            faces[i + 1].getEdge(0).setOpposite(faces[_j2 + 1].getEdge(1));
          }
        }

        // the initial hull is the tetrahedron
        for (i = 0; i < 4; i += 1) {
          this.faces.push(faces[i]);
        }

        // initial assignment of vertices to the faces of the tetrahedron
        for (i = 0; i < vertices.length; i += 1) {
          var _vertex2 = vertices[i];
          if (_vertex2 !== v0 && _vertex2 !== v1 && _vertex2 !== v2 && _vertex2 !== v3) {
            maxDistance = this.tolerance;
            var maxFace = void 0;
            for (j = 0; j < 4; j += 1) {
              var _distance3 = faces[j].distanceToPlane(_vertex2.point);
              if (_distance3 > maxDistance) {
                maxDistance = _distance3;
                maxFace = faces[j];
              }
            }

            if (maxFace) {
              this.addVertexToFace(_vertex2, maxFace);
            }
          }
        }
      }
    }, {
      key: 'reindexFaceAndVertices',
      value: function reindexFaceAndVertices() {
        // remove inactive faces
        var activeFaces = [];
        for (var i = 0; i < this.faces.length; i += 1) {
          var face = this.faces[i];
          if (face.mark === Face_1.VISIBLE) {
            activeFaces.push(face);
          }
        }
        this.faces = activeFaces;
      }
    }, {
      key: 'collectFaces',
      value: function collectFaces(skipTriangulation) {
        var faceIndices = [];
        for (var i = 0; i < this.faces.length; i += 1) {
          if (this.faces[i].mark !== Face_1.VISIBLE) {
            throw Error('attempt to include a destroyed face in the hull');
          }
          var indices = this.faces[i].collectIndices();
          if (skipTriangulation) {
            faceIndices.push(indices);
          } else {
            for (var j = 0; j < indices.length - 2; j += 1) {
              faceIndices.push([indices[0], indices[j + 1], indices[j + 2]]);
            }
          }
        }
        return faceIndices;
      }

      /**
       * Finds the next vertex to make faces with the current hull
       *
       * - let `face` be the first face existing in the `claimed` vertex list
       *  - if `face` doesn't exist then return since there're no vertices left
       *  - otherwise for each `vertex` that face sees find the one furthest away
       *  from `face`
       *
       * @return {Vertex|undefined} Returns undefined when there're no more
       * visible vertices
       */

    }, {
      key: 'nextVertexToAdd',
      value: function nextVertexToAdd() {
        if (!this.claimed.isEmpty()) {
          var eyeVertex = void 0,
              vertex = void 0;
          var maxDistance = 0;
          var eyeFace = this.claimed.first().face;
          for (vertex = eyeFace.outside; vertex && vertex.face === eyeFace; vertex = vertex.next) {
            var distance = eyeFace.distanceToPlane(vertex.point);
            if (distance > maxDistance) {
              maxDistance = distance;
              eyeVertex = vertex;
            }
          }
          return eyeVertex;
        }
      }

      /**
       * Computes a chain of half edges in ccw order called the `horizon`, for an
       * edge to be part of the horizon it must join a face that can see
       * `eyePoint` and a face that cannot see `eyePoint`
       *
       * @param {number[]} eyePoint - The coordinates of a point
       * @param {HalfEdge} crossEdge - The edge used to jump to the current `face`
       * @param {Face} face - The current face being tested
       * @param {HalfEdge[]} horizon - The edges that form part of the horizon in
       * ccw order
       */

    }, {
      key: 'computeHorizon',
      value: function computeHorizon(eyePoint, crossEdge, face, horizon) {
        // moves face's vertices to the `unclaimed` vertex list
        this.deleteFaceVertices(face);

        face.mark = Face_1.DELETED;

        var edge = void 0;
        if (!crossEdge) {
          edge = crossEdge = face.getEdge(0);
        } else {
          // start from the next edge since `crossEdge` was already analyzed
          // (actually `crossEdge.opposite` was the face who called this method
          // recursively)
          edge = crossEdge.next;
        }

        // All the faces that are able to see `eyeVertex` are defined as follows
        //
        //       v    /
        //           / <== visible face
        //          /
        //         |
        //         | <== not visible face
        //
        //  dot(v, visible face normal) - visible face offset > this.tolerance
        //
        do {
          var oppositeEdge = edge.opposite;
          var oppositeFace = oppositeEdge.face;
          if (oppositeFace.mark === Face_1.VISIBLE) {
            if (oppositeFace.distanceToPlane(eyePoint) > this.tolerance) {
              this.computeHorizon(eyePoint, oppositeEdge, oppositeFace, horizon);
            } else {
              horizon.push(edge);
            }
          }
          edge = edge.next;
        } while (edge !== crossEdge);
      }

      /**
       * Creates a face with the points `eyeVertex.point`, `horizonEdge.tail` and
       * `horizonEdge.tail` in ccw order
       *
       * @param {Vertex} eyeVertex
       * @param {HalfEdge} horizonEdge
       * @return {HalfEdge} The half edge whose vertex is the eyeVertex
       */

    }, {
      key: 'addAdjoiningFace',
      value: function addAdjoiningFace(eyeVertex, horizonEdge) {
        // all the half edges are created in ccw order thus the face is always
        // pointing outside the hull
        // edges:
        //
        //                  eyeVertex.point
        //                       / \
        //                      /   \
        //                  1  /     \  0
        //                    /       \
        //                   /         \
        //                  /           \
        //          horizon.tail --- horizon.head
        //                        2
        //
        var face = _Face2.default.createTriangle(eyeVertex, horizonEdge.tail(), horizonEdge.head());
        this.faces.push(face);
        // join face.getEdge(-1) with the horizon's opposite edge
        // face.getEdge(-1) = face.getEdge(2)
        face.getEdge(-1).setOpposite(horizonEdge.opposite);
        return face.getEdge(0);
      }

      /**
       * Adds horizon.length faces to the hull, each face will be 'linked' with the
       * horizon opposite face and the face on the left/right
       *
       * @param {Vertex} eyeVertex
       * @param {HalfEdge[]} horizon - A chain of half edges in ccw order
       */

    }, {
      key: 'addNewFaces',
      value: function addNewFaces(eyeVertex, horizon) {
        this.newFaces = [];
        var firstSideEdge = void 0,
            previousSideEdge = void 0;
        for (var i = 0; i < horizon.length; i += 1) {
          var horizonEdge = horizon[i];
          // returns the right side edge
          var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);
          if (!firstSideEdge) {
            firstSideEdge = sideEdge;
          } else {
            // joins face.getEdge(1) with previousFace.getEdge(0)
            sideEdge.next.setOpposite(previousSideEdge);
          }
          this.newFaces.push(sideEdge.face);
          previousSideEdge = sideEdge;
        }
        firstSideEdge.next.setOpposite(previousSideEdge);
      }

      /**
       * Computes the distance from `edge` opposite face's centroid to
       * `edge.face`
       *
       * @param {HalfEdge} edge
       * @return {number}
       * - A positive number when the centroid of the opposite face is above the
       *   face i.e. when the faces are concave
       * - A negative number when the centroid of the opposite face is below the
       *   face i.e. when the faces are convex
       */

    }, {
      key: 'oppositeFaceDistance',
      value: function oppositeFaceDistance(edge) {
        return edge.face.distanceToPlane(edge.opposite.face.centroid);
      }

      /**
       * Merges a face with none/any/all its neighbors according to the strategy
       * used
       *
       * if `mergeType` is MERGE_NON_CONVEX_WRT_LARGER_FACE then the merge will be
       * decided based on the face with the larger area, the centroid of the face
       * with the smaller area will be checked against the one with the larger area
       * to see if it's in the merge range [tolerance, -tolerance] i.e.
       *
       *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance
       *
       * Note that the first check (with +tolerance) was done on `computeHorizon`
       *
       * If the above is not true then the check is done with respect to the smaller
       * face i.e.
       *
       *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance
       *
       * If true then it means that two faces are non convex (concave), even if the
       * dot(...) - offset value is > 0 (that's the point of doing the merge in the
       * first place)
       *
       * If two faces are concave then the check must also be done on the other face
       * but this is done in another merge pass, for this to happen the face is
       * marked in a temporal NON_CONVEX state
       *
       * if `mergeType` is MERGE_NON_CONVEX then two faces will be merged only if
       * they pass the following conditions
       *
       *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance
       *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance
       *
       * @param {Face} face
       * @param {number} mergeType - Either MERGE_NON_CONVEX_WRT_LARGER_FACE or
       * MERGE_NON_CONVEX
       */

    }, {
      key: 'doAdjacentMerge',
      value: function doAdjacentMerge(face, mergeType) {
        var edge = face.edge;
        var convex = true;
        var it = 0;
        do {
          if (it >= face.nVertices) {
            throw Error('merge recursion limit exceeded');
          }
          var oppositeFace = edge.opposite.face;
          var merge = false;

          // Important notes about the algorithm to merge faces
          //
          // - Given a vertex `eyeVertex` that will be added to the hull
          //   all the faces that cannot see `eyeVertex` are defined as follows
          //
          //      dot(v, not visible face normal) - not visible offset < tolerance
          //
          // - Two faces can be merged when the centroid of one of these faces
          // projected to the normal of the other face minus the other face offset
          // is in the range [tolerance, -tolerance]
          // - Since `face` (given in the input for this method) has passed the
          // check above we only have to check the lower bound e.g.
          //
          //      dot(v, not visible face normal) - not visible offset > -tolerance
          //
          if (mergeType === MERGE_NON_CONVEX) {
            if (this.oppositeFaceDistance(edge) > -this.tolerance || this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {
              merge = true;
            }
          } else {
            if (face.area > oppositeFace.area) {
              if (this.oppositeFaceDistance(edge) > -this.tolerance) {
                merge = true;
              } else if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {
                convex = false;
              }
            } else {
              if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {
                merge = true;
              } else if (this.oppositeFaceDistance(edge) > -this.tolerance) {
                convex = false;
              }
            }
          }

          if (merge) {
            debug('face merge');
            // when two faces are merged it might be possible that redundant faces
            // are destroyed, in that case move all the visible vertices from the
            // destroyed faces to the `unclaimed` vertex list
            var discardedFaces = face.mergeAdjacentFaces(edge, []);
            for (var i = 0; i < discardedFaces.length; i += 1) {
              this.deleteFaceVertices(discardedFaces[i], face);
            }
            return true;
          }

          edge = edge.next;
          it += 1;
        } while (edge !== face.edge);
        if (!convex) {
          face.mark = Face_1.NON_CONVEX;
        }
        return false;
      }

      /**
       * Adds a vertex to the hull with the following algorithm
       *
       * - Compute the `horizon` which is a chain of half edges, for an edge to
       *   belong to this group it must be the edge connecting a face that can
       *   see `eyeVertex` and a face which cannot see `eyeVertex`
       * - All the faces that can see `eyeVertex` have its visible vertices removed
       *   from the claimed VertexList
       * - A new set of faces is created with each edge of the `horizon` and
       *   `eyeVertex`, each face is connected with the opposite horizon face and
       *   the face on the left/right
       * - The new faces are merged if possible with the opposite horizon face first
       *   and then the faces on the right/left
       * - The vertices removed from all the visible faces are assigned to the new
       *   faces if possible
       *
       * @param {Vertex} eyeVertex
       */

    }, {
      key: 'addVertexToHull',
      value: function addVertexToHull(eyeVertex) {
        var horizon = [];

        this.unclaimed.clear();

        // remove `eyeVertex` from `eyeVertex.face` so that it can't be added to the
        // `unclaimed` vertex list
        this.removeVertexFromFace(eyeVertex, eyeVertex.face);
        this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);
        if (debug.enabled) {
          debug('horizon %j', horizon.map(function (edge) {
            return edge.head().index;
          }));
        }
        this.addNewFaces(eyeVertex, horizon);

        debug('first merge');

        // first merge pass
        // Do the merge with respect to the larger face
        for (var i = 0; i < this.newFaces.length; i += 1) {
          var face = this.newFaces[i];
          if (face.mark === Face_1.VISIBLE) {
            while (this.doAdjacentMerge(face, MERGE_NON_CONVEX_WRT_LARGER_FACE)) {}
          }
        }

        debug('second merge');

        // second merge pass
        // Do the merge on non convex faces (a face is marked as non convex in the
        // first pass)
        for (var _i = 0; _i < this.newFaces.length; _i += 1) {
          var _face = this.newFaces[_i];
          if (_face.mark === Face_1.NON_CONVEX) {
            _face.mark = Face_1.VISIBLE;
            while (this.doAdjacentMerge(_face, MERGE_NON_CONVEX)) {}
          }
        }

        debug('reassigning points to newFaces');
        // reassign `unclaimed` vertices to the new faces
        this.resolveUnclaimedPoints(this.newFaces);
      }
    }, {
      key: 'build',
      value: function build() {
        var iterations = 0;
        var eyeVertex = void 0;
        this.createInitialSimplex();
        while (eyeVertex = this.nextVertexToAdd()) {
          iterations += 1;
          debug('== iteration %j ==', iterations);
          debug('next vertex to add = %d %j', eyeVertex.index, eyeVertex.point);
          this.addVertexToHull(eyeVertex);
          debug('end');
        }
        this.reindexFaceAndVertices();
      }
    }]);

    return QuickHull;
  }();

  exports.default = QuickHull;
  module.exports = exports['default'];
  });

  var QuickHull = unwrapExports(QuickHull_1);

  const buildConvexHull = (options = {}, points) => {
    const hull = new QuickHull(points, { skipTriangulation: true });
    hull.build();
    return hull.collectFaces().map(polygon => polygon.map(nthPoint => points[nthPoint]));
  };

  const buildConvexMinkowskiSum = (options = {}, aPoints, bPoints) => {
    const summedPoints = [];
    for (const aPoint of aPoints) {
      for (const summedPoint of translate$2(aPoint, bPoints)) {
        summedPoints.push(summedPoint);
      }
    }
    return summedPoints;
  };

  const flip$3 = (points) => points;

  // Unit tetrahedron vertices.
  const points = [[1, 1, 1], [-1, 1, -1], [1, -1, -1],
                  [-1, 1, -1], [-1, -1, 1], [1, -1, -1],
                  [1, 1, 1], [1, -1, -1], [-1, -1, 1],
                  [1, 1, 1], [-1, -1, 1], [-1, 1, -1]];

  const buildRegularTetrahedron = (options = {}) => buildConvexHull({}, points);

  const canonicalize$4 = (paths) => {
    let canonicalized = paths.map(canonicalize$3);
    if (paths.properties !== undefined) {
      // Transfer properties.
      canonicalized.properties = paths.properties;
    }
    return canonicalized;
  };

  const difference = (pathset, ...pathsets) => { throw Error('Not implemented'); };

  const eachPoint$1 = (options = {}, thunk, paths) => {
    for (const path of paths) {
      for (const point of path) {
        if (point !== null) {
          thunk(point);
        }
      }
    }
  };

  const flip$4 = (paths) => paths.map(flip$2);

  const intersection = (...pathsets) => { throw Error('Not implemented'); };

  // returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)
  const measureBoundingBox$1 = (paths) => {
    let minPoint;
    let maxPoint;
    eachPoint$1({},
              point => {
                minPoint = (minPoint === undefined) ? fromPoint(point) : min(minPoint, fromPoint(point));
                maxPoint = (maxPoint === undefined) ? fromPoint(point) : max(maxPoint, fromPoint(point));
              },
              paths);
    return [minPoint, maxPoint];
  };

  /**
   * Transforms each path of Paths.
   *
   * @param {Paths} original - the Paths to transform.
   * @param {Function} [transform=identity] - function used to transform the paths.
   * @returns {Paths} the transformed paths.
   */

  const toPoints = (options = {}, paths) => {
    const points = [];
    eachPoint$1(options, point => points.push(point), paths);
    return points;
  };

  const transform$5 = (matrix, paths) => paths.map(path => transform$2(matrix, path));

  // FIX: Deduplication.

  const union = (...pathsets) => [].concat(...pathsets);

  const scale$3 = ([x = 1, y = 1, z = 1], paths) => transform$5(fromScaling([x, y, z]), paths);

  const buildRingSphere = ({ resolution = 20 }) => {
    const paths = [];
    // Trace out latitudinal rings.
    for (let slice = 0; slice <= resolution; slice++) {
      let angle = Math.PI * 2.0 * slice / resolution;
      let height = Math.sin(angle);
      let radius = Math.cos(angle);
      paths.push(translate([0, 0, height], scale$1([radius, radius, radius], buildRegularPolygon({ edges: resolution }))));
    }
    // Hull the rings to form a sphere.
    return buildConvexHull({}, toPoints({}, paths));
  };

  var cache = {
      '1': bezier1
    , '2': bezier2
    , '3': bezier3
    , '4': bezier4
  };

  var bezier = neat;
  var prepare_1 = prepare;

  function neat(arr, t) {
    return prepare(arr.length)(arr, t)
  }

  function prepare(pieces) {
    pieces = +pieces|0;
    if (!pieces) throw new Error('Cannot create a interpolator with no elements')
    if (cache[pieces]) return cache[pieces]

    var fn = ['var ut = 1 - t', ''];

    var n = pieces;
    while (n--) {
      for (var j = 0; j < n; j += 1) {
        if (n+1 === pieces) {
          fn.push('var p'+j+' = arr['+j+'] * ut + arr['+(j+1)+'] * t');
        } else
        if (n > 1) {
          fn.push('p'+j+' = p'+j+' * ut + p'+(j+1)+' * t');
        } else {
          fn.push('return p'+j+' * ut + p'+(j+1)+' * t');
        }
      }
      if (n > 1) fn.push('');
    }

    fn = [
      'return function bezier'+pieces+'(arr, t) {'
      , fn.map(function(s) { return '  ' + s }).join('\n')
      , '}'
    ].join('\n');

    return Function(fn)()
  }

  //
  // Including the first four degrees
  // manually - there's a slight performance penalty
  // to generated code. It's outweighed by
  // the gains of the optimisations, but always
  // helps to cover the most common cases :)
  //

  function bezier1(arr) {
    return arr[0]
  }

  function bezier2(arr, t) {
    return arr[0] + (arr[1] - arr[0]) * t
  }

  function bezier3(arr, t) {
    var ut = 1 - t;
    return (arr[0] * ut + arr[1] * t) * ut + (arr[1] * ut + arr[2] * t) * t
  }

  function bezier4(arr, t) {
    var ut = 1 - t;
    var a1 = arr[1] * ut + arr[2] * t;
    return ((arr[0] * ut + arr[1] * t) * ut + a1 * t) * ut + (a1 * ut + (arr[2] * ut + arr[3] * t) * t) * t
  }
  bezier.prepare = prepare_1;

  const interpolateCubicBezier = bezier.prepare(4);

  const sin = (a) => Math.sin(a / 360 * Math.PI * 2);

  const regularPolygonEdgeLengthToRadius = (length, edges) => length / (2 * sin(180 / edges));

  var max$1 = Math.max;
  var abs$1 = Math.abs;
  var pow = Math.pow;
  var sin$1 = Math.sin;
  var cos = Math.cos;
  var tan = Math.tan;
  var acos = Math.acos;
  var sqrt = Math.sqrt;
  var ceil = Math.ceil;
  var τ = Math.PI * 2;

  var arcToCurves = curves;

  function curves (px, py, cx, cy, rx, ry, xrot, large, sweep) {
    if (rx === 0 || ry === 0) return []

    xrot = xrot || 0;
    large = large || 0;
    sweep = sweep || 0;

    var sinphi = sin$1(xrot * τ / 360);
    var cosphi = cos(xrot * τ / 360);

    var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;
    var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;
    if (pxp === 0 && pyp === 0) return []

    rx = abs$1(rx);
    ry = abs$1(ry);

    var lambda = (
      pow(pxp, 2) / pow(rx, 2) +
      pow(pyp, 2) / pow(ry, 2)
    );

    if (lambda > 1) {
      rx *= sqrt(lambda);
      ry *= sqrt(lambda);
    }

    var centre = getArcCentre(px, py, cx, cy, rx, ry, large, sweep, sinphi, cosphi, pxp, pyp);
    var centrex = centre[0];
    var centrey = centre[1];
    var ang1 = centre[2];
    var ang2 = centre[3];

    var segments = max$1(ceil(abs$1(ang2) / (τ / 4)), 1);
    if (!segments) return []

    var curves = [];
    ang2 /= segments;
    while (segments--) {
      curves.push(approxUnitArc(ang1, ang2));
      ang1 += ang2;
    }

    var result = [];
    var curve, a, b, c;
    var i = 0, l = curves.length;

    while (i < l) {
      curve = curves[i++];
      a = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centrex, centrey);
      b = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centrex, centrey);
      c = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centrex, centrey);
      result[result.length] = [a[0], a[1], b[0], b[1], c[0], c[1]];
    }

    return result
  }

  function mapToEllipse (curve, rx, ry, cosphi, sinphi, centrex, centrey) {
    var x = curve[0] * rx;
    var y = curve[1] * ry;

    var xp = cosphi * x - sinphi * y;
    var yp = sinphi * x + cosphi * y;

    return [xp + centrex, yp + centrey]
  }

  function approxUnitArc (ang1, ang2) {
    var a = 4 / 3 * tan(ang2 / 4);

    var x1 = cos(ang1);
    var y1 = sin$1(ang1);
    var x2 = cos(ang1 + ang2);
    var y2 = sin$1(ang1 + ang2);

    return [
      [x1 - y1 * a, y1 + x1 * a ],
      [x2 + y2 * a, y2 - x2 * a],
      [x2, y2]
    ]
  }

  function getArcCentre (px, py, cx, cy, rx, ry, large, sweep, sinphi, cosphi, pxp, pyp) {
    var rxsq = pow(rx, 2);
    var rysq = pow(ry, 2);
    var pxpsq = pow(pxp, 2);
    var pypsq = pow(pyp, 2);

    var radicant = (rxsq * rysq) - (rxsq * pypsq) - (rysq * pxpsq);

    if (radicant < 0) radicant = 0;
    radicant /= (rxsq * pypsq) + (rysq * pxpsq);
    radicant = sqrt(radicant) * (large === sweep ? -1 : 1);

    var centrexp = radicant * rx / ry * pyp;
    var centreyp = radicant * -ry / rx * pxp;
    var centrex = cosphi * centrexp - sinphi * centreyp + (px + cx) / 2;
    var centrey = sinphi * centrexp + cosphi * centreyp + (py + cy) / 2;

    var vx1 = (pxp - centrexp) / rx;
    var vy1 = (pyp - centreyp) / ry;
    var vx2 = (-pxp - centrexp) / rx;
    var vy2 = (-pyp - centreyp) / ry;

    var ang1 = vectorAngle(1, 0, vx1, vy1);
    var ang2 = vectorAngle(vx1, vy1, vx2, vy2);

    if (sweep === 0 && ang2 > 0) ang2 -= τ;
    if (sweep === 1 && ang2 < 0) ang2 += τ;

    return [centrex, centrey, ang1, ang2]
  }

  function vectorAngle (ux, uy, vx, vy) {
    var sign = (ux * vy - uy * vx < 0) ? -1 : 1;
    var umag = sqrt(ux * ux + uy * uy);
    var vmag = sqrt(ux * ux + uy * uy);
    var dot = ux * vx + uy * vy;

    var div = dot / (umag * vmag);
    if (div > 1) div = 1;
    if (div < -1) div = -1;

    return sign * acos(div)
  }

  var curvifySvgPath = curvify;

  function curvify (path) {
    var result = [];
    var cmd, prev, curves;
    var x = 0, y = 0;
    var bx = 0, by = 0;
    var sx = 0, sy = 0;
    var qx, qy, cx, cy;
    var i = 0, j, m, sl;
    var l = path.length;

    while (i < l) {
      seg = path[i++], cmd = seg[0];

      if (cmd == 'M') sx = seg[1], sy = seg[2];
      else if (cmd == 'L') seg = line(x, y, seg[1], seg[2]);
      else if (cmd == 'H') seg = line(x, y, seg[1], y);
      else if (cmd == 'V') seg = line(x, y, x, seg[1]);
      else if (cmd == 'Z') seg = line(x, y, sx, sy);

      else if (cmd == 'A') {
        curves = arcToCurves(
          x, y, seg[6], seg[7],
          seg[1], seg[2], seg[3],
          seg[4], seg[5]
        );

        m = curves.length;
        if (!m) continue
        j = 0;

        while (j < m) {
          c = curves[j++];
          seg = ['C', c[0], c[1], c[2], c[3], c[4], c[5]];
          if (j < m) result[result.length] = seg;
        }
      }

      else if (cmd == 'S') {
        cx = x, cy = y;
        if (prev == 'C' || prev == 'S') {
          cx += cx - bx,
          cy += cy - by;
        }
        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]];
      }

      else if (cmd == 'T') {
        if (prev == 'Q' || prev == 'T') {
          qx = x * 2 - qx, qy = y * 2 - qy;
        }
        else qx = x, qy = y;
        seg = quadratic(x, y, qx, qy, seg[1], seg[2]);
      }

      else if (cmd == 'Q') {
        qx = seg[1], qy = seg[2];
        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4]);
      }

      sl = seg.length;
      x = seg[sl - 2], y = seg[sl - 1];
      if (sl > 4) bx = seg[sl - 4], by = seg[sl - 3];
      else bx = x, by = y;
      prev = cmd;

      result[result.length] = seg;
    }

    return result
  }

  function line (x1, y1, x2, y2) {
    return ['C', x1, y1, x2, y2, x2, y2]
  }

  function quadratic (x1, y1, cx, cy, x2, y2) {
    return ['C',
      x1 / 3 + (2 / 3) * cx, y1 / 3 + (2 / 3) * cy,
      x2 / 3 + (2 / 3) * cx, y2 / 3 + (2 / 3) * cy,
      x2, y2
    ]
  }

  var parseSvgPath = parse$2;

  /**
   * expected argument lengths
   * @type {Object}
   */

  var length$2 = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0};

  /**
   * segment pattern
   * @type {RegExp}
   */

  var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;

  /**
   * parse an svg path data string. Generates an Array
   * of commands where each command is an Array of the
   * form `[command, arg1, arg2, ...]`
   *
   * @param {String} path
   * @return {Array}
   */

  function parse$2(path) {
  	var data = [];
  	path.replace(segment, function(_, command, args){
  		var type = command.toLowerCase();
  		args = parseValues(args);

  		// overloaded moveTo
  		if (type == 'm' && args.length > 2) {
  			data.push([command].concat(args.splice(0, 2)));
  			type = 'l';
  			command = command == 'm' ? 'l' : 'L';
  		}

  		while (true) {
  			if (args.length == length$2[type]) {
  				args.unshift(command);
  				return data.push(args)
  			}
  			if (args.length < length$2[type]) throw new Error('malformed path data')
  			data.push([command].concat(args.splice(0, length$2[type])));
  		}
  	});
  	return data
  }

  var number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;

  function parseValues(args) {
  	var numbers = args.match(number);
  	return numbers ? numbers.map(Number) : []
  }

  // FIX: Check scaling.

  const removeRepeatedPoints = (path) => {
    const unrepeated = [path[0]];
    for (let nth = 1; nth < path.length; nth++) {
      const last = path[nth - 1];
      const current = path[nth];
      if (last === null || !equals$1(last, current)) {
        unrepeated.push(current);
      }
    }
    return unrepeated;
  };

  const toPaths = ({ curveSegments, normalizeCoordinateSystem = true }, svgPath) => {
    const paths = [];
    let path = [null];

    const newPath = () => {
      if (path[0] === null) {
        maybeClosePath();
      }
      if (path.length < 2) {
        // An empty path.
        return;
      }
      paths.push(path);
      path = [null];
    };

    const maybeClosePath = () => {
      path = removeRepeatedPoints(canonicalize$3(path));
      if (path.length > 3) {
        if (path[0] === null && equals$1(path[1], path[path.length - 1])) {
          // The path is closed, remove the leading null, and the duplicate point at the end.
          path = path.slice(1, path.length - 1);
          newPath();
        }
      }
    };

    for (const segment of svgPath) {
      const [directive, ...args] = segment;
      switch (directive) {
        case 'M': {
          maybeClosePath();
          newPath();
          const [x, y] = args;
          path.push([x, y]);
          break;
        }
        case 'C': {
          const [x1, y1, x2, y2, x, y] = args;
          const start = path[path.length - 1];
          const [xStart, yStart] = (start === null) ? [0, 0] : start;
          path = path.concat(buildAdaptiveCubicBezierCurve({ segments: curveSegments }, [[xStart, yStart], [x1, y1], [x2, y2], [x, y]]));
          break;
        }
        default: {
          throw Error(`Unexpected segment: ${JSON.stringify(segment)}`);
        }
      }
    }

    maybeClosePath();
    newPath();

    if (normalizeCoordinateSystem) {
      // Turn it upside down.
      return transform$5(fromScaling([1, -1, 0]), paths);
    } else {
      return paths;
    }
  };

  const fromSvgPath = (options = {}, svgPath) =>
    ({ paths: toPaths(options, curvifySvgPath(absSvgPath(parseSvgPath(svgPath)))) });

  const addTag = (tag, geometry) => {
    const copy = Object.assign({}, geometry);
    if (copy.tags) {
      copy.tags = [tag, ...copy.tags];
    } else {
      copy.tags = [tag];
    }
    return copy;
  };

  const assemble = (...taggedGeometries) => ({ assembly: taggedGeometries });

  const toPlane$1 = (surface) => toPlane(surface[0]);

  // Transforms
  const transform$6 = (matrix, surface) => surface.map(polygon => transform$1(matrix, polygon));

  const assertCoplanarPolygon = (polygon) => {
    if (!isCoplanar(polygon)) {
      throw Error(`die`);
    }
  };

  const assertCoplanar = (surface) => {
    for (const polygon of surface) {
      assertCoplanarPolygon(polygon);
    }
  };

  const eachPoint$2 = (options = {}, thunk, surface) => {
    for (const polygon of surface) {
      for (const point of polygon) {
        thunk(point);
      }
    }
  };

  /**
   * Transforms each polygon of the surface.
   *
   * @param {Polygons} original - the Polygons to transform.
   * @param {Function} [transform=identity] - function used to transform the polygons.
   * @returns {Polygons} a copy with transformed polygons.
   */
  const map$1 = (original, transform) => {
    if (original === undefined) {
      original = [];
    }
    if (transform === undefined) {
      transform = _ => _;
    }
    return original.map(polygon => transform(polygon));
  };

  const flip$5 = (surface) => map$1(surface, flip);

  // Internal function to massage data for passing to polygon-clipping.
  const clippingToPolygons = (clipping) => {
    const polygonArray = [];
    for (const polygons of clipping) {
      for (const polygon of polygons) {
        polygon.pop();
        polygonArray.push(polygon);
      }
    }
    return polygonArray;
  };

  const z0SurfaceToClipping = (z0Surface) => {
    return [z0Surface.map(z0Polygon => z0Polygon.map(([x = 0, y = 0]) => [x, y]))];
  };

  /* follows "An implementation of top-down splaying"
   * by D. Sleator <sleator@cs.cmu.edu> March 1992
   */

  /**
   * @typedef {*} Key
   */


  /**
   * @typedef {*} Value
   */


  /**
   * @typedef {function(node:Node):void} Visitor
   */


  /**
   * @typedef {function(a:Key, b:Key):number} Comparator
   */


  /**
   * @param {function(node:Node):string} NodePrinter
   */


  /**
   * @typedef {Object}  Node
   * @property {Key}    Key
   * @property {Value=} data
   * @property {Node}   left
   * @property {Node}   right
   */

  class Node$1 {

    constructor (key, data) {
      this.key    = key;
      this.data   = data;
      this.left   = null;
      this.right  = null;
    }
  }

  function DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }


  /**
   * Simple top down splay, not requiring i to be in the tree t.
   * @param {Key} i
   * @param {Node?} t
   * @param {Comparator} comparator
   */
  function splay (i, t, comparator) {
    if (t === null) return t;
    let l, r, y;
    const N = new Node$1();
    l = r = N;

    while (true) {
      const cmp = comparator(i, t.key);
      //if (i < t.key) {
      if (cmp < 0) {
        if (t.left === null) break;
        //if (i < t.left.key) {
        if (comparator(i, t.left.key) < 0) {
          y = t.left;                           /* rotate right */
          t.left = y.right;
          y.right = t;
          t = y;
          if (t.left === null) break;
        }
        r.left = t;                               /* link right */
        r = t;
        t = t.left;
      //} else if (i > t.key) {
      } else if (cmp > 0) {
        if (t.right === null) break;
        //if (i > t.right.key) {
        if (comparator(i, t.right.key) > 0) {
          y = t.right;                          /* rotate left */
          t.right = y.left;
          y.left = t;
          t = y;
          if (t.right === null) break;
        }
        l.right = t;                              /* link left */
        l = t;
        t = t.right;
      } else {
        break;
      }
    }
    /* assemble */
    l.right = t.left;
    r.left = t.right;
    t.left = N.right;
    t.right = N.left;
    return t;
  }


  /**
   * @param  {Key}        i
   * @param  {Value}      data
   * @param  {Comparator} comparator
   * @param  {Tree}       tree
   * @return {Node}      root
   */
  function insert (i, data, t, comparator, tree) {
    const node = new Node$1(i, data);

    tree._size++;

    if (t === null) {
      node.left = node.right = null;
      return node;
    }

    t = splay(i, t, comparator);
    const cmp = comparator(i, t.key);
    if (cmp < 0) {
      node.left = t.left;
      node.right = t;
      t.left = null;
    } else if (cmp >= 0) {
      node.right = t.right;
      node.left = t;
      t.right = null;
    }
    return node;
  }


  /**
   * Insert i into the tree t, unless it's already there.
   * @param  {Key}        i
   * @param  {Value}      data
   * @param  {Comparator} comparator
   * @param  {Tree}       tree
   * @return {Node}       root
   */
  function add$2 (i, data, t, comparator, tree) {
    const node = new Node$1(i, data);

    if (t === null) {
      node.left = node.right = null;
      tree._size++;
      return node;
    }

    t = splay(i, t, comparator);
    const cmp = comparator(i, t.key);
    if (cmp === 0) return t;
    else {
      if (cmp < 0) {
        node.left = t.left;
        node.right = t;
        t.left = null;
      } else if (cmp > 0) {
        node.right = t.right;
        node.left = t;
        t.right = null;
      }
      tree._size++;
      return node;
    }
  }


  /**
   * Deletes i from the tree if it's there
   * @param {Key}        i
   * @param {Tree}       tree
   * @param {Comparator} comparator
   * @param {Tree}       tree
   * @return {Node}      new root
   */
  function remove (i, t, comparator, tree) {
    let x;
    if (t === null) return null;
    t = splay(i, t, comparator);
    var cmp = comparator(i, t.key);
    if (cmp === 0) {               /* found it */
      if (t.left === null) {
        x = t.right;
      } else {
        x = splay(i, t.left, comparator);
        x.right = t.right;
      }
      tree._size--;
      return x;
    }
    return t;                         /* It wasn't there */
  }


  function split$1 (key, v, comparator) {
    let left, right;
    if (v === null) {
      left = right = null;
    } else {
      v = splay(key, v, comparator);

      const cmp = comparator(v.key, key);
      if (cmp === 0) {
        left  = v.left;
        right = v.right;
      } else if (cmp < 0) {
        right   = v.right;
        v.right = null;
        left    = v;
      } else {
        left   = v.left;
        v.left = null;
        right  = v;
      }
    }
    return { left, right };
  }


  function merge (left, right, comparator) {
    if (right === null) return left;
    if (left  === null) return right;

    right = splay(left.key, right, comparator);
    right.left = left;
    return right;
  }


  /**
   * Prints level of the tree
   * @param  {Node}                        root
   * @param  {String}                      prefix
   * @param  {Boolean}                     isTail
   * @param  {Array<string>}               out
   * @param  {Function(node:Node):String}  printNode
   */
  function printRow (root, prefix, isTail, out, printNode) {
    if (root) {
      out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\n`);
      const indent = prefix + (isTail ? '    ' : '│   ');
      if (root.left)  printRow(root.left,  indent, false, out, printNode);
      if (root.right) printRow(root.right, indent, true,  out, printNode);
    }
  }


  class Tree {

    constructor (comparator = DEFAULT_COMPARE) {
      this._comparator = comparator;
      this._root = null;
      this._size = 0;
    }


    /**
     * Inserts a key, allows duplicates
     * @param  {Key}    key
     * @param  {Value=} data
     * @return {Node|null}
     */
    insert (key, data) {
      return this._root = insert(key, data, this._root, this._comparator, this);
    }


    /**
     * Adds a key, if it is not present in the tree
     * @param  {Key}    key
     * @param  {Value=} data
     * @return {Node|null}
     */
    add (key, data) {
      return this._root = add$2(key, data, this._root, this._comparator, this);
    }


    /**
     * @param  {Key} key
     * @return {Node|null}
     */
    remove (key) {
      this._root = remove(key, this._root, this._comparator, this);
    }


    /**
     * Removes and returns the node with smallest key
     * @return {?Node}
     */
    pop () {
      let node = this._root;
      if (node) {
        while (node.left) node = node.left;
        this._root = splay(node.key,  this._root, this._comparator);
        this._root = remove(node.key, this._root, this._comparator, this);
        return { key: node.key, data: node.data };
      }
      return null;
    }


    /**
     * @param  {Key} key
     * @return {Node|null}
     */
    findStatic (key) {
      let current   = this._root;
      const compare = this._comparator;
      while (current) {
        const cmp = compare(key, current.key);
        if (cmp === 0)    return current;
        else if (cmp < 0) current = current.left;
        else              current = current.right;
      }
      return null;
    }


    /**
     * @param  {Key} key
     * @return {Node|null}
     */
    find (key) {
      if (this._root) {
        this._root = splay(key, this._root, this._comparator);
        if (this._comparator(key, this._root.key) !== 0) return null;
      }
      return this._root;
    }


    /**
     * @param  {Key} key
     * @return {Boolean}
     */
    contains (key) {
      let current   = this._root;
      const compare = this._comparator;
      while (current) {
        const cmp = compare(key, current.key);
        if (cmp === 0)    return true;
        else if (cmp < 0) current = current.left;
        else              current = current.right;
      }
      return false;
    }


    /**
     * @param  {Visitor} visitor
     * @param  {*=}      ctx
     * @return {SplayTree}
     */
    forEach (visitor, ctx) {
      let current = this._root;
      const Q = [];  /* Initialize stack s */
      let done = false;

      while (!done) {
        if (current !==  null) {
          Q.push(current);
          current = current.left;
        } else {
          if (Q.length !== 0) {
            current = Q.pop();
            visitor.call(ctx, current);

            current = current.right;
          } else done = true;
        }
      }
      return this;
    }


    /**
     * Walk key range from `low` to `high`. Stops if `fn` returns a value.
     * @param  {Key}      low
     * @param  {Key}      high
     * @param  {Function} fn
     * @param  {*?}       ctx
     * @return {SplayTree}
     */
    range (low, high, fn, ctx) {
      const Q = [];
      const compare = this._comparator;
      let node = this._root, cmp;

      while (Q.length !== 0 || node) {
        if (node) {
          Q.push(node);
          node = node.left;
        } else {
          node = Q.pop();
          cmp = compare(node.key, high);
          if (cmp > 0) {
            break;
          } else if (compare(node.key, low) >= 0) {
            if (fn.call(ctx, node)) return this; // stop if smth is returned
          }
          node = node.right;
        }
      }
      return this;
    }


    /**
     * Returns array of keys
     * @return {Array<Key>}
     */
    keys () {
      const keys = [];
      this.forEach(({ key }) => keys.push(key));
      return keys;
    }


    /**
     * Returns array of all the data in the nodes
     * @return {Array<Value>}
     */
    values () {
      const values = [];
      this.forEach(({ data }) => values.push(data));
      return values;
    }


    /**
     * @return {Key|null}
     */
    min() {
      if (this._root) return this.minNode(this._root).key;
      return null;
    }


    /**
     * @return {Key|null}
     */
    max() {
      if (this._root) return this.maxNode(this._root).key;
      return null;
    }


    /**
     * @return {Node|null}
     */
    minNode(t = this._root) {
      if (t) while (t.left) t = t.left;
      return t;
    }


    /**
     * @return {Node|null}
     */
    maxNode(t = this._root) {
      if (t) while (t.right) t = t.right;
      return t;
    }


    /**
     * Returns node at given index
     * @param  {number} index
     * @return {?Node}
     */
    at (index) {
      let current = this._root, done = false, i = 0;
      const Q = [];

      while (!done) {
        if (current) {
          Q.push(current);
          current = current.left;
        } else {
          if (Q.length > 0) {
            current = Q.pop();
            if (i === index) return current;
            i++;
            current = current.right;
          } else done = true;
        }
      }
      return null;
    }


    /**
     * @param  {Node}   d
     * @return {Node|null}
     */
    next (d) {
      let root = this._root;
      let successor = null;

      if (d.right) {
        successor = d.right;
        while (successor.left) successor = successor.left;
        return successor;
      }

      const comparator = this._comparator;
      while (root) {
        const cmp = comparator(d.key, root.key);
        if (cmp === 0) break;
        else if (cmp < 0) {
          successor = root;
          root = root.left;
        } else root = root.right;
      }

      return successor;
    }


    /**
     * @param  {Node} d
     * @return {Node|null}
     */
    prev (d) {
      let root = this._root;
      let predecessor = null;

      if (d.left !== null) {
        predecessor = d.left;
        while (predecessor.right) predecessor = predecessor.right;
        return predecessor;
      }

      const comparator = this._comparator;
      while (root) {
        const cmp = comparator(d.key, root.key);
        if (cmp === 0) break;
        else if (cmp < 0) root = root.left;
        else {
          predecessor = root;
          root = root.right;
        }
      }
      return predecessor;
    }


    /**
     * @return {SplayTree}
     */
    clear() {
      this._root = null;
      this._size = 0;
      return this;
    }


    /**
     * @return {NodeList}
     */
    toList() {
      return toList(this._root);
    }


    /**
     * Bulk-load items. Both array have to be same size
     * @param  {Array<Key>}    keys
     * @param  {Array<Value>}  [values]
     * @param  {Boolean}       [presort=false] Pre-sort keys and values, using
     *                                         tree's comparator. Sorting is done
     *                                         in-place
     * @return {AVLTree}
     */
    load (keys = [], values = [], presort = false) {
      let size = keys.length;
      const comparator = this._comparator;

      // sort if needed
      if (presort) sort(keys, values, 0, size - 1, comparator);

      if (this._root === null) { // empty tree
        this._root = loadRecursive(this._root, keys, values, 0, size);
        this._size = size;
      } else { // that re-builds the whole tree from two in-order traversals
        const mergedList = mergeLists(this.toList(), createList(keys, values), comparator);
        size = this._size + size;
        this._root = sortedListToBST({ head: mergedList }, 0, size);
      }
      return this;
    }


    /**
     * @return {Boolean}
     */
    isEmpty() { return this._root === null; }

    get size () { return this._size; }


    /**
     * @param  {NodePrinter=} printNode
     * @return {String}
     */
    toString (printNode = (n) => n.key) {
      const out = [];
      printRow(this._root, '', true, (v) => out.push(v), printNode);
      return out.join('');
    }


    update (key, newKey, newData) {
      const comparator = this._comparator;
      let { left, right } = split$1(key, this._root, comparator);
      this._size--;
      if (comparator(key, newKey) < 0) {
        right = insert(newKey, newData, right, comparator, this);
      } else {
        left = insert(newKey, newData, left, comparator, this);
      }
      this._root = merge(left, right, comparator);
    }


    split(key) {
      return split$1(key, this._root, this._comparator);
    }
  }


  function loadRecursive (parent, keys, values, start, end) {
    const size = end - start;
    if (size > 0) {
      const middle = start + Math.floor(size / 2);
      const key    = keys[middle];
      const data   = values[middle];
      const node   = { key, data, parent };
      node.left    = loadRecursive(node, keys, values, start, middle);
      node.right   = loadRecursive(node, keys, values, middle + 1, end);
      return node;
    }
    return null;
  }


  function createList(keys, values) {
    const head = { next: null };
    let p = head;
    for (let i = 0; i < keys.length; i++) {
      p = p.next = { key: keys[i], data: values[i] };
    }
    p.next = null;
    return head.next;
  }


  function toList (root) {
    var current = root;
    var Q = [], done = false;

    const head = { next: null };
    let p = head;

    while (!done) {
      if (current) {
        Q.push(current);
        current = current.left;
      } else {
        if (Q.length > 0) {
          current = p = p.next = Q.pop();
          current = current.right;
        } else done = true;
      }
    }
    p.next = null; // that'll work even if the tree was empty
    return head.next;
  }


  function sortedListToBST(list, start, end) {
    const size = end - start;
    if (size > 0) {
      const middle = start + Math.floor(size / 2);
      const left = sortedListToBST(list, start, middle);

      const root = list.head;
      root.left = left;

      list.head = list.head.next;

      root.right = sortedListToBST(list, middle + 1, end);
      return root;
    }
    return null;
  }


  function mergeLists (l1, l2, compare = (a, b) => a - b) {
    const head = {}; // dummy
    let p = head;

    let p1 = l1;
    let p2 = l2;

    while (p1 !== null && p2 !== null) {
      if (compare(p1.key, p2.key) < 0) {
        p.next = p1;
        p1 = p1.next;
      } else {
        p.next = p2;
        p2 = p2.next;
      }
      p = p.next;
    }

    if (p1 !== null)      p.next = p1;
    else if (p2 !== null) p.next = p2;

    return head.next;
  }


  function sort(keys, values, left, right, compare) {
    if (left >= right) return;

    const pivot = keys[(left + right) >> 1];
    let i = left - 1;
    let j = right + 1;

    while (true) {
      do i++; while (compare(keys[i], pivot) < 0);
      do j--; while (compare(keys[j], pivot) > 0);
      if (i >= j) break;

      let tmp = keys[i];
      keys[i] = keys[j];
      keys[j] = tmp;

      tmp = values[i];
      values[i] = values[j];
      values[j] = tmp;
    }

    sort(keys, values,  left,     j, compare);
    sort(keys, values, j + 1, right, compare);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  /* Javascript doesn't do integer math. Everything is
   * floating point with percision Number.EPSILON.
   *
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON
   */
  var epsilon = Number.EPSILON; // IE Polyfill

  if (epsilon === undefined) epsilon = Math.pow(2, -52);
  var EPSILON_SQ = epsilon * epsilon;
  /* FLP comparator */

  var cmp = function cmp(a, b) {
    // check if they're both 0
    if (-epsilon < a && a < epsilon) {
      if (-epsilon < b && b < epsilon) {
        return 0;
      }
    } // check if they're flp equal


    if ((a - b) * (a - b) < EPSILON_SQ * a * b) {
      return 0;
    } // normal comparison


    return a < b ? -1 : 1;
  };
  /* Greedy comparison. Two numbers are defined to touch
   * if their midpoint is indistinguishable from either. */

  var touch = function touch(a, b) {
    var m = (a + b) / 2;
    return cmp(m, a) === 0 || cmp(m, b) === 0;
  };
  /* Greedy comparison. Two points are defined to touch
   * if their midpoint is indistinguishable from either. */

  var touchPoints = function touchPoints(aPt, bPt) {
    // call directly to (skip touch()) cmp() for performance boost
    var mx = (aPt.x + bPt.x) / 2;
    var aXMiss = cmp(mx, aPt.x) !== 0;
    if (aXMiss && cmp(mx, bPt.x) !== 0) return false;
    var my = (aPt.y + bPt.y) / 2;
    var aYMiss = cmp(my, aPt.y) !== 0;
    if (aYMiss && cmp(my, bPt.y) !== 0) return false; // we have touching on both x & y, we have to make sure it's
    // not just on opposite points thou

    if (aYMiss && aYMiss) return true;
    if (!aYMiss && !aYMiss) return true;
    return false;
  };

  /* Cross Product of two vectors with first point at origin */

  var crossProduct = function crossProduct(a, b) {
    return a.x * b.y - a.y * b.x;
  };
  /* Dot Product of two vectors with first point at origin */

  var dotProduct = function dotProduct(a, b) {
    return a.x * b.x + a.y * b.y;
  };
  /* Comparator for two vectors with same starting point */

  var compareVectorAngles = function compareVectorAngles(basePt, endPt1, endPt2) {
    var v1 = {
      x: endPt1.x - basePt.x,
      y: endPt1.y - basePt.y
    };
    var v2 = {
      x: endPt2.x - basePt.x,
      y: endPt2.y - basePt.y
    };
    var kross = crossProduct(v1, v2);
    return cmp(kross, 0);
  };
  var length$3 = function length(v) {
    return Math.sqrt(dotProduct(v, v));
  };
  /* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */

  var sineOfAngle = function sineOfAngle(pShared, pBase, pAngle) {
    var vBase = {
      x: pBase.x - pShared.x,
      y: pBase.y - pShared.y
    };
    var vAngle = {
      x: pAngle.x - pShared.x,
      y: pAngle.y - pShared.y
    };
    return crossProduct(vAngle, vBase) / length$3(vAngle) / length$3(vBase);
  };
  /* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */

  var cosineOfAngle = function cosineOfAngle(pShared, pBase, pAngle) {
    var vBase = {
      x: pBase.x - pShared.x,
      y: pBase.y - pShared.y
    };
    var vAngle = {
      x: pAngle.x - pShared.x,
      y: pAngle.y - pShared.y
    };
    return dotProduct(vAngle, vBase) / length$3(vAngle) / length$3(vBase);
  };
  /* Get the closest point on an line (defined by two points)
   * to another point. */

  var closestPoint = function closestPoint(ptA1, ptA2, ptB) {
    if (ptA1.x === ptA2.x) return {
      x: ptA1.x,
      y: ptB.y // vertical vector

    };
    if (ptA1.y === ptA2.y) return {
      x: ptB.x,
      y: ptA1.y // horizontal vector
      // determinne which point is further away

    };
    var v1 = {
      x: ptA1.x - ptB.x,
      y: ptA1.y - ptB.y
    };
    var v2 = {
      x: ptA2.x - ptB.x,
      y: ptA2.y - ptB.y
    };
    var nearPt = ptA1;
    var farPt = ptA2;

    if (dotProduct(v1, v1) > dotProduct(v2, v2)) {
      farPt = ptA1;
      nearPt = ptA2;
    } // use the further point as our base in the calculation, so that the
    // vectors are more parallel, providing more accurate dot product


    var vA = {
      x: nearPt.x - farPt.x,
      y: nearPt.y - farPt.y
    };
    var vB = {
      x: ptB.x - farPt.x,
      y: ptB.y - farPt.y
    };
    var dist = dotProduct(vA, vB) / dotProduct(vA, vA);
    return {
      x: farPt.x + dist * vA.x,
      y: farPt.y + dist * vA.y
    };
  };
  /* Get the x coordinate where the given line (defined by a point and vector)
   * crosses the horizontal line with the given y coordiante.
   * In the case of parrallel lines (including overlapping ones) returns null. */

  var horizontalIntersection = function horizontalIntersection(pt, v, y) {
    if (v.y === 0) return null;
    return {
      x: pt.x + v.x / v.y * (y - pt.y),
      y: y
    };
  };
  /* Get the y coordinate where the given line (defined by a point and vector)
   * crosses the vertical line with the given x coordiante.
   * In the case of parrallel lines (including overlapping ones) returns null. */

  var verticalIntersection = function verticalIntersection(pt, v, x) {
    if (v.x === 0) return null;
    return {
      x: x,
      y: pt.y + v.y / v.x * (x - pt.x)
    };
  };
  /* Get the intersection of two lines, each defined by a base point and a vector.
   * In the case of parrallel lines (including overlapping ones) returns null. */

  var intersection$1 = function intersection(pt1, v1, pt2, v2) {
    // take some shortcuts for vertical and horizontal lines
    // this also ensures we don't calculate an intersection and then discover
    // it's actually outside the bounding box of the line
    if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x);
    if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x);
    if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y);
    if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y); // General case for non-overlapping segments.
    // This algorithm is based on Schneider and Eberly.
    // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244

    var kross = crossProduct(v1, v2);
    if (kross == 0) return null;
    var ve = {
      x: pt2.x - pt1.x,
      y: pt2.y - pt1.y
    };
    var d1 = crossProduct(ve, v1) / kross;
    var d2 = crossProduct(ve, v2) / kross; // take the average of the two calculations to minimize rounding error

    var x1 = pt1.x + d2 * v1.x,
        x2 = pt2.x + d1 * v2.x;
    var y1 = pt1.y + d2 * v1.y,
        y2 = pt2.y + d1 * v2.y;
    var x = (x1 + x2) / 2;
    var y = (y1 + y2) / 2;
    return {
      x: x,
      y: y
    };
  };

  /**
   * This class rounds incoming values sufficiently so that
   * floating points problems are, for the most part, avoided.
   *
   * Incoming points are have their x & y values tested against
   * all previously seen x & y values. If either is 'too close'
   * to a previously seen value, it's value is 'snapped' to the
   * previously seen value.
   *
   * All points should be rounded by this class before being
   * stored in any data structures in the rest of this algorithm.
   */

  var PtRounder =
  /*#__PURE__*/
  function () {
    function PtRounder() {
      _classCallCheck(this, PtRounder);

      this.reset();
    }

    _createClass(PtRounder, [{
      key: "reset",
      value: function reset() {
        this.xRounder = new CoordRounder();
        this.yRounder = new CoordRounder();
      }
    }, {
      key: "round",
      value: function round(x, y) {
        return {
          x: this.xRounder.round(x),
          y: this.yRounder.round(y)
        };
      }
    }]);

    return PtRounder;
  }();

  var CoordRounder =
  /*#__PURE__*/
  function () {
    function CoordRounder() {
      _classCallCheck(this, CoordRounder);

      this.tree = new Tree(); // preseed with 0 so we don't end up with values < Number.EPSILON

      this.round(0);
    } // Note: this can rounds input values backwards or forwards.
    //       You might ask, why not restrict this to just rounding
    //       forwards? Wouldn't that allow left endpoints to always
    //       remain left endpoints during splitting (never change to
    //       right). No - it wouldn't, because we snap intersections
    //       to endpoints (to establish independence from the segment
    //       angle for t-intersections).


    _createClass(CoordRounder, [{
      key: "round",
      value: function round(coord) {
        var node = this.tree.add(coord);
        var prevNode = this.tree.prev(node);

        if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {
          this.tree.remove(coord);
          return prevNode.key;
        }

        var nextNode = this.tree.next(node);

        if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {
          this.tree.remove(coord);
          return nextNode.key;
        }

        return coord;
      }
    }]);

    return CoordRounder;
  }(); // singleton available by import


  var rounder = new PtRounder();

  /* Given input geometry as a standard array-of-arrays geojson-style
   * geometry, return one that uses objects as points, for better perf */

  var pointsAsObjects = function pointsAsObjects(geom) {
    // we can handle well-formed multipolys and polys
    var output = [];

    if (!Array.isArray(geom)) {
      throw new Error('Input is not a Polygon or MultiPolygon');
    }

    for (var i = 0, iMax = geom.length; i < iMax; i++) {
      if (!Array.isArray(geom[i]) || geom[i].length == 0) {
        throw new Error('Input is not a Polygon or MultiPolygon');
      }

      output.push([]);

      for (var j = 0, jMax = geom[i].length; j < jMax; j++) {
        if (!Array.isArray(geom[i][j]) || geom[i][j].length == 0) {
          throw new Error('Input is not a Polygon or MultiPolygon');
        }

        if (Array.isArray(geom[i][j][0])) {
          // multipolygon
          output[i].push([]);

          for (var k = 0, kMax = geom[i][j].length; k < kMax; k++) {
            if (!Array.isArray(geom[i][j][k]) || geom[i][j][k].length < 2) {
              throw new Error('Input is not a Polygon or MultiPolygon');
            }

            if (geom[i][j][k].length > 2) {
              throw new Error('Input has more than two coordinates. ' + 'Only 2-dimensional polygons supported.');
            }

            output[i][j].push(rounder.round(geom[i][j][k][0], geom[i][j][k][1]));
          }
        } else {
          // polygon
          if (geom[i][j].length < 2) {
            throw new Error('Input is not a Polygon or MultiPolygon');
          }

          if (geom[i][j].length > 2) {
            throw new Error('Input has more than two coordinates. ' + 'Only 2-dimensional polygons supported.');
          }

          output[i].push(rounder.round(geom[i][j][0], geom[i][j][1]));
        }
      }
    }

    return output;
  };
  /* WARN: input modified directly */

  var forceMultiPoly = function forceMultiPoly(geom) {
    if (Array.isArray(geom)) {
      if (geom.length === 0) return; // allow empty multipolys

      if (Array.isArray(geom[0])) {
        if (Array.isArray(geom[0][0])) {
          if (typeof geom[0][0][0].x === 'number' && typeof geom[0][0][0].y === 'number') {
            // multipolygon
            return;
          }
        }

        if (typeof geom[0][0].x === 'number' && typeof geom[0][0].y === 'number') {
          // polygon
          geom.unshift(geom.splice(0));
          return;
        }
      }
    }

    throw new Error('Unrecognized input - not a polygon nor multipolygon');
  };
  /* WARN: input modified directly */

  var cleanMultiPoly = function cleanMultiPoly(multipoly) {
    var i = 0;

    while (i < multipoly.length) {
      var poly = multipoly[i];

      if (poly.length === 0) {
        multipoly.splice(i, 1);
        continue;
      }

      var exteriorRing = poly[0];
      cleanRing(exteriorRing); // poly is dropped if exteriorRing is degenerate

      if (exteriorRing.length === 0) {
        multipoly.splice(i, 1);
        continue;
      }

      var j = 1;

      while (j < poly.length) {
        var interiorRing = poly[j];
        cleanRing(interiorRing);
        if (interiorRing.length === 0) poly.splice(j, 1);else j++;
      }

      i++;
    }
  };
  /* Clean ring:
   *  - remove duplicate points
   *  - remove colinear points
   *  - remove rings with no area (less than 3 distinct points)
   *  - un-close rings (last point should not repeat first)
   *
   * WARN: input modified directly */

  var cleanRing = function cleanRing(ring) {
    if (ring.length === 0) return;
    var firstPt = ring[0];
    var lastPt = ring[ring.length - 1];
    if (firstPt.x === lastPt.x && firstPt.y === lastPt.y) ring.pop();

    var isPointUncessary = function isPointUncessary(prevPt, pt, nextPt) {
      return prevPt.x === pt.x && prevPt.y === pt.y || nextPt.x === pt.x && nextPt.y === pt.y || compareVectorAngles(pt, prevPt, nextPt) === 0;
    };

    var i = 0;
    var prevPt, nextPt;

    while (i < ring.length) {
      prevPt = i === 0 ? ring[ring.length - 1] : ring[i - 1];
      nextPt = i === ring.length - 1 ? ring[0] : ring[i + 1];
      if (isPointUncessary(prevPt, ring[i], nextPt)) ring.splice(i, 1);else i++;
    } // if our ring has less than 3 distinct points now (so is degenerate)
    // shrink it down to the empty array to communicate to our caller to
    // drop it


    while (ring.length < 3 && ring.length > 0) {
      ring.pop();
    }
  };

  var SweepEvent =
  /*#__PURE__*/
  function () {
    _createClass(SweepEvent, null, [{
      key: "compare",
      // for ordering sweep events in the sweep event queue
      value: function compare(a, b) {
        // favor event with a point that the sweep line hits first
        var ptCmp = SweepEvent.comparePoints(a.point, b.point);
        if (ptCmp !== 0) return ptCmp; // the points are the same, so link them if needed

        if (a.point !== b.point) a.link(b); // favor right events over left

        if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1; // we have two matching left or right endpoints
        // ordering of this case is the same as for their segments

        return Segment.compare(a.segment, b.segment);
      } // for ordering points in sweep line order

    }, {
      key: "comparePoints",
      value: function comparePoints(aPt, bPt) {
        if (aPt.x < bPt.x) return -1;
        if (aPt.x > bPt.x) return 1;
        if (aPt.y < bPt.y) return -1;
        if (aPt.y > bPt.y) return 1;
        return 0;
      } // Warning: 'point' input will be modified and re-used (for performance)

    }]);

    function SweepEvent(point, isLeft) {
      _classCallCheck(this, SweepEvent);

      if (point.events === undefined) point.events = [this];else point.events.push(this);
      this.point = point;
      this.isLeft = isLeft; // this.segment, this.otherSE set by factory
    }

    _createClass(SweepEvent, [{
      key: "link",
      value: function link(other) {
        if (other.point === this.point) {
          throw new Error('Tried to link already linked events');
        }

        var otherEvents = other.point.events;

        for (var i = 0, iMax = otherEvents.length; i < iMax; i++) {
          var evt = otherEvents[i];
          this.point.events.push(evt);
          evt.point = this.point;
        }

        this.checkForConsuming();
      }
      /* Do a pass over our linked events and check to see if any pair
       * of segments match, and should be consumed. */

    }, {
      key: "checkForConsuming",
      value: function checkForConsuming() {
        // FIXME: The loops in this method run O(n^2) => no good.
        //        Maintain little ordered sweep event trees?
        //        Can we maintaining an ordering that avoids the need
        //        for the re-sorting with getLeftmostComparator in geom-out?
        // Compare each pair of events to see if other events also match
        var numEvents = this.point.events.length;

        for (var i = 0; i < numEvents; i++) {
          var evt1 = this.point.events[i];
          if (evt1.segment.consumedBy !== undefined) continue;

          for (var j = i + 1; j < numEvents; j++) {
            var evt2 = this.point.events[j];
            if (evt2.consumedBy !== undefined) continue;
            if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue;
            evt1.segment.consume(evt2.segment);
          }
        }
      }
    }, {
      key: "getAvailableLinkedEvents",
      value: function getAvailableLinkedEvents() {
        // point.events is always of length 2 or greater
        var events = [];

        for (var i = 0, iMax = this.point.events.length; i < iMax; i++) {
          var evt = this.point.events[i];

          if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {
            events.push(evt);
          }
        }

        return events;
      }
      /**
       * Returns a comparator function for sorting linked events that will
       * favor the event that will give us the smallest left-side angle.
       * All ring construction starts as low as possible heading to the right,
       * so by always turning left as sharp as possible we'll get polygons
       * without uncessary loops & holes.
       *
       * The comparator function has a compute cache such that it avoids
       * re-computing already-computed values.
       */

    }, {
      key: "getLeftmostComparator",
      value: function getLeftmostComparator(baseEvent) {
        var _this = this;

        var cache = new Map();

        var fillCache = function fillCache(linkedEvent) {
          var nextEvent = linkedEvent.otherSE;
          cache.set(linkedEvent, {
            sine: sineOfAngle(_this.point, baseEvent.point, nextEvent.point),
            cosine: cosineOfAngle(_this.point, baseEvent.point, nextEvent.point)
          });
        };

        return function (a, b) {
          if (!cache.has(a)) fillCache(a);
          if (!cache.has(b)) fillCache(b);

          var _cache$get = cache.get(a),
              asine = _cache$get.sine,
              acosine = _cache$get.cosine;

          var _cache$get2 = cache.get(b),
              bsine = _cache$get2.sine,
              bcosine = _cache$get2.cosine; // both on or above x-axis


          if (asine >= 0 && bsine >= 0) {
            if (acosine < bcosine) return 1;
            if (acosine > bcosine) return -1;
            return 0;
          } // both below x-axis


          if (asine < 0 && bsine < 0) {
            if (acosine < bcosine) return -1;
            if (acosine > bcosine) return 1;
            return 0;
          } // one above x-axis, one below


          if (bsine < asine) return -1;
          if (bsine > asine) return 1;
          return 0;
        };
      }
    }]);

    return SweepEvent;
  }();

  /**
   * A bounding box has the format:
   *
   *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }
   *
   */

  var isInBbox = function isInBbox(bbox, point) {
    return bbox.ll.x <= point.x && point.x <= bbox.ur.x && bbox.ll.y <= point.y && point.y <= bbox.ur.y;
  };
  /* Greedy comparison with a bbox. A point is defined to 'touch'
   * a bbox if:
   *  - it is inside the bbox
   *  - it 'touches' one of the sides (another greedy comparison) */

  var touchesBbox = function touchesBbox(bbox, point) {
    return (bbox.ll.x <= point.x || touch(bbox.ll.x, point.x)) && (point.x <= bbox.ur.x || touch(point.x, bbox.ur.x)) && (bbox.ll.y <= point.y || touch(bbox.ll.y, point.y)) && (point.y <= bbox.ur.y || touch(point.y, bbox.ur.y));
  };
  /* Returns either null, or a bbox (aka an ordered pair of points)
   * If there is only one point of overlap, a bbox with identical points
   * will be returned */

  var getBboxOverlap = function getBboxOverlap(b1, b2) {
    // check if the bboxes overlap at all
    if (b2.ur.x < b1.ll.x || b1.ur.x < b2.ll.x || b2.ur.y < b1.ll.y || b1.ur.y < b2.ll.y) return null; // find the middle two X values

    var lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x;
    var upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x; // find the middle two Y values

    var lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y;
    var upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y; // put those middle values together to get the overlap

    return {
      ll: {
        x: lowerX,
        y: lowerY
      },
      ur: {
        x: upperX,
        y: upperY
      }
    };
  };

  // segments and sweep events when all else is identical

  var segmentId = 0;

  var Segment =
  /*#__PURE__*/
  function () {
    _createClass(Segment, null, [{
      key: "compare",

      /* This compare() function is for ordering segments in the sweep
       * line tree, and does so according to the following criteria:
       *
       * Consider the vertical line that lies an infinestimal step to the
       * right of the right-more of the two left endpoints of the input
       * segments. Imagine slowly moving a point up from negative infinity
       * in the increasing y direction. Which of the two segments will that
       * point intersect first? That segment comes 'before' the other one.
       *
       * If neither segment would be intersected by such a line, (if one
       * or more of the segments are vertical) then the line to be considered
       * is directly on the right-more of the two left inputs.
       */
      value: function compare(a, b) {
        var alx = a.leftSE.point.x;
        var blx = b.leftSE.point.x;
        var arx = a.rightSE.point.x;
        var brx = b.rightSE.point.x; // check if they're even in the same vertical plane

        if (brx < alx) return 1;
        if (arx < blx) return -1;
        var aly = a.leftSE.point.y;
        var bly = b.leftSE.point.y;
        var ary = a.rightSE.point.y;
        var bry = b.rightSE.point.y; // is left endpoint of segment B the right-more?

        if (alx < blx) {
          // are the two segments in the same horizontal plane?
          if (bly < aly && bly < ary) return 1;
          if (bly > aly && bly > ary) return -1; // is the B left endpoint colinear to segment A?

          var aCmpBLeft = a.comparePoint(b.leftSE.point);
          if (aCmpBLeft < 0) return 1;
          if (aCmpBLeft > 0) return -1; // is the A right endpoint colinear to segment B ?

          var bCmpARight = b.comparePoint(a.rightSE.point);
          if (bCmpARight !== 0) return bCmpARight; // colinear segments, consider the one with left-more
          // left endpoint to be first (arbitrary?)

          return -1;
        } // is left endpoint of segment A the right-more?


        if (alx > blx) {
          if (aly < bly && aly < bry) return -1;
          if (aly > bly && aly > bry) return 1; // is the A left endpoint colinear to segment B?

          var bCmpALeft = b.comparePoint(a.leftSE.point);
          if (bCmpALeft !== 0) return bCmpALeft; // is the B right endpoint colinear to segment A?

          var aCmpBRight = a.comparePoint(b.rightSE.point);
          if (aCmpBRight < 0) return 1;
          if (aCmpBRight > 0) return -1; // colinear segments, consider the one with left-more
          // left endpoint to be first (arbitrary?)

          return 1;
        } // if we get here, the two left endpoints are in the same
        // vertical plane, ie alx === blx
        // consider the lower left-endpoint to come first


        if (aly < bly) return -1;
        if (aly > bly) return 1; // left endpoints are identical
        // check for colinearity by using the left-more right endpoint
        // is the A right endpoint more left-more?

        if (arx < brx) {
          var _bCmpARight = b.comparePoint(a.rightSE.point);

          if (_bCmpARight !== 0) return _bCmpARight; // colinear segments with matching left endpoints,
          // consider the one with more left-more right endpoint to be first

          return -1;
        } // is the B right endpoint more left-more?


        if (arx > brx) {
          var _aCmpBRight = a.comparePoint(b.rightSE.point);

          if (_aCmpBRight < 0) return 1;
          if (_aCmpBRight > 0) return -1; // colinear segments with matching left endpoints,
          // consider the one with more left-more right endpoint to be first

          return 1;
        } // if we get here, two two right endpoints are in the same
        // vertical plane, ie arx === brx
        // consider the lower right-endpoint to come first


        if (ary < bry) return -1;
        if (ary > bry) return 1; // right endpoints identical as well, so the segments are idential
        // fall back on creation order as consistent tie-breaker

        if (a.id < b.id) return -1;
        if (a.id > b.id) return 1; // identical segment, ie a === b

        return 0;
      }
      /* Warning: a reference to ringsIn input will be stored,
       *  and possibly will be later modified */

    }]);

    function Segment(leftSE, rightSE, ringsIn) {
      _classCallCheck(this, Segment);

      this.id = ++segmentId;
      this.leftSE = leftSE;
      leftSE.segment = this;
      leftSE.otherSE = rightSE;
      this.rightSE = rightSE;
      rightSE.segment = this;
      rightSE.otherSE = leftSE;
      this.ringsIn = ringsIn;
      this._cache = {}; // left unset for performance, set later in algorithm
      // this.ringOut, this.consumedBy, this.prev
    }

    _createClass(Segment, [{
      key: "replaceRightSE",

      /* When a segment is split, the rightSE is replaced with a new sweep event */
      value: function replaceRightSE(newRightSE) {
        this.rightSE = newRightSE;
        this.rightSE.segment = this;
        this.rightSE.otherSE = this.leftSE;
        this.leftSE.otherSE = this.rightSE;
      }
    }, {
      key: "bbox",
      value: function bbox() {
        var y1 = this.leftSE.point.y;
        var y2 = this.rightSE.point.y;
        return {
          ll: {
            x: this.leftSE.point.x,
            y: y1 < y2 ? y1 : y2
          },
          ur: {
            x: this.rightSE.point.x,
            y: y1 > y2 ? y1 : y2
          }
        };
      }
      /* A vector from the left point to the right */

    }, {
      key: "vector",
      value: function vector() {
        return {
          x: this.rightSE.point.x - this.leftSE.point.x,
          y: this.rightSE.point.y - this.leftSE.point.y
        };
      }
    }, {
      key: "isAnEndpoint",
      value: function isAnEndpoint(pt) {
        return pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y || pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y;
      }
      /* Compare this segment with a point. Return value indicates:
       *     1: point lies above or to the left of segment
       *     0: point is colinear to segment
       *    -1: point is below or to the right of segment */

    }, {
      key: "comparePoint",
      value: function comparePoint(point) {
        if (this.isAnEndpoint(point)) return 0;
        var interPt = closestPoint(this.leftSE.point, this.rightSE.point, point);
        if (point.y < interPt.y) return -1;
        if (point.y > interPt.y) return 1; // depending on if our segment angles up or down,
        // the x coord comparison means oppposite things

        if (point.x < interPt.x) {
          if (this.leftSE.point.y < this.rightSE.point.y) return 1;
          if (this.leftSE.point.y > this.rightSE.point.y) return -1;
        }

        if (point.x > interPt.x) {
          if (this.leftSE.point.y < this.rightSE.point.y) return -1;
          if (this.leftSE.point.y > this.rightSE.point.y) return 1;
        } // on the line


        return 0;
      }
      /* Does the point in question touch the given segment?
       * Greedy - essentially a 2 * Number.EPSILON comparison.
       * If it's not possible to add an independent point between the
       * point and the segment, we say the point 'touches' the segment. */

    }, {
      key: "touches",
      value: function touches(point) {
        if (!touchesBbox(this.bbox(), point)) return false; // if the points have been linked already, performance boost use that

        if (point === this.leftSE.point || point === this.rightSE.point) return true; // avoid doing vector math on tiny vectors

        if (touchPoints(this.leftSE.point, point)) return true;
        if (touchPoints(this.rightSE.point, point)) return true;
        var cPt1 = closestPoint(this.leftSE.point, this.rightSE.point, point);
        var avgPt1 = {
          x: (cPt1.x + point.x) / 2,
          y: (cPt1.y + point.y) / 2
        };
        return touchPoints(avgPt1, cPt1) || touchPoints(avgPt1, point);
      }
      /**
       * Given another segment, returns the first non-trivial intersection
       * between the two segments (in terms of sweep line ordering), if it exists.
       *
       * A 'non-trivial' intersection is one that will cause one or both of the
       * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:
       *
       *   * endpoint of segA with endpoint of segB --> trivial
       *   * endpoint of segA with point along segB --> non-trivial
       *   * endpoint of segB with point along segA --> non-trivial
       *   * point along segA with point along segB --> non-trivial
       *
       * If no non-trivial intersection exists, return null
       * Else, return null.
       */

    }, {
      key: "getIntersection",
      value: function getIntersection(other) {
        // If bboxes don't overlap, there can't be any intersections
        var bboxOverlap = getBboxOverlap(this.bbox(), other.bbox());
        if (bboxOverlap === null) return null; // We first check to see if the endpoints can be considered intersections.
        // This will 'snap' intersections to endpoints if possible, and will
        // handle cases of colinearity.
        // does each endpoint touch the other segment?

        var touchesOtherLSE = this.touches(other.leftSE.point);
        var touchesThisLSE = other.touches(this.leftSE.point);
        var touchesOtherRSE = this.touches(other.rightSE.point);
        var touchesThisRSE = other.touches(this.rightSE.point); // do left endpoints match?

        if (touchesThisLSE && touchesOtherLSE) {
          // these two cases are for colinear segments with matching left
          // endpoints, and one segment being longer than the other
          if (touchesThisRSE && !touchesOtherRSE) return this.rightSE.point;
          if (!touchesThisRSE && touchesOtherRSE) return other.rightSE.point; // either the two segments match exactly (two trival intersections)
          // or just on their left endpoint (one trivial intersection

          return null;
        } // does this left endpoint matches (other doesn't)


        if (touchesThisLSE) {
          // check for segments that just intersect on opposing endpoints
          if (touchesOtherRSE && touchPoints(this.leftSE.point, other.rightSE.point)) return null; // t-intersection on left endpoint

          return this.leftSE.point;
        } // does other left endpoint matches (this doesn't)


        if (touchesOtherLSE) {
          // check for segments that just intersect on opposing endpoints
          if (touchesThisRSE && touchPoints(this.rightSE.point, other.leftSE.point)) return null; // t-intersection on left endpoint

          return other.leftSE.point;
        } // trivial intersection on right endpoints


        if (touchesThisRSE && touchesOtherRSE) return null; // t-intersections on just one right endpoint

        if (touchesThisRSE) return this.rightSE.point;
        if (touchesOtherRSE) return other.rightSE.point; // None of our endpoints intersect. Look for a general intersection between
        // infinite lines laid over the segments

        var pt = intersection$1(this.leftSE.point, this.vector(), other.leftSE.point, other.vector()); // are the segments parrallel? Note that if they were colinear with overlap,
        // they would have an endpoint intersection and that case was already handled above

        if (pt === null) return null; // is the intersection found between the lines not on the segments?

        if (!isInBbox(bboxOverlap, pt)) return null; // round the the computed point if needed

        return rounder.round(pt.x, pt.y);
      }
      /**
       * Split the given segment into multiple segments on the given points.
       *  * Each existing segment will retain its leftSE and a new rightSE will be
       *    generated for it.
       *  * A new segment will be generated which will adopt the original segment's
       *    rightSE, and a new leftSE will be generated for it.
       *  * If there are more than two points given to split on, new segments
       *    in the middle will be generated with new leftSE and rightSE's.
       *  * An array of the newly generated SweepEvents will be returned.
       *
       * Warning: input array of points is modified
       */

    }, {
      key: "split",
      value: function split(point) {
        var newEvents = [];
        var alreadyLinked = point.events !== undefined;
        var newLeftSE = new SweepEvent(point, true);
        var newRightSE = new SweepEvent(point, false);
        var oldRightSE = this.rightSE;
        this.replaceRightSE(newRightSE);
        newEvents.push(newRightSE);
        newEvents.push(newLeftSE);
        new Segment(newLeftSE, oldRightSE, this.ringsIn.slice()); // in the point we just used to create new sweep events with was already
        // linked to other events, we need to check if either of the affected
        // segments should be consumed

        if (alreadyLinked) {
          newLeftSE.checkForConsuming();
          newRightSE.checkForConsuming();
        }

        return newEvents;
      }
      /* Consume another segment. We take their ringsIn under our wing
       * and mark them as consumed. Use for perfectly overlapping segments */

    }, {
      key: "consume",
      value: function consume(other) {
        var consumer = this;
        var consumee = other;

        while (consumer.consumedBy) {
          consumer = consumer.consumedBy;
        }

        while (consumee.consumedBy) {
          consumee = consumee.consumedBy;
        }

        var cmp$$1 = Segment.compare(consumer, consumee);
        if (cmp$$1 === 0) return; // already consumed
        // the winner of the consumption is the earlier segment
        // according to sweep line ordering

        if (cmp$$1 > 0) {
          var tmp = consumer;
          consumer = consumee;
          consumee = tmp;
        } // make sure a segment doesn't consume it's prev


        if (consumer.prev === consumee) {
          var _tmp = consumer;
          consumer = consumee;
          consumee = _tmp;
        }

        for (var i = 0, iMax = consumee.ringsIn.length; i < iMax; i++) {
          consumer.ringsIn.push(consumee.ringsIn[i]);
        }

        consumee.ringsIn = null;
        consumee.consumedBy = consumer; // mark sweep events consumed as to maintain ordering in sweep event queue

        consumee.leftSE.consumedBy = consumer.leftSE;
        consumee.rightSE.consumedBy = consumer.rightSE;
      }
      /* The first segment previous segment chain that is in the result */

    }, {
      key: "prevInResult",
      value: function prevInResult() {
        var key = 'prevInResult';
        if (this._cache[key] === undefined) this._cache[key] = this["_".concat(key)]();
        return this._cache[key];
      }
    }, {
      key: "_prevInResult",
      value: function _prevInResult() {
        if (!this.prev) return null;
        if (this.prev.isInResult()) return this.prev;
        return this.prev.prevInResult();
      }
    }, {
      key: "ringsBefore",
      value: function ringsBefore() {
        var key = 'ringsBefore';
        if (this._cache[key] === undefined) this._cache[key] = this["_".concat(key)]();
        return this._cache[key];
      }
    }, {
      key: "_ringsBefore",
      value: function _ringsBefore() {
        if (!this.prev) return [];
        return (this.prev.consumedBy || this.prev).ringsAfter();
      }
    }, {
      key: "ringsAfter",
      value: function ringsAfter() {
        var key = 'ringsAfter';
        if (this._cache[key] === undefined) this._cache[key] = this["_".concat(key)]();
        return this._cache[key];
      }
    }, {
      key: "_ringsAfter",
      value: function _ringsAfter() {
        var rings = this.ringsBefore().slice(0);

        for (var i = 0, iMax = this.ringsIn.length; i < iMax; i++) {
          var ring = this.ringsIn[i];
          var index = rings.indexOf(ring);
          if (index === -1) rings.push(ring);else rings.splice(index, 1);
        }

        return rings;
      }
    }, {
      key: "multiPolysBefore",
      value: function multiPolysBefore() {
        var key = 'multiPolysBefore';
        if (this._cache[key] === undefined) this._cache[key] = this["_".concat(key)]();
        return this._cache[key];
      }
    }, {
      key: "_multiPolysBefore",
      value: function _multiPolysBefore() {
        if (!this.prev) return [];
        return (this.prev.consumedBy || this.prev).multiPolysAfter();
      }
    }, {
      key: "multiPolysAfter",
      value: function multiPolysAfter() {
        var key = 'multiPolysAfter';
        if (this._cache[key] === undefined) this._cache[key] = this["_".concat(key)]();
        return this._cache[key];
      }
    }, {
      key: "_multiPolysAfter",
      value: function _multiPolysAfter() {
        // first calcualte our polysAfter
        var polysAfter = [];
        var polysExclude = [];
        var ringsAfter = this.ringsAfter();

        for (var i = 0, iMax = ringsAfter.length; i < iMax; i++) {
          var ring = ringsAfter[i];
          var poly = ring.poly;
          if (polysExclude.indexOf(poly) !== -1) continue;
          if (ring.isExterior) polysAfter.push(poly);else {
            if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly);
            var index = polysAfter.indexOf(ring.poly);
            if (index !== -1) polysAfter.splice(index, 1);
          }
        } // now calculate our multiPolysAfter


        var mps = [];

        for (var _i = 0, _iMax = polysAfter.length; _i < _iMax; _i++) {
          var mp = polysAfter[_i].multiPoly;
          if (mps.indexOf(mp) === -1) mps.push(mp);
        }

        return mps;
      }
      /* Is this segment part of the final result? */

    }, {
      key: "isInResult",
      value: function isInResult() {
        var key = 'isInResult';
        if (this._cache[key] === undefined) this._cache[key] = this["_".concat(key)]();
        return this._cache[key];
      }
    }, {
      key: "_isInResult",
      value: function _isInResult() {
        // if we've been consumed, we're not in the result
        if (this.consumedBy) return false;
        var mpsBefore = this.multiPolysBefore();
        var mpsAfter = this.multiPolysAfter();

        switch (operation.type) {
          case 'union':
            {
              // UNION - included iff:
              //  * On one side of us there is 0 poly interiors AND
              //  * On the other side there is 1 or more.
              var noBefores = mpsBefore.length === 0;
              var noAfters = mpsAfter.length === 0;
              return noBefores !== noAfters;
            }

          case 'intersection':
            {
              // INTERSECTION - included iff:
              //  * on one side of us all multipolys are rep. with poly interiors AND
              //  * on the other side of us, not all multipolys are repsented
              //    with poly interiors
              var least;
              var most;

              if (mpsBefore.length < mpsAfter.length) {
                least = mpsBefore.length;
                most = mpsAfter.length;
              } else {
                least = mpsAfter.length;
                most = mpsBefore.length;
              }

              return most === operation.numMultiPolys && least < most;
            }

          case 'xor':
            {
              // XOR - included iff:
              //  * the difference between the number of multipolys represented
              //    with poly interiors on our two sides is an odd number
              var diff = Math.abs(mpsBefore.length - mpsAfter.length);
              return diff % 2 === 1;
            }

          case 'difference':
            {
              // DIFFERENCE included iff:
              //  * on exactly one side, we have just the subject
              var isJustSubject = function isJustSubject(mps) {
                return mps.length === 1 && mps[0].isSubject;
              };

              return isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);
            }

          default:
            throw new Error("Unrecognized operation type found ".concat(operation.type));
        }
      }
    }], [{
      key: "fromRing",
      value: function fromRing(pt1, pt2, ring) {
        var leftPt, rightPt; // ordering the two points according to sweep line ordering

        var cmpPts = SweepEvent.comparePoints(pt1, pt2);

        if (cmpPts < 0) {
          leftPt = pt1;
          rightPt = pt2;
        } else if (cmpPts > 0) {
          leftPt = pt2;
          rightPt = pt1;
        } else throw new Error("Tried to create degenerate segment at [".concat(pt1.x, ", ").concat(pt1.y, "]"));

        var leftSE = new SweepEvent(leftPt, true);
        var rightSE = new SweepEvent(rightPt, false);
        return new Segment(leftSE, rightSE, [ring]);
      }
    }]);

    return Segment;
  }();

  var RingIn =
  /*#__PURE__*/
  function () {
    function RingIn(geomRing, poly, isExterior) {
      _classCallCheck(this, RingIn);

      this.poly = poly;
      this.isExterior = isExterior;
      this.segments = [];
      var prevPoint = geomRing[0];

      for (var i = 1, iMax = geomRing.length; i < iMax; i++) {
        var point = geomRing[i];
        this.segments.push(Segment.fromRing(prevPoint, point, this));
        prevPoint = point;
      }

      this.segments.push(Segment.fromRing(prevPoint, geomRing[0], this));
    }

    _createClass(RingIn, [{
      key: "getSweepEvents",
      value: function getSweepEvents() {
        var sweepEvents = [];

        for (var i = 0, iMax = this.segments.length; i < iMax; i++) {
          var segment = this.segments[i];
          sweepEvents.push(segment.leftSE);
          sweepEvents.push(segment.rightSE);
        }

        return sweepEvents;
      }
    }]);

    return RingIn;
  }();
  var PolyIn =
  /*#__PURE__*/
  function () {
    function PolyIn(geomPoly, multiPoly) {
      _classCallCheck(this, PolyIn);

      this.exteriorRing = new RingIn(geomPoly[0], this, true);
      this.interiorRings = [];

      for (var i = 1, iMax = geomPoly.length; i < iMax; i++) {
        this.interiorRings.push(new RingIn(geomPoly[i], this, false));
      }

      this.multiPoly = multiPoly;
    }

    _createClass(PolyIn, [{
      key: "getSweepEvents",
      value: function getSweepEvents() {
        var sweepEvents = this.exteriorRing.getSweepEvents();

        for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {
          var ringSweepEvents = this.interiorRings[i].getSweepEvents();

          for (var j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {
            sweepEvents.push(ringSweepEvents[j]);
          }
        }

        return sweepEvents;
      }
    }]);

    return PolyIn;
  }();
  var MultiPolyIn =
  /*#__PURE__*/
  function () {
    function MultiPolyIn(geomMultiPoly) {
      _classCallCheck(this, MultiPolyIn);

      this.polys = [];

      for (var i = 0, iMax = geomMultiPoly.length; i < iMax; i++) {
        this.polys.push(new PolyIn(geomMultiPoly[i], this));
      }

      this.isSubject = false;
    }

    _createClass(MultiPolyIn, [{
      key: "markAsSubject",
      value: function markAsSubject() {
        this.isSubject = true;
      }
    }, {
      key: "getSweepEvents",
      value: function getSweepEvents() {
        var sweepEvents = [];

        for (var i = 0, iMax = this.polys.length; i < iMax; i++) {
          var polySweepEvents = this.polys[i].getSweepEvents();

          for (var j = 0, jMax = polySweepEvents.length; j < jMax; j++) {
            sweepEvents.push(polySweepEvents[j]);
          }
        }

        return sweepEvents;
      }
    }]);

    return MultiPolyIn;
  }();

  var RingOut =
  /*#__PURE__*/
  function () {
    _createClass(RingOut, null, [{
      key: "factory",

      /* Given the segments from the sweep line pass, compute & return a series
       * of closed rings from all the segments marked to be part of the result */
      value: function factory(allSegments) {
        var ringsOut = [];

        for (var i = 0, iMax = allSegments.length; i < iMax; i++) {
          var segment = allSegments[i];
          if (!segment.isInResult() || segment.ringOut) continue;
          var prevEvent = null;
          var event = segment.leftSE;
          var nextEvent = segment.rightSE;
          var events = [event];
          var startingPoint = event.point;
          var intersectionLEs = [];
          /* Walk the chain of linked events to form a closed ring */

          while (true) {
            prevEvent = event;
            event = nextEvent;
            events.push(event);
            /* Is the ring complete? */

            if (event.point === startingPoint) break;

            while (true) {
              var availableLEs = event.getAvailableLinkedEvents();
              /* Did we hit a dead end? This shouldn't happen. Indicates some earlier
               * part of the algorithm malfunctioned... please file a bug report. */

              if (availableLEs.length === 0) {
                var firstPt = events[0].point;
                var lastPt = events[events.length - 1].point;
                throw new Error("Unable to complete output ring starting at [".concat(firstPt.x, ",") + " ".concat(firstPt.y, "]. Last matching segment found ends at") + " [".concat(lastPt.x, ", ").concat(lastPt.y, "]."));
              }
              /* Only one way to go, so cotinue on the path */


              if (availableLEs.length === 1) {
                nextEvent = availableLEs[0].otherSE;
                break;
              }
              /* We must have an intersection. Check for a completed loop */


              var indexLE = null;

              for (var j = 0, jMax = intersectionLEs.length; j < jMax; j++) {
                if (intersectionLEs[j].point === event.point) {
                  indexLE = j;
                  break;
                }
              }
              /* Found a completed loop. Cut that off and make a ring */


              if (indexLE !== null) {
                var intersectionLE = intersectionLEs.splice(indexLE)[0];
                var ringEvents = events.splice(intersectionLE.index);
                ringEvents.unshift(ringEvents[0].otherSE);
                ringsOut.push(new RingOut(ringEvents.reverse()));
                continue;
              }
              /* register the intersection */


              intersectionLEs.push({
                index: events.length,
                point: event.point
              });
              /* Choose the left-most option to continue the walk */

              var comparator = event.getLeftmostComparator(prevEvent);
              nextEvent = availableLEs.sort(comparator)[0].otherSE;
              break;
            }
          }

          ringsOut.push(new RingOut(events));
        }

        return ringsOut;
      }
    }]);

    function RingOut(events) {
      _classCallCheck(this, RingOut);

      this.events = events;

      for (var i = 0, iMax = events.length; i < iMax; i++) {
        events[i].segment.ringOut = this;
      }

      this.poly = null;
    }

    _createClass(RingOut, [{
      key: "getGeom",
      value: function getGeom() {
        // Remove superfluous points (ie extra points along a straight line),
        var prevPt = this.events[0].point;
        var points = [prevPt];

        for (var i = 1, iMax = this.events.length - 1; i < iMax; i++) {
          var _pt = this.events[i].point;
          var _nextPt = this.events[i + 1].point;
          if (compareVectorAngles(_pt, prevPt, _nextPt) === 0) continue;
          points.push(_pt);
          prevPt = _pt;
        } // ring was all (within rounding error of angle calc) colinear points


        if (points.length === 1) return null; // check if the starting point is necessary

        var pt = points[0];
        var nextPt = points[1];
        if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift();
        points.push(points[0]);
        var step = this.isExteriorRing() ? 1 : -1;
        var iStart = this.isExteriorRing() ? 0 : points.length - 1;
        var iEnd = this.isExteriorRing() ? points.length : -1;
        var orderedPoints = [];

        for (var _i = iStart; _i != iEnd; _i += step) {
          orderedPoints.push([points[_i].x, points[_i].y]);
        }

        return orderedPoints;
      }
    }, {
      key: "isExteriorRing",
      value: function isExteriorRing() {
        if (this._isExteriorRing === undefined) {
          var enclosing = this.enclosingRing();
          this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;
        }

        return this._isExteriorRing;
      }
    }, {
      key: "enclosingRing",
      value: function enclosingRing() {
        if (this._enclosingRing === undefined) {
          this._enclosingRing = this._calcEnclosingRing();
        }

        return this._enclosingRing;
      }
      /* Returns the ring that encloses this one, if any */

    }, {
      key: "_calcEnclosingRing",
      value: function _calcEnclosingRing() {
        // start with the ealier sweep line event so that the prevSeg
        // chain doesn't lead us inside of a loop of ours
        var leftMostEvt = this.events[0];

        for (var i = 1, iMax = this.events.length; i < iMax; i++) {
          var evt = this.events[i];
          if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt;
        }

        var prevSeg = leftMostEvt.segment.prevInResult();
        var prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;

        while (true) {
          // no segment found, thus no ring can enclose us
          if (!prevSeg) return null; // no segments below prev segment found, thus the ring of the prev
          // segment must loop back around and enclose us

          if (!prevPrevSeg) return prevSeg.ringOut; // if the two segments are of different rings, the ring of the prev
          // segment must either loop around us or the ring of the prev prev
          // seg, which would make us and the ring of the prev peers

          if (prevPrevSeg.ringOut !== prevSeg.ringOut) {
            if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {
              return prevSeg.ringOut;
            } else return prevSeg.ringOut.enclosingRing();
          } // two segments are from the same ring, so this was a penisula
          // of that ring. iterate downward, keep searching


          prevSeg = prevPrevSeg.prevInResult();
          prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;
        }
      }
    }]);

    return RingOut;
  }();
  var PolyOut =
  /*#__PURE__*/
  function () {
    function PolyOut(exteriorRing) {
      _classCallCheck(this, PolyOut);

      this.exteriorRing = exteriorRing;
      exteriorRing.poly = this;
      this.interiorRings = [];
    }

    _createClass(PolyOut, [{
      key: "addInterior",
      value: function addInterior(ring) {
        this.interiorRings.push(ring);
        ring.poly = this;
      }
    }, {
      key: "getGeom",
      value: function getGeom() {
        var geom = [this.exteriorRing.getGeom()]; // exterior ring was all (within rounding error of angle calc) colinear points

        if (geom[0] === null) return null;

        for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {
          var ringGeom = this.interiorRings[i].getGeom(); // interior ring was all (within rounding error of angle calc) colinear points

          if (ringGeom === null) continue;
          geom.push(ringGeom);
        }

        return geom;
      }
    }]);

    return PolyOut;
  }();
  var MultiPolyOut =
  /*#__PURE__*/
  function () {
    function MultiPolyOut(rings) {
      _classCallCheck(this, MultiPolyOut);

      this.rings = rings;
      this.polys = this._composePolys(rings);
    }

    _createClass(MultiPolyOut, [{
      key: "getGeom",
      value: function getGeom() {
        var geom = [];

        for (var i = 0, iMax = this.polys.length; i < iMax; i++) {
          var polyGeom = this.polys[i].getGeom(); // exterior ring was all (within rounding error of angle calc) colinear points

          if (polyGeom === null) continue;
          geom.push(polyGeom);
        }

        return geom;
      }
    }, {
      key: "_composePolys",
      value: function _composePolys(rings) {
        var polys = [];

        for (var i = 0, iMax = rings.length; i < iMax; i++) {
          var ring = rings[i];
          if (ring.poly) continue;
          if (ring.isExteriorRing()) polys.push(new PolyOut(ring));else {
            var enclosingRing = ring.enclosingRing();
            if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing));
            enclosingRing.poly.addInterior(ring);
          }
        }

        return polys;
      }
    }]);

    return MultiPolyOut;
  }();

  /**
   * NOTE:  We must be careful not to change any segments while
   *        they are in the SplayTree. AFAIK, there's no way to tell
   *        the tree to rebalance itself - thus before splitting
   *        a segment that's in the tree, we remove it from the tree,
   *        do the split, then re-insert it. (Even though splitting a
   *        segment *shouldn't* change its correct position in the
   *        sweep line tree, the reality is because of rounding errors,
   *        it sometimes does.)
   */

  var SweepLine =
  /*#__PURE__*/
  function () {
    function SweepLine(queue) {
      var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Segment.compare;

      _classCallCheck(this, SweepLine);

      this.queue = queue;
      this.tree = new Tree(comparator);
      this.segments = [];
    }

    _createClass(SweepLine, [{
      key: "process",
      value: function process(event) {
        var segment = event.segment;
        var newEvents = []; // if we've already been consumed by another segment,
        // clean up our body parts and get out

        if (event.consumedBy) {
          if (event.isLeft) this.queue.remove(event.otherSE);else this.tree.remove(segment);
          return newEvents;
        }

        var node = event.isLeft ? this.tree.insert(segment) : this.tree.find(segment);
        if (!node) throw new Error("Unable to find segment #".concat(segment.id, " ") + "[".concat(segment.leftSE.point.x, ", ").concat(segment.leftSE.point.y, "] -> ") + "[".concat(segment.rightSE.point.x, ", ").concat(segment.rightSE.point.y, "] ") + 'in SweepLine tree. Please submit a bug report.');
        var prevNode = node;
        var nextNode = node;
        var prevSeg = undefined;
        var nextSeg = undefined; // skip consumed segments still in tree

        while (prevSeg === undefined) {
          prevNode = this.tree.prev(prevNode);
          if (prevNode === null) prevSeg = null;else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key;
        } // skip consumed segments still in tree


        while (nextSeg === undefined) {
          nextNode = this.tree.next(nextNode);
          if (nextNode === null) nextSeg = null;else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key;
        }

        if (event.isLeft) {
          // Check for intersections against the previous segment in the sweep line
          var prevMySplitter = null;

          if (prevSeg) {
            var prevInter = prevSeg.getIntersection(segment);

            if (prevInter !== null) {
              if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter;

              if (!prevSeg.isAnEndpoint(prevInter)) {
                var newEventsFromSplit = this._splitSafely(prevSeg, prevInter);

                for (var i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {
                  newEvents.push(newEventsFromSplit[i]);
                }
              }
            }
          } // Check for intersections against the next segment in the sweep line


          var nextMySplitter = null;

          if (nextSeg) {
            var nextInter = nextSeg.getIntersection(segment);

            if (nextInter !== null) {
              if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter;

              if (!nextSeg.isAnEndpoint(nextInter)) {
                var _newEventsFromSplit = this._splitSafely(nextSeg, nextInter);

                for (var _i = 0, _iMax = _newEventsFromSplit.length; _i < _iMax; _i++) {
                  newEvents.push(_newEventsFromSplit[_i]);
                }
              }
            }
          } // For simplicity, even if we find more than one intersection we only
          // spilt on the 'earliest' (sweep-line style) of the intersections.
          // The other intersection will be handled in a future process().


          if (prevMySplitter !== null || nextMySplitter !== null) {
            var mySplitter = null;
            if (prevMySplitter === null) mySplitter = nextMySplitter;else if (nextMySplitter === null) mySplitter = prevMySplitter;else {
              var cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter);
              if (cmpSplitters < 0) mySplitter = prevMySplitter;
              if (cmpSplitters > 0) mySplitter = nextMySplitter; // the two splitters are the exact same point

              mySplitter = prevMySplitter;
            } // Rounding errors can cause changes in ordering,
            // so remove afected segments and right sweep events before splitting

            this.queue.remove(segment.rightSE);
            newEvents.push(segment.rightSE);

            var _newEventsFromSplit2 = segment.split(mySplitter);

            for (var _i2 = 0, _iMax2 = _newEventsFromSplit2.length; _i2 < _iMax2; _i2++) {
              newEvents.push(_newEventsFromSplit2[_i2]);
            }
          }

          if (newEvents.length > 0) {
            // We found some intersections, so re-do the current event to
            // make sure sweep line ordering is totally consistent for later
            // use with the segment 'prev' pointers
            this.tree.remove(segment);
            newEvents.push(event);
          } else {
            // done with left event
            this.segments.push(segment);
            segment.prev = prevSeg;
          }
        } else {
          // event.isRight
          // since we're about to be removed from the sweep line, check for
          // intersections between our previous and next segments
          if (prevSeg && nextSeg) {
            var inter = prevSeg.getIntersection(nextSeg);

            if (inter !== null) {
              if (!prevSeg.isAnEndpoint(inter)) {
                var _newEventsFromSplit3 = this._splitSafely(prevSeg, inter);

                for (var _i3 = 0, _iMax3 = _newEventsFromSplit3.length; _i3 < _iMax3; _i3++) {
                  newEvents.push(_newEventsFromSplit3[_i3]);
                }
              }

              if (!nextSeg.isAnEndpoint(inter)) {
                var _newEventsFromSplit4 = this._splitSafely(nextSeg, inter);

                for (var _i4 = 0, _iMax4 = _newEventsFromSplit4.length; _i4 < _iMax4; _i4++) {
                  newEvents.push(_newEventsFromSplit4[_i4]);
                }
              }
            }
          }

          this.tree.remove(segment);
        }

        return newEvents;
      }
      /* Safely split a segment that is currently in the datastructures
       * IE - a segment other than the one that is currently being processed. */

    }, {
      key: "_splitSafely",
      value: function _splitSafely(seg, pt) {
        // Rounding errors can cause changes in ordering,
        // so remove afected segments and right sweep events before splitting
        // removeNode() doesn't work, so have re-find the seg
        // https://github.com/w8r/splay-tree/pull/5
        this.tree.remove(seg);
        var rightSE = seg.rightSE;
        this.queue.remove(rightSE);
        var newEvents = seg.split(pt);
        newEvents.push(rightSE); // splitting can trigger consumption

        if (seg.consumedBy === undefined) this.tree.insert(seg);
        return newEvents;
      }
    }]);

    return SweepLine;
  }();

  var Operation =
  /*#__PURE__*/
  function () {
    function Operation() {
      _classCallCheck(this, Operation);
    }

    _createClass(Operation, [{
      key: "run",
      value: function run(type, geom, moreGeoms) {
        operation.type = type;
        rounder.reset();
        /* Make a copy of the input geometry with rounded points as objects */

        var geoms = [pointsAsObjects(geom)];

        for (var i = 0, iMax = moreGeoms.length; i < iMax; i++) {
          geoms.push(pointsAsObjects(moreGeoms[i]));
        }
        /* Clean inputs */


        for (var _i = 0, _iMax = geoms.length; _i < _iMax; _i++) {
          forceMultiPoly(geoms[_i]);
          cleanMultiPoly(geoms[_i]);
        }
        /* Convert inputs to MultiPoly objects, mark subject */


        var multipolys = [];

        for (var _i2 = 0, _iMax2 = geoms.length; _i2 < _iMax2; _i2++) {
          multipolys.push(new MultiPolyIn(geoms[_i2]));
        }

        multipolys[0].markAsSubject();
        operation.numMultiPolys = multipolys.length;
        /* Put segment endpoints in a priority queue */

        var queue = new Tree(SweepEvent.compare);

        for (var _i3 = 0, _iMax3 = multipolys.length; _i3 < _iMax3; _i3++) {
          var sweepEvents = multipolys[_i3].getSweepEvents();

          for (var j = 0, jMax = sweepEvents.length; j < jMax; j++) {
            queue.insert(sweepEvents[j]);
          }
        }
        /* Pass the sweep line over those endpoints */


        var sweepLine = new SweepLine(queue);
        var prevQueueSize = queue.size;
        var node = queue.pop();

        while (node) {
          var evt = node.key;

          if (queue.size === prevQueueSize) {
            // prevents an infinite loop, an otherwise common manifestation of bugs
            throw new Error("Unable to pop() SweepEvent [".concat(evt.point.x, ", ").concat(evt.point.y, "] from ") + "segment #".concat(evt.segment.id, " from queue. Please file a bug report."));
          }

          var newEvents = sweepLine.process(evt);

          for (var _i4 = 0, _iMax4 = newEvents.length; _i4 < _iMax4; _i4++) {
            var _evt = newEvents[_i4];
            if (_evt.consumedBy === undefined) queue.insert(_evt);
          }

          prevQueueSize = queue.size;
          node = queue.pop();
        } // free some memory we don't need anymore


        rounder.reset();
        /* Collect and compile segments we're keeping into a multipolygon */

        var ringsOut = RingOut.factory(sweepLine.segments);
        var result = new MultiPolyOut(ringsOut);
        return result.getGeom();
      }
    }]);

    return Operation;
  }(); // singleton available by import

  var operation = new Operation();

  var union$1 = function union(geom) {
    for (var _len = arguments.length, moreGeoms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      moreGeoms[_key - 1] = arguments[_key];
    }

    return operation.run('union', geom, moreGeoms);
  };

  var intersection$1$1 = function intersection(geom) {
    for (var _len2 = arguments.length, moreGeoms = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      moreGeoms[_key2 - 1] = arguments[_key2];
    }

    return operation.run('intersection', geom, moreGeoms);
  };

  var xor = function xor(geom) {
    for (var _len3 = arguments.length, moreGeoms = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      moreGeoms[_key3 - 1] = arguments[_key3];
    }

    return operation.run('xor', geom, moreGeoms);
  };

  var difference$1 = function difference(subjectGeom) {
    for (var _len4 = arguments.length, clippingGeoms = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      clippingGeoms[_key4 - 1] = arguments[_key4];
    }

    return operation.run('difference', subjectGeom, clippingGeoms);
  };

  var index = {
    union: union$1,
    intersection: intersection$1$1,
    xor: xor,
    difference: difference$1
  };

  /**
   * Return a surface representing the difference between the first surface
   *   and the rest of the surfaces.
   * The difference of no surfaces is the empty surface.
   * The difference of one surface is that surface.
   * @param {Array<surface>} surfaces - the surfaces.
   * @returns {surface} - the resulting surface
   * @example
   * let C = difference(A, B)
   * @example
   * +-------+            +-------+
   * |       |            |   C   |
   * |   A   |            |       |
   * |    +--+----+   =   |    +--+
   * +----+--+    |       +----+
   *      |   B   |
   *      |       |
   *      +-------+
   */
  const difference$2 = (baseSurface, ...surfaces) => {
    if (surfaces.length === 0) {
      return baseSurface;
    }
    const surfaceClipping = z0SurfaceToClipping(canonicalize$4(baseSurface));
    const subtractionClipping = surfaces.map(surface => z0SurfaceToClipping(canonicalize$4(surface)));
    const outputClipping = index.difference(surfaceClipping, ...subtractionClipping);
    const outputPaths = clippingToPolygons(outputClipping);
    return outputPaths;
  };

  /**
   * Produce a surface that is the intersection of all provided surfaces.
   * The intersection of no surfaces is the empty surface.
   * The intersection of one surface is that surface.
   * @param {Array<surface>} surfaces - the surfaces to intersect.
   * @returns {surface} the intersection of surfaces.
   * @example
   * let C = difference(A, B)
   * @example
   * +-------+            +-------+
   * |       |            |   C   |
   * |   A   |            |       |
   * |    +--+----+   =   |    +--+
   * +----+--+    |       +----+
   *      |   B   |
   *      |       |
   *      +-------+
   */
  const intersection$2 = (...z0Surfaces) => {
    if (z0Surfaces.length === 0) {
      return [];
    }
    return clippingToPolygons(index.intersection(...z0Surfaces.map(z0SurfaceToClipping)));
  };

  const blessAsConvex$1 = (paths) => { paths.isConvex = true; return paths; };

  const toContour$1 = (polygon) => {
    const points = [];
    for (const [x = 0, y = 0, z = 0] of polygon) {
      points.push(x, y, z);
    }
    return points;
  };

  const fromTessellation$1 = (tessellation) => {
    const tessPolygons = tessellation.elements;
    const vertices = tessellation.vertices;
    const polygons = [];

    const toPoint = (offset) => {
      const vertex = tessPolygons[offset];
      return [vertices[vertex * 3 + 0], vertices[vertex * 3 + 1], vertices[vertex * 3 + 2]];
    };

    for (let nth = 0; nth < tessPolygons.length; nth += 3) {
      polygons.push([toPoint(nth + 0), toPoint(nth + 1), toPoint(nth + 2)]);
    }

    return polygons;
  };

  // This currently does triangulation.
  // Higher arities are possible, but end up being null padded.
  // Let's see if they're useful.

  // TODO: Call this toConvexPolygons
  const makeConvex$1 = (options = {}, polygons) => {
    if (polygons.isConvex) {
      return polygons;
    }
    if (polygons.every(isConvex)) {
      return blessAsConvex$1(polygons);
    }
    const contours = polygons.map(toContour$1);
    // CONISDER: Migrating from tess2 to earclip, given we flatten in solid tessellation anyhow.
    const convex = fromTessellation$1(
      tess2$1.tesselate({ contours: contours,
                        windingRule: tess2$1.WINDING_ODD,
                        elementType: tess2$1.POLYGONS,
                        polySize: 3,
                        vertexSize: 3
      }));
    return blessAsConvex$1(convex);
  };

  /**
   * Produces a surface that is the union of all provided surfaces.
   * The union of no surfaces is the empty surface.
   * The union of one surface is that surface.
   * @param {Array<Z0Surface>} surfaces - the z0 surfaces to union.
   * @returns {Z0Surface} the resulting z0 surface.
   */
  const union$2 = (...surfaces) => {
    if (surfaces.length === 0) {
      return [];
    }
    if (surfaces.length === 1) {
      return surfaces[0];
    }
    const clipping = surfaces.map(surface => z0SurfaceToClipping(canonicalize$4(surface)));
    const result = index.union(...clipping);
    return clippingToPolygons(result);
  };

  const makeConvex$2 = (options = {}, surface) => {
    assertCoplanar(surface);
    const [to, from] = toXYPlaneTransforms(toPlane$1(surface));
    let retessellatedSurface = makeConvex$1({}, union$2(...transform$6(to, surface).map(polygon => [polygon])));
    return transform$6(from, retessellatedSurface);
  };

  const measureArea$1 = (surface) => {
    // CHECK: That this handles negative area properly.
    let total = 0;
    for (const polygon of surface) {
      total += measureArea(polygon);
    }
    return total;
  };

  const multiply$2 = (matrix, solid) => solid.map(surface => transform$6(matrix, surface));

  const rotateX = (radians, solid) => multiply$2(fromXRotation(radians), solid);
  const scale$4 = (vector, solid) => multiply$2(fromScaling(vector), solid);

  const eachPoint$3 = (options = {}, thunk, solid) => {
    for (const surface of solid) {
      eachPoint$2(options, thunk, surface);
    }
  };

  const flip$6 = (solid) => solid.map(surface => flip$5(surface));

  const fromPolygons = (options = {}, polygons) => {
    const coplanarGroups = new Map();

    for (const polygon of polygons) {
      const plane = toPlane(polygon);
      const key = JSON.stringify(plane);
      const groups = coplanarGroups.get(key);
      if (groups === undefined) {
        coplanarGroups.set(key, [polygon]);
      } else {
        groups.push(polygon);
      }
    }

    // The solid is a list of surfaces, which are lists of coplanar polygons.
    const solid = [...coplanarGroups.values()];

    for (const surface of solid) {
      assertCoplanar(surface);
    }

    return solid;
  };

  // returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)
  const measureBoundingBox$2 = (solid) => {
    let max$1 = solid[0][0][0];
    let min$1 = solid[0][0][0];
    eachPoint$3({},
              point => {
                max$1 = max(max$1, point);
                min$1 = min(min$1, point);
              },
              solid);
    return [min$1, max$1];
  };

  /** Measure the bounding sphere of the given poly3
   * @param {poly3} the poly3 to measure
   * @returns computed bounding sphere; center (vec3) and radius
   */
  const measureBoundingSphere = (solid) => {
    if (solid.boundingSphere === undefined) {
      const [min, max] = measureBoundingBox$2(solid);
      const center = scale(0.5, add(min, max));
      const radius = distance(center, max);
      solid.boundingSphere = [center, radius];
    }
    return solid.boundingSphere;
  };

  // Relax the coplanar arrangement into polygon soup.
  const toPolygons = (options = {}, solid) => [].concat(...solid);

  const hasMatchingTag = (set, tags, whenSetUndefined = false) => {
    if (set === undefined) {
      return whenSetUndefined;
    } else if (tags !== undefined && tags.some(tag => set.includes(tag))) {
      return true;
    } else {
      return false;
    }
  };

  const map$2 = (geometry, operation) => {
    const walk = (geometry) => {
      if (geometry.assembly) {
        return operation({ assembly: geometry.assembly.map(walk), tags: geometry.tags });
      } else {
        return operation(geometry);
      }
    };
    return walk(geometry);
  };

  // This needs to recursively walk the assembly.
  const filterAndFlattenAssemblyData = ({ requires, excludes, form }, geometry) => {
    const filtered = [];
    const filter = (item) => {
      const data = item[form];
      if (data === undefined || hasMatchingTag(excludes, item.tags)) {
        return item;
      }
      if (hasMatchingTag(requires, item.tags, true)) {
        filtered.push(data);
      }
      return item;
    };
    map$2(geometry, filter);
    return filtered;
  };

  const create = () => ({ surfaces: [] });

  const EPSILON$1 = 1e-5;

  const COPLANAR$1 = 0; // Neither front nor back.
  const FRONT$1 = 1;
  const BACK$1 = 2;
  const SPANNING = 3; // Both front and back.

  const toType$1 = (plane, point) => {
    let t = signedDistanceToPoint(plane, point);
    if (t < -EPSILON$1) {
      return BACK$1;
    } else if (t > EPSILON$1) {
      return FRONT$1;
    } else {
      return COPLANAR$1;
    }
  };

  const splitSurface = (plane, coplanarFrontSurfaces, coplanarBackSurfaces, frontSurfaces, backSurfaces, surface) => {
    assertCoplanar(surface);
    const coplanarFrontPolygons = [];
    const coplanarBackPolygons = [];
    const frontPolygons = [];
    const backPolygons = [];
    let polygonType = COPLANAR$1;
    for (const polygon of surface) {
      if (!equals$2(toPlane(polygon), plane)) {
        for (const point of polygon) {
          polygonType |= toType$1(plane, point);
        }
      }

      // Put the polygon in the correct list, splitting it when necessary.
      switch (polygonType) {
        case COPLANAR$1: {
          if (dot(plane, toPlane(polygon)) > 0) {
            coplanarFrontPolygons.push(polygon);
          } else {
            coplanarBackPolygons.push(polygon);
          }
          break;
        }
        case FRONT$1: {
          frontPolygons.push(polygon);
          break;
        }
        case BACK$1: {
          backPolygons.push(polygon);
          break;
        }
        case SPANNING: {
          let frontPoints = [];
          let backPoints = [];
          let startPoint = polygon[polygon.length - 1];
          let startType = toType$1(plane, startPoint);
          for (const endPoint of polygon) {
            const endType = toType$1(plane, endPoint);
            if (startType !== BACK$1) {
              // The inequality is important as it includes COPLANAR points.
              frontPoints.push(startPoint);
            }
            if (startType !== FRONT$1) {
              // The inequality is important as it includes COPLANAR points.
              backPoints.push(startPoint);
            }
            if ((startType | endType) === SPANNING) {
              // This should exclude COPLANAR points.
              // Compute the point that touches the splitting plane.
              const rawSpanPoint = splitLineSegmentByPlane(plane, startPoint, endPoint);
              const spanPoint = subtract(rawSpanPoint, scale(signedDistanceToPoint(toPlane(polygon), rawSpanPoint), plane));
              frontPoints.push(spanPoint);
              backPoints.push(spanPoint);
              if (Math.abs(signedDistanceToPoint(plane, spanPoint)) > EPSILON$1) throw Error('die');
              if (frontPoints.length >= 3) {
                assertCoplanar([frontPoints]);
              }
              if (backPoints.length >= 3) {
                assertCoplanar([backPoints]);
              }
            }
            startPoint = endPoint;
            startType = endType;
          }
          if (frontPoints.length >= 3) {
          // Add the polygon that sticks out the front of the plane.
            frontPolygons.push(frontPoints);
          }
          if (backPoints.length >= 3) {
          // Add the polygon that sticks out the back of the plane.
            backPolygons.push(backPoints);
          }
          break;
        }
      }
    }
    if (coplanarFrontPolygons.length > 0) {
      assertCoplanar(coplanarFrontPolygons);
      coplanarFrontSurfaces.push(coplanarFrontPolygons);
    }
    if (coplanarBackPolygons.length > 0) {
      assertCoplanar(coplanarBackPolygons);
      coplanarBackSurfaces.push(coplanarBackPolygons);
    }
    if (frontPolygons.length > 0) {
      assertCoplanar(frontPolygons);
      frontSurfaces.push(frontPolygons);
    }
    if (backPolygons.length > 0) {
      assertCoplanar(backPolygons);
      backSurfaces.push(backPolygons);
    }
  };

  // Build a BSP tree out of surfaces. When called on an existing tree, the
  // new surfaces are filtered down to the bottom of the tree and become new
  // nodes there. Each set of surfaces is partitioned using the surface with the largest area.
  const build = (bsp, surfaces) => {
    if (surfaces.length === 0) {
      return;
    }
    if (bsp.plane === undefined) {
      let largestSurface = surfaces[0];
      for (let nth = 1; nth < surfaces.length; nth++) {
        if (measureArea$1(surfaces[nth]) > measureArea$1(largestSurface)) {
          largestSurface = surfaces[nth];
        }
      }
      // Use the plane of the surface to partition the branches.
      bsp.plane = toPlane$1(largestSurface);
    }
    let front = [];
    let back = [];
    for (let i = 0; i < surfaces.length; i++) {
      splitSurface(bsp.plane, bsp.surfaces, bsp.surfaces, front, back, surfaces[i]);
    }
    if (front.length > 0) {
      if (bsp.front === undefined) {
        bsp.front = create();
      }
      build(bsp.front, front);
    }
    if (back.length > 0) {
      if (bsp.back === undefined) {
        bsp.back = create();
      }
      build(bsp.back, back);
    }
  };

  const clipSurfaces = (bsp, surfaces) => {
    if (surfaces.length === 0) {
      // PROVE: Does this happen due to degeneracy?
      return [];
    }
    if (bsp.plane === undefined) {
      return surfaces.slice();
    }
    let front = [];
    let back = [];
    for (let i = 0; i < surfaces.length; i++) {
      splitSurface(bsp.plane, front, back, front, back, surfaces[i]);
    }
    if (bsp.front !== undefined) {
      front = clipSurfaces(bsp.front, front);
    }
    if (bsp.back !== undefined) {
      back = clipSurfaces(bsp.back, back);
    } else {
      // PROVE: Explain this asymmetry.
      // These surfaces are behind a face, and inside the tree.
      back = [];
    }
    return front.concat(back);
  };

  // Destructively remove all parts of surfaces from a that are in b.
  const clipTo = (a, b) => {
    a.surfaces = clipSurfaces(b, a.surfaces);
    if (a.front !== undefined) {
      clipTo(a.front, b);
    }
    if (a.back !== undefined) {
      clipTo(a.back, b);
    }
  };

  const flip$7 = (bsp) => {
    // Flip the polygons.
    bsp.surfaces = bsp.surfaces.map(flip$5);
    // Recompute the plane.
    if (bsp.plane !== undefined) {
      // PROVE: General equivalence.
      // const a = toPlane(bsp.polygons[0]);
      // const b = plane.flip(bsp.plane);
      // if (!plane.equals(a, b)) { throw Error(`die: ${JSON.stringify([a, b])}`); }
      bsp.plane = flip$1(bsp.plane);
    }
    // Invert the children.
    if (bsp.front !== undefined) {
      flip$7(bsp.front);
    }
    if (bsp.back !== undefined) {
      flip$7(bsp.back);
    }
    // Swap the children.
    [bsp.front, bsp.back] = [bsp.back, bsp.front];
  };

  const fromSurfaces = (options = {}, surfaces) => {
    for (const surface of surfaces) {
      assertCoplanar(surface);
    }
    const bsp = create();
    // Build is destructive.
    build(bsp, surfaces.map(surface => surface.slice()));
    return bsp;
  };

  const gatherSurfaces = (bsp) => {
    // PROVE: That we need this slice.
    let surfaces = bsp.surfaces.slice();
    if (bsp.front !== undefined) {
      surfaces = surfaces.concat(gatherSurfaces(bsp.front));
    }
    if (bsp.back !== undefined) {
      surfaces = surfaces.concat(gatherSurfaces(bsp.back));
    }
    return surfaces;
  };

  const toSurfaces = (options = {}, bsp) => {
    const surfaces = gatherSurfaces(bsp);
    for (const surface of surfaces) {
      assertCoplanar(surface);
    }
    // Some of these surfaces may have cracked.
    return surfaces;
  };

  const doesNotOverlap = (a, b) => {
    const [centerA, radiusA] = measureBoundingSphere(a);
    const [centerB, radiusB] = measureBoundingSphere(b);
    return distance(centerA, centerB) > radiusA + radiusB;
  };

  /**
     * Given a solid and a set of solids to subtract produce the resulting solid.
     * @param {Polygons} base - Polygons for the base to subtract from.
     * @param {Array<Polygons>} subtractions - a list of Polygons to subtract.
     * @returns {Polygons} the resulting Polygons.
     * @example
     * let C = difference(A, B);
     * @example
     * +-------+            +-------+
     * |       |            |       |
     * |   A   |            |       |
     * |    +--+----+   =   |    +--+
     * +----+--+    |       +----+
     *      |   B   |
     *      |       |
     *      +-------+
     */
  const difference$3 = (base, ...subtractions) => {
    if (base.length === 0) {
      return base;
    }
    if (subtractions.length === 0) {
      return base;
    }
    // TODO: Figure out why we do not subtract the union of the remainder of
    // the geometries. This approach chains subtractions rather than producing
    // a generational tree.
    for (let i = 0; i < subtractions.length; i++) {
      if (subtractions[i].length === 0) {
        // Nothing to do.
        continue;
      }
      if (doesNotOverlap(base, subtractions[i])) {
        // Nothing to do.
        continue;
      }
      const baseBsp = fromSurfaces({}, base);
      const subtractBsp = fromSurfaces({}, subtractions[i]);

      flip$7(baseBsp);
      clipTo(baseBsp, subtractBsp);
      clipTo(subtractBsp, baseBsp);

      flip$7(subtractBsp);
      clipTo(subtractBsp, baseBsp);
      flip$7(subtractBsp);

      build(baseBsp, toSurfaces({}, subtractBsp));
      flip$7(baseBsp);

      // PROVE: That the round-trip to solids and back is unnecessary for the intermediate stages.
      base = toSurfaces({}, baseBsp);
    }
    return base;
  };

  /**
   * Return a solid representing filled volume present in all provided solids.
   * A pairwise generational reduction is used.
   * @param {Array<Polygons>} solids - list Polygons.
   * @returns {Polygons} the resulting solid.
   * @example
   * let C = intersection(A, B)
   * @example
   * +--------+
   * |        |
   * |   A    |
   * |    +---+----+       +---+
   * |    |   |    |   =   + C +
   * +----+---+    |       +---+
   *      |    B   |
   *      |        |
   *      +--------+
   */
  const intersection$3 = (...solids) => {
    // Run a queue so that intersections are generally against intersections of the same generation.
    while (solids.length > 1) {
      const aSolid = solids.shift();
      const bSolid = solids.shift();

      const aBsp = fromSurfaces({}, aSolid);
      const bBsp = fromSurfaces({}, bSolid);

      flip$7(aBsp);
      clipTo(bBsp, aBsp);

      flip$7(bBsp);
      clipTo(aBsp, bBsp);
      clipTo(bBsp, aBsp);
      build(aBsp, toSurfaces({}, bBsp));

      flip$7(aBsp);

      // Push back for the next generation.
      solids.push(toSurfaces({}, aBsp));
    }
    return solids[0];
  };

  const union$3 = (...solids) => {
    if (solids.length === 0) {
      return [];
    }
    while (solids.length > 1) {
      const aSolid = solids.shift();
      const bSolid = solids.shift();

      const aBsp = fromSurfaces({}, aSolid);
      const bBsp = fromSurfaces({}, bSolid);

      // Remove the bits of a that are in b.
      clipTo(aBsp, bBsp);

      // Remove the bits of b that are in a.
      clipTo(bBsp, aBsp);

      // Turn b inside out and remove the bits that are in a.
      flip$7(bBsp);
      clipTo(bBsp, aBsp);
      flip$7(bBsp);

      // Now merge the two together.
      build(aBsp, toSurfaces({}, bBsp));

      // And build a geometry from the result.
      solids.push(toSurfaces({}, aBsp));
    }
    return solids[0];
  };

  const difference$4 = (...geometries) => {
    const assembly = { assembly: geometries };
    const pathsData = filterAndFlattenAssemblyData({ form: 'paths' }, assembly);
    const solidData = filterAndFlattenAssemblyData({ form: 'solid' }, assembly);
    const z0SurfaceData = filterAndFlattenAssemblyData({ form: 'z0Surface' }, assembly);
    const differenced = { assembly: [] };
    if (pathsData.length > 0) {
      differenced.assembly.push({ paths: difference(...pathsData) });
    }
    if (solidData.length > 0) {
      differenced.assembly.push({ solid: difference$3(...solidData) });
    }
    if (z0SurfaceData.length > 0) {
      differenced.assembly.push({ z0Surface: difference$2(...z0SurfaceData) });
    }
    return differenced;
  };

  const eachItem = (geometry, operation) => {
    const walk = (geometry) => {
      if (geometry.assembly) {
        geometry.assembly.forEach(walk);
      }
      operation(geometry);
    };
    walk(geometry);
  };

  const eachPoint$4 = (options, operation, geometry) => {
    map$2(geometry,
        (geometry) => {
          if (geometry.paths) {
            eachPoint$1(options, operation, geometry.paths);
          }
          if (geometry.solid) {
            eachPoint$3(options, operation, geometry.solid);
          }
          if (geometry.z0Surface) {
            eachPoint$2(options, operation, geometry.z0Surface);
          }
        });
  };

  const flipEntry = (entry) => {
    const flipped = {};
    if (entry.points) {
      flipped.points = flip$3(entry.points);
    }
    if (entry.paths) {
      flipped.paths = flip$4(entry.paths);
    }
    if (entry.surface) {
      flipped.surface = flip$5(entry.surface);
    }
    if (entry.solid) {
      flipped.solid = flip$6(entry.solid);
    }
    if (entry.assembly) {
      flipped.assembly = flip$8(entry.assembly);
    }
    flipped.tags = entry.tags;
    return flipped;
  };

  const flip$8 = (assembly) => assembly.map(flipEntry);

  const intersection$4 = (...geometries) => {
    const assembly = { assembly: geometries };
    const pathsData = filterAndFlattenAssemblyData({ form: 'paths' }, assembly);
    const solidData = filterAndFlattenAssemblyData({ form: 'solid' }, assembly);
    const z0SurfaceData = filterAndFlattenAssemblyData({ form: 'z0Surface' }, assembly);
    const intersectioned = { assembly: [] };
    if (pathsData.length > 0) {
      intersectioned.assembly.push({ paths: intersection(...pathsData) });
    }
    if (solidData.length > 0) {
      intersectioned.assembly.push({ solid: intersection$3(...solidData) });
    }
    if (z0SurfaceData.length > 0) {
      intersectioned.assembly.push({ z0Surface: intersection$2(...z0SurfaceData) });
    }
    return intersectioned;
  };

  const toComponents = ({ requires, excludes }, geometry) => {
    const components = [];

    const walk = (geometry) => {
      for (const item of geometry.assembly) {
        if (hasMatchingTag(excludes, item.tags)) {
          continue;
        } else if (hasMatchingTag(requires, item.tags, true)) {
          components.push(item);
        } else if (item.assembly !== undefined) {
          walk(item);
        }
      }
    };
    walk(geometry);
    return components;
  };

  const differenceItems = (base, ...subtractions) => {
    const differenced = { tags: base.tags };
    if (base.solid) {
      differenced.solid = base.solid;
      for (const subtraction of subtractions) {
        if (subtraction.solid) {
          differenced.solid = difference$3(differenced.solid, subtraction.solid);
        }
      }
    } else if (base.z0Surface) {
      differenced.z0Surface = base.z0Surface;
      for (const subtraction of subtractions) {
        if (subtraction.z0Surface) {
          differenced.z0Surface = difference$2(differenced.z0Surface, subtraction.z0Surface);
        }
      }
      return differenced;
    } else if (base.paths) {
      differenced.paths = base.paths;
      // FIX: Figure out how paths differencing should work.
    }
    return differenced;
  };

  // Traverse the assembly tree and disjoint it backward.
  const toDisjointGeometry = (geometry) => {
    if (geometry.assembly === undefined) {
      // A singleton is disjoint.
      return geometry;
    } else {
      const subtractions = [];
      const walk = (geometry, disjointed) => {
        for (let nth = geometry.assembly.length - 1; nth >= 0; nth--) {
          const item = geometry.assembly[nth];
          if (item.assembly !== undefined) {
            disjointed.assembly.push(walk(item, { assembly: [], tags: item.tags }));
          } else {
            const differenced = differenceItems(item, ...subtractions);
            disjointed.assembly.push(differenced);
            subtractions.push(differenced);
          }
        }
        return disjointed;
      };
      const result = walk(geometry, { assembly: [], tags: geometry.tags });
      return result;
    }
  };

  const toPaths$1 = ({ requires, excludes }, assembly) =>
    ({
      paths: union(...filterAndFlattenAssemblyData({ requires, excludes, form: 'paths' }, toDisjointGeometry(assembly)))
    });

  const toSolid = ({ requires, excludes }, assembly) =>
    ({
      solid: union$3(...filterAndFlattenAssemblyData({ requires, excludes, form: 'solid' }, toDisjointGeometry(assembly)))
    });

  const toZ0Surface = ({ requires, excludes }, assembly) => {
    const filtered = filterAndFlattenAssemblyData({ requires, excludes, form: 'z0Surface' }, toDisjointGeometry(assembly));
    const unioned = union$2(...filtered);
    return { z0Surface: unioned };
  };

  const transformItem = (matrix, item) => {
    const transformed = {};
    if (item.assembly) {
      transformed.assembly = item.assembly;
    }
    if (item.paths) {
      transformed.paths = transform$5(matrix, item.paths);
    }
    if (item.points) {
      transformed.points = transform$4(matrix, item.points);
    }
    if (item.solid) {
      transformed.solid = multiply$2(matrix, item.solid);
    }
    if (item.z0Surface) {
      // FIX: Handle transformations that take the surface out of z0.
      transformed.z0Surface = transform$6(matrix, item.z0Surface);
    }
    transformed.tags = item.tags;
    return transformed;
  };

  const transform$7 = (matrix, assembly) => map$2(assembly, item => transformItem(matrix, item));

  const union$4 = (...geometries) => {
    const assembly = { assembly: geometries };
    const pathsData = filterAndFlattenAssemblyData({ form: 'paths' }, assembly);
    const solidData = filterAndFlattenAssemblyData({ form: 'solid' }, assembly);
    const z0SurfaceData = filterAndFlattenAssemblyData({ form: 'z0Surface' }, assembly);
    const unioned = { assembly: [] };
    if (pathsData.length > 0) {
      unioned.assembly.push({ paths: union(...pathsData) });
    }
    if (solidData.length > 0) {
      unioned.assembly.push({ solid: union$3(...solidData) });
    }
    if (z0SurfaceData.length > 0) {
      unioned.assembly.push({ z0Surface: union$2(...z0SurfaceData) });
    }
    return unioned;
  };

  const toPolygons$1 = (geometry) => {
    const polygonSets = [];
    eachItem(geometry,
             item => {
               if (item.z0Surface) {
                 polygonSets.push(item.z0Surface);
               }
             });
    return [].concat(...polygonSets);
  };

  /** Serialize the give objects to SVG format.
   * @param {Object} [options] - options for serialization
   * @param {Object|Array} objects - objects to serialize as SVG
   * @returns {Array} serialized contents, SVG format
   */
  const toSvg = async ({ padding = 0 }, geometry) => {
    // FIX: SVG should handle both surfaces and paths.
    const polygons = canonicalize$2(toPolygons$1(geometry));
    const min = measureBoundingBox(polygons)[0];
    // TODO: Add transform and translate support to polygons.
    const shiftedPolygons = canonicalize$2(translate$1(negate(min), polygons));
    const [width, height] = measureBoundingBox(shiftedPolygons)[1];

    return [
      `<?xml version="1.0" encoding="UTF-8"?>`,
      `<!-- Generated by jsxcad -->`,
      `<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Tiny//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd">`,
      `<svg baseProfile="tiny" height="${height} mm" width="${width} mm" viewBox="${-padding} ${-padding} ${width + 2 * padding} ${height + 2 * padding}" version="1.1" stroke="black" stroke-width=".1" fill="none" xmlns="http://www.w3.org/2000/svg">`,
      ...shiftedPolygons.map(polygon => `<path d="${polygon.map((point, index) => `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`).join(' ')} z"/>`),
      `</svg>`
    ].join('\n');
  };

  /*! https://mths.be/codepointat v0.2.0 by @mathias */
  if (!String.prototype.codePointAt) {
  	(function() {
  		var defineProperty = (function() {
  			// IE 8 only supports `Object.defineProperty` on DOM elements
  			try {
  				var object = {};
  				var $defineProperty = Object.defineProperty;
  				var result = $defineProperty(object, object, object) && $defineProperty;
  			} catch(error) {}
  			return result;
  		}());
  		var codePointAt = function(position) {
  			if (this == null) {
  				throw TypeError();
  			}
  			var string = String(this);
  			var size = string.length;
  			// `ToInteger`
  			var index = position ? Number(position) : 0;
  			if (index != index) { // better `isNaN`
  				index = 0;
  			}
  			// Account for out-of-bounds indices:
  			if (index < 0 || index >= size) {
  				return undefined;
  			}
  			// Get the first code unit
  			var first = string.charCodeAt(index);
  			var second;
  			if ( // check if it’s the start of a surrogate pair
  				first >= 0xD800 && first <= 0xDBFF && // high surrogate
  				size > index + 1 // there is a next code unit
  			) {
  				second = string.charCodeAt(index + 1);
  				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
  					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
  					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
  				}
  			}
  			return first;
  		};
  		if (defineProperty) {
  			defineProperty(String.prototype, 'codePointAt', {
  				'value': codePointAt,
  				'configurable': true,
  				'writable': true
  			});
  		} else {
  			String.prototype.codePointAt = codePointAt;
  		}
  	}());
  }

  var TINF_OK = 0;
  var TINF_DATA_ERROR = -3;

  function Tree$1() {
    this.table = new Uint16Array(16);   /* table of code length counts */
    this.trans = new Uint16Array(288);  /* code -> symbol translation table */
  }

  function Data(source, dest) {
    this.source = source;
    this.sourceIndex = 0;
    this.tag = 0;
    this.bitcount = 0;
    
    this.dest = dest;
    this.destLen = 0;
    
    this.ltree = new Tree$1();  /* dynamic length/symbol tree */
    this.dtree = new Tree$1();  /* dynamic distance tree */
  }

  /* --------------------------------------------------- *
   * -- uninitialized global data (static structures) -- *
   * --------------------------------------------------- */

  var sltree = new Tree$1();
  var sdtree = new Tree$1();

  /* extra bits and base tables for length codes */
  var length_bits = new Uint8Array(30);
  var length_base = new Uint16Array(30);

  /* extra bits and base tables for distance codes */
  var dist_bits = new Uint8Array(30);
  var dist_base = new Uint16Array(30);

  /* special ordering of code length codes */
  var clcidx = new Uint8Array([
    16, 17, 18, 0, 8, 7, 9, 6,
    10, 5, 11, 4, 12, 3, 13, 2,
    14, 1, 15
  ]);

  /* used by tinf_decode_trees, avoids allocations every call */
  var code_tree = new Tree$1();
  var lengths = new Uint8Array(288 + 32);

  /* ----------------------- *
   * -- utility functions -- *
   * ----------------------- */

  /* build extra bits and base tables */
  function tinf_build_bits_base(bits, base, delta, first) {
    var i, sum;

    /* build bits table */
    for (i = 0; i < delta; ++i) bits[i] = 0;
    for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;

    /* build base table */
    for (sum = first, i = 0; i < 30; ++i) {
      base[i] = sum;
      sum += 1 << bits[i];
    }
  }

  /* build the fixed huffman trees */
  function tinf_build_fixed_trees(lt, dt) {
    var i;

    /* build fixed length tree */
    for (i = 0; i < 7; ++i) lt.table[i] = 0;

    lt.table[7] = 24;
    lt.table[8] = 152;
    lt.table[9] = 112;

    for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;
    for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;
    for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;
    for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;

    /* build fixed distance tree */
    for (i = 0; i < 5; ++i) dt.table[i] = 0;

    dt.table[5] = 32;

    for (i = 0; i < 32; ++i) dt.trans[i] = i;
  }

  /* given an array of code lengths, build a tree */
  var offs = new Uint16Array(16);

  function tinf_build_tree(t, lengths, off, num) {
    var i, sum;

    /* clear code length count table */
    for (i = 0; i < 16; ++i) t.table[i] = 0;

    /* scan symbol lengths, and sum code length counts */
    for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;

    t.table[0] = 0;

    /* compute offset table for distribution sort */
    for (sum = 0, i = 0; i < 16; ++i) {
      offs[i] = sum;
      sum += t.table[i];
    }

    /* create code->symbol translation table (symbols sorted by code) */
    for (i = 0; i < num; ++i) {
      if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;
    }
  }

  /* ---------------------- *
   * -- decode functions -- *
   * ---------------------- */

  /* get one bit from source stream */
  function tinf_getbit(d) {
    /* check if tag is empty */
    if (!d.bitcount--) {
      /* load next tag */
      d.tag = d.source[d.sourceIndex++];
      d.bitcount = 7;
    }

    /* shift bit out of tag */
    var bit = d.tag & 1;
    d.tag >>>= 1;

    return bit;
  }

  /* read a num bit value from a stream and add base */
  function tinf_read_bits(d, num, base) {
    if (!num)
      return base;

    while (d.bitcount < 24) {
      d.tag |= d.source[d.sourceIndex++] << d.bitcount;
      d.bitcount += 8;
    }

    var val = d.tag & (0xffff >>> (16 - num));
    d.tag >>>= num;
    d.bitcount -= num;
    return val + base;
  }

  /* given a data stream and a tree, decode a symbol */
  function tinf_decode_symbol(d, t) {
    while (d.bitcount < 24) {
      d.tag |= d.source[d.sourceIndex++] << d.bitcount;
      d.bitcount += 8;
    }
    
    var sum = 0, cur = 0, len = 0;
    var tag = d.tag;

    /* get more bits while code value is above sum */
    do {
      cur = 2 * cur + (tag & 1);
      tag >>>= 1;
      ++len;

      sum += t.table[len];
      cur -= t.table[len];
    } while (cur >= 0);
    
    d.tag = tag;
    d.bitcount -= len;

    return t.trans[sum + cur];
  }

  /* given a data stream, decode dynamic trees from it */
  function tinf_decode_trees(d, lt, dt) {
    var hlit, hdist, hclen;
    var i, num, length;

    /* get 5 bits HLIT (257-286) */
    hlit = tinf_read_bits(d, 5, 257);

    /* get 5 bits HDIST (1-32) */
    hdist = tinf_read_bits(d, 5, 1);

    /* get 4 bits HCLEN (4-19) */
    hclen = tinf_read_bits(d, 4, 4);

    for (i = 0; i < 19; ++i) lengths[i] = 0;

    /* read code lengths for code length alphabet */
    for (i = 0; i < hclen; ++i) {
      /* get 3 bits code length (0-7) */
      var clen = tinf_read_bits(d, 3, 0);
      lengths[clcidx[i]] = clen;
    }

    /* build code length tree */
    tinf_build_tree(code_tree, lengths, 0, 19);

    /* decode code lengths for the dynamic trees */
    for (num = 0; num < hlit + hdist;) {
      var sym = tinf_decode_symbol(d, code_tree);

      switch (sym) {
        case 16:
          /* copy previous code length 3-6 times (read 2 bits) */
          var prev = lengths[num - 1];
          for (length = tinf_read_bits(d, 2, 3); length; --length) {
            lengths[num++] = prev;
          }
          break;
        case 17:
          /* repeat code length 0 for 3-10 times (read 3 bits) */
          for (length = tinf_read_bits(d, 3, 3); length; --length) {
            lengths[num++] = 0;
          }
          break;
        case 18:
          /* repeat code length 0 for 11-138 times (read 7 bits) */
          for (length = tinf_read_bits(d, 7, 11); length; --length) {
            lengths[num++] = 0;
          }
          break;
        default:
          /* values 0-15 represent the actual code lengths */
          lengths[num++] = sym;
          break;
      }
    }

    /* build dynamic trees */
    tinf_build_tree(lt, lengths, 0, hlit);
    tinf_build_tree(dt, lengths, hlit, hdist);
  }

  /* ----------------------------- *
   * -- block inflate functions -- *
   * ----------------------------- */

  /* given a stream and two trees, inflate a block of data */
  function tinf_inflate_block_data(d, lt, dt) {
    while (1) {
      var sym = tinf_decode_symbol(d, lt);

      /* check for end of block */
      if (sym === 256) {
        return TINF_OK;
      }

      if (sym < 256) {
        d.dest[d.destLen++] = sym;
      } else {
        var length, dist, offs;
        var i;

        sym -= 257;

        /* possibly get more bits from length code */
        length = tinf_read_bits(d, length_bits[sym], length_base[sym]);

        dist = tinf_decode_symbol(d, dt);

        /* possibly get more bits from distance code */
        offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);

        /* copy match */
        for (i = offs; i < offs + length; ++i) {
          d.dest[d.destLen++] = d.dest[i];
        }
      }
    }
  }

  /* inflate an uncompressed block of data */
  function tinf_inflate_uncompressed_block(d) {
    var length, invlength;
    var i;
    
    /* unread from bitbuffer */
    while (d.bitcount > 8) {
      d.sourceIndex--;
      d.bitcount -= 8;
    }

    /* get length */
    length = d.source[d.sourceIndex + 1];
    length = 256 * length + d.source[d.sourceIndex];

    /* get one's complement of length */
    invlength = d.source[d.sourceIndex + 3];
    invlength = 256 * invlength + d.source[d.sourceIndex + 2];

    /* check length */
    if (length !== (~invlength & 0x0000ffff))
      return TINF_DATA_ERROR;

    d.sourceIndex += 4;

    /* copy block */
    for (i = length; i; --i)
      d.dest[d.destLen++] = d.source[d.sourceIndex++];

    /* make sure we start next block on a byte boundary */
    d.bitcount = 0;

    return TINF_OK;
  }

  /* inflate stream from source to dest */
  function tinf_uncompress(source, dest) {
    var d = new Data(source, dest);
    var bfinal, btype, res;

    do {
      /* read final block flag */
      bfinal = tinf_getbit(d);

      /* read block type (2 bits) */
      btype = tinf_read_bits(d, 2, 0);

      /* decompress block */
      switch (btype) {
        case 0:
          /* decompress uncompressed block */
          res = tinf_inflate_uncompressed_block(d);
          break;
        case 1:
          /* decompress block with fixed huffman trees */
          res = tinf_inflate_block_data(d, sltree, sdtree);
          break;
        case 2:
          /* decompress block with dynamic huffman trees */
          tinf_decode_trees(d, d.ltree, d.dtree);
          res = tinf_inflate_block_data(d, d.ltree, d.dtree);
          break;
        default:
          res = TINF_DATA_ERROR;
      }

      if (res !== TINF_OK)
        throw new Error('Data error');

    } while (!bfinal);

    if (d.destLen < d.dest.length) {
      if (typeof d.dest.slice === 'function')
        return d.dest.slice(0, d.destLen);
      else
        return d.dest.subarray(0, d.destLen);
    }
    
    return d.dest;
  }

  /* -------------------- *
   * -- initialization -- *
   * -------------------- */

  /* build fixed huffman trees */
  tinf_build_fixed_trees(sltree, sdtree);

  /* build extra bits and base tables */
  tinf_build_bits_base(length_bits, length_base, 4, 3);
  tinf_build_bits_base(dist_bits, dist_base, 2, 1);

  /* fix a special case */
  length_bits[28] = 0;
  length_base[28] = 258;

  var tinyInflate = tinf_uncompress;

  // The Bounding Box object

  function derive(v0, v1, v2, v3, t) {
      return Math.pow(1 - t, 3) * v0 +
          3 * Math.pow(1 - t, 2) * t * v1 +
          3 * (1 - t) * Math.pow(t, 2) * v2 +
          Math.pow(t, 3) * v3;
  }
  /**
   * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.
   * It is used to calculate the bounding box of a glyph or text path.
   *
   * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.
   *
   * @exports opentype.BoundingBox
   * @class
   * @constructor
   */
  function BoundingBox() {
      this.x1 = Number.NaN;
      this.y1 = Number.NaN;
      this.x2 = Number.NaN;
      this.y2 = Number.NaN;
  }

  /**
   * Returns true if the bounding box is empty, that is, no points have been added to the box yet.
   */
  BoundingBox.prototype.isEmpty = function() {
      return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
  };

  /**
   * Add the point to the bounding box.
   * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.
   * @param {number} x - The X coordinate of the point.
   * @param {number} y - The Y coordinate of the point.
   */
  BoundingBox.prototype.addPoint = function(x, y) {
      if (typeof x === 'number') {
          if (isNaN(this.x1) || isNaN(this.x2)) {
              this.x1 = x;
              this.x2 = x;
          }
          if (x < this.x1) {
              this.x1 = x;
          }
          if (x > this.x2) {
              this.x2 = x;
          }
      }
      if (typeof y === 'number') {
          if (isNaN(this.y1) || isNaN(this.y2)) {
              this.y1 = y;
              this.y2 = y;
          }
          if (y < this.y1) {
              this.y1 = y;
          }
          if (y > this.y2) {
              this.y2 = y;
          }
      }
  };

  /**
   * Add a X coordinate to the bounding box.
   * This extends the bounding box to include the X coordinate.
   * This function is used internally inside of addBezier.
   * @param {number} x - The X coordinate of the point.
   */
  BoundingBox.prototype.addX = function(x) {
      this.addPoint(x, null);
  };

  /**
   * Add a Y coordinate to the bounding box.
   * This extends the bounding box to include the Y coordinate.
   * This function is used internally inside of addBezier.
   * @param {number} y - The Y coordinate of the point.
   */
  BoundingBox.prototype.addY = function(y) {
      this.addPoint(null, y);
  };

  /**
   * Add a Bézier curve to the bounding box.
   * This extends the bounding box to include the entire Bézier.
   * @param {number} x0 - The starting X coordinate.
   * @param {number} y0 - The starting Y coordinate.
   * @param {number} x1 - The X coordinate of the first control point.
   * @param {number} y1 - The Y coordinate of the first control point.
   * @param {number} x2 - The X coordinate of the second control point.
   * @param {number} y2 - The Y coordinate of the second control point.
   * @param {number} x - The ending X coordinate.
   * @param {number} y - The ending Y coordinate.
   */
  BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {
      // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html
      // and https://github.com/icons8/svg-path-bounding-box

      const p0 = [x0, y0];
      const p1 = [x1, y1];
      const p2 = [x2, y2];
      const p3 = [x, y];

      this.addPoint(x0, y0);
      this.addPoint(x, y);

      for (let i = 0; i <= 1; i++) {
          const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
          const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
          const c = 3 * p1[i] - 3 * p0[i];

          if (a === 0) {
              if (b === 0) continue;
              const t = -c / b;
              if (0 < t && t < 1) {
                  if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t));
                  if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t));
              }
              continue;
          }

          const b2ac = Math.pow(b, 2) - 4 * c * a;
          if (b2ac < 0) continue;
          const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
          if (0 < t1 && t1 < 1) {
              if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));
              if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));
          }
          const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
          if (0 < t2 && t2 < 1) {
              if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));
              if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));
          }
      }
  };

  /**
   * Add a quadratic curve to the bounding box.
   * This extends the bounding box to include the entire quadratic curve.
   * @param {number} x0 - The starting X coordinate.
   * @param {number} y0 - The starting Y coordinate.
   * @param {number} x1 - The X coordinate of the control point.
   * @param {number} y1 - The Y coordinate of the control point.
   * @param {number} x - The ending X coordinate.
   * @param {number} y - The ending Y coordinate.
   */
  BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {
      const cp1x = x0 + 2 / 3 * (x1 - x0);
      const cp1y = y0 + 2 / 3 * (y1 - y0);
      const cp2x = cp1x + 1 / 3 * (x - x0);
      const cp2y = cp1y + 1 / 3 * (y - y0);
      this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
  };

  // Geometric objects

  /**
   * A bézier path containing a set of path commands similar to a SVG path.
   * Paths can be drawn on a context using `draw`.
   * @exports opentype.Path
   * @class
   * @constructor
   */
  function Path() {
      this.commands = [];
      this.fill = 'black';
      this.stroke = null;
      this.strokeWidth = 1;
  }

  /**
   * @param  {number} x
   * @param  {number} y
   */
  Path.prototype.moveTo = function(x, y) {
      this.commands.push({
          type: 'M',
          x: x,
          y: y
      });
  };

  /**
   * @param  {number} x
   * @param  {number} y
   */
  Path.prototype.lineTo = function(x, y) {
      this.commands.push({
          type: 'L',
          x: x,
          y: y
      });
  };

  /**
   * Draws cubic curve
   * @function
   * curveTo
   * @memberof opentype.Path.prototype
   * @param  {number} x1 - x of control 1
   * @param  {number} y1 - y of control 1
   * @param  {number} x2 - x of control 2
   * @param  {number} y2 - y of control 2
   * @param  {number} x - x of path point
   * @param  {number} y - y of path point
   */

  /**
   * Draws cubic curve
   * @function
   * bezierCurveTo
   * @memberof opentype.Path.prototype
   * @param  {number} x1 - x of control 1
   * @param  {number} y1 - y of control 1
   * @param  {number} x2 - x of control 2
   * @param  {number} y2 - y of control 2
   * @param  {number} x - x of path point
   * @param  {number} y - y of path point
   * @see curveTo
   */
  Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
      this.commands.push({
          type: 'C',
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2,
          x: x,
          y: y
      });
  };

  /**
   * Draws quadratic curve
   * @function
   * quadraticCurveTo
   * @memberof opentype.Path.prototype
   * @param  {number} x1 - x of control
   * @param  {number} y1 - y of control
   * @param  {number} x - x of path point
   * @param  {number} y - y of path point
   */

  /**
   * Draws quadratic curve
   * @function
   * quadTo
   * @memberof opentype.Path.prototype
   * @param  {number} x1 - x of control
   * @param  {number} y1 - y of control
   * @param  {number} x - x of path point
   * @param  {number} y - y of path point
   */
  Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
      this.commands.push({
          type: 'Q',
          x1: x1,
          y1: y1,
          x: x,
          y: y
      });
  };

  /**
   * Closes the path
   * @function closePath
   * @memberof opentype.Path.prototype
   */

  /**
   * Close the path
   * @function close
   * @memberof opentype.Path.prototype
   */
  Path.prototype.close = Path.prototype.closePath = function() {
      this.commands.push({
          type: 'Z'
      });
  };

  /**
   * Add the given path or list of commands to the commands of this path.
   * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.
   */
  Path.prototype.extend = function(pathOrCommands) {
      if (pathOrCommands.commands) {
          pathOrCommands = pathOrCommands.commands;
      } else if (pathOrCommands instanceof BoundingBox) {
          const box = pathOrCommands;
          this.moveTo(box.x1, box.y1);
          this.lineTo(box.x2, box.y1);
          this.lineTo(box.x2, box.y2);
          this.lineTo(box.x1, box.y2);
          this.close();
          return;
      }

      Array.prototype.push.apply(this.commands, pathOrCommands);
  };

  /**
   * Calculate the bounding box of the path.
   * @returns {opentype.BoundingBox}
   */
  Path.prototype.getBoundingBox = function() {
      const box = new BoundingBox();

      let startX = 0;
      let startY = 0;
      let prevX = 0;
      let prevY = 0;
      for (let i = 0; i < this.commands.length; i++) {
          const cmd = this.commands[i];
          switch (cmd.type) {
              case 'M':
                  box.addPoint(cmd.x, cmd.y);
                  startX = prevX = cmd.x;
                  startY = prevY = cmd.y;
                  break;
              case 'L':
                  box.addPoint(cmd.x, cmd.y);
                  prevX = cmd.x;
                  prevY = cmd.y;
                  break;
              case 'Q':
                  box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
                  prevX = cmd.x;
                  prevY = cmd.y;
                  break;
              case 'C':
                  box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                  prevX = cmd.x;
                  prevY = cmd.y;
                  break;
              case 'Z':
                  prevX = startX;
                  prevY = startY;
                  break;
              default:
                  throw new Error('Unexpected path command ' + cmd.type);
          }
      }
      if (box.isEmpty()) {
          box.addPoint(0, 0);
      }
      return box;
  };

  /**
   * Draw the path to a 2D context.
   * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.
   */
  Path.prototype.draw = function(ctx) {
      ctx.beginPath();
      for (let i = 0; i < this.commands.length; i += 1) {
          const cmd = this.commands[i];
          if (cmd.type === 'M') {
              ctx.moveTo(cmd.x, cmd.y);
          } else if (cmd.type === 'L') {
              ctx.lineTo(cmd.x, cmd.y);
          } else if (cmd.type === 'C') {
              ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
          } else if (cmd.type === 'Q') {
              ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
          } else if (cmd.type === 'Z') {
              ctx.closePath();
          }
      }

      if (this.fill) {
          ctx.fillStyle = this.fill;
          ctx.fill();
      }

      if (this.stroke) {
          ctx.strokeStyle = this.stroke;
          ctx.lineWidth = this.strokeWidth;
          ctx.stroke();
      }
  };

  /**
   * Convert the Path to a string of path data instructions
   * See http://www.w3.org/TR/SVG/paths.html#PathData
   * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
   * @return {string}
   */
  Path.prototype.toPathData = function(decimalPlaces) {
      decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

      function floatToString(v) {
          if (Math.round(v) === v) {
              return '' + Math.round(v);
          } else {
              return v.toFixed(decimalPlaces);
          }
      }

      function packValues() {
          let s = '';
          for (let i = 0; i < arguments.length; i += 1) {
              const v = arguments[i];
              if (v >= 0 && i > 0) {
                  s += ' ';
              }

              s += floatToString(v);
          }

          return s;
      }

      let d = '';
      for (let i = 0; i < this.commands.length; i += 1) {
          const cmd = this.commands[i];
          if (cmd.type === 'M') {
              d += 'M' + packValues(cmd.x, cmd.y);
          } else if (cmd.type === 'L') {
              d += 'L' + packValues(cmd.x, cmd.y);
          } else if (cmd.type === 'C') {
              d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
          } else if (cmd.type === 'Q') {
              d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
          } else if (cmd.type === 'Z') {
              d += 'Z';
          }
      }

      return d;
  };

  /**
   * Convert the path to an SVG <path> element, as a string.
   * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
   * @return {string}
   */
  Path.prototype.toSVG = function(decimalPlaces) {
      let svg = '<path d="';
      svg += this.toPathData(decimalPlaces);
      svg += '"';
      if (this.fill && this.fill !== 'black') {
          if (this.fill === null) {
              svg += ' fill="none"';
          } else {
              svg += ' fill="' + this.fill + '"';
          }
      }

      if (this.stroke) {
          svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
      }

      svg += '/>';
      return svg;
  };

  /**
   * Convert the path to a DOM element.
   * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
   * @return {SVGPathElement}
   */
  Path.prototype.toDOMElement = function(decimalPlaces) {
      const temporaryPath = this.toPathData(decimalPlaces);
      const newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');

      newPath.setAttribute('d', temporaryPath);

      return newPath;
  };

  // Run-time checking of preconditions.

  function fail(message) {
      throw new Error(message);
  }

  // Precondition function that checks if the given predicate is true.
  // If not, it will throw an error.
  function argument(predicate, message) {
      if (!predicate) {
          fail(message);
      }
  }
  var check = { fail, argument, assert: argument };

  // Data types used in the OpenType font file.

  const LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
  const LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

  /**
   * @exports opentype.decode
   * @class
   */
  const decode = {};
  /**
   * @exports opentype.encode
   * @class
   */
  const encode = {};
  /**
   * @exports opentype.sizeOf
   * @class
   */
  const sizeOf = {};

  // Return a function that always returns the same value.
  function constant(v) {
      return function() {
          return v;
      };
  }

  // OpenType data types //////////////////////////////////////////////////////

  /**
   * Convert an 8-bit unsigned integer to a list of 1 byte.
   * @param {number}
   * @returns {Array}
   */
  encode.BYTE = function(v) {
      check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
      return [v];
  };
  /**
   * @constant
   * @type {number}
   */
  sizeOf.BYTE = constant(1);

  /**
   * Convert a 8-bit signed integer to a list of 1 byte.
   * @param {string}
   * @returns {Array}
   */
  encode.CHAR = function(v) {
      return [v.charCodeAt(0)];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.CHAR = constant(1);

  /**
   * Convert an ASCII string to a list of bytes.
   * @param {string}
   * @returns {Array}
   */
  encode.CHARARRAY = function(v) {
      const b = [];
      for (let i = 0; i < v.length; i += 1) {
          b[i] = v.charCodeAt(i);
      }

      return b;
  };

  /**
   * @param {Array}
   * @returns {number}
   */
  sizeOf.CHARARRAY = function(v) {
      return v.length;
  };

  /**
   * Convert a 16-bit unsigned integer to a list of 2 bytes.
   * @param {number}
   * @returns {Array}
   */
  encode.USHORT = function(v) {
      return [(v >> 8) & 0xFF, v & 0xFF];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.USHORT = constant(2);

  /**
   * Convert a 16-bit signed integer to a list of 2 bytes.
   * @param {number}
   * @returns {Array}
   */
  encode.SHORT = function(v) {
      // Two's complement
      if (v >= LIMIT16) {
          v = -(2 * LIMIT16 - v);
      }

      return [(v >> 8) & 0xFF, v & 0xFF];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.SHORT = constant(2);

  /**
   * Convert a 24-bit unsigned integer to a list of 3 bytes.
   * @param {number}
   * @returns {Array}
   */
  encode.UINT24 = function(v) {
      return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.UINT24 = constant(3);

  /**
   * Convert a 32-bit unsigned integer to a list of 4 bytes.
   * @param {number}
   * @returns {Array}
   */
  encode.ULONG = function(v) {
      return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.ULONG = constant(4);

  /**
   * Convert a 32-bit unsigned integer to a list of 4 bytes.
   * @param {number}
   * @returns {Array}
   */
  encode.LONG = function(v) {
      // Two's complement
      if (v >= LIMIT32) {
          v = -(2 * LIMIT32 - v);
      }

      return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.LONG = constant(4);

  encode.FIXED = encode.ULONG;
  sizeOf.FIXED = sizeOf.ULONG;

  encode.FWORD = encode.SHORT;
  sizeOf.FWORD = sizeOf.SHORT;

  encode.UFWORD = encode.USHORT;
  sizeOf.UFWORD = sizeOf.USHORT;

  /**
   * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.
   * @param {number}
   * @returns {Array}
   */
  encode.LONGDATETIME = function(v) {
      return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.LONGDATETIME = constant(8);

  /**
   * Convert a 4-char tag to a list of 4 bytes.
   * @param {string}
   * @returns {Array}
   */
  encode.TAG = function(v) {
      check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
      return [v.charCodeAt(0),
              v.charCodeAt(1),
              v.charCodeAt(2),
              v.charCodeAt(3)];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.TAG = constant(4);

  // CFF data types ///////////////////////////////////////////////////////////

  encode.Card8 = encode.BYTE;
  sizeOf.Card8 = sizeOf.BYTE;

  encode.Card16 = encode.USHORT;
  sizeOf.Card16 = sizeOf.USHORT;

  encode.OffSize = encode.BYTE;
  sizeOf.OffSize = sizeOf.BYTE;

  encode.SID = encode.USHORT;
  sizeOf.SID = sizeOf.USHORT;

  // Convert a numeric operand or charstring number to a variable-size list of bytes.
  /**
   * Convert a numeric operand or charstring number to a variable-size list of bytes.
   * @param {number}
   * @returns {Array}
   */
  encode.NUMBER = function(v) {
      if (v >= -107 && v <= 107) {
          return [v + 139];
      } else if (v >= 108 && v <= 1131) {
          v = v - 108;
          return [(v >> 8) + 247, v & 0xFF];
      } else if (v >= -1131 && v <= -108) {
          v = -v - 108;
          return [(v >> 8) + 251, v & 0xFF];
      } else if (v >= -32768 && v <= 32767) {
          return encode.NUMBER16(v);
      } else {
          return encode.NUMBER32(v);
      }
  };

  /**
   * @param {number}
   * @returns {number}
   */
  sizeOf.NUMBER = function(v) {
      return encode.NUMBER(v).length;
  };

  /**
   * Convert a signed number between -32768 and +32767 to a three-byte value.
   * This ensures we always use three bytes, but is not the most compact format.
   * @param {number}
   * @returns {Array}
   */
  encode.NUMBER16 = function(v) {
      return [28, (v >> 8) & 0xFF, v & 0xFF];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.NUMBER16 = constant(3);

  /**
   * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
   * This is useful if you want to be sure you always use four bytes,
   * at the expense of wasting a few bytes for smaller numbers.
   * @param {number}
   * @returns {Array}
   */
  encode.NUMBER32 = function(v) {
      return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
  };

  /**
   * @constant
   * @type {number}
   */
  sizeOf.NUMBER32 = constant(5);

  /**
   * @param {number}
   * @returns {Array}
   */
  encode.REAL = function(v) {
      let value = v.toString();

      // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
      // This code converts it back to a number without the epsilon.
      const m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
      if (m) {
          const epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
          value = (Math.round(v * epsilon) / epsilon).toString();
      }

      let nibbles = '';
      for (let i = 0, ii = value.length; i < ii; i += 1) {
          const c = value[i];
          if (c === 'e') {
              nibbles += value[++i] === '-' ? 'c' : 'b';
          } else if (c === '.') {
              nibbles += 'a';
          } else if (c === '-') {
              nibbles += 'e';
          } else {
              nibbles += c;
          }
      }

      nibbles += (nibbles.length & 1) ? 'f' : 'ff';
      const out = [30];
      for (let i = 0, ii = nibbles.length; i < ii; i += 2) {
          out.push(parseInt(nibbles.substr(i, 2), 16));
      }

      return out;
  };

  /**
   * @param {number}
   * @returns {number}
   */
  sizeOf.REAL = function(v) {
      return encode.REAL(v).length;
  };

  encode.NAME = encode.CHARARRAY;
  sizeOf.NAME = sizeOf.CHARARRAY;

  encode.STRING = encode.CHARARRAY;
  sizeOf.STRING = sizeOf.CHARARRAY;

  /**
   * @param {DataView} data
   * @param {number} offset
   * @param {number} numBytes
   * @returns {string}
   */
  decode.UTF8 = function(data, offset, numBytes) {
      const codePoints = [];
      const numChars = numBytes;
      for (let j = 0; j < numChars; j++, offset += 1) {
          codePoints[j] = data.getUint8(offset);
      }

      return String.fromCharCode.apply(null, codePoints);
  };

  /**
   * @param {DataView} data
   * @param {number} offset
   * @param {number} numBytes
   * @returns {string}
   */
  decode.UTF16 = function(data, offset, numBytes) {
      const codePoints = [];
      const numChars = numBytes / 2;
      for (let j = 0; j < numChars; j++, offset += 2) {
          codePoints[j] = data.getUint16(offset);
      }

      return String.fromCharCode.apply(null, codePoints);
  };

  /**
   * Convert a JavaScript string to UTF16-BE.
   * @param {string}
   * @returns {Array}
   */
  encode.UTF16 = function(v) {
      const b = [];
      for (let i = 0; i < v.length; i += 1) {
          const codepoint = v.charCodeAt(i);
          b[b.length] = (codepoint >> 8) & 0xFF;
          b[b.length] = codepoint & 0xFF;
      }

      return b;
  };

  /**
   * @param {string}
   * @returns {number}
   */
  sizeOf.UTF16 = function(v) {
      return v.length * 2;
  };

  // Data for converting old eight-bit Macintosh encodings to Unicode.
  // This representation is optimized for decoding; encoding is slower
  // and needs more memory. The assumption is that all opentype.js users
  // want to open fonts, but saving a font will be comparatively rare
  // so it can be more expensive. Keyed by IANA character set name.
  //
  // Python script for generating these strings:
  //
  //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
  //     print(s.encode('utf-8'))
  /**
   * @private
   */
  const eightBitMacEncodings = {
      'x-mac-croatian':  // Python: 'mac_croatian'
      'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +
      '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
      'x-mac-cyrillic':  // Python: 'mac_cyrillic'
      'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +
      'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
      'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
      'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +
      'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
      'x-mac-greek':  // Python: 'mac_greek'
      'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +
      'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
      'x-mac-icelandic':  // Python: 'mac_iceland'
      'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
      '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
      'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
      'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +
      'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
      'x-mac-ce':  // Python: 'mac_latin2'
      'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +
      'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
      macintosh:  // Python: 'mac_roman'
      'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
      '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
      'x-mac-romanian':  // Python: 'mac_romanian'
      'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +
      '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
      'x-mac-turkish':  // Python: 'mac_turkish'
      'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
      '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
  };

  /**
   * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
   * string, or 'undefined' if the encoding is unsupported. For example, we do
   * not support Chinese, Japanese or Korean because these would need large
   * mapping tables.
   * @param {DataView} dataView
   * @param {number} offset
   * @param {number} dataLength
   * @param {string} encoding
   * @returns {string}
   */
  decode.MACSTRING = function(dataView, offset, dataLength, encoding) {
      const table = eightBitMacEncodings[encoding];
      if (table === undefined) {
          return undefined;
      }

      let result = '';
      for (let i = 0; i < dataLength; i++) {
          const c = dataView.getUint8(offset + i);
          // In all eight-bit Mac encodings, the characters 0x00..0x7F are
          // mapped to U+0000..U+007F; we only need to look up the others.
          if (c <= 0x7F) {
              result += String.fromCharCode(c);
          } else {
              result += table[c & 0x7F];
          }
      }

      return result;
  };

  // Helper function for encode.MACSTRING. Returns a dictionary for mapping
  // Unicode character codes to their 8-bit MacOS equivalent. This table
  // is not exactly a super cheap data structure, but we do not care because
  // encoding Macintosh strings is only rarely needed in typical applications.
  const macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
  let macEncodingCacheKeys;
  const getMacEncodingTable = function (encoding) {
      // Since we use encoding as a cache key for WeakMap, it has to be
      // a String object and not a literal. And at least on NodeJS 2.10.1,
      // WeakMap requires that the same String instance is passed for cache hits.
      if (!macEncodingCacheKeys) {
          macEncodingCacheKeys = {};
          for (let e in eightBitMacEncodings) {
              /*jshint -W053 */  // Suppress "Do not use String as a constructor."
              macEncodingCacheKeys[e] = new String(e);
          }
      }

      const cacheKey = macEncodingCacheKeys[encoding];
      if (cacheKey === undefined) {
          return undefined;
      }

      // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
      // since garbage collection may run at any time, it could also kick in
      // between the calls to cache.has() and cache.get(). In that case,
      // we would return 'undefined' even though we do support the encoding.
      if (macEncodingTableCache) {
          const cachedTable = macEncodingTableCache.get(cacheKey);
          if (cachedTable !== undefined) {
              return cachedTable;
          }
      }

      const decodingTable = eightBitMacEncodings[encoding];
      if (decodingTable === undefined) {
          return undefined;
      }

      const encodingTable = {};
      for (let i = 0; i < decodingTable.length; i++) {
          encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
      }

      if (macEncodingTableCache) {
          macEncodingTableCache.set(cacheKey, encodingTable);
      }

      return encodingTable;
  };

  /**
   * Encodes an old-style Macintosh string. Returns a byte array upon success.
   * If the requested encoding is unsupported, or if the input string contains
   * a character that cannot be expressed in the encoding, the function returns
   * 'undefined'.
   * @param {string} str
   * @param {string} encoding
   * @returns {Array}
   */
  encode.MACSTRING = function(str, encoding) {
      const table = getMacEncodingTable(encoding);
      if (table === undefined) {
          return undefined;
      }

      const result = [];
      for (let i = 0; i < str.length; i++) {
          let c = str.charCodeAt(i);

          // In all eight-bit Mac encodings, the characters 0x00..0x7F are
          // mapped to U+0000..U+007F; we only need to look up the others.
          if (c >= 0x80) {
              c = table[c];
              if (c === undefined) {
                  // str contains a Unicode character that cannot be encoded
                  // in the requested encoding.
                  return undefined;
              }
          }
          result[i] = c;
          // result.push(c);
      }

      return result;
  };

  /**
   * @param {string} str
   * @param {string} encoding
   * @returns {number}
   */
  sizeOf.MACSTRING = function(str, encoding) {
      const b = encode.MACSTRING(str, encoding);
      if (b !== undefined) {
          return b.length;
      } else {
          return 0;
      }
  };

  // Helper for encode.VARDELTAS
  function isByteEncodable(value) {
      return value >= -128 && value <= 127;
  }

  // Helper for encode.VARDELTAS
  function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
      let runLength = 0;
      const numDeltas = deltas.length;
      while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
          ++pos;
          ++runLength;
      }
      result.push(0x80 | (runLength - 1));
      return pos;
  }

  // Helper for encode.VARDELTAS
  function encodeVarDeltaRunAsBytes(deltas, offset, result) {
      let runLength = 0;
      const numDeltas = deltas.length;
      let pos = offset;
      while (pos < numDeltas && runLength < 64) {
          const value = deltas[pos];
          if (!isByteEncodable(value)) {
              break;
          }

          // Within a byte-encoded run of deltas, a single zero is best
          // stored literally as 0x00 value. However, if we have two or
          // more zeroes in a sequence, it is better to start a new run.
          // Fore example, the sequence of deltas [15, 15, 0, 15, 15]
          // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero
          // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)
          // when starting a new run.
          if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
              break;
          }

          ++pos;
          ++runLength;
      }
      result.push(runLength - 1);
      for (let i = offset; i < pos; ++i) {
          result.push((deltas[i] + 256) & 0xff);
      }
      return pos;
  }

  // Helper for encode.VARDELTAS
  function encodeVarDeltaRunAsWords(deltas, offset, result) {
      let runLength = 0;
      const numDeltas = deltas.length;
      let pos = offset;
      while (pos < numDeltas && runLength < 64) {
          const value = deltas[pos];

          // Within a word-encoded run of deltas, it is easiest to start
          // a new run (with a different encoding) whenever we encounter
          // a zero value. For example, the sequence [0x6666, 0, 0x7777]
          // needs 7 bytes when storing the zero inside the current run
          // (42 66 66 00 00 77 77), and equally 7 bytes when starting a
          // new run (40 66 66 80 40 77 77).
          if (value === 0) {
              break;
          }

          // Within a word-encoded run of deltas, a single value in the
          // range (-128..127) should be encoded within the current run
          // because it is more compact. For example, the sequence
          // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value
          // literally (42 66 66 00 02 77 77), but 8 bytes when starting
          // a new run (40 66 66 00 02 40 77 77).
          if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {
              break;
          }

          ++pos;
          ++runLength;
      }
      result.push(0x40 | (runLength - 1));
      for (let i = offset; i < pos; ++i) {
          const val = deltas[i];
          result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);
      }
      return pos;
  }

  /**
   * Encode a list of variation adjustment deltas.
   *
   * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.
   * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted
   * when generating instances of variation fonts.
   *
   * @see https://www.microsoft.com/typography/otspec/gvar.htm
   * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html
   * @param {Array}
   * @return {Array}
   */
  encode.VARDELTAS = function(deltas) {
      let pos = 0;
      const result = [];
      while (pos < deltas.length) {
          const value = deltas[pos];
          if (value === 0) {
              pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
          } else if (value >= -128 && value <= 127) {
              pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
          } else {
              pos = encodeVarDeltaRunAsWords(deltas, pos, result);
          }
      }
      return result;
  };

  // Convert a list of values to a CFF INDEX structure.
  // The values should be objects containing name / type / value.
  /**
   * @param {Array} l
   * @returns {Array}
   */
  encode.INDEX = function(l) {
      //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
      //    i, v;
      // Because we have to know which data type to use to encode the offsets,
      // we have to go through the values twice: once to encode the data and
      // calculate the offsets, then again to encode the offsets using the fitting data type.
      let offset = 1; // First offset is always 1.
      const offsets = [offset];
      const data = [];
      for (let i = 0; i < l.length; i += 1) {
          const v = encode.OBJECT(l[i]);
          Array.prototype.push.apply(data, v);
          offset += v.length;
          offsets.push(offset);
      }

      if (data.length === 0) {
          return [0, 0];
      }

      const encodedOffsets = [];
      const offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;
      const offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];
      for (let i = 0; i < offsets.length; i += 1) {
          const encodedOffset = offsetEncoder(offsets[i]);
          Array.prototype.push.apply(encodedOffsets, encodedOffset);
      }

      return Array.prototype.concat(encode.Card16(l.length),
                             encode.OffSize(offSize),
                             encodedOffsets,
                             data);
  };

  /**
   * @param {Array}
   * @returns {number}
   */
  sizeOf.INDEX = function(v) {
      return encode.INDEX(v).length;
  };

  /**
   * Convert an object to a CFF DICT structure.
   * The keys should be numeric.
   * The values should be objects containing name / type / value.
   * @param {Object} m
   * @returns {Array}
   */
  encode.DICT = function(m) {
      let d = [];
      const keys = Object.keys(m);
      const length = keys.length;

      for (let i = 0; i < length; i += 1) {
          // Object.keys() return string keys, but our keys are always numeric.
          const k = parseInt(keys[i], 0);
          const v = m[k];
          // Value comes before the key.
          d = d.concat(encode.OPERAND(v.value, v.type));
          d = d.concat(encode.OPERATOR(k));
      }

      return d;
  };

  /**
   * @param {Object}
   * @returns {number}
   */
  sizeOf.DICT = function(m) {
      return encode.DICT(m).length;
  };

  /**
   * @param {number}
   * @returns {Array}
   */
  encode.OPERATOR = function(v) {
      if (v < 1200) {
          return [v];
      } else {
          return [12, v - 1200];
      }
  };

  /**
   * @param {Array} v
   * @param {string}
   * @returns {Array}
   */
  encode.OPERAND = function(v, type) {
      let d = [];
      if (Array.isArray(type)) {
          for (let i = 0; i < type.length; i += 1) {
              check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
              d = d.concat(encode.OPERAND(v[i], type[i]));
          }
      } else {
          if (type === 'SID') {
              d = d.concat(encode.NUMBER(v));
          } else if (type === 'offset') {
              // We make it easy for ourselves and always encode offsets as
              // 4 bytes. This makes offset calculation for the top dict easier.
              d = d.concat(encode.NUMBER32(v));
          } else if (type === 'number') {
              d = d.concat(encode.NUMBER(v));
          } else if (type === 'real') {
              d = d.concat(encode.REAL(v));
          } else {
              throw new Error('Unknown operand type ' + type);
              // FIXME Add support for booleans
          }
      }

      return d;
  };

  encode.OP = encode.BYTE;
  sizeOf.OP = sizeOf.BYTE;

  // memoize charstring encoding using WeakMap if available
  const wmm = typeof WeakMap === 'function' && new WeakMap();

  /**
   * Convert a list of CharString operations to bytes.
   * @param {Array}
   * @returns {Array}
   */
  encode.CHARSTRING = function(ops) {
      // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
      if (wmm) {
          const cachedValue = wmm.get(ops);
          if (cachedValue !== undefined) {
              return cachedValue;
          }
      }

      let d = [];
      const length = ops.length;

      for (let i = 0; i < length; i += 1) {
          const op = ops[i];
          d = d.concat(encode[op.type](op.value));
      }

      if (wmm) {
          wmm.set(ops, d);
      }

      return d;
  };

  /**
   * @param {Array}
   * @returns {number}
   */
  sizeOf.CHARSTRING = function(ops) {
      return encode.CHARSTRING(ops).length;
  };

  // Utility functions ////////////////////////////////////////////////////////

  /**
   * Convert an object containing name / type / value to bytes.
   * @param {Object}
   * @returns {Array}
   */
  encode.OBJECT = function(v) {
      const encodingFunction = encode[v.type];
      check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
      return encodingFunction(v.value);
  };

  /**
   * @param {Object}
   * @returns {number}
   */
  sizeOf.OBJECT = function(v) {
      const sizeOfFunction = sizeOf[v.type];
      check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
      return sizeOfFunction(v.value);
  };

  /**
   * Convert a table object to bytes.
   * A table contains a list of fields containing the metadata (name, type and default value).
   * The table itself has the field values set as attributes.
   * @param {opentype.Table}
   * @returns {Array}
   */
  encode.TABLE = function(table) {
      let d = [];
      const length = table.fields.length;
      const subtables = [];
      const subtableOffsets = [];

      for (let i = 0; i < length; i += 1) {
          const field = table.fields[i];
          const encodingFunction = encode[field.type];
          check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');
          let value = table[field.name];
          if (value === undefined) {
              value = field.value;
          }

          const bytes = encodingFunction(value);

          if (field.type === 'TABLE') {
              subtableOffsets.push(d.length);
              d = d.concat([0, 0]);
              subtables.push(bytes);
          } else {
              d = d.concat(bytes);
          }
      }

      for (let i = 0; i < subtables.length; i += 1) {
          const o = subtableOffsets[i];
          const offset = d.length;
          check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');
          d[o] = offset >> 8;
          d[o + 1] = offset & 0xff;
          d = d.concat(subtables[i]);
      }

      return d;
  };

  /**
   * @param {opentype.Table}
   * @returns {number}
   */
  sizeOf.TABLE = function(table) {
      let numBytes = 0;
      const length = table.fields.length;

      for (let i = 0; i < length; i += 1) {
          const field = table.fields[i];
          const sizeOfFunction = sizeOf[field.type];
          check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');
          let value = table[field.name];
          if (value === undefined) {
              value = field.value;
          }

          numBytes += sizeOfFunction(value);

          // Subtables take 2 more bytes for offsets.
          if (field.type === 'TABLE') {
              numBytes += 2;
          }
      }

      return numBytes;
  };

  encode.RECORD = encode.TABLE;
  sizeOf.RECORD = sizeOf.TABLE;

  // Merge in a list of bytes.
  encode.LITERAL = function(v) {
      return v;
  };

  sizeOf.LITERAL = function(v) {
      return v.length;
  };

  // Table metadata

  /**
   * @exports opentype.Table
   * @class
   * @param {string} tableName
   * @param {Array} fields
   * @param {Object} options
   * @constructor
   */
  function Table(tableName, fields, options) {
      for (let i = 0; i < fields.length; i += 1) {
          const field = fields[i];
          this[field.name] = field.value;
      }

      this.tableName = tableName;
      this.fields = fields;
      if (options) {
          const optionKeys = Object.keys(options);
          for (let i = 0; i < optionKeys.length; i += 1) {
              const k = optionKeys[i];
              const v = options[k];
              if (this[k] !== undefined) {
                  this[k] = v;
              }
          }
      }
  }

  /**
   * Encodes the table and returns an array of bytes
   * @return {Array}
   */
  Table.prototype.encode = function() {
      return encode.TABLE(this);
  };

  /**
   * Get the size of the table.
   * @return {number}
   */
  Table.prototype.sizeOf = function() {
      return sizeOf.TABLE(this);
  };

  /**
   * @private
   */
  function ushortList(itemName, list, count) {
      if (count === undefined) {
          count = list.length;
      }
      const fields = new Array(list.length + 1);
      fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
      for (let i = 0; i < list.length; i++) {
          fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};
      }
      return fields;
  }

  /**
   * @private
   */
  function tableList(itemName, records, itemCallback) {
      const count = records.length;
      const fields = new Array(count + 1);
      fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
      for (let i = 0; i < count; i++) {
          fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};
      }
      return fields;
  }

  /**
   * @private
   */
  function recordList(itemName, records, itemCallback) {
      const count = records.length;
      let fields = [];
      fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
      for (let i = 0; i < count; i++) {
          fields = fields.concat(itemCallback(records[i], i));
      }
      return fields;
  }

  // Common Layout Tables

  /**
   * @exports opentype.Coverage
   * @class
   * @param {opentype.Table}
   * @constructor
   * @extends opentype.Table
   */
  function Coverage(coverageTable) {
      if (coverageTable.format === 1) {
          Table.call(this, 'coverageTable',
              [{name: 'coverageFormat', type: 'USHORT', value: 1}]
              .concat(ushortList('glyph', coverageTable.glyphs))
          );
      } else {
          check.assert(false, 'Can\'t create coverage table format 2 yet.');
      }
  }
  Coverage.prototype = Object.create(Table.prototype);
  Coverage.prototype.constructor = Coverage;

  function ScriptList(scriptListTable) {
      Table.call(this, 'scriptListTable',
          recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {
              const script = scriptRecord.script;
              let defaultLangSys = script.defaultLangSys;
              check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');
              return [
                  {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},
                  {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [
                      {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [
                          {name: 'lookupOrder', type: 'USHORT', value: 0},
                          {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]
                          .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}
                      ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {
                          const langSys = langSysRecord.langSys;
                          return [
                              {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},
                              {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [
                                  {name: 'lookupOrder', type: 'USHORT', value: 0},
                                  {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}
                                  ].concat(ushortList('featureIndex', langSys.featureIndexes)))}
                          ];
                      })))}
              ];
          })
      );
  }
  ScriptList.prototype = Object.create(Table.prototype);
  ScriptList.prototype.constructor = ScriptList;

  /**
   * @exports opentype.FeatureList
   * @class
   * @param {opentype.Table}
   * @constructor
   * @extends opentype.Table
   */
  function FeatureList(featureListTable) {
      Table.call(this, 'featureListTable',
          recordList('featureRecord', featureListTable, function(featureRecord, i) {
              const feature = featureRecord.feature;
              return [
                  {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},
                  {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [
                      {name: 'featureParams', type: 'USHORT', value: feature.featureParams},
                      ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}
              ];
          })
      );
  }
  FeatureList.prototype = Object.create(Table.prototype);
  FeatureList.prototype.constructor = FeatureList;

  /**
   * @exports opentype.LookupList
   * @class
   * @param {opentype.Table}
   * @param {Object}
   * @constructor
   * @extends opentype.Table
   */
  function LookupList(lookupListTable, subtableMakers) {
      Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {
          let subtableCallback = subtableMakers[lookupTable.lookupType];
          check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');
          return new Table('lookupTable', [
              {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},
              {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}
          ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));
      }));
  }
  LookupList.prototype = Object.create(Table.prototype);
  LookupList.prototype.constructor = LookupList;

  // Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)
  // Don't use offsets inside Records (probable bug), only in Tables.
  var table = {
      Table,
      Record: Table,
      Coverage,
      ScriptList,
      FeatureList,
      LookupList,
      ushortList,
      tableList,
      recordList,
  };

  // Parsing utility functions

  // Retrieve an unsigned byte from the DataView.
  function getByte(dataView, offset) {
      return dataView.getUint8(offset);
  }

  // Retrieve an unsigned 16-bit short from the DataView.
  // The value is stored in big endian.
  function getUShort(dataView, offset) {
      return dataView.getUint16(offset, false);
  }

  // Retrieve a signed 16-bit short from the DataView.
  // The value is stored in big endian.
  function getShort(dataView, offset) {
      return dataView.getInt16(offset, false);
  }

  // Retrieve an unsigned 32-bit long from the DataView.
  // The value is stored in big endian.
  function getULong(dataView, offset) {
      return dataView.getUint32(offset, false);
  }

  // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
  // The value is stored in big endian.
  function getFixed(dataView, offset) {
      const decimal = dataView.getInt16(offset, false);
      const fraction = dataView.getUint16(offset + 2, false);
      return decimal + fraction / 65535;
  }

  // Retrieve a 4-character tag from the DataView.
  // Tags are used to identify tables.
  function getTag(dataView, offset) {
      let tag = '';
      for (let i = offset; i < offset + 4; i += 1) {
          tag += String.fromCharCode(dataView.getInt8(i));
      }

      return tag;
  }

  // Retrieve an offset from the DataView.
  // Offsets are 1 to 4 bytes in length, depending on the offSize argument.
  function getOffset(dataView, offset, offSize) {
      let v = 0;
      for (let i = 0; i < offSize; i += 1) {
          v <<= 8;
          v += dataView.getUint8(offset + i);
      }

      return v;
  }

  // Retrieve a number of bytes from start offset to the end offset from the DataView.
  function getBytes(dataView, startOffset, endOffset) {
      const bytes = [];
      for (let i = startOffset; i < endOffset; i += 1) {
          bytes.push(dataView.getUint8(i));
      }

      return bytes;
  }

  // Convert the list of bytes to a string.
  function bytesToString(bytes) {
      let s = '';
      for (let i = 0; i < bytes.length; i += 1) {
          s += String.fromCharCode(bytes[i]);
      }

      return s;
  }

  const typeOffsets = {
      byte: 1,
      uShort: 2,
      short: 2,
      uLong: 4,
      fixed: 4,
      longDateTime: 8,
      tag: 4
  };

  // A stateful parser that changes the offset whenever a value is retrieved.
  // The data is a DataView.
  function Parser(data, offset) {
      this.data = data;
      this.offset = offset;
      this.relativeOffset = 0;
  }

  Parser.prototype.parseByte = function() {
      const v = this.data.getUint8(this.offset + this.relativeOffset);
      this.relativeOffset += 1;
      return v;
  };

  Parser.prototype.parseChar = function() {
      const v = this.data.getInt8(this.offset + this.relativeOffset);
      this.relativeOffset += 1;
      return v;
  };

  Parser.prototype.parseCard8 = Parser.prototype.parseByte;

  Parser.prototype.parseUShort = function() {
      const v = this.data.getUint16(this.offset + this.relativeOffset);
      this.relativeOffset += 2;
      return v;
  };

  Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
  Parser.prototype.parseSID = Parser.prototype.parseUShort;
  Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

  Parser.prototype.parseShort = function() {
      const v = this.data.getInt16(this.offset + this.relativeOffset);
      this.relativeOffset += 2;
      return v;
  };

  Parser.prototype.parseF2Dot14 = function() {
      const v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
      this.relativeOffset += 2;
      return v;
  };

  Parser.prototype.parseULong = function() {
      const v = getULong(this.data, this.offset + this.relativeOffset);
      this.relativeOffset += 4;
      return v;
  };

  Parser.prototype.parseOffset32 = Parser.prototype.parseULong;

  Parser.prototype.parseFixed = function() {
      const v = getFixed(this.data, this.offset + this.relativeOffset);
      this.relativeOffset += 4;
      return v;
  };

  Parser.prototype.parseString = function(length) {
      const dataView = this.data;
      const offset = this.offset + this.relativeOffset;
      let string = '';
      this.relativeOffset += length;
      for (let i = 0; i < length; i++) {
          string += String.fromCharCode(dataView.getUint8(offset + i));
      }

      return string;
  };

  Parser.prototype.parseTag = function() {
      return this.parseString(4);
  };

  // LONGDATETIME is a 64-bit integer.
  // JavaScript and unix timestamps traditionally use 32 bits, so we
  // only take the last 32 bits.
  // + Since until 2038 those bits will be filled by zeros we can ignore them.
  Parser.prototype.parseLongDateTime = function() {
      let v = getULong(this.data, this.offset + this.relativeOffset + 4);
      // Subtract seconds between 01/01/1904 and 01/01/1970
      // to convert Apple Mac timestamp to Standard Unix timestamp
      v -= 2082844800;
      this.relativeOffset += 8;
      return v;
  };

  Parser.prototype.parseVersion = function(minorBase) {
      const major = getUShort(this.data, this.offset + this.relativeOffset);

      // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
      // Default returns the correct number if minor = 0xN000 where N is 0-9
      // Set minorBase to 1 for tables that use minor = N where N is 0-9
      const minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
      this.relativeOffset += 4;
      if (minorBase === undefined) minorBase = 0x1000;
      return major + minor / minorBase / 10;
  };

  Parser.prototype.skip = function(type, amount) {
      if (amount === undefined) {
          amount = 1;
      }

      this.relativeOffset += typeOffsets[type] * amount;
  };

  ///// Parsing lists and records ///////////////////////////////

  // Parse a list of 32 bit unsigned integers.
  Parser.prototype.parseULongList = function(count) {
      if (count === undefined) { count = this.parseULong(); }
      const offsets = new Array(count);
      const dataView = this.data;
      let offset = this.offset + this.relativeOffset;
      for (let i = 0; i < count; i++) {
          offsets[i] = dataView.getUint32(offset);
          offset += 4;
      }

      this.relativeOffset += count * 4;
      return offsets;
  };

  // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream
  // or provided as an argument.
  Parser.prototype.parseOffset16List =
  Parser.prototype.parseUShortList = function(count) {
      if (count === undefined) { count = this.parseUShort(); }
      const offsets = new Array(count);
      const dataView = this.data;
      let offset = this.offset + this.relativeOffset;
      for (let i = 0; i < count; i++) {
          offsets[i] = dataView.getUint16(offset);
          offset += 2;
      }

      this.relativeOffset += count * 2;
      return offsets;
  };

  // Parses a list of 16 bit signed integers.
  Parser.prototype.parseShortList = function(count) {
      const list = new Array(count);
      const dataView = this.data;
      let offset = this.offset + this.relativeOffset;
      for (let i = 0; i < count; i++) {
          list[i] = dataView.getInt16(offset);
          offset += 2;
      }

      this.relativeOffset += count * 2;
      return list;
  };

  // Parses a list of bytes.
  Parser.prototype.parseByteList = function(count) {
      const list = new Array(count);
      const dataView = this.data;
      let offset = this.offset + this.relativeOffset;
      for (let i = 0; i < count; i++) {
          list[i] = dataView.getUint8(offset++);
      }

      this.relativeOffset += count;
      return list;
  };

  /**
   * Parse a list of items.
   * Record count is optional, if omitted it is read from the stream.
   * itemCallback is one of the Parser methods.
   */
  Parser.prototype.parseList = function(count, itemCallback) {
      if (!itemCallback) {
          itemCallback = count;
          count = this.parseUShort();
      }
      const list = new Array(count);
      for (let i = 0; i < count; i++) {
          list[i] = itemCallback.call(this);
      }
      return list;
  };

  Parser.prototype.parseList32 = function(count, itemCallback) {
      if (!itemCallback) {
          itemCallback = count;
          count = this.parseULong();
      }
      const list = new Array(count);
      for (let i = 0; i < count; i++) {
          list[i] = itemCallback.call(this);
      }
      return list;
  };

  /**
   * Parse a list of records.
   * Record count is optional, if omitted it is read from the stream.
   * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
   */
  Parser.prototype.parseRecordList = function(count, recordDescription) {
      // If the count argument is absent, read it in the stream.
      if (!recordDescription) {
          recordDescription = count;
          count = this.parseUShort();
      }
      const records = new Array(count);
      const fields = Object.keys(recordDescription);
      for (let i = 0; i < count; i++) {
          const rec = {};
          for (let j = 0; j < fields.length; j++) {
              const fieldName = fields[j];
              const fieldType = recordDescription[fieldName];
              rec[fieldName] = fieldType.call(this);
          }
          records[i] = rec;
      }
      return records;
  };

  Parser.prototype.parseRecordList32 = function(count, recordDescription) {
      // If the count argument is absent, read it in the stream.
      if (!recordDescription) {
          recordDescription = count;
          count = this.parseULong();
      }
      const records = new Array(count);
      const fields = Object.keys(recordDescription);
      for (let i = 0; i < count; i++) {
          const rec = {};
          for (let j = 0; j < fields.length; j++) {
              const fieldName = fields[j];
              const fieldType = recordDescription[fieldName];
              rec[fieldName] = fieldType.call(this);
          }
          records[i] = rec;
      }
      return records;
  };

  // Parse a data structure into an object
  // Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
  Parser.prototype.parseStruct = function(description) {
      if (typeof description === 'function') {
          return description.call(this);
      } else {
          const fields = Object.keys(description);
          const struct = {};
          for (let j = 0; j < fields.length; j++) {
              const fieldName = fields[j];
              const fieldType = description[fieldName];
              struct[fieldName] = fieldType.call(this);
          }
          return struct;
      }
  };

  /**
   * Parse a GPOS valueRecord
   * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
   * valueFormat is optional, if omitted it is read from the stream.
   */
  Parser.prototype.parseValueRecord = function(valueFormat) {
      if (valueFormat === undefined) {
          valueFormat = this.parseUShort();
      }
      if (valueFormat === 0) {
          // valueFormat2 in kerning pairs is most often 0
          // in this case return undefined instead of an empty object, to save space
          return;
      }
      const valueRecord = {};

      if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }
      if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }
      if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }
      if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }

      // Device table (non-variable font) / VariationIndex table (variable font) not supported
      // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls
      if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }
      if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }
      if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }
      if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }

      return valueRecord;
  };

  /**
   * Parse a list of GPOS valueRecords
   * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
   * valueFormat and valueCount are read from the stream.
   */
  Parser.prototype.parseValueRecordList = function() {
      const valueFormat = this.parseUShort();
      const valueCount = this.parseUShort();
      const values = new Array(valueCount);
      for (let i = 0; i < valueCount; i++) {
          values[i] = this.parseValueRecord(valueFormat);
      }
      return values;
  };

  Parser.prototype.parsePointer = function(description) {
      const structOffset = this.parseOffset16();
      if (structOffset > 0) {
          // NULL offset => return undefined
          return new Parser(this.data, this.offset + structOffset).parseStruct(description);
      }
      return undefined;
  };

  Parser.prototype.parsePointer32 = function(description) {
      const structOffset = this.parseOffset32();
      if (structOffset > 0) {
          // NULL offset => return undefined
          return new Parser(this.data, this.offset + structOffset).parseStruct(description);
      }
      return undefined;
  };

  /**
   * Parse a list of offsets to lists of 16-bit integers,
   * or a list of offsets to lists of offsets to any kind of items.
   * If itemCallback is not provided, a list of list of UShort is assumed.
   * If provided, itemCallback is called on each item and must parse the item.
   * See examples in tables/gsub.js
   */
  Parser.prototype.parseListOfLists = function(itemCallback) {
      const offsets = this.parseOffset16List();
      const count = offsets.length;
      const relativeOffset = this.relativeOffset;
      const list = new Array(count);
      for (let i = 0; i < count; i++) {
          const start = offsets[i];
          if (start === 0) {
              // NULL offset
              // Add i as owned property to list. Convenient with assert.
              list[i] = undefined;
              continue;
          }
          this.relativeOffset = start;
          if (itemCallback) {
              const subOffsets = this.parseOffset16List();
              const subList = new Array(subOffsets.length);
              for (let j = 0; j < subOffsets.length; j++) {
                  this.relativeOffset = start + subOffsets[j];
                  subList[j] = itemCallback.call(this);
              }
              list[i] = subList;
          } else {
              list[i] = this.parseUShortList();
          }
      }
      this.relativeOffset = relativeOffset;
      return list;
  };

  ///// Complex tables parsing //////////////////////////////////

  // Parse a coverage table in a GSUB, GPOS or GDEF table.
  // https://www.microsoft.com/typography/OTSPEC/chapter2.htm
  // parser.offset must point to the start of the table containing the coverage.
  Parser.prototype.parseCoverage = function() {
      const startOffset = this.offset + this.relativeOffset;
      const format = this.parseUShort();
      const count = this.parseUShort();
      if (format === 1) {
          return {
              format: 1,
              glyphs: this.parseUShortList(count)
          };
      } else if (format === 2) {
          const ranges = new Array(count);
          for (let i = 0; i < count; i++) {
              ranges[i] = {
                  start: this.parseUShort(),
                  end: this.parseUShort(),
                  index: this.parseUShort()
              };
          }
          return {
              format: 2,
              ranges: ranges
          };
      }
      throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');
  };

  // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
  // https://www.microsoft.com/typography/OTSPEC/chapter2.htm
  Parser.prototype.parseClassDef = function() {
      const startOffset = this.offset + this.relativeOffset;
      const format = this.parseUShort();
      if (format === 1) {
          return {
              format: 1,
              startGlyph: this.parseUShort(),
              classes: this.parseUShortList()
          };
      } else if (format === 2) {
          return {
              format: 2,
              ranges: this.parseRecordList({
                  start: Parser.uShort,
                  end: Parser.uShort,
                  classId: Parser.uShort
              })
          };
      }
      throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');
  };

  ///// Static methods ///////////////////////////////////
  // These convenience methods can be used as callbacks and should be called with "this" context set to a Parser instance.

  Parser.list = function(count, itemCallback) {
      return function() {
          return this.parseList(count, itemCallback);
      };
  };

  Parser.list32 = function(count, itemCallback) {
      return function() {
          return this.parseList32(count, itemCallback);
      };
  };

  Parser.recordList = function(count, recordDescription) {
      return function() {
          return this.parseRecordList(count, recordDescription);
      };
  };

  Parser.recordList32 = function(count, recordDescription) {
      return function() {
          return this.parseRecordList32(count, recordDescription);
      };
  };

  Parser.pointer = function(description) {
      return function() {
          return this.parsePointer(description);
      };
  };

  Parser.pointer32 = function(description) {
      return function() {
          return this.parsePointer32(description);
      };
  };

  Parser.tag = Parser.prototype.parseTag;
  Parser.byte = Parser.prototype.parseByte;
  Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
  Parser.uShortList = Parser.prototype.parseUShortList;
  Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;
  Parser.uLongList = Parser.prototype.parseULongList;
  Parser.struct = Parser.prototype.parseStruct;
  Parser.coverage = Parser.prototype.parseCoverage;
  Parser.classDef = Parser.prototype.parseClassDef;

  ///// Script, Feature, Lookup lists ///////////////////////////////////////////////
  // https://www.microsoft.com/typography/OTSPEC/chapter2.htm

  const langSysTable = {
      reserved: Parser.uShort,
      reqFeatureIndex: Parser.uShort,
      featureIndexes: Parser.uShortList
  };

  Parser.prototype.parseScriptList = function() {
      return this.parsePointer(Parser.recordList({
          tag: Parser.tag,
          script: Parser.pointer({
              defaultLangSys: Parser.pointer(langSysTable),
              langSysRecords: Parser.recordList({
                  tag: Parser.tag,
                  langSys: Parser.pointer(langSysTable)
              })
          })
      })) || [];
  };

  Parser.prototype.parseFeatureList = function() {
      return this.parsePointer(Parser.recordList({
          tag: Parser.tag,
          feature: Parser.pointer({
              featureParams: Parser.offset16,
              lookupListIndexes: Parser.uShortList
          })
      })) || [];
  };

  Parser.prototype.parseLookupList = function(lookupTableParsers) {
      return this.parsePointer(Parser.list(Parser.pointer(function() {
          const lookupType = this.parseUShort();
          check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');
          const lookupFlag = this.parseUShort();
          const useMarkFilteringSet = lookupFlag & 0x10;
          return {
              lookupType: lookupType,
              lookupFlag: lookupFlag,
              subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),
              markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined
          };
      }))) || [];
  };

  Parser.prototype.parseFeatureVariationsList = function() {
      return this.parsePointer32(function() {
          const majorVersion = this.parseUShort();
          const minorVersion = this.parseUShort();
          check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');
          const featureVariations = this.parseRecordList32({
              conditionSetOffset: Parser.offset32,
              featureTableSubstitutionOffset: Parser.offset32
          });
          return featureVariations;
      }) || [];
  };

  var parse$3 = {
      getByte,
      getCard8: getByte,
      getUShort,
      getCard16: getUShort,
      getShort,
      getULong,
      getFixed,
      getTag,
      getOffset,
      getBytes,
      bytesToString,
      Parser,
  };

  // The `cmap` table stores the mappings from characters to glyphs.

  function parseCmapTableFormat12(cmap, p) {
      //Skip reserved.
      p.parseUShort();

      // Length in bytes of the sub-tables.
      cmap.length = p.parseULong();
      cmap.language = p.parseULong();

      let groupCount;
      cmap.groupCount = groupCount = p.parseULong();
      cmap.glyphIndexMap = {};

      for (let i = 0; i < groupCount; i += 1) {
          const startCharCode = p.parseULong();
          const endCharCode = p.parseULong();
          let startGlyphId = p.parseULong();

          for (let c = startCharCode; c <= endCharCode; c += 1) {
              cmap.glyphIndexMap[c] = startGlyphId;
              startGlyphId++;
          }
      }
  }

  function parseCmapTableFormat4(cmap, p, data, start, offset) {
      // Length in bytes of the sub-tables.
      cmap.length = p.parseUShort();
      cmap.language = p.parseUShort();

      // segCount is stored x 2.
      let segCount;
      cmap.segCount = segCount = p.parseUShort() >> 1;

      // Skip searchRange, entrySelector, rangeShift.
      p.skip('uShort', 3);

      // The "unrolled" mapping from character codes to glyph indices.
      cmap.glyphIndexMap = {};
      const endCountParser = new parse$3.Parser(data, start + offset + 14);
      const startCountParser = new parse$3.Parser(data, start + offset + 16 + segCount * 2);
      const idDeltaParser = new parse$3.Parser(data, start + offset + 16 + segCount * 4);
      const idRangeOffsetParser = new parse$3.Parser(data, start + offset + 16 + segCount * 6);
      let glyphIndexOffset = start + offset + 16 + segCount * 8;
      for (let i = 0; i < segCount - 1; i += 1) {
          let glyphIndex;
          const endCount = endCountParser.parseUShort();
          const startCount = startCountParser.parseUShort();
          const idDelta = idDeltaParser.parseShort();
          const idRangeOffset = idRangeOffsetParser.parseUShort();
          for (let c = startCount; c <= endCount; c += 1) {
              if (idRangeOffset !== 0) {
                  // The idRangeOffset is relative to the current position in the idRangeOffset array.
                  // Take the current offset in the idRangeOffset array.
                  glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);

                  // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
                  glyphIndexOffset += idRangeOffset;

                  // Then add the character index of the current segment, multiplied by 2 for USHORTs.
                  glyphIndexOffset += (c - startCount) * 2;
                  glyphIndex = parse$3.getUShort(data, glyphIndexOffset);
                  if (glyphIndex !== 0) {
                      glyphIndex = (glyphIndex + idDelta) & 0xFFFF;
                  }
              } else {
                  glyphIndex = (c + idDelta) & 0xFFFF;
              }

              cmap.glyphIndexMap[c] = glyphIndex;
          }
      }
  }

  // Parse the `cmap` table. This table stores the mappings from characters to glyphs.
  // There are many available formats, but we only support the Windows format 4 and 12.
  // This function returns a `CmapEncoding` object or null if no supported format could be found.
  function parseCmapTable(data, start) {
      const cmap = {};
      cmap.version = parse$3.getUShort(data, start);
      check.argument(cmap.version === 0, 'cmap table version should be 0.');

      // The cmap table can contain many sub-tables, each with their own format.
      // We're only interested in a "platform 0" (Unicode format) and "platform 3" (Windows format) table.
      cmap.numTables = parse$3.getUShort(data, start + 2);
      let offset = -1;
      for (let i = cmap.numTables - 1; i >= 0; i -= 1) {
          const platformId = parse$3.getUShort(data, start + 4 + (i * 8));
          const encodingId = parse$3.getUShort(data, start + 4 + (i * 8) + 2);
          if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||
              (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {
              offset = parse$3.getULong(data, start + 4 + (i * 8) + 4);
              break;
          }
      }

      if (offset === -1) {
          // There is no cmap table in the font that we support.
          throw new Error('No valid cmap sub-tables found.');
      }

      const p = new parse$3.Parser(data, start + offset);
      cmap.format = p.parseUShort();

      if (cmap.format === 12) {
          parseCmapTableFormat12(cmap, p);
      } else if (cmap.format === 4) {
          parseCmapTableFormat4(cmap, p, data, start, offset);
      } else {
          throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');
      }

      return cmap;
  }

  function addSegment(t, code, glyphIndex) {
      t.segments.push({
          end: code,
          start: code,
          delta: -(code - glyphIndex),
          offset: 0,
          glyphIndex: glyphIndex
      });
  }

  function addTerminatorSegment(t) {
      t.segments.push({
          end: 0xFFFF,
          start: 0xFFFF,
          delta: 1,
          offset: 0
      });
  }

  // Make cmap table, format 4 by default, 12 if needed only
  function makeCmapTable(glyphs) {
      // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)
      let isPlan0Only = true;
      let i;

      // Check if we need to add cmap format 12 or if format 4 only is fine
      for (i = glyphs.length - 1; i > 0; i -= 1) {
          const g = glyphs.get(i);
          if (g.unicode > 65535) {
              console.log('Adding CMAP format 12 (needed!)');
              isPlan0Only = false;
              break;
          }
      }

      let cmapTable = [
          {name: 'version', type: 'USHORT', value: 0},
          {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},

          // CMAP 4 header
          {name: 'platformID', type: 'USHORT', value: 3},
          {name: 'encodingID', type: 'USHORT', value: 1},
          {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}
      ];

      if (!isPlan0Only)
          cmapTable = cmapTable.concat([
              // CMAP 12 header
              {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere
              {name: 'cmap12EncodingID', type: 'USHORT', value: 10},
              {name: 'cmap12Offset', type: 'ULONG', value: 0}
          ]);

      cmapTable = cmapTable.concat([
          // CMAP 4 Subtable
          {name: 'format', type: 'USHORT', value: 4},
          {name: 'cmap4Length', type: 'USHORT', value: 0},
          {name: 'language', type: 'USHORT', value: 0},
          {name: 'segCountX2', type: 'USHORT', value: 0},
          {name: 'searchRange', type: 'USHORT', value: 0},
          {name: 'entrySelector', type: 'USHORT', value: 0},
          {name: 'rangeShift', type: 'USHORT', value: 0}
      ]);

      const t = new table.Table('cmap', cmapTable);

      t.segments = [];
      for (i = 0; i < glyphs.length; i += 1) {
          const glyph = glyphs.get(i);
          for (let j = 0; j < glyph.unicodes.length; j += 1) {
              addSegment(t, glyph.unicodes[j], i);
          }

          t.segments = t.segments.sort(function (a, b) {
              return a.start - b.start;
          });
      }

      addTerminatorSegment(t);

      const segCount = t.segments.length;
      let segCountToRemove = 0;

      // CMAP 4
      // Set up parallel segment arrays.
      let endCounts = [];
      let startCounts = [];
      let idDeltas = [];
      let idRangeOffsets = [];
      let glyphIds = [];

      // CMAP 12
      let cmap12Groups = [];

      // Reminder this loop is not following the specification at 100%
      // The specification -> find suites of characters and make a group
      // Here we're doing one group for each letter
      // Doing as the spec can save 8 times (or more) space
      for (i = 0; i < segCount; i += 1) {
          const segment = t.segments[i];

          // CMAP 4
          if (segment.end <= 65535 && segment.start <= 65535) {
              endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});
              startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});
              idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});
              idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});
              if (segment.glyphId !== undefined) {
                  glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});
              }
          } else {
              // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12
              segCountToRemove += 1;
          }

          // CMAP 12
          // Skip Terminator Segment
          if (!isPlan0Only && segment.glyphIndex !== undefined) {
              cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});
              cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});
              cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});
          }
      }

      // CMAP 4 Subtable
      t.segCountX2 = (segCount - segCountToRemove) * 2;
      t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;
      t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
      t.rangeShift = t.segCountX2 - t.searchRange;

      t.fields = t.fields.concat(endCounts);
      t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});
      t.fields = t.fields.concat(startCounts);
      t.fields = t.fields.concat(idDeltas);
      t.fields = t.fields.concat(idRangeOffsets);
      t.fields = t.fields.concat(glyphIds);

      t.cmap4Length = 14 + // Subtable header
          endCounts.length * 2 +
          2 + // reservedPad
          startCounts.length * 2 +
          idDeltas.length * 2 +
          idRangeOffsets.length * 2 +
          glyphIds.length * 2;

      if (!isPlan0Only) {
          // CMAP 12 Subtable
          const cmap12Length = 16 + // Subtable header
              cmap12Groups.length * 4;

          t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;
          t.fields = t.fields.concat([
              {name: 'cmap12Format', type: 'USHORT', value: 12},
              {name: 'cmap12Reserved', type: 'USHORT', value: 0},
              {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},
              {name: 'cmap12Language', type: 'ULONG', value: 0},
              {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}
          ]);

          t.fields = t.fields.concat(cmap12Groups);
      }

      return t;
  }

  var cmap = { parse: parseCmapTable, make: makeCmapTable };

  // Glyph encoding

  const cffStandardStrings = [
      '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
      'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
      'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
      'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
      'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
      'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
      'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
      'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
      'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
      'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
      'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
      'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
      'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
      'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
      'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
      'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
      'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
      'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
      'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
      'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
      'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
      'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
      'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
      'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
      'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
      'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
      'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
      'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
      'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
      'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
      'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
      'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
      'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
      'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
      'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
      'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
      'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
      'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
      'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
      'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
      'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
      'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
      '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];

  const cffStandardEncoding = [
      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
      '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
      'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
      'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
      'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
      'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
      'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
      'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
      'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
      'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
      'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
      'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
      'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
      'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
      '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
      'lslash', 'oslash', 'oe', 'germandbls'];

  const cffExpertEncoding = [
      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
      '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
      'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
      'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
      'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
      'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
      'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
      'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
      'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
      'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
      'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
      'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
      '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
      'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
      'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
      '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
      'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
      '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
      'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
      'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
      'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
      'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
      'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
      'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
      'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
      'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

  const standardNames = [
      '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
      'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
      'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
      'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
      'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
      'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
      'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
      'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
      'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
      'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
      'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
      'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
      'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
      'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
      'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
      'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
      'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
      'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
      'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
      'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
      'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
      'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
      'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
      'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
      'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

  /**
   * This is the encoding used for fonts created from scratch.
   * It loops through all glyphs and finds the appropriate unicode value.
   * Since it's linear time, other encodings will be faster.
   * @exports opentype.DefaultEncoding
   * @class
   * @constructor
   * @param {opentype.Font}
   */
  function DefaultEncoding(font) {
      this.font = font;
  }

  DefaultEncoding.prototype.charToGlyphIndex = function(c) {
      const code = c.codePointAt(0);
      const glyphs = this.font.glyphs;
      if (glyphs) {
          for (let i = 0; i < glyphs.length; i += 1) {
              const glyph = glyphs.get(i);
              for (let j = 0; j < glyph.unicodes.length; j += 1) {
                  if (glyph.unicodes[j] === code) {
                      return i;
                  }
              }
          }
      }
      return null;
  };

  /**
   * @exports opentype.CmapEncoding
   * @class
   * @constructor
   * @param {Object} cmap - a object with the cmap encoded data
   */
  function CmapEncoding(cmap) {
      this.cmap = cmap;
  }

  /**
   * @param  {string} c - the character
   * @return {number} The glyph index.
   */
  CmapEncoding.prototype.charToGlyphIndex = function(c) {
      return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;
  };

  /**
   * @exports opentype.CffEncoding
   * @class
   * @constructor
   * @param {string} encoding - The encoding
   * @param {Array} charset - The character set.
   */
  function CffEncoding(encoding, charset) {
      this.encoding = encoding;
      this.charset = charset;
  }

  /**
   * @param  {string} s - The character
   * @return {number} The index.
   */
  CffEncoding.prototype.charToGlyphIndex = function(s) {
      const code = s.codePointAt(0);
      const charName = this.encoding[code];
      return this.charset.indexOf(charName);
  };

  /**
   * @exports opentype.GlyphNames
   * @class
   * @constructor
   * @param {Object} post
   */
  function GlyphNames(post) {
      switch (post.version) {
          case 1:
              this.names = standardNames.slice();
              break;
          case 2:
              this.names = new Array(post.numberOfGlyphs);
              for (let i = 0; i < post.numberOfGlyphs; i++) {
                  if (post.glyphNameIndex[i] < standardNames.length) {
                      this.names[i] = standardNames[post.glyphNameIndex[i]];
                  } else {
                      this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];
                  }
              }

              break;
          case 2.5:
              this.names = new Array(post.numberOfGlyphs);
              for (let i = 0; i < post.numberOfGlyphs; i++) {
                  this.names[i] = standardNames[i + post.glyphNameIndex[i]];
              }

              break;
          case 3:
              this.names = [];
              break;
          default:
              this.names = [];
              break;
      }
  }

  /**
   * Gets the index of a glyph by name.
   * @param  {string} name - The glyph name
   * @return {number} The index
   */
  GlyphNames.prototype.nameToGlyphIndex = function(name) {
      return this.names.indexOf(name);
  };

  /**
   * @param  {number} gid
   * @return {string}
   */
  GlyphNames.prototype.glyphIndexToName = function(gid) {
      return this.names[gid];
  };

  /**
   * @alias opentype.addGlyphNames
   * @param {opentype.Font}
   */
  function addGlyphNames(font) {
      let glyph;
      const glyphIndexMap = font.tables.cmap.glyphIndexMap;
      const charCodes = Object.keys(glyphIndexMap);

      for (let i = 0; i < charCodes.length; i += 1) {
          const c = charCodes[i];
          const glyphIndex = glyphIndexMap[c];
          glyph = font.glyphs.get(glyphIndex);
          glyph.addUnicode(parseInt(c));
      }

      for (let i = 0; i < font.glyphs.length; i += 1) {
          glyph = font.glyphs.get(i);
          if (font.cffEncoding) {
              if (font.isCIDFont) {
                  glyph.name = 'gid' + i;
              } else {
                  glyph.name = font.cffEncoding.charset[i];
              }
          } else if (font.glyphNames.names) {
              glyph.name = font.glyphNames.glyphIndexToName(i);
          }
      }
  }

  // Drawing utility functions.

  // Draw a line on the given context from point `x1,y1` to point `x2,y2`.
  function line$1(ctx, x1, y1, x2, y2) {
      ctx.beginPath();
      ctx.moveTo(x1, y1);
      ctx.lineTo(x2, y2);
      ctx.stroke();
  }

  var draw = { line: line$1 };

  // The Glyph object
  // import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency

  function getPathDefinition(glyph, path) {
      let _path = path || new Path();
      return {
          configurable: true,

          get: function() {
              if (typeof _path === 'function') {
                  _path = _path();
              }

              return _path;
          },

          set: function(p) {
              _path = p;
          }
      };
  }
  /**
   * @typedef GlyphOptions
   * @type Object
   * @property {string} [name] - The glyph name
   * @property {number} [unicode]
   * @property {Array} [unicodes]
   * @property {number} [xMin]
   * @property {number} [yMin]
   * @property {number} [xMax]
   * @property {number} [yMax]
   * @property {number} [advanceWidth]
   */

  // A Glyph is an individual mark that often corresponds to a character.
  // Some glyphs, such as ligatures, are a combination of many characters.
  // Glyphs are the basic building blocks of a font.
  //
  // The `Glyph` class contains utility methods for drawing the path and its points.
  /**
   * @exports opentype.Glyph
   * @class
   * @param {GlyphOptions}
   * @constructor
   */
  function Glyph(options) {
      // By putting all the code on a prototype function (which is only declared once)
      // we reduce the memory requirements for larger fonts by some 2%
      this.bindConstructorValues(options);
  }

  /**
   * @param  {GlyphOptions}
   */
  Glyph.prototype.bindConstructorValues = function(options) {
      this.index = options.index || 0;

      // These three values cannot be deferred for memory optimization:
      this.name = options.name || null;
      this.unicode = options.unicode || undefined;
      this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];

      // But by binding these values only when necessary, we reduce can
      // the memory requirements by almost 3% for larger fonts.
      if (options.xMin) {
          this.xMin = options.xMin;
      }

      if (options.yMin) {
          this.yMin = options.yMin;
      }

      if (options.xMax) {
          this.xMax = options.xMax;
      }

      if (options.yMax) {
          this.yMax = options.yMax;
      }

      if (options.advanceWidth) {
          this.advanceWidth = options.advanceWidth;
      }

      // The path for a glyph is the most memory intensive, and is bound as a value
      // with a getter/setter to ensure we actually do path parsing only once the
      // path is actually needed by anything.
      Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
  };

  /**
   * @param {number}
   */
  Glyph.prototype.addUnicode = function(unicode) {
      if (this.unicodes.length === 0) {
          this.unicode = unicode;
      }

      this.unicodes.push(unicode);
  };

  /**
   * Calculate the minimum bounding box for this glyph.
   * @return {opentype.BoundingBox}
   */
  Glyph.prototype.getBoundingBox = function() {
      return this.path.getBoundingBox();
  };

  /**
   * Convert the glyph to a Path we can draw on a drawing context.
   * @param  {number} [x=0] - Horizontal position of the beginning of the text.
   * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param  {Object=} options - xScale, yScale to stretch the glyph.
   * @param  {opentype.Font} if hinting is to be used, the font
   * @return {opentype.Path}
   */
  Glyph.prototype.getPath = function(x, y, fontSize, options, font) {
      x = x !== undefined ? x : 0;
      y = y !== undefined ? y : 0;
      fontSize = fontSize !== undefined ? fontSize : 72;
      let commands;
      let hPoints;
      if (!options) options = { };
      let xScale = options.xScale;
      let yScale = options.yScale;

      if (options.hinting && font && font.hinting) {
          // in case of hinting, the hinting engine takes care
          // of scaling the points (not the path) before hinting.
          hPoints = this.path && font.hinting.exec(this, fontSize);
          // in case the hinting engine failed hPoints is undefined
          // and thus reverts to plain rending
      }

      if (hPoints) {
          // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency
          commands = font.hinting.getCommands(hPoints);
          x = Math.round(x);
          y = Math.round(y);
          // TODO in case of hinting xyScaling is not yet supported
          xScale = yScale = 1;
      } else {
          commands = this.path.commands;
          const scale = 1 / this.path.unitsPerEm * fontSize;
          if (xScale === undefined) xScale = scale;
          if (yScale === undefined) yScale = scale;
      }

      const p = new Path();
      for (let i = 0; i < commands.length; i += 1) {
          const cmd = commands[i];
          if (cmd.type === 'M') {
              p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
          } else if (cmd.type === 'L') {
              p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
          } else if (cmd.type === 'Q') {
              p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                                 x + (cmd.x * xScale), y + (-cmd.y * yScale));
          } else if (cmd.type === 'C') {
              p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                        x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),
                        x + (cmd.x * xScale), y + (-cmd.y * yScale));
          } else if (cmd.type === 'Z') {
              p.closePath();
          }
      }

      return p;
  };

  /**
   * Split the glyph into contours.
   * This function is here for backwards compatibility, and to
   * provide raw access to the TrueType glyph outlines.
   * @return {Array}
   */
  Glyph.prototype.getContours = function() {
      if (this.points === undefined) {
          return [];
      }

      const contours = [];
      let currentContour = [];
      for (let i = 0; i < this.points.length; i += 1) {
          const pt = this.points[i];
          currentContour.push(pt);
          if (pt.lastPointOfContour) {
              contours.push(currentContour);
              currentContour = [];
          }
      }

      check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
      return contours;
  };

  /**
   * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
   * @return {Object}
   */
  Glyph.prototype.getMetrics = function() {
      const commands = this.path.commands;
      const xCoords = [];
      const yCoords = [];
      for (let i = 0; i < commands.length; i += 1) {
          const cmd = commands[i];
          if (cmd.type !== 'Z') {
              xCoords.push(cmd.x);
              yCoords.push(cmd.y);
          }

          if (cmd.type === 'Q' || cmd.type === 'C') {
              xCoords.push(cmd.x1);
              yCoords.push(cmd.y1);
          }

          if (cmd.type === 'C') {
              xCoords.push(cmd.x2);
              yCoords.push(cmd.y2);
          }
      }

      const metrics = {
          xMin: Math.min.apply(null, xCoords),
          yMin: Math.min.apply(null, yCoords),
          xMax: Math.max.apply(null, xCoords),
          yMax: Math.max.apply(null, yCoords),
          leftSideBearing: this.leftSideBearing
      };

      if (!isFinite(metrics.xMin)) {
          metrics.xMin = 0;
      }

      if (!isFinite(metrics.xMax)) {
          metrics.xMax = this.advanceWidth;
      }

      if (!isFinite(metrics.yMin)) {
          metrics.yMin = 0;
      }

      if (!isFinite(metrics.yMax)) {
          metrics.yMax = 0;
      }

      metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
      return metrics;
  };

  /**
   * Draw the glyph on the given context.
   * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
   * @param  {number} [x=0] - Horizontal position of the beginning of the text.
   * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param  {Object=} options - xScale, yScale to stretch the glyph.
   */
  Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {
      this.getPath(x, y, fontSize, options).draw(ctx);
  };

  /**
   * Draw the points of the glyph.
   * On-curve points will be drawn in blue, off-curve points will be drawn in red.
   * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
   * @param  {number} [x=0] - Horizontal position of the beginning of the text.
   * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   */
  Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {
      function drawCircles(l, x, y, scale) {
          const PI_SQ = Math.PI * 2;
          ctx.beginPath();
          for (let j = 0; j < l.length; j += 1) {
              ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));
              ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);
          }

          ctx.closePath();
          ctx.fill();
      }

      x = x !== undefined ? x : 0;
      y = y !== undefined ? y : 0;
      fontSize = fontSize !== undefined ? fontSize : 24;
      const scale = 1 / this.path.unitsPerEm * fontSize;

      const blueCircles = [];
      const redCircles = [];
      const path = this.path;
      for (let i = 0; i < path.commands.length; i += 1) {
          const cmd = path.commands[i];
          if (cmd.x !== undefined) {
              blueCircles.push({x: cmd.x, y: -cmd.y});
          }

          if (cmd.x1 !== undefined) {
              redCircles.push({x: cmd.x1, y: -cmd.y1});
          }

          if (cmd.x2 !== undefined) {
              redCircles.push({x: cmd.x2, y: -cmd.y2});
          }
      }

      ctx.fillStyle = 'blue';
      drawCircles(blueCircles, x, y, scale);
      ctx.fillStyle = 'red';
      drawCircles(redCircles, x, y, scale);
  };

  /**
   * Draw lines indicating important font measurements.
   * Black lines indicate the origin of the coordinate system (point 0,0).
   * Blue lines indicate the glyph bounding box.
   * Green line indicates the advance width of the glyph.
   * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
   * @param  {number} [x=0] - Horizontal position of the beginning of the text.
   * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   */
  Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
      let scale;
      x = x !== undefined ? x : 0;
      y = y !== undefined ? y : 0;
      fontSize = fontSize !== undefined ? fontSize : 24;
      scale = 1 / this.path.unitsPerEm * fontSize;
      ctx.lineWidth = 1;

      // Draw the origin
      ctx.strokeStyle = 'black';
      draw.line(ctx, x, -10000, x, 10000);
      draw.line(ctx, -10000, y, 10000, y);

      // This code is here due to memory optimization: by not using
      // defaults in the constructor, we save a notable amount of memory.
      const xMin = this.xMin || 0;
      let yMin = this.yMin || 0;
      const xMax = this.xMax || 0;
      let yMax = this.yMax || 0;
      const advanceWidth = this.advanceWidth || 0;

      // Draw the glyph box
      ctx.strokeStyle = 'blue';
      draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);
      draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);
      draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));
      draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));

      // Draw the advance width
      ctx.strokeStyle = 'green';
      draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);
  };

  // The GlyphSet object

  // Define a property on the glyph that depends on the path being loaded.
  function defineDependentProperty(glyph, externalName, internalName) {
      Object.defineProperty(glyph, externalName, {
          get: function() {
              // Request the path property to make sure the path is loaded.
              glyph.path; // jshint ignore:line
              return glyph[internalName];
          },
          set: function(newValue) {
              glyph[internalName] = newValue;
          },
          enumerable: true,
          configurable: true
      });
  }

  /**
   * A GlyphSet represents all glyphs available in the font, but modelled using
   * a deferred glyph loader, for retrieving glyphs only once they are absolutely
   * necessary, to keep the memory footprint down.
   * @exports opentype.GlyphSet
   * @class
   * @param {opentype.Font}
   * @param {Array}
   */
  function GlyphSet(font, glyphs) {
      this.font = font;
      this.glyphs = {};
      if (Array.isArray(glyphs)) {
          for (let i = 0; i < glyphs.length; i++) {
              this.glyphs[i] = glyphs[i];
          }
      }

      this.length = (glyphs && glyphs.length) || 0;
  }

  /**
   * @param  {number} index
   * @return {opentype.Glyph}
   */
  GlyphSet.prototype.get = function(index) {
      if (typeof this.glyphs[index] === 'function') {
          this.glyphs[index] = this.glyphs[index]();
      }

      return this.glyphs[index];
  };

  /**
   * @param  {number} index
   * @param  {Object}
   */
  GlyphSet.prototype.push = function(index, loader) {
      this.glyphs[index] = loader;
      this.length++;
  };

  /**
   * @alias opentype.glyphLoader
   * @param  {opentype.Font} font
   * @param  {number} index
   * @return {opentype.Glyph}
   */
  function glyphLoader(font, index) {
      return new Glyph({index: index, font: font});
  }

  /**
   * Generate a stub glyph that can be filled with all metadata *except*
   * the "points" and "path" properties, which must be loaded only once
   * the glyph's path is actually requested for text shaping.
   * @alias opentype.ttfGlyphLoader
   * @param  {opentype.Font} font
   * @param  {number} index
   * @param  {Function} parseGlyph
   * @param  {Object} data
   * @param  {number} position
   * @param  {Function} buildPath
   * @return {opentype.Glyph}
   */
  function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
      return function() {
          const glyph = new Glyph({index: index, font: font});

          glyph.path = function() {
              parseGlyph(glyph, data, position);
              const path = buildPath(font.glyphs, glyph);
              path.unitsPerEm = font.unitsPerEm;
              return path;
          };

          defineDependentProperty(glyph, 'xMin', '_xMin');
          defineDependentProperty(glyph, 'xMax', '_xMax');
          defineDependentProperty(glyph, 'yMin', '_yMin');
          defineDependentProperty(glyph, 'yMax', '_yMax');

          return glyph;
      };
  }
  /**
   * @alias opentype.cffGlyphLoader
   * @param  {opentype.Font} font
   * @param  {number} index
   * @param  {Function} parseCFFCharstring
   * @param  {string} charstring
   * @return {opentype.Glyph}
   */
  function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
      return function() {
          const glyph = new Glyph({index: index, font: font});

          glyph.path = function() {
              const path = parseCFFCharstring(font, glyph, charstring);
              path.unitsPerEm = font.unitsPerEm;
              return path;
          };

          return glyph;
      };
  }

  var glyphset = { GlyphSet, glyphLoader, ttfGlyphLoader, cffGlyphLoader };

  // The `CFF` table contains the glyph outlines in PostScript format.

  // Custom equals function that can also check lists.
  function equals$3(a, b) {
      if (a === b) {
          return true;
      } else if (Array.isArray(a) && Array.isArray(b)) {
          if (a.length !== b.length) {
              return false;
          }

          for (let i = 0; i < a.length; i += 1) {
              if (!equals$3(a[i], b[i])) {
                  return false;
              }
          }

          return true;
      } else {
          return false;
      }
  }

  // Subroutines are encoded using the negative half of the number space.
  // See type 2 chapter 4.7 "Subroutine operators".
  function calcCFFSubroutineBias(subrs) {
      let bias;
      if (subrs.length < 1240) {
          bias = 107;
      } else if (subrs.length < 33900) {
          bias = 1131;
      } else {
          bias = 32768;
      }

      return bias;
  }

  // Parse a `CFF` INDEX array.
  // An index array consists of a list of offsets, then a list of objects at those offsets.
  function parseCFFIndex(data, start, conversionFn) {
      const offsets = [];
      const objects = [];
      const count = parse$3.getCard16(data, start);
      let objectOffset;
      let endOffset;
      if (count !== 0) {
          const offsetSize = parse$3.getByte(data, start + 2);
          objectOffset = start + ((count + 1) * offsetSize) + 2;
          let pos = start + 3;
          for (let i = 0; i < count + 1; i += 1) {
              offsets.push(parse$3.getOffset(data, pos, offsetSize));
              pos += offsetSize;
          }

          // The total size of the index array is 4 header bytes + the value of the last offset.
          endOffset = objectOffset + offsets[count];
      } else {
          endOffset = start + 2;
      }

      for (let i = 0; i < offsets.length - 1; i += 1) {
          let value = parse$3.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);
          if (conversionFn) {
              value = conversionFn(value);
          }

          objects.push(value);
      }

      return {objects: objects, startOffset: start, endOffset: endOffset};
  }

  // Parse a `CFF` DICT real value.
  function parseFloatOperand(parser) {
      let s = '';
      const eof = 15;
      const lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
      while (true) {
          const b = parser.parseByte();
          const n1 = b >> 4;
          const n2 = b & 15;

          if (n1 === eof) {
              break;
          }

          s += lookup[n1];

          if (n2 === eof) {
              break;
          }

          s += lookup[n2];
      }

      return parseFloat(s);
  }

  // Parse a `CFF` DICT operand.
  function parseOperand(parser, b0) {
      let b1;
      let b2;
      let b3;
      let b4;
      if (b0 === 28) {
          b1 = parser.parseByte();
          b2 = parser.parseByte();
          return b1 << 8 | b2;
      }

      if (b0 === 29) {
          b1 = parser.parseByte();
          b2 = parser.parseByte();
          b3 = parser.parseByte();
          b4 = parser.parseByte();
          return b1 << 24 | b2 << 16 | b3 << 8 | b4;
      }

      if (b0 === 30) {
          return parseFloatOperand(parser);
      }

      if (b0 >= 32 && b0 <= 246) {
          return b0 - 139;
      }

      if (b0 >= 247 && b0 <= 250) {
          b1 = parser.parseByte();
          return (b0 - 247) * 256 + b1 + 108;
      }

      if (b0 >= 251 && b0 <= 254) {
          b1 = parser.parseByte();
          return -(b0 - 251) * 256 - b1 - 108;
      }

      throw new Error('Invalid b0 ' + b0);
  }

  // Convert the entries returned by `parseDict` to a proper dictionary.
  // If a value is a list of one, it is unpacked.
  function entriesToObject(entries) {
      const o = {};
      for (let i = 0; i < entries.length; i += 1) {
          const key = entries[i][0];
          const values = entries[i][1];
          let value;
          if (values.length === 1) {
              value = values[0];
          } else {
              value = values;
          }

          if (o.hasOwnProperty(key) && !isNaN(o[key])) {
              throw new Error('Object ' + o + ' already has key ' + key);
          }

          o[key] = value;
      }

      return o;
  }

  // Parse a `CFF` DICT object.
  // A dictionary contains key-value pairs in a compact tokenized format.
  function parseCFFDict(data, start, size) {
      start = start !== undefined ? start : 0;
      const parser = new parse$3.Parser(data, start);
      const entries = [];
      let operands = [];
      size = size !== undefined ? size : data.length;

      while (parser.relativeOffset < size) {
          let op = parser.parseByte();

          // The first byte for each dict item distinguishes between operator (key) and operand (value).
          // Values <= 21 are operators.
          if (op <= 21) {
              // Two-byte operators have an initial escape byte of 12.
              if (op === 12) {
                  op = 1200 + parser.parseByte();
              }

              entries.push([op, operands]);
              operands = [];
          } else {
              // Since the operands (values) come before the operators (keys), we store all operands in a list
              // until we encounter an operator.
              operands.push(parseOperand(parser, op));
          }
      }

      return entriesToObject(entries);
  }

  // Given a String Index (SID), return the value of the string.
  // Strings below index 392 are standard CFF strings and are not encoded in the font.
  function getCFFString(strings, index) {
      if (index <= 390) {
          index = cffStandardStrings[index];
      } else {
          index = strings[index - 391];
      }

      return index;
  }

  // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
  // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
  function interpretDict(dict, meta, strings) {
      const newDict = {};
      let value;

      // Because we also want to include missing values, we start out from the meta list
      // and lookup values in the dict.
      for (let i = 0; i < meta.length; i += 1) {
          const m = meta[i];

          if (Array.isArray(m.type)) {
              const values = [];
              values.length = m.type.length;
              for (let j = 0; j < m.type.length; j++) {
                  value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;
                  if (value === undefined) {
                      value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;
                  }
                  if (m.type[j] === 'SID') {
                      value = getCFFString(strings, value);
                  }
                  values[j] = value;
              }
              newDict[m.name] = values;
          } else {
              value = dict[m.op];
              if (value === undefined) {
                  value = m.value !== undefined ? m.value : null;
              }

              if (m.type === 'SID') {
                  value = getCFFString(strings, value);
              }
              newDict[m.name] = value;
          }
      }

      return newDict;
  }

  // Parse the CFF header.
  function parseCFFHeader(data, start) {
      const header = {};
      header.formatMajor = parse$3.getCard8(data, start);
      header.formatMinor = parse$3.getCard8(data, start + 1);
      header.size = parse$3.getCard8(data, start + 2);
      header.offsetSize = parse$3.getCard8(data, start + 3);
      header.startOffset = start;
      header.endOffset = start + 4;
      return header;
  }

  const TOP_DICT_META = [
      {name: 'version', op: 0, type: 'SID'},
      {name: 'notice', op: 1, type: 'SID'},
      {name: 'copyright', op: 1200, type: 'SID'},
      {name: 'fullName', op: 2, type: 'SID'},
      {name: 'familyName', op: 3, type: 'SID'},
      {name: 'weight', op: 4, type: 'SID'},
      {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
      {name: 'italicAngle', op: 1202, type: 'number', value: 0},
      {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
      {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
      {name: 'paintType', op: 1205, type: 'number', value: 0},
      {name: 'charstringType', op: 1206, type: 'number', value: 2},
      {
          name: 'fontMatrix',
          op: 1207,
          type: ['real', 'real', 'real', 'real', 'real', 'real'],
          value: [0.001, 0, 0, 0.001, 0, 0]
      },
      {name: 'uniqueId', op: 13, type: 'number'},
      {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
      {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
      {name: 'xuid', op: 14, type: [], value: null},
      {name: 'charset', op: 15, type: 'offset', value: 0},
      {name: 'encoding', op: 16, type: 'offset', value: 0},
      {name: 'charStrings', op: 17, type: 'offset', value: 0},
      {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},
      {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},
      {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},
      {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},
      {name: 'cidFontType', op: 1233, type: 'number', value: 0},
      {name: 'cidCount', op: 1234, type: 'number', value: 8720},
      {name: 'uidBase', op: 1235, type: 'number'},
      {name: 'fdArray', op: 1236, type: 'offset'},
      {name: 'fdSelect', op: 1237, type: 'offset'},
      {name: 'fontName', op: 1238, type: 'SID'}
  ];

  const PRIVATE_DICT_META = [
      {name: 'subrs', op: 19, type: 'offset', value: 0},
      {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
      {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
  ];

  // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
  // The top dictionary contains the essential metadata for the font, together with the private dictionary.
  function parseCFFTopDict(data, strings) {
      const dict = parseCFFDict(data, 0, data.byteLength);
      return interpretDict(dict, TOP_DICT_META, strings);
  }

  // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
  function parseCFFPrivateDict(data, start, size, strings) {
      const dict = parseCFFDict(data, start, size);
      return interpretDict(dict, PRIVATE_DICT_META, strings);
  }

  // Returns a list of "Top DICT"s found using an INDEX list.
  // Used to read both the usual high-level Top DICTs and also the FDArray
  // discovered inside CID-keyed fonts.  When a Top DICT has a reference to
  // a Private DICT that is read and saved into the Top DICT.
  //
  // In addition to the expected/optional values as outlined in TOP_DICT_META
  // the following values might be saved into the Top DICT.
  //
  //    _subrs []        array of local CFF subroutines from Private DICT
  //    _subrsBias       bias value computed from number of subroutines
  //                      (see calcCFFSubroutineBias() and parseCFFCharstring())
  //    _defaultWidthX   default widths for CFF characters
  //    _nominalWidthX   bias added to width embedded within glyph description
  //
  //    _privateDict     saved copy of parsed Private DICT from Top DICT
  function gatherCFFTopDicts(data, start, cffIndex, strings) {
      const topDictArray = [];
      for (let iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
          const topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
          const topDict = parseCFFTopDict(topDictData, strings);
          topDict._subrs = [];
          topDict._subrsBias = 0;
          const privateSize = topDict.private[0];
          const privateOffset = topDict.private[1];
          if (privateSize !== 0 && privateOffset !== 0) {
              const privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);
              topDict._defaultWidthX = privateDict.defaultWidthX;
              topDict._nominalWidthX = privateDict.nominalWidthX;
              if (privateDict.subrs !== 0) {
                  const subrOffset = privateOffset + privateDict.subrs;
                  const subrIndex = parseCFFIndex(data, subrOffset + start);
                  topDict._subrs = subrIndex.objects;
                  topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
              }
              topDict._privateDict = privateDict;
          }
          topDictArray.push(topDict);
      }
      return topDictArray;
  }

  // Parse the CFF charset table, which contains internal names for all the glyphs.
  // This function will return a list of glyph names.
  // See Adobe TN #5176 chapter 13, "Charsets".
  function parseCFFCharset(data, start, nGlyphs, strings) {
      let sid;
      let count;
      const parser = new parse$3.Parser(data, start);

      // The .notdef glyph is not included, so subtract 1.
      nGlyphs -= 1;
      const charset = ['.notdef'];

      const format = parser.parseCard8();
      if (format === 0) {
          for (let i = 0; i < nGlyphs; i += 1) {
              sid = parser.parseSID();
              charset.push(getCFFString(strings, sid));
          }
      } else if (format === 1) {
          while (charset.length <= nGlyphs) {
              sid = parser.parseSID();
              count = parser.parseCard8();
              for (let i = 0; i <= count; i += 1) {
                  charset.push(getCFFString(strings, sid));
                  sid += 1;
              }
          }
      } else if (format === 2) {
          while (charset.length <= nGlyphs) {
              sid = parser.parseSID();
              count = parser.parseCard16();
              for (let i = 0; i <= count; i += 1) {
                  charset.push(getCFFString(strings, sid));
                  sid += 1;
              }
          }
      } else {
          throw new Error('Unknown charset format ' + format);
      }

      return charset;
  }

  // Parse the CFF encoding data. Only one encoding can be specified per font.
  // See Adobe TN #5176 chapter 12, "Encodings".
  function parseCFFEncoding(data, start, charset) {
      let code;
      const enc = {};
      const parser = new parse$3.Parser(data, start);
      const format = parser.parseCard8();
      if (format === 0) {
          const nCodes = parser.parseCard8();
          for (let i = 0; i < nCodes; i += 1) {
              code = parser.parseCard8();
              enc[code] = i;
          }
      } else if (format === 1) {
          const nRanges = parser.parseCard8();
          code = 1;
          for (let i = 0; i < nRanges; i += 1) {
              const first = parser.parseCard8();
              const nLeft = parser.parseCard8();
              for (let j = first; j <= first + nLeft; j += 1) {
                  enc[j] = code;
                  code += 1;
              }
          }
      } else {
          throw new Error('Unknown encoding format ' + format);
      }

      return new CffEncoding(enc, charset);
  }

  // Take in charstring code and return a Glyph object.
  // The encoding is described in the Type 2 Charstring Format
  // https://www.microsoft.com/typography/OTSPEC/charstr2.htm
  function parseCFFCharstring(font, glyph, code) {
      let c1x;
      let c1y;
      let c2x;
      let c2y;
      const p = new Path();
      const stack = [];
      let nStems = 0;
      let haveWidth = false;
      let open = false;
      let x = 0;
      let y = 0;
      let subrs;
      let subrsBias;
      let defaultWidthX;
      let nominalWidthX;
      if (font.isCIDFont) {
          const fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
          const fdDict = font.tables.cff.topDict._fdArray[fdIndex];
          subrs = fdDict._subrs;
          subrsBias = fdDict._subrsBias;
          defaultWidthX = fdDict._defaultWidthX;
          nominalWidthX = fdDict._nominalWidthX;
      } else {
          subrs = font.tables.cff.topDict._subrs;
          subrsBias = font.tables.cff.topDict._subrsBias;
          defaultWidthX = font.tables.cff.topDict._defaultWidthX;
          nominalWidthX = font.tables.cff.topDict._nominalWidthX;
      }
      let width = defaultWidthX;

      function newContour(x, y) {
          if (open) {
              p.closePath();
          }

          p.moveTo(x, y);
          open = true;
      }

      function parseStems() {
          let hasWidthArg;

          // The number of stem operators on the stack is always even.
          // If the value is uneven, that means a width is specified.
          hasWidthArg = stack.length % 2 !== 0;
          if (hasWidthArg && !haveWidth) {
              width = stack.shift() + nominalWidthX;
          }

          nStems += stack.length >> 1;
          stack.length = 0;
          haveWidth = true;
      }

      function parse(code) {
          let b1;
          let b2;
          let b3;
          let b4;
          let codeIndex;
          let subrCode;
          let jpx;
          let jpy;
          let c3x;
          let c3y;
          let c4x;
          let c4y;

          let i = 0;
          while (i < code.length) {
              let v = code[i];
              i += 1;
              switch (v) {
                  case 1: // hstem
                      parseStems();
                      break;
                  case 3: // vstem
                      parseStems();
                      break;
                  case 4: // vmoveto
                      if (stack.length > 1 && !haveWidth) {
                          width = stack.shift() + nominalWidthX;
                          haveWidth = true;
                      }

                      y += stack.pop();
                      newContour(x, y);
                      break;
                  case 5: // rlineto
                      while (stack.length > 0) {
                          x += stack.shift();
                          y += stack.shift();
                          p.lineTo(x, y);
                      }

                      break;
                  case 6: // hlineto
                      while (stack.length > 0) {
                          x += stack.shift();
                          p.lineTo(x, y);
                          if (stack.length === 0) {
                              break;
                          }

                          y += stack.shift();
                          p.lineTo(x, y);
                      }

                      break;
                  case 7: // vlineto
                      while (stack.length > 0) {
                          y += stack.shift();
                          p.lineTo(x, y);
                          if (stack.length === 0) {
                              break;
                          }

                          x += stack.shift();
                          p.lineTo(x, y);
                      }

                      break;
                  case 8: // rrcurveto
                      while (stack.length > 0) {
                          c1x = x + stack.shift();
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + stack.shift();
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;
                  case 10: // callsubr
                      codeIndex = stack.pop() + subrsBias;
                      subrCode = subrs[codeIndex];
                      if (subrCode) {
                          parse(subrCode);
                      }

                      break;
                  case 11: // return
                      return;
                  case 12: // flex operators
                      v = code[i];
                      i += 1;
                      switch (v) {
                          case 35: // flex
                              // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                              c1x = x   + stack.shift();    // dx1
                              c1y = y   + stack.shift();    // dy1
                              c2x = c1x + stack.shift();    // dx2
                              c2y = c1y + stack.shift();    // dy2
                              jpx = c2x + stack.shift();    // dx3
                              jpy = c2y + stack.shift();    // dy3
                              c3x = jpx + stack.shift();    // dx4
                              c3y = jpy + stack.shift();    // dy4
                              c4x = c3x + stack.shift();    // dx5
                              c4y = c3y + stack.shift();    // dy5
                              x = c4x   + stack.shift();    // dx6
                              y = c4y   + stack.shift();    // dy6
                              stack.shift();                // flex depth
                              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                              p.curveTo(c3x, c3y, c4x, c4y, x, y);
                              break;
                          case 34: // hflex
                              // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                              c1x = x   + stack.shift();    // dx1
                              c1y = y;                      // dy1
                              c2x = c1x + stack.shift();    // dx2
                              c2y = c1y + stack.shift();    // dy2
                              jpx = c2x + stack.shift();    // dx3
                              jpy = c2y;                    // dy3
                              c3x = jpx + stack.shift();    // dx4
                              c3y = c2y;                    // dy4
                              c4x = c3x + stack.shift();    // dx5
                              c4y = y;                      // dy5
                              x = c4x + stack.shift();      // dx6
                              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                              p.curveTo(c3x, c3y, c4x, c4y, x, y);
                              break;
                          case 36: // hflex1
                              // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                              c1x = x   + stack.shift();    // dx1
                              c1y = y   + stack.shift();    // dy1
                              c2x = c1x + stack.shift();    // dx2
                              c2y = c1y + stack.shift();    // dy2
                              jpx = c2x + stack.shift();    // dx3
                              jpy = c2y;                    // dy3
                              c3x = jpx + stack.shift();    // dx4
                              c3y = c2y;                    // dy4
                              c4x = c3x + stack.shift();    // dx5
                              c4y = c3y + stack.shift();    // dy5
                              x = c4x + stack.shift();      // dx6
                              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                              p.curveTo(c3x, c3y, c4x, c4y, x, y);
                              break;
                          case 37: // flex1
                              // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                              c1x = x   + stack.shift();    // dx1
                              c1y = y   + stack.shift();    // dy1
                              c2x = c1x + stack.shift();    // dx2
                              c2y = c1y + stack.shift();    // dy2
                              jpx = c2x + stack.shift();    // dx3
                              jpy = c2y + stack.shift();    // dy3
                              c3x = jpx + stack.shift();    // dx4
                              c3y = jpy + stack.shift();    // dy4
                              c4x = c3x + stack.shift();    // dx5
                              c4y = c3y + stack.shift();    // dy5
                              if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                                  x = c4x + stack.shift();
                              } else {
                                  y = c4y + stack.shift();
                              }

                              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                              p.curveTo(c3x, c3y, c4x, c4y, x, y);
                              break;
                          default:
                              console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
                              stack.length = 0;
                      }
                      break;
                  case 14: // endchar
                      if (stack.length > 0 && !haveWidth) {
                          width = stack.shift() + nominalWidthX;
                          haveWidth = true;
                      }

                      if (open) {
                          p.closePath();
                          open = false;
                      }

                      break;
                  case 18: // hstemhm
                      parseStems();
                      break;
                  case 19: // hintmask
                  case 20: // cntrmask
                      parseStems();
                      i += (nStems + 7) >> 3;
                      break;
                  case 21: // rmoveto
                      if (stack.length > 2 && !haveWidth) {
                          width = stack.shift() + nominalWidthX;
                          haveWidth = true;
                      }

                      y += stack.pop();
                      x += stack.pop();
                      newContour(x, y);
                      break;
                  case 22: // hmoveto
                      if (stack.length > 1 && !haveWidth) {
                          width = stack.shift() + nominalWidthX;
                          haveWidth = true;
                      }

                      x += stack.pop();
                      newContour(x, y);
                      break;
                  case 23: // vstemhm
                      parseStems();
                      break;
                  case 24: // rcurveline
                      while (stack.length > 2) {
                          c1x = x + stack.shift();
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + stack.shift();
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      x += stack.shift();
                      y += stack.shift();
                      p.lineTo(x, y);
                      break;
                  case 25: // rlinecurve
                      while (stack.length > 6) {
                          x += stack.shift();
                          y += stack.shift();
                          p.lineTo(x, y);
                      }

                      c1x = x + stack.shift();
                      c1y = y + stack.shift();
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      x = c2x + stack.shift();
                      y = c2y + stack.shift();
                      p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      break;
                  case 26: // vvcurveto
                      if (stack.length % 2) {
                          x += stack.shift();
                      }

                      while (stack.length > 0) {
                          c1x = x;
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x;
                          y = c2y + stack.shift();
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;
                  case 27: // hhcurveto
                      if (stack.length % 2) {
                          y += stack.shift();
                      }

                      while (stack.length > 0) {
                          c1x = x + stack.shift();
                          c1y = y;
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y;
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;
                  case 28: // shortint
                      b1 = code[i];
                      b2 = code[i + 1];
                      stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                      i += 2;
                      break;
                  case 29: // callgsubr
                      codeIndex = stack.pop() + font.gsubrsBias;
                      subrCode = font.gsubrs[codeIndex];
                      if (subrCode) {
                          parse(subrCode);
                      }

                      break;
                  case 30: // vhcurveto
                      while (stack.length > 0) {
                          c1x = x;
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + (stack.length === 1 ? stack.shift() : 0);
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          if (stack.length === 0) {
                              break;
                          }

                          c1x = x + stack.shift();
                          c1y = y;
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          y = c2y + stack.shift();
                          x = c2x + (stack.length === 1 ? stack.shift() : 0);
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;
                  case 31: // hvcurveto
                      while (stack.length > 0) {
                          c1x = x + stack.shift();
                          c1y = y;
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          y = c2y + stack.shift();
                          x = c2x + (stack.length === 1 ? stack.shift() : 0);
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          if (stack.length === 0) {
                              break;
                          }

                          c1x = x;
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + (stack.length === 1 ? stack.shift() : 0);
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;
                  default:
                      if (v < 32) {
                          console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                      } else if (v < 247) {
                          stack.push(v - 139);
                      } else if (v < 251) {
                          b1 = code[i];
                          i += 1;
                          stack.push((v - 247) * 256 + b1 + 108);
                      } else if (v < 255) {
                          b1 = code[i];
                          i += 1;
                          stack.push(-(v - 251) * 256 - b1 - 108);
                      } else {
                          b1 = code[i];
                          b2 = code[i + 1];
                          b3 = code[i + 2];
                          b4 = code[i + 3];
                          i += 4;
                          stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                      }
              }
          }
      }

      parse(code);

      glyph.advanceWidth = width;
      return p;
  }

  function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
      const fdSelect = [];
      let fdIndex;
      const parser = new parse$3.Parser(data, start);
      const format = parser.parseCard8();
      if (format === 0) {
          // Simple list of nGlyphs elements
          for (let iGid = 0; iGid < nGlyphs; iGid++) {
              fdIndex = parser.parseCard8();
              if (fdIndex >= fdArrayCount) {
                  throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
              }
              fdSelect.push(fdIndex);
          }
      } else if (format === 3) {
          // Ranges
          const nRanges = parser.parseCard16();
          let first = parser.parseCard16();
          if (first !== 0) {
              throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);
          }
          let next;
          for (let iRange = 0; iRange < nRanges; iRange++) {
              fdIndex = parser.parseCard8();
              next = parser.parseCard16();
              if (fdIndex >= fdArrayCount) {
                  throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
              }
              if (next > nGlyphs) {
                  throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);
              }
              for (; first < next; first++) {
                  fdSelect.push(fdIndex);
              }
              first = next;
          }
          if (next !== nGlyphs) {
              throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);
          }
      } else {
          throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);
      }
      return fdSelect;
  }

  // Parse the `CFF` table, which contains the glyph outlines in PostScript format.
  function parseCFFTable(data, start, font) {
      font.tables.cff = {};
      const header = parseCFFHeader(data, start);
      const nameIndex = parseCFFIndex(data, header.endOffset, parse$3.bytesToString);
      const topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
      const stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse$3.bytesToString);
      const globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
      font.gsubrs = globalSubrIndex.objects;
      font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

      const topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);
      if (topDictArray.length !== 1) {
          throw new Error('CFF table has too many fonts in \'FontSet\' - count of fonts NameIndex.length = ' + topDictArray.length);
      }

      const topDict = topDictArray[0];
      font.tables.cff.topDict = topDict;

      if (topDict._privateDict) {
          font.defaultWidthX = topDict._privateDict.defaultWidthX;
          font.nominalWidthX = topDict._privateDict.nominalWidthX;
      }

      if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {
          font.isCIDFont = true;
      }

      if (font.isCIDFont) {
          let fdArrayOffset = topDict.fdArray;
          let fdSelectOffset = topDict.fdSelect;
          if (fdArrayOffset === 0 || fdSelectOffset === 0) {
              throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');
          }
          fdArrayOffset += start;
          const fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
          const fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);
          topDict._fdArray = fdArray;
          fdSelectOffset += start;
          topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);
      }

      const privateDictOffset = start + topDict.private[1];
      const privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);
      font.defaultWidthX = privateDict.defaultWidthX;
      font.nominalWidthX = privateDict.nominalWidthX;

      if (privateDict.subrs !== 0) {
          const subrOffset = privateDictOffset + privateDict.subrs;
          const subrIndex = parseCFFIndex(data, subrOffset);
          font.subrs = subrIndex.objects;
          font.subrsBias = calcCFFSubroutineBias(font.subrs);
      } else {
          font.subrs = [];
          font.subrsBias = 0;
      }

      // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
      const charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
      font.nGlyphs = charStringsIndex.objects.length;

      const charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
      if (topDict.encoding === 0) {
          // Standard encoding
          font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
      } else if (topDict.encoding === 1) {
          // Expert encoding
          font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
      } else {
          font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
      }

      // Prefer the CMAP encoding to the CFF encoding.
      font.encoding = font.encoding || font.cffEncoding;

      font.glyphs = new glyphset.GlyphSet(font);
      for (let i = 0; i < font.nGlyphs; i += 1) {
          const charString = charStringsIndex.objects[i];
          font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
      }
  }

  // Convert a string to a String ID (SID).
  // The list of strings is modified in place.
  function encodeString(s, strings) {
      let sid;

      // Is the string in the CFF standard strings?
      let i = cffStandardStrings.indexOf(s);
      if (i >= 0) {
          sid = i;
      }

      // Is the string already in the string index?
      i = strings.indexOf(s);
      if (i >= 0) {
          sid = i + cffStandardStrings.length;
      } else {
          sid = cffStandardStrings.length + strings.length;
          strings.push(s);
      }

      return sid;
  }

  function makeHeader() {
      return new table.Record('Header', [
          {name: 'major', type: 'Card8', value: 1},
          {name: 'minor', type: 'Card8', value: 0},
          {name: 'hdrSize', type: 'Card8', value: 4},
          {name: 'major', type: 'Card8', value: 1}
      ]);
  }

  function makeNameIndex(fontNames) {
      const t = new table.Record('Name INDEX', [
          {name: 'names', type: 'INDEX', value: []}
      ]);
      t.names = [];
      for (let i = 0; i < fontNames.length; i += 1) {
          t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});
      }

      return t;
  }

  // Given a dictionary's metadata, create a DICT structure.
  function makeDict(meta, attrs, strings) {
      const m = {};
      for (let i = 0; i < meta.length; i += 1) {
          const entry = meta[i];
          let value = attrs[entry.name];
          if (value !== undefined && !equals$3(value, entry.value)) {
              if (entry.type === 'SID') {
                  value = encodeString(value, strings);
              }

              m[entry.op] = {name: entry.name, type: entry.type, value: value};
          }
      }

      return m;
  }

  // The Top DICT houses the global font attributes.
  function makeTopDict(attrs, strings) {
      const t = new table.Record('Top DICT', [
          {name: 'dict', type: 'DICT', value: {}}
      ]);
      t.dict = makeDict(TOP_DICT_META, attrs, strings);
      return t;
  }

  function makeTopDictIndex(topDict) {
      const t = new table.Record('Top DICT INDEX', [
          {name: 'topDicts', type: 'INDEX', value: []}
      ]);
      t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];
      return t;
  }

  function makeStringIndex(strings) {
      const t = new table.Record('String INDEX', [
          {name: 'strings', type: 'INDEX', value: []}
      ]);
      t.strings = [];
      for (let i = 0; i < strings.length; i += 1) {
          t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});
      }

      return t;
  }

  function makeGlobalSubrIndex() {
      // Currently we don't use subroutines.
      return new table.Record('Global Subr INDEX', [
          {name: 'subrs', type: 'INDEX', value: []}
      ]);
  }

  function makeCharsets(glyphNames, strings) {
      const t = new table.Record('Charsets', [
          {name: 'format', type: 'Card8', value: 0}
      ]);
      for (let i = 0; i < glyphNames.length; i += 1) {
          const glyphName = glyphNames[i];
          const glyphSID = encodeString(glyphName, strings);
          t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});
      }

      return t;
  }

  function glyphToOps(glyph) {
      const ops = [];
      const path = glyph.path;
      ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});
      let x = 0;
      let y = 0;
      for (let i = 0; i < path.commands.length; i += 1) {
          let dx;
          let dy;
          let cmd = path.commands[i];
          if (cmd.type === 'Q') {
              // CFF only supports bézier curves, so convert the quad to a bézier.
              const _13 = 1 / 3;
              const _23 = 2 / 3;

              // We're going to create a new command so we don't change the original path.
              cmd = {
                  type: 'C',
                  x: cmd.x,
                  y: cmd.y,
                  x1: _13 * x + _23 * cmd.x1,
                  y1: _13 * y + _23 * cmd.y1,
                  x2: _13 * cmd.x + _23 * cmd.x1,
                  y2: _13 * cmd.y + _23 * cmd.y1
              };
          }

          if (cmd.type === 'M') {
              dx = Math.round(cmd.x - x);
              dy = Math.round(cmd.y - y);
              ops.push({name: 'dx', type: 'NUMBER', value: dx});
              ops.push({name: 'dy', type: 'NUMBER', value: dy});
              ops.push({name: 'rmoveto', type: 'OP', value: 21});
              x = Math.round(cmd.x);
              y = Math.round(cmd.y);
          } else if (cmd.type === 'L') {
              dx = Math.round(cmd.x - x);
              dy = Math.round(cmd.y - y);
              ops.push({name: 'dx', type: 'NUMBER', value: dx});
              ops.push({name: 'dy', type: 'NUMBER', value: dy});
              ops.push({name: 'rlineto', type: 'OP', value: 5});
              x = Math.round(cmd.x);
              y = Math.round(cmd.y);
          } else if (cmd.type === 'C') {
              const dx1 = Math.round(cmd.x1 - x);
              const dy1 = Math.round(cmd.y1 - y);
              const dx2 = Math.round(cmd.x2 - cmd.x1);
              const dy2 = Math.round(cmd.y2 - cmd.y1);
              dx = Math.round(cmd.x - cmd.x2);
              dy = Math.round(cmd.y - cmd.y2);
              ops.push({name: 'dx1', type: 'NUMBER', value: dx1});
              ops.push({name: 'dy1', type: 'NUMBER', value: dy1});
              ops.push({name: 'dx2', type: 'NUMBER', value: dx2});
              ops.push({name: 'dy2', type: 'NUMBER', value: dy2});
              ops.push({name: 'dx', type: 'NUMBER', value: dx});
              ops.push({name: 'dy', type: 'NUMBER', value: dy});
              ops.push({name: 'rrcurveto', type: 'OP', value: 8});
              x = Math.round(cmd.x);
              y = Math.round(cmd.y);
          }

          // Contours are closed automatically.
      }

      ops.push({name: 'endchar', type: 'OP', value: 14});
      return ops;
  }

  function makeCharStringsIndex(glyphs) {
      const t = new table.Record('CharStrings INDEX', [
          {name: 'charStrings', type: 'INDEX', value: []}
      ]);

      for (let i = 0; i < glyphs.length; i += 1) {
          const glyph = glyphs.get(i);
          const ops = glyphToOps(glyph);
          t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});
      }

      return t;
  }

  function makePrivateDict(attrs, strings) {
      const t = new table.Record('Private DICT', [
          {name: 'dict', type: 'DICT', value: {}}
      ]);
      t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
      return t;
  }

  function makeCFFTable(glyphs, options) {
      const t = new table.Table('CFF ', [
          {name: 'header', type: 'RECORD'},
          {name: 'nameIndex', type: 'RECORD'},
          {name: 'topDictIndex', type: 'RECORD'},
          {name: 'stringIndex', type: 'RECORD'},
          {name: 'globalSubrIndex', type: 'RECORD'},
          {name: 'charsets', type: 'RECORD'},
          {name: 'charStringsIndex', type: 'RECORD'},
          {name: 'privateDict', type: 'RECORD'}
      ]);

      const fontScale = 1 / options.unitsPerEm;
      // We use non-zero values for the offsets so that the DICT encodes them.
      // This is important because the size of the Top DICT plays a role in offset calculation,
      // and the size shouldn't change after we've written correct offsets.
      const attrs = {
          version: options.version,
          fullName: options.fullName,
          familyName: options.familyName,
          weight: options.weightName,
          fontBBox: options.fontBBox || [0, 0, 0, 0],
          fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
          charset: 999,
          encoding: 0,
          charStrings: 999,
          private: [0, 999]
      };

      const privateAttrs = {};

      const glyphNames = [];
      let glyph;

      // Skip first glyph (.notdef)
      for (let i = 1; i < glyphs.length; i += 1) {
          glyph = glyphs.get(i);
          glyphNames.push(glyph.name);
      }

      const strings = [];

      t.header = makeHeader();
      t.nameIndex = makeNameIndex([options.postScriptName]);
      let topDict = makeTopDict(attrs, strings);
      t.topDictIndex = makeTopDictIndex(topDict);
      t.globalSubrIndex = makeGlobalSubrIndex();
      t.charsets = makeCharsets(glyphNames, strings);
      t.charStringsIndex = makeCharStringsIndex(glyphs);
      t.privateDict = makePrivateDict(privateAttrs, strings);

      // Needs to come at the end, to encode all custom strings used in the font.
      t.stringIndex = makeStringIndex(strings);

      const startOffset = t.header.sizeOf() +
          t.nameIndex.sizeOf() +
          t.topDictIndex.sizeOf() +
          t.stringIndex.sizeOf() +
          t.globalSubrIndex.sizeOf();
      attrs.charset = startOffset;

      // We use the CFF standard encoding; proper encoding will be handled in cmap.
      attrs.encoding = 0;
      attrs.charStrings = attrs.charset + t.charsets.sizeOf();
      attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();

      // Recreate the Top DICT INDEX with the correct offsets.
      topDict = makeTopDict(attrs, strings);
      t.topDictIndex = makeTopDictIndex(topDict);

      return t;
  }

  var cff = { parse: parseCFFTable, make: makeCFFTable };

  // The `head` table contains global information about the font.

  // Parse the header `head` table
  function parseHeadTable(data, start) {
      const head = {};
      const p = new parse$3.Parser(data, start);
      head.version = p.parseVersion();
      head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
      head.checkSumAdjustment = p.parseULong();
      head.magicNumber = p.parseULong();
      check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
      head.flags = p.parseUShort();
      head.unitsPerEm = p.parseUShort();
      head.created = p.parseLongDateTime();
      head.modified = p.parseLongDateTime();
      head.xMin = p.parseShort();
      head.yMin = p.parseShort();
      head.xMax = p.parseShort();
      head.yMax = p.parseShort();
      head.macStyle = p.parseUShort();
      head.lowestRecPPEM = p.parseUShort();
      head.fontDirectionHint = p.parseShort();
      head.indexToLocFormat = p.parseShort();
      head.glyphDataFormat = p.parseShort();
      return head;
  }

  function makeHeadTable(options) {
      // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970
      const timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;
      let createdTimestamp = timestamp;

      if (options.createdTimestamp) {
          createdTimestamp = options.createdTimestamp + 2082844800;
      }

      return new table.Table('head', [
          {name: 'version', type: 'FIXED', value: 0x00010000},
          {name: 'fontRevision', type: 'FIXED', value: 0x00010000},
          {name: 'checkSumAdjustment', type: 'ULONG', value: 0},
          {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},
          {name: 'flags', type: 'USHORT', value: 0},
          {name: 'unitsPerEm', type: 'USHORT', value: 1000},
          {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},
          {name: 'modified', type: 'LONGDATETIME', value: timestamp},
          {name: 'xMin', type: 'SHORT', value: 0},
          {name: 'yMin', type: 'SHORT', value: 0},
          {name: 'xMax', type: 'SHORT', value: 0},
          {name: 'yMax', type: 'SHORT', value: 0},
          {name: 'macStyle', type: 'USHORT', value: 0},
          {name: 'lowestRecPPEM', type: 'USHORT', value: 0},
          {name: 'fontDirectionHint', type: 'SHORT', value: 2},
          {name: 'indexToLocFormat', type: 'SHORT', value: 0},
          {name: 'glyphDataFormat', type: 'SHORT', value: 0}
      ], options);
  }

  var head = { parse: parseHeadTable, make: makeHeadTable };

  // The `hhea` table contains information for horizontal layout.

  // Parse the horizontal header `hhea` table
  function parseHheaTable(data, start) {
      const hhea = {};
      const p = new parse$3.Parser(data, start);
      hhea.version = p.parseVersion();
      hhea.ascender = p.parseShort();
      hhea.descender = p.parseShort();
      hhea.lineGap = p.parseShort();
      hhea.advanceWidthMax = p.parseUShort();
      hhea.minLeftSideBearing = p.parseShort();
      hhea.minRightSideBearing = p.parseShort();
      hhea.xMaxExtent = p.parseShort();
      hhea.caretSlopeRise = p.parseShort();
      hhea.caretSlopeRun = p.parseShort();
      hhea.caretOffset = p.parseShort();
      p.relativeOffset += 8;
      hhea.metricDataFormat = p.parseShort();
      hhea.numberOfHMetrics = p.parseUShort();
      return hhea;
  }

  function makeHheaTable(options) {
      return new table.Table('hhea', [
          {name: 'version', type: 'FIXED', value: 0x00010000},
          {name: 'ascender', type: 'FWORD', value: 0},
          {name: 'descender', type: 'FWORD', value: 0},
          {name: 'lineGap', type: 'FWORD', value: 0},
          {name: 'advanceWidthMax', type: 'UFWORD', value: 0},
          {name: 'minLeftSideBearing', type: 'FWORD', value: 0},
          {name: 'minRightSideBearing', type: 'FWORD', value: 0},
          {name: 'xMaxExtent', type: 'FWORD', value: 0},
          {name: 'caretSlopeRise', type: 'SHORT', value: 1},
          {name: 'caretSlopeRun', type: 'SHORT', value: 0},
          {name: 'caretOffset', type: 'SHORT', value: 0},
          {name: 'reserved1', type: 'SHORT', value: 0},
          {name: 'reserved2', type: 'SHORT', value: 0},
          {name: 'reserved3', type: 'SHORT', value: 0},
          {name: 'reserved4', type: 'SHORT', value: 0},
          {name: 'metricDataFormat', type: 'SHORT', value: 0},
          {name: 'numberOfHMetrics', type: 'USHORT', value: 0}
      ], options);
  }

  var hhea = { parse: parseHheaTable, make: makeHheaTable };

  // The `hmtx` table contains the horizontal metrics for all glyphs.

  // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
  // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
  function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
      let advanceWidth;
      let leftSideBearing;
      const p = new parse$3.Parser(data, start);
      for (let i = 0; i < numGlyphs; i += 1) {
          // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
          if (i < numMetrics) {
              advanceWidth = p.parseUShort();
              leftSideBearing = p.parseShort();
          }

          const glyph = glyphs.get(i);
          glyph.advanceWidth = advanceWidth;
          glyph.leftSideBearing = leftSideBearing;
      }
  }

  function makeHmtxTable(glyphs) {
      const t = new table.Table('hmtx', []);
      for (let i = 0; i < glyphs.length; i += 1) {
          const glyph = glyphs.get(i);
          const advanceWidth = glyph.advanceWidth || 0;
          const leftSideBearing = glyph.leftSideBearing || 0;
          t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});
          t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});
      }

      return t;
  }

  var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };

  // The `ltag` table stores IETF BCP-47 language tags. It allows supporting

  function makeLtagTable(tags) {
      const result = new table.Table('ltag', [
          {name: 'version', type: 'ULONG', value: 1},
          {name: 'flags', type: 'ULONG', value: 0},
          {name: 'numTags', type: 'ULONG', value: tags.length}
      ]);

      let stringPool = '';
      const stringPoolOffset = 12 + tags.length * 4;
      for (let i = 0; i < tags.length; ++i) {
          let pos = stringPool.indexOf(tags[i]);
          if (pos < 0) {
              pos = stringPool.length;
              stringPool += tags[i];
          }

          result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});
          result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});
      }

      result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});
      return result;
  }

  function parseLtagTable(data, start) {
      const p = new parse$3.Parser(data, start);
      const tableVersion = p.parseULong();
      check.argument(tableVersion === 1, 'Unsupported ltag table version.');
      // The 'ltag' specification does not define any flags; skip the field.
      p.skip('uLong', 1);
      const numTags = p.parseULong();

      const tags = [];
      for (let i = 0; i < numTags; i++) {
          let tag = '';
          const offset = start + p.parseUShort();
          const length = p.parseUShort();
          for (let j = offset; j < offset + length; ++j) {
              tag += String.fromCharCode(data.getInt8(j));
          }

          tags.push(tag);
      }

      return tags;
  }

  var ltag = { make: makeLtagTable, parse: parseLtagTable };

  // The `maxp` table establishes the memory requirements for the font.

  // Parse the maximum profile `maxp` table.
  function parseMaxpTable(data, start) {
      const maxp = {};
      const p = new parse$3.Parser(data, start);
      maxp.version = p.parseVersion();
      maxp.numGlyphs = p.parseUShort();
      if (maxp.version === 1.0) {
          maxp.maxPoints = p.parseUShort();
          maxp.maxContours = p.parseUShort();
          maxp.maxCompositePoints = p.parseUShort();
          maxp.maxCompositeContours = p.parseUShort();
          maxp.maxZones = p.parseUShort();
          maxp.maxTwilightPoints = p.parseUShort();
          maxp.maxStorage = p.parseUShort();
          maxp.maxFunctionDefs = p.parseUShort();
          maxp.maxInstructionDefs = p.parseUShort();
          maxp.maxStackElements = p.parseUShort();
          maxp.maxSizeOfInstructions = p.parseUShort();
          maxp.maxComponentElements = p.parseUShort();
          maxp.maxComponentDepth = p.parseUShort();
      }

      return maxp;
  }

  function makeMaxpTable(numGlyphs) {
      return new table.Table('maxp', [
          {name: 'version', type: 'FIXED', value: 0x00005000},
          {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}
      ]);
  }

  var maxp = { parse: parseMaxpTable, make: makeMaxpTable };

  // The `name` naming table.

  // NameIDs for the name table.
  const nameTableNames = [
      'copyright',              // 0
      'fontFamily',             // 1
      'fontSubfamily',          // 2
      'uniqueID',               // 3
      'fullName',               // 4
      'version',                // 5
      'postScriptName',         // 6
      'trademark',              // 7
      'manufacturer',           // 8
      'designer',               // 9
      'description',            // 10
      'manufacturerURL',        // 11
      'designerURL',            // 12
      'license',                // 13
      'licenseURL',             // 14
      'reserved',               // 15
      'preferredFamily',        // 16
      'preferredSubfamily',     // 17
      'compatibleFullName',     // 18
      'sampleText',             // 19
      'postScriptFindFontName', // 20
      'wwsFamily',              // 21
      'wwsSubfamily'            // 22
  ];

  const macLanguages = {
      0: 'en',
      1: 'fr',
      2: 'de',
      3: 'it',
      4: 'nl',
      5: 'sv',
      6: 'es',
      7: 'da',
      8: 'pt',
      9: 'no',
      10: 'he',
      11: 'ja',
      12: 'ar',
      13: 'fi',
      14: 'el',
      15: 'is',
      16: 'mt',
      17: 'tr',
      18: 'hr',
      19: 'zh-Hant',
      20: 'ur',
      21: 'hi',
      22: 'th',
      23: 'ko',
      24: 'lt',
      25: 'pl',
      26: 'hu',
      27: 'es',
      28: 'lv',
      29: 'se',
      30: 'fo',
      31: 'fa',
      32: 'ru',
      33: 'zh',
      34: 'nl-BE',
      35: 'ga',
      36: 'sq',
      37: 'ro',
      38: 'cz',
      39: 'sk',
      40: 'si',
      41: 'yi',
      42: 'sr',
      43: 'mk',
      44: 'bg',
      45: 'uk',
      46: 'be',
      47: 'uz',
      48: 'kk',
      49: 'az-Cyrl',
      50: 'az-Arab',
      51: 'hy',
      52: 'ka',
      53: 'mo',
      54: 'ky',
      55: 'tg',
      56: 'tk',
      57: 'mn-CN',
      58: 'mn',
      59: 'ps',
      60: 'ks',
      61: 'ku',
      62: 'sd',
      63: 'bo',
      64: 'ne',
      65: 'sa',
      66: 'mr',
      67: 'bn',
      68: 'as',
      69: 'gu',
      70: 'pa',
      71: 'or',
      72: 'ml',
      73: 'kn',
      74: 'ta',
      75: 'te',
      76: 'si',
      77: 'my',
      78: 'km',
      79: 'lo',
      80: 'vi',
      81: 'id',
      82: 'tl',
      83: 'ms',
      84: 'ms-Arab',
      85: 'am',
      86: 'ti',
      87: 'om',
      88: 'so',
      89: 'sw',
      90: 'rw',
      91: 'rn',
      92: 'ny',
      93: 'mg',
      94: 'eo',
      128: 'cy',
      129: 'eu',
      130: 'ca',
      131: 'la',
      132: 'qu',
      133: 'gn',
      134: 'ay',
      135: 'tt',
      136: 'ug',
      137: 'dz',
      138: 'jv',
      139: 'su',
      140: 'gl',
      141: 'af',
      142: 'br',
      143: 'iu',
      144: 'gd',
      145: 'gv',
      146: 'ga',
      147: 'to',
      148: 'el-polyton',
      149: 'kl',
      150: 'az',
      151: 'nn'
  };

  // MacOS language ID → MacOS script ID
  //
  // Note that the script ID is not sufficient to determine what encoding
  // to use in TrueType files. For some languages, MacOS used a modification
  // of a mainstream script. For example, an Icelandic name would be stored
  // with smRoman in the TrueType naming table, but the actual encoding
  // is a special Icelandic version of the normal Macintosh Roman encoding.
  // As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
  // Syllables but MacOS had run out of available script codes, so this was
  // done as a (pretty radical) "modification" of Ethiopic.
  //
  // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
  const macLanguageToScript = {
      0: 0,  // langEnglish → smRoman
      1: 0,  // langFrench → smRoman
      2: 0,  // langGerman → smRoman
      3: 0,  // langItalian → smRoman
      4: 0,  // langDutch → smRoman
      5: 0,  // langSwedish → smRoman
      6: 0,  // langSpanish → smRoman
      7: 0,  // langDanish → smRoman
      8: 0,  // langPortuguese → smRoman
      9: 0,  // langNorwegian → smRoman
      10: 5,  // langHebrew → smHebrew
      11: 1,  // langJapanese → smJapanese
      12: 4,  // langArabic → smArabic
      13: 0,  // langFinnish → smRoman
      14: 6,  // langGreek → smGreek
      15: 0,  // langIcelandic → smRoman (modified)
      16: 0,  // langMaltese → smRoman
      17: 0,  // langTurkish → smRoman (modified)
      18: 0,  // langCroatian → smRoman (modified)
      19: 2,  // langTradChinese → smTradChinese
      20: 4,  // langUrdu → smArabic
      21: 9,  // langHindi → smDevanagari
      22: 21,  // langThai → smThai
      23: 3,  // langKorean → smKorean
      24: 29,  // langLithuanian → smCentralEuroRoman
      25: 29,  // langPolish → smCentralEuroRoman
      26: 29,  // langHungarian → smCentralEuroRoman
      27: 29,  // langEstonian → smCentralEuroRoman
      28: 29,  // langLatvian → smCentralEuroRoman
      29: 0,  // langSami → smRoman
      30: 0,  // langFaroese → smRoman (modified)
      31: 4,  // langFarsi → smArabic (modified)
      32: 7,  // langRussian → smCyrillic
      33: 25,  // langSimpChinese → smSimpChinese
      34: 0,  // langFlemish → smRoman
      35: 0,  // langIrishGaelic → smRoman (modified)
      36: 0,  // langAlbanian → smRoman
      37: 0,  // langRomanian → smRoman (modified)
      38: 29,  // langCzech → smCentralEuroRoman
      39: 29,  // langSlovak → smCentralEuroRoman
      40: 0,  // langSlovenian → smRoman (modified)
      41: 5,  // langYiddish → smHebrew
      42: 7,  // langSerbian → smCyrillic
      43: 7,  // langMacedonian → smCyrillic
      44: 7,  // langBulgarian → smCyrillic
      45: 7,  // langUkrainian → smCyrillic (modified)
      46: 7,  // langByelorussian → smCyrillic
      47: 7,  // langUzbek → smCyrillic
      48: 7,  // langKazakh → smCyrillic
      49: 7,  // langAzerbaijani → smCyrillic
      50: 4,  // langAzerbaijanAr → smArabic
      51: 24,  // langArmenian → smArmenian
      52: 23,  // langGeorgian → smGeorgian
      53: 7,  // langMoldavian → smCyrillic
      54: 7,  // langKirghiz → smCyrillic
      55: 7,  // langTajiki → smCyrillic
      56: 7,  // langTurkmen → smCyrillic
      57: 27,  // langMongolian → smMongolian
      58: 7,  // langMongolianCyr → smCyrillic
      59: 4,  // langPashto → smArabic
      60: 4,  // langKurdish → smArabic
      61: 4,  // langKashmiri → smArabic
      62: 4,  // langSindhi → smArabic
      63: 26,  // langTibetan → smTibetan
      64: 9,  // langNepali → smDevanagari
      65: 9,  // langSanskrit → smDevanagari
      66: 9,  // langMarathi → smDevanagari
      67: 13,  // langBengali → smBengali
      68: 13,  // langAssamese → smBengali
      69: 11,  // langGujarati → smGujarati
      70: 10,  // langPunjabi → smGurmukhi
      71: 12,  // langOriya → smOriya
      72: 17,  // langMalayalam → smMalayalam
      73: 16,  // langKannada → smKannada
      74: 14,  // langTamil → smTamil
      75: 15,  // langTelugu → smTelugu
      76: 18,  // langSinhalese → smSinhalese
      77: 19,  // langBurmese → smBurmese
      78: 20,  // langKhmer → smKhmer
      79: 22,  // langLao → smLao
      80: 30,  // langVietnamese → smVietnamese
      81: 0,  // langIndonesian → smRoman
      82: 0,  // langTagalog → smRoman
      83: 0,  // langMalayRoman → smRoman
      84: 4,  // langMalayArabic → smArabic
      85: 28,  // langAmharic → smEthiopic
      86: 28,  // langTigrinya → smEthiopic
      87: 28,  // langOromo → smEthiopic
      88: 0,  // langSomali → smRoman
      89: 0,  // langSwahili → smRoman
      90: 0,  // langKinyarwanda → smRoman
      91: 0,  // langRundi → smRoman
      92: 0,  // langNyanja → smRoman
      93: 0,  // langMalagasy → smRoman
      94: 0,  // langEsperanto → smRoman
      128: 0,  // langWelsh → smRoman (modified)
      129: 0,  // langBasque → smRoman
      130: 0,  // langCatalan → smRoman
      131: 0,  // langLatin → smRoman
      132: 0,  // langQuechua → smRoman
      133: 0,  // langGuarani → smRoman
      134: 0,  // langAymara → smRoman
      135: 7,  // langTatar → smCyrillic
      136: 4,  // langUighur → smArabic
      137: 26,  // langDzongkha → smTibetan
      138: 0,  // langJavaneseRom → smRoman
      139: 0,  // langSundaneseRom → smRoman
      140: 0,  // langGalician → smRoman
      141: 0,  // langAfrikaans → smRoman
      142: 0,  // langBreton → smRoman (modified)
      143: 28,  // langInuktitut → smEthiopic (modified)
      144: 0,  // langScottishGaelic → smRoman (modified)
      145: 0,  // langManxGaelic → smRoman (modified)
      146: 0,  // langIrishGaelicScript → smRoman (modified)
      147: 0,  // langTongan → smRoman
      148: 6,  // langGreekAncient → smRoman
      149: 0,  // langGreenlandic → smRoman
      150: 0,  // langAzerbaijanRoman → smRoman
      151: 0   // langNynorsk → smRoman
  };

  // While Microsoft indicates a region/country for all its language
  // IDs, we omit the region code if it's equal to the "most likely
  // region subtag" according to Unicode CLDR. For scripts, we omit
  // the subtag if it is equal to the Suppress-Script entry in the
  // IANA language subtag registry for IETF BCP 47.
  //
  // For example, Microsoft states that its language code 0x041A is
  // Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
  // and not 'hr-HR' because Croatia is the default country for Croatian,
  // according to Unicode CLDR. As another example, Microsoft states
  // that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
  // this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
  // for the Croatian language, according to IANA.
  //
  // http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
  // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
  const windowsLanguages = {
      0x0436: 'af',
      0x041C: 'sq',
      0x0484: 'gsw',
      0x045E: 'am',
      0x1401: 'ar-DZ',
      0x3C01: 'ar-BH',
      0x0C01: 'ar',
      0x0801: 'ar-IQ',
      0x2C01: 'ar-JO',
      0x3401: 'ar-KW',
      0x3001: 'ar-LB',
      0x1001: 'ar-LY',
      0x1801: 'ary',
      0x2001: 'ar-OM',
      0x4001: 'ar-QA',
      0x0401: 'ar-SA',
      0x2801: 'ar-SY',
      0x1C01: 'aeb',
      0x3801: 'ar-AE',
      0x2401: 'ar-YE',
      0x042B: 'hy',
      0x044D: 'as',
      0x082C: 'az-Cyrl',
      0x042C: 'az',
      0x046D: 'ba',
      0x042D: 'eu',
      0x0423: 'be',
      0x0845: 'bn',
      0x0445: 'bn-IN',
      0x201A: 'bs-Cyrl',
      0x141A: 'bs',
      0x047E: 'br',
      0x0402: 'bg',
      0x0403: 'ca',
      0x0C04: 'zh-HK',
      0x1404: 'zh-MO',
      0x0804: 'zh',
      0x1004: 'zh-SG',
      0x0404: 'zh-TW',
      0x0483: 'co',
      0x041A: 'hr',
      0x101A: 'hr-BA',
      0x0405: 'cs',
      0x0406: 'da',
      0x048C: 'prs',
      0x0465: 'dv',
      0x0813: 'nl-BE',
      0x0413: 'nl',
      0x0C09: 'en-AU',
      0x2809: 'en-BZ',
      0x1009: 'en-CA',
      0x2409: 'en-029',
      0x4009: 'en-IN',
      0x1809: 'en-IE',
      0x2009: 'en-JM',
      0x4409: 'en-MY',
      0x1409: 'en-NZ',
      0x3409: 'en-PH',
      0x4809: 'en-SG',
      0x1C09: 'en-ZA',
      0x2C09: 'en-TT',
      0x0809: 'en-GB',
      0x0409: 'en',
      0x3009: 'en-ZW',
      0x0425: 'et',
      0x0438: 'fo',
      0x0464: 'fil',
      0x040B: 'fi',
      0x080C: 'fr-BE',
      0x0C0C: 'fr-CA',
      0x040C: 'fr',
      0x140C: 'fr-LU',
      0x180C: 'fr-MC',
      0x100C: 'fr-CH',
      0x0462: 'fy',
      0x0456: 'gl',
      0x0437: 'ka',
      0x0C07: 'de-AT',
      0x0407: 'de',
      0x1407: 'de-LI',
      0x1007: 'de-LU',
      0x0807: 'de-CH',
      0x0408: 'el',
      0x046F: 'kl',
      0x0447: 'gu',
      0x0468: 'ha',
      0x040D: 'he',
      0x0439: 'hi',
      0x040E: 'hu',
      0x040F: 'is',
      0x0470: 'ig',
      0x0421: 'id',
      0x045D: 'iu',
      0x085D: 'iu-Latn',
      0x083C: 'ga',
      0x0434: 'xh',
      0x0435: 'zu',
      0x0410: 'it',
      0x0810: 'it-CH',
      0x0411: 'ja',
      0x044B: 'kn',
      0x043F: 'kk',
      0x0453: 'km',
      0x0486: 'quc',
      0x0487: 'rw',
      0x0441: 'sw',
      0x0457: 'kok',
      0x0412: 'ko',
      0x0440: 'ky',
      0x0454: 'lo',
      0x0426: 'lv',
      0x0427: 'lt',
      0x082E: 'dsb',
      0x046E: 'lb',
      0x042F: 'mk',
      0x083E: 'ms-BN',
      0x043E: 'ms',
      0x044C: 'ml',
      0x043A: 'mt',
      0x0481: 'mi',
      0x047A: 'arn',
      0x044E: 'mr',
      0x047C: 'moh',
      0x0450: 'mn',
      0x0850: 'mn-CN',
      0x0461: 'ne',
      0x0414: 'nb',
      0x0814: 'nn',
      0x0482: 'oc',
      0x0448: 'or',
      0x0463: 'ps',
      0x0415: 'pl',
      0x0416: 'pt',
      0x0816: 'pt-PT',
      0x0446: 'pa',
      0x046B: 'qu-BO',
      0x086B: 'qu-EC',
      0x0C6B: 'qu',
      0x0418: 'ro',
      0x0417: 'rm',
      0x0419: 'ru',
      0x243B: 'smn',
      0x103B: 'smj-NO',
      0x143B: 'smj',
      0x0C3B: 'se-FI',
      0x043B: 'se',
      0x083B: 'se-SE',
      0x203B: 'sms',
      0x183B: 'sma-NO',
      0x1C3B: 'sms',
      0x044F: 'sa',
      0x1C1A: 'sr-Cyrl-BA',
      0x0C1A: 'sr',
      0x181A: 'sr-Latn-BA',
      0x081A: 'sr-Latn',
      0x046C: 'nso',
      0x0432: 'tn',
      0x045B: 'si',
      0x041B: 'sk',
      0x0424: 'sl',
      0x2C0A: 'es-AR',
      0x400A: 'es-BO',
      0x340A: 'es-CL',
      0x240A: 'es-CO',
      0x140A: 'es-CR',
      0x1C0A: 'es-DO',
      0x300A: 'es-EC',
      0x440A: 'es-SV',
      0x100A: 'es-GT',
      0x480A: 'es-HN',
      0x080A: 'es-MX',
      0x4C0A: 'es-NI',
      0x180A: 'es-PA',
      0x3C0A: 'es-PY',
      0x280A: 'es-PE',
      0x500A: 'es-PR',

      // Microsoft has defined two different language codes for
      // “Spanish with modern sorting” and “Spanish with traditional
      // sorting”. This makes sense for collation APIs, and it would be
      // possible to express this in BCP 47 language tags via Unicode
      // extensions (eg., es-u-co-trad is Spanish with traditional
      // sorting). However, for storing names in fonts, the distinction
      // does not make sense, so we give “es” in both cases.
      0x0C0A: 'es',
      0x040A: 'es',

      0x540A: 'es-US',
      0x380A: 'es-UY',
      0x200A: 'es-VE',
      0x081D: 'sv-FI',
      0x041D: 'sv',
      0x045A: 'syr',
      0x0428: 'tg',
      0x085F: 'tzm',
      0x0449: 'ta',
      0x0444: 'tt',
      0x044A: 'te',
      0x041E: 'th',
      0x0451: 'bo',
      0x041F: 'tr',
      0x0442: 'tk',
      0x0480: 'ug',
      0x0422: 'uk',
      0x042E: 'hsb',
      0x0420: 'ur',
      0x0843: 'uz-Cyrl',
      0x0443: 'uz',
      0x042A: 'vi',
      0x0452: 'cy',
      0x0488: 'wo',
      0x0485: 'sah',
      0x0478: 'ii',
      0x046A: 'yo'
  };

  // Returns a IETF BCP 47 language code, for example 'zh-Hant'
  // for 'Chinese in the traditional script'.
  function getLanguageCode(platformID, languageID, ltag) {
      switch (platformID) {
          case 0:  // Unicode
              if (languageID === 0xFFFF) {
                  return 'und';
              } else if (ltag) {
                  return ltag[languageID];
              }

              break;

          case 1:  // Macintosh
              return macLanguages[languageID];

          case 3:  // Windows
              return windowsLanguages[languageID];
      }

      return undefined;
  }

  const utf16 = 'utf-16';

  // MacOS script ID → encoding. This table stores the default case,
  // which can be overridden by macLanguageEncodings.
  const macScriptEncodings = {
      0: 'macintosh',           // smRoman
      1: 'x-mac-japanese',      // smJapanese
      2: 'x-mac-chinesetrad',   // smTradChinese
      3: 'x-mac-korean',        // smKorean
      6: 'x-mac-greek',         // smGreek
      7: 'x-mac-cyrillic',      // smCyrillic
      9: 'x-mac-devanagai',     // smDevanagari
      10: 'x-mac-gurmukhi',     // smGurmukhi
      11: 'x-mac-gujarati',     // smGujarati
      12: 'x-mac-oriya',        // smOriya
      13: 'x-mac-bengali',      // smBengali
      14: 'x-mac-tamil',        // smTamil
      15: 'x-mac-telugu',       // smTelugu
      16: 'x-mac-kannada',      // smKannada
      17: 'x-mac-malayalam',    // smMalayalam
      18: 'x-mac-sinhalese',    // smSinhalese
      19: 'x-mac-burmese',      // smBurmese
      20: 'x-mac-khmer',        // smKhmer
      21: 'x-mac-thai',         // smThai
      22: 'x-mac-lao',          // smLao
      23: 'x-mac-georgian',     // smGeorgian
      24: 'x-mac-armenian',     // smArmenian
      25: 'x-mac-chinesesimp',  // smSimpChinese
      26: 'x-mac-tibetan',      // smTibetan
      27: 'x-mac-mongolian',    // smMongolian
      28: 'x-mac-ethiopic',     // smEthiopic
      29: 'x-mac-ce',           // smCentralEuroRoman
      30: 'x-mac-vietnamese',   // smVietnamese
      31: 'x-mac-extarabic'     // smExtArabic
  };

  // MacOS language ID → encoding. This table stores the exceptional
  // cases, which override macScriptEncodings. For writing MacOS naming
  // tables, we need to emit a MacOS script ID. Therefore, we cannot
  // merge macScriptEncodings into macLanguageEncodings.
  //
  // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
  const macLanguageEncodings = {
      15: 'x-mac-icelandic',    // langIcelandic
      17: 'x-mac-turkish',      // langTurkish
      18: 'x-mac-croatian',     // langCroatian
      24: 'x-mac-ce',           // langLithuanian
      25: 'x-mac-ce',           // langPolish
      26: 'x-mac-ce',           // langHungarian
      27: 'x-mac-ce',           // langEstonian
      28: 'x-mac-ce',           // langLatvian
      30: 'x-mac-icelandic',    // langFaroese
      37: 'x-mac-romanian',     // langRomanian
      38: 'x-mac-ce',           // langCzech
      39: 'x-mac-ce',           // langSlovak
      40: 'x-mac-ce',           // langSlovenian
      143: 'x-mac-inuit',       // langInuktitut
      146: 'x-mac-gaelic'       // langIrishGaelicScript
  };

  function getEncoding(platformID, encodingID, languageID) {
      switch (platformID) {
          case 0:  // Unicode
              return utf16;

          case 1:  // Apple Macintosh
              return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];

          case 3:  // Microsoft Windows
              if (encodingID === 1 || encodingID === 10) {
                  return utf16;
              }

              break;
      }

      return undefined;
  }

  // Parse the naming `name` table.
  // FIXME: Format 1 additional fields are not supported yet.
  // ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].
  function parseNameTable(data, start, ltag) {
      const name = {};
      const p = new parse$3.Parser(data, start);
      const format = p.parseUShort();
      const count = p.parseUShort();
      const stringOffset = p.offset + p.parseUShort();
      for (let i = 0; i < count; i++) {
          const platformID = p.parseUShort();
          const encodingID = p.parseUShort();
          const languageID = p.parseUShort();
          const nameID = p.parseUShort();
          const property = nameTableNames[nameID] || nameID;
          const byteLength = p.parseUShort();
          const offset = p.parseUShort();
          const language = getLanguageCode(platformID, languageID, ltag);
          const encoding = getEncoding(platformID, encodingID, languageID);
          if (encoding !== undefined && language !== undefined) {
              let text;
              if (encoding === utf16) {
                  text = decode.UTF16(data, stringOffset + offset, byteLength);
              } else {
                  text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);
              }

              if (text) {
                  let translations = name[property];
                  if (translations === undefined) {
                      translations = name[property] = {};
                  }

                  translations[language] = text;
              }
          }
      }

      let langTagCount = 0;
      if (format === 1) {
          // FIXME: Also handle Microsoft's 'name' table 1.
          langTagCount = p.parseUShort();
      }

      return name;
  }

  // {23: 'foo'} → {'foo': 23}
  // ['bar', 'baz'] → {'bar': 0, 'baz': 1}
  function reverseDict(dict) {
      const result = {};
      for (let key in dict) {
          result[dict[key]] = parseInt(key);
      }

      return result;
  }

  function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
      return new table.Record('NameRecord', [
          {name: 'platformID', type: 'USHORT', value: platformID},
          {name: 'encodingID', type: 'USHORT', value: encodingID},
          {name: 'languageID', type: 'USHORT', value: languageID},
          {name: 'nameID', type: 'USHORT', value: nameID},
          {name: 'length', type: 'USHORT', value: length},
          {name: 'offset', type: 'USHORT', value: offset}
      ]);
  }

  // Finds the position of needle in haystack, or -1 if not there.
  // Like String.indexOf(), but for arrays.
  function findSubArray(needle, haystack) {
      const needleLength = needle.length;
      const limit = haystack.length - needleLength + 1;

      loop:
      for (let pos = 0; pos < limit; pos++) {
          for (; pos < limit; pos++) {
              for (let k = 0; k < needleLength; k++) {
                  if (haystack[pos + k] !== needle[k]) {
                      continue loop;
                  }
              }

              return pos;
          }
      }

      return -1;
  }

  function addStringToPool(s, pool) {
      let offset = findSubArray(s, pool);
      if (offset < 0) {
          offset = pool.length;
          let i = 0;
          const len = s.length;
          for (; i < len; ++i) {
              pool.push(s[i]);
          }

      }

      return offset;
  }

  function makeNameTable(names, ltag) {
      let nameID;
      const nameIDs = [];

      const namesWithNumericKeys = {};
      const nameTableIds = reverseDict(nameTableNames);
      for (let key in names) {
          let id = nameTableIds[key];
          if (id === undefined) {
              id = key;
          }

          nameID = parseInt(id);

          if (isNaN(nameID)) {
              throw new Error('Name table entry "' + key + '" does not exist, see nameTableNames for complete list.');
          }

          namesWithNumericKeys[nameID] = names[key];
          nameIDs.push(nameID);
      }

      const macLanguageIds = reverseDict(macLanguages);
      const windowsLanguageIds = reverseDict(windowsLanguages);

      const nameRecords = [];
      const stringPool = [];

      for (let i = 0; i < nameIDs.length; i++) {
          nameID = nameIDs[i];
          const translations = namesWithNumericKeys[nameID];
          for (let lang in translations) {
              const text = translations[lang];

              // For MacOS, we try to emit the name in the form that was introduced
              // in the initial version of the TrueType spec (in the late 1980s).
              // However, this can fail for various reasons: the requested BCP 47
              // language code might not have an old-style Mac equivalent;
              // we might not have a codec for the needed character encoding;
              // or the name might contain characters that cannot be expressed
              // in the old-style Macintosh encoding. In case of failure, we emit
              // the name in a more modern fashion (Unicode encoding with BCP 47
              // language tags) that is recognized by MacOS 10.5, released in 2009.
              // If fonts were only read by operating systems, we could simply
              // emit all names in the modern form; this would be much easier.
              // However, there are many applications and libraries that read
              // 'name' tables directly, and these will usually only recognize
              // the ancient form (silently skipping the unrecognized names).
              let macPlatform = 1;  // Macintosh
              let macLanguage = macLanguageIds[lang];
              let macScript = macLanguageToScript[macLanguage];
              const macEncoding = getEncoding(macPlatform, macScript, macLanguage);
              let macName = encode.MACSTRING(text, macEncoding);
              if (macName === undefined) {
                  macPlatform = 0;  // Unicode
                  macLanguage = ltag.indexOf(lang);
                  if (macLanguage < 0) {
                      macLanguage = ltag.length;
                      ltag.push(lang);
                  }

                  macScript = 4;  // Unicode 2.0 and later
                  macName = encode.UTF16(text);
              }

              const macNameOffset = addStringToPool(macName, stringPool);
              nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,
                                              nameID, macName.length, macNameOffset));

              const winLanguage = windowsLanguageIds[lang];
              if (winLanguage !== undefined) {
                  const winName = encode.UTF16(text);
                  const winNameOffset = addStringToPool(winName, stringPool);
                  nameRecords.push(makeNameRecord(3, 1, winLanguage,
                                                  nameID, winName.length, winNameOffset));
              }
          }
      }

      nameRecords.sort(function(a, b) {
          return ((a.platformID - b.platformID) ||
                  (a.encodingID - b.encodingID) ||
                  (a.languageID - b.languageID) ||
                  (a.nameID - b.nameID));
      });

      const t = new table.Table('name', [
          {name: 'format', type: 'USHORT', value: 0},
          {name: 'count', type: 'USHORT', value: nameRecords.length},
          {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}
      ]);

      for (let r = 0; r < nameRecords.length; r++) {
          t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});
      }

      t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});
      return t;
  }

  var _name = { parse: parseNameTable, make: makeNameTable };

  // The `OS/2` table contains metrics required in OpenType fonts.

  const unicodeRanges = [
      {begin: 0x0000, end: 0x007F}, // Basic Latin
      {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement
      {begin: 0x0100, end: 0x017F}, // Latin Extended-A
      {begin: 0x0180, end: 0x024F}, // Latin Extended-B
      {begin: 0x0250, end: 0x02AF}, // IPA Extensions
      {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters
      {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks
      {begin: 0x0370, end: 0x03FF}, // Greek and Coptic
      {begin: 0x2C80, end: 0x2CFF}, // Coptic
      {begin: 0x0400, end: 0x04FF}, // Cyrillic
      {begin: 0x0530, end: 0x058F}, // Armenian
      {begin: 0x0590, end: 0x05FF}, // Hebrew
      {begin: 0xA500, end: 0xA63F}, // Vai
      {begin: 0x0600, end: 0x06FF}, // Arabic
      {begin: 0x07C0, end: 0x07FF}, // NKo
      {begin: 0x0900, end: 0x097F}, // Devanagari
      {begin: 0x0980, end: 0x09FF}, // Bengali
      {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi
      {begin: 0x0A80, end: 0x0AFF}, // Gujarati
      {begin: 0x0B00, end: 0x0B7F}, // Oriya
      {begin: 0x0B80, end: 0x0BFF}, // Tamil
      {begin: 0x0C00, end: 0x0C7F}, // Telugu
      {begin: 0x0C80, end: 0x0CFF}, // Kannada
      {begin: 0x0D00, end: 0x0D7F}, // Malayalam
      {begin: 0x0E00, end: 0x0E7F}, // Thai
      {begin: 0x0E80, end: 0x0EFF}, // Lao
      {begin: 0x10A0, end: 0x10FF}, // Georgian
      {begin: 0x1B00, end: 0x1B7F}, // Balinese
      {begin: 0x1100, end: 0x11FF}, // Hangul Jamo
      {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional
      {begin: 0x1F00, end: 0x1FFF}, // Greek Extended
      {begin: 0x2000, end: 0x206F}, // General Punctuation
      {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts
      {begin: 0x20A0, end: 0x20CF}, // Currency Symbol
      {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols
      {begin: 0x2100, end: 0x214F}, // Letterlike Symbols
      {begin: 0x2150, end: 0x218F}, // Number Forms
      {begin: 0x2190, end: 0x21FF}, // Arrows
      {begin: 0x2200, end: 0x22FF}, // Mathematical Operators
      {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical
      {begin: 0x2400, end: 0x243F}, // Control Pictures
      {begin: 0x2440, end: 0x245F}, // Optical Character Recognition
      {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics
      {begin: 0x2500, end: 0x257F}, // Box Drawing
      {begin: 0x2580, end: 0x259F}, // Block Elements
      {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes
      {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols
      {begin: 0x2700, end: 0x27BF}, // Dingbats
      {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation
      {begin: 0x3040, end: 0x309F}, // Hiragana
      {begin: 0x30A0, end: 0x30FF}, // Katakana
      {begin: 0x3100, end: 0x312F}, // Bopomofo
      {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo
      {begin: 0xA840, end: 0xA87F}, // Phags-pa
      {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months
      {begin: 0x3300, end: 0x33FF}, // CJK Compatibility
      {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables
      {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *
      {begin: 0x10900, end: 0x1091F}, // Phoenicia
      {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs
      {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)
      {begin: 0x31C0, end: 0x31EF}, // CJK Strokes
      {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms
      {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A
      {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks
      {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms
      {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants
      {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B
      {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms
      {begin: 0xFFF0, end: 0xFFFF}, // Specials
      {begin: 0x0F00, end: 0x0FFF}, // Tibetan
      {begin: 0x0700, end: 0x074F}, // Syriac
      {begin: 0x0780, end: 0x07BF}, // Thaana
      {begin: 0x0D80, end: 0x0DFF}, // Sinhala
      {begin: 0x1000, end: 0x109F}, // Myanmar
      {begin: 0x1200, end: 0x137F}, // Ethiopic
      {begin: 0x13A0, end: 0x13FF}, // Cherokee
      {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics
      {begin: 0x1680, end: 0x169F}, // Ogham
      {begin: 0x16A0, end: 0x16FF}, // Runic
      {begin: 0x1780, end: 0x17FF}, // Khmer
      {begin: 0x1800, end: 0x18AF}, // Mongolian
      {begin: 0x2800, end: 0x28FF}, // Braille Patterns
      {begin: 0xA000, end: 0xA48F}, // Yi Syllables
      {begin: 0x1700, end: 0x171F}, // Tagalog
      {begin: 0x10300, end: 0x1032F}, // Old Italic
      {begin: 0x10330, end: 0x1034F}, // Gothic
      {begin: 0x10400, end: 0x1044F}, // Deseret
      {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols
      {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols
      {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)
      {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors
      {begin: 0xE0000, end: 0xE007F}, // Tags
      {begin: 0x1900, end: 0x194F}, // Limbu
      {begin: 0x1950, end: 0x197F}, // Tai Le
      {begin: 0x1980, end: 0x19DF}, // New Tai Lue
      {begin: 0x1A00, end: 0x1A1F}, // Buginese
      {begin: 0x2C00, end: 0x2C5F}, // Glagolitic
      {begin: 0x2D30, end: 0x2D7F}, // Tifinagh
      {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols
      {begin: 0xA800, end: 0xA82F}, // Syloti Nagri
      {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary
      {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers
      {begin: 0x10380, end: 0x1039F}, // Ugaritic
      {begin: 0x103A0, end: 0x103DF}, // Old Persian
      {begin: 0x10450, end: 0x1047F}, // Shavian
      {begin: 0x10480, end: 0x104AF}, // Osmanya
      {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary
      {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi
      {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols
      {begin: 0x12000, end: 0x123FF}, // Cuneiform
      {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals
      {begin: 0x1B80, end: 0x1BBF}, // Sundanese
      {begin: 0x1C00, end: 0x1C4F}, // Lepcha
      {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki
      {begin: 0xA880, end: 0xA8DF}, // Saurashtra
      {begin: 0xA900, end: 0xA92F}, // Kayah Li
      {begin: 0xA930, end: 0xA95F}, // Rejang
      {begin: 0xAA00, end: 0xAA5F}, // Cham
      {begin: 0x10190, end: 0x101CF}, // Ancient Symbols
      {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc
      {begin: 0x102A0, end: 0x102DF}, // Carian
      {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles
  ];

  function getUnicodeRange(unicode) {
      for (let i = 0; i < unicodeRanges.length; i += 1) {
          const range = unicodeRanges[i];
          if (unicode >= range.begin && unicode < range.end) {
              return i;
          }
      }

      return -1;
  }

  // Parse the OS/2 and Windows metrics `OS/2` table
  function parseOS2Table(data, start) {
      const os2 = {};
      const p = new parse$3.Parser(data, start);
      os2.version = p.parseUShort();
      os2.xAvgCharWidth = p.parseShort();
      os2.usWeightClass = p.parseUShort();
      os2.usWidthClass = p.parseUShort();
      os2.fsType = p.parseUShort();
      os2.ySubscriptXSize = p.parseShort();
      os2.ySubscriptYSize = p.parseShort();
      os2.ySubscriptXOffset = p.parseShort();
      os2.ySubscriptYOffset = p.parseShort();
      os2.ySuperscriptXSize = p.parseShort();
      os2.ySuperscriptYSize = p.parseShort();
      os2.ySuperscriptXOffset = p.parseShort();
      os2.ySuperscriptYOffset = p.parseShort();
      os2.yStrikeoutSize = p.parseShort();
      os2.yStrikeoutPosition = p.parseShort();
      os2.sFamilyClass = p.parseShort();
      os2.panose = [];
      for (let i = 0; i < 10; i++) {
          os2.panose[i] = p.parseByte();
      }

      os2.ulUnicodeRange1 = p.parseULong();
      os2.ulUnicodeRange2 = p.parseULong();
      os2.ulUnicodeRange3 = p.parseULong();
      os2.ulUnicodeRange4 = p.parseULong();
      os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
      os2.fsSelection = p.parseUShort();
      os2.usFirstCharIndex = p.parseUShort();
      os2.usLastCharIndex = p.parseUShort();
      os2.sTypoAscender = p.parseShort();
      os2.sTypoDescender = p.parseShort();
      os2.sTypoLineGap = p.parseShort();
      os2.usWinAscent = p.parseUShort();
      os2.usWinDescent = p.parseUShort();
      if (os2.version >= 1) {
          os2.ulCodePageRange1 = p.parseULong();
          os2.ulCodePageRange2 = p.parseULong();
      }

      if (os2.version >= 2) {
          os2.sxHeight = p.parseShort();
          os2.sCapHeight = p.parseShort();
          os2.usDefaultChar = p.parseUShort();
          os2.usBreakChar = p.parseUShort();
          os2.usMaxContent = p.parseUShort();
      }

      return os2;
  }

  function makeOS2Table(options) {
      return new table.Table('OS/2', [
          {name: 'version', type: 'USHORT', value: 0x0003},
          {name: 'xAvgCharWidth', type: 'SHORT', value: 0},
          {name: 'usWeightClass', type: 'USHORT', value: 0},
          {name: 'usWidthClass', type: 'USHORT', value: 0},
          {name: 'fsType', type: 'USHORT', value: 0},
          {name: 'ySubscriptXSize', type: 'SHORT', value: 650},
          {name: 'ySubscriptYSize', type: 'SHORT', value: 699},
          {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},
          {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},
          {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},
          {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},
          {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},
          {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},
          {name: 'yStrikeoutSize', type: 'SHORT', value: 49},
          {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},
          {name: 'sFamilyClass', type: 'SHORT', value: 0},
          {name: 'bFamilyType', type: 'BYTE', value: 0},
          {name: 'bSerifStyle', type: 'BYTE', value: 0},
          {name: 'bWeight', type: 'BYTE', value: 0},
          {name: 'bProportion', type: 'BYTE', value: 0},
          {name: 'bContrast', type: 'BYTE', value: 0},
          {name: 'bStrokeVariation', type: 'BYTE', value: 0},
          {name: 'bArmStyle', type: 'BYTE', value: 0},
          {name: 'bLetterform', type: 'BYTE', value: 0},
          {name: 'bMidline', type: 'BYTE', value: 0},
          {name: 'bXHeight', type: 'BYTE', value: 0},
          {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},
          {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},
          {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},
          {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},
          {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},
          {name: 'fsSelection', type: 'USHORT', value: 0},
          {name: 'usFirstCharIndex', type: 'USHORT', value: 0},
          {name: 'usLastCharIndex', type: 'USHORT', value: 0},
          {name: 'sTypoAscender', type: 'SHORT', value: 0},
          {name: 'sTypoDescender', type: 'SHORT', value: 0},
          {name: 'sTypoLineGap', type: 'SHORT', value: 0},
          {name: 'usWinAscent', type: 'USHORT', value: 0},
          {name: 'usWinDescent', type: 'USHORT', value: 0},
          {name: 'ulCodePageRange1', type: 'ULONG', value: 0},
          {name: 'ulCodePageRange2', type: 'ULONG', value: 0},
          {name: 'sxHeight', type: 'SHORT', value: 0},
          {name: 'sCapHeight', type: 'SHORT', value: 0},
          {name: 'usDefaultChar', type: 'USHORT', value: 0},
          {name: 'usBreakChar', type: 'USHORT', value: 0},
          {name: 'usMaxContext', type: 'USHORT', value: 0}
      ], options);
  }

  var os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges, getUnicodeRange };

  // The `post` table stores additional PostScript information, such as glyph names.

  // Parse the PostScript `post` table
  function parsePostTable(data, start) {
      const post = {};
      const p = new parse$3.Parser(data, start);
      post.version = p.parseVersion();
      post.italicAngle = p.parseFixed();
      post.underlinePosition = p.parseShort();
      post.underlineThickness = p.parseShort();
      post.isFixedPitch = p.parseULong();
      post.minMemType42 = p.parseULong();
      post.maxMemType42 = p.parseULong();
      post.minMemType1 = p.parseULong();
      post.maxMemType1 = p.parseULong();
      switch (post.version) {
          case 1:
              post.names = standardNames.slice();
              break;
          case 2:
              post.numberOfGlyphs = p.parseUShort();
              post.glyphNameIndex = new Array(post.numberOfGlyphs);
              for (let i = 0; i < post.numberOfGlyphs; i++) {
                  post.glyphNameIndex[i] = p.parseUShort();
              }

              post.names = [];
              for (let i = 0; i < post.numberOfGlyphs; i++) {
                  if (post.glyphNameIndex[i] >= standardNames.length) {
                      const nameLength = p.parseChar();
                      post.names.push(p.parseString(nameLength));
                  }
              }

              break;
          case 2.5:
              post.numberOfGlyphs = p.parseUShort();
              post.offset = new Array(post.numberOfGlyphs);
              for (let i = 0; i < post.numberOfGlyphs; i++) {
                  post.offset[i] = p.parseChar();
              }

              break;
      }
      return post;
  }

  function makePostTable() {
      return new table.Table('post', [
          {name: 'version', type: 'FIXED', value: 0x00030000},
          {name: 'italicAngle', type: 'FIXED', value: 0},
          {name: 'underlinePosition', type: 'FWORD', value: 0},
          {name: 'underlineThickness', type: 'FWORD', value: 0},
          {name: 'isFixedPitch', type: 'ULONG', value: 0},
          {name: 'minMemType42', type: 'ULONG', value: 0},
          {name: 'maxMemType42', type: 'ULONG', value: 0},
          {name: 'minMemType1', type: 'ULONG', value: 0},
          {name: 'maxMemType1', type: 'ULONG', value: 0}
      ]);
  }

  var post = { parse: parsePostTable, make: makePostTable };

  // The `GSUB` table contains ligatures, among other things.

  const subtableParsers = new Array(9);         // subtableParsers[0] is unused

  // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS
  subtableParsers[1] = function parseLookup1() {
      const start = this.offset + this.relativeOffset;
      const substFormat = this.parseUShort();
      if (substFormat === 1) {
          return {
              substFormat: 1,
              coverage: this.parsePointer(Parser.coverage),
              deltaGlyphId: this.parseUShort()
          };
      } else if (substFormat === 2) {
          return {
              substFormat: 2,
              coverage: this.parsePointer(Parser.coverage),
              substitute: this.parseOffset16List()
          };
      }
      check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');
  };

  // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS
  subtableParsers[2] = function parseLookup2() {
      const substFormat = this.parseUShort();
      check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');
      return {
          substFormat: substFormat,
          coverage: this.parsePointer(Parser.coverage),
          sequences: this.parseListOfLists()
      };
  };

  // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS
  subtableParsers[3] = function parseLookup3() {
      const substFormat = this.parseUShort();
      check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');
      return {
          substFormat: substFormat,
          coverage: this.parsePointer(Parser.coverage),
          alternateSets: this.parseListOfLists()
      };
  };

  // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS
  subtableParsers[4] = function parseLookup4() {
      const substFormat = this.parseUShort();
      check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');
      return {
          substFormat: substFormat,
          coverage: this.parsePointer(Parser.coverage),
          ligatureSets: this.parseListOfLists(function() {
              return {
                  ligGlyph: this.parseUShort(),
                  components: this.parseUShortList(this.parseUShort() - 1)
              };
          })
      };
  };

  const lookupRecordDesc = {
      sequenceIndex: Parser.uShort,
      lookupListIndex: Parser.uShort
  };

  // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF
  subtableParsers[5] = function parseLookup5() {
      const start = this.offset + this.relativeOffset;
      const substFormat = this.parseUShort();

      if (substFormat === 1) {
          return {
              substFormat: substFormat,
              coverage: this.parsePointer(Parser.coverage),
              ruleSets: this.parseListOfLists(function() {
                  const glyphCount = this.parseUShort();
                  const substCount = this.parseUShort();
                  return {
                      input: this.parseUShortList(glyphCount - 1),
                      lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                  };
              })
          };
      } else if (substFormat === 2) {
          return {
              substFormat: substFormat,
              coverage: this.parsePointer(Parser.coverage),
              classDef: this.parsePointer(Parser.classDef),
              classSets: this.parseListOfLists(function() {
                  const glyphCount = this.parseUShort();
                  const substCount = this.parseUShort();
                  return {
                      classes: this.parseUShortList(glyphCount - 1),
                      lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                  };
              })
          };
      } else if (substFormat === 3) {
          const glyphCount = this.parseUShort();
          const substCount = this.parseUShort();
          return {
              substFormat: substFormat,
              coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
              lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
          };
      }
      check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');
  };

  // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC
  subtableParsers[6] = function parseLookup6() {
      const start = this.offset + this.relativeOffset;
      const substFormat = this.parseUShort();
      if (substFormat === 1) {
          return {
              substFormat: 1,
              coverage: this.parsePointer(Parser.coverage),
              chainRuleSets: this.parseListOfLists(function() {
                  return {
                      backtrack: this.parseUShortList(),
                      input: this.parseUShortList(this.parseShort() - 1),
                      lookahead: this.parseUShortList(),
                      lookupRecords: this.parseRecordList(lookupRecordDesc)
                  };
              })
          };
      } else if (substFormat === 2) {
          return {
              substFormat: 2,
              coverage: this.parsePointer(Parser.coverage),
              backtrackClassDef: this.parsePointer(Parser.classDef),
              inputClassDef: this.parsePointer(Parser.classDef),
              lookaheadClassDef: this.parsePointer(Parser.classDef),
              chainClassSet: this.parseListOfLists(function() {
                  return {
                      backtrack: this.parseUShortList(),
                      input: this.parseUShortList(this.parseShort() - 1),
                      lookahead: this.parseUShortList(),
                      lookupRecords: this.parseRecordList(lookupRecordDesc)
                  };
              })
          };
      } else if (substFormat === 3) {
          return {
              substFormat: 3,
              backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
              inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
              lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
              lookupRecords: this.parseRecordList(lookupRecordDesc)
          };
      }
      check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');
  };

  // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES
  subtableParsers[7] = function parseLookup7() {
      // Extension Substitution subtable
      const substFormat = this.parseUShort();
      check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');
      const extensionLookupType = this.parseUShort();
      const extensionParser = new Parser(this.data, this.offset + this.parseULong());
      return {
          substFormat: 1,
          lookupType: extensionLookupType,
          extension: subtableParsers[extensionLookupType].call(extensionParser)
      };
  };

  // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS
  subtableParsers[8] = function parseLookup8() {
      const substFormat = this.parseUShort();
      check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');
      return {
          substFormat: substFormat,
          coverage: this.parsePointer(Parser.coverage),
          backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
          lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
          substitutes: this.parseUShortList()
      };
  };

  // https://www.microsoft.com/typography/OTSPEC/gsub.htm
  function parseGsubTable(data, start) {
      start = start || 0;
      const p = new Parser(data, start);
      const tableVersion = p.parseVersion(1);
      check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');
      if (tableVersion === 1) {
          return {
              version: tableVersion,
              scripts: p.parseScriptList(),
              features: p.parseFeatureList(),
              lookups: p.parseLookupList(subtableParsers)
          };
      } else {
          return {
              version: tableVersion,
              scripts: p.parseScriptList(),
              features: p.parseFeatureList(),
              lookups: p.parseLookupList(subtableParsers),
              variations: p.parseFeatureVariationsList()
          };
      }

  }

  // GSUB Writing //////////////////////////////////////////////
  const subtableMakers = new Array(9);

  subtableMakers[1] = function makeLookup1(subtable) {
      if (subtable.substFormat === 1) {
          return new table.Table('substitutionTable', [
              {name: 'substFormat', type: 'USHORT', value: 1},
              {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},
              {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}
          ]);
      } else {
          return new table.Table('substitutionTable', [
              {name: 'substFormat', type: 'USHORT', value: 2},
              {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
          ].concat(table.ushortList('substitute', subtable.substitute)));
      }
      check.fail('Lookup type 1 substFormat must be 1 or 2.');
  };

  subtableMakers[3] = function makeLookup3(subtable) {
      check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');
      return new table.Table('substitutionTable', [
          {name: 'substFormat', type: 'USHORT', value: 1},
          {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
      ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {
          return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));
      })));
  };

  subtableMakers[4] = function makeLookup4(subtable) {
      check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');
      return new table.Table('substitutionTable', [
          {name: 'substFormat', type: 'USHORT', value: 1},
          {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
      ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {
          return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {
              return new table.Table('ligatureTable',
                  [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]
                  .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))
              );
          }));
      })));
  };

  function makeGsubTable(gsub) {
      return new table.Table('GSUB', [
          {name: 'version', type: 'ULONG', value: 0x10000},
          {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},
          {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},
          {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}
      ]);
  }

  var gsub = { parse: parseGsubTable, make: makeGsubTable };

  // The `GPOS` table contains kerning pairs, among other things.

  // Parse the metadata `meta` table.
  // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html
  function parseMetaTable(data, start) {
      const p = new parse$3.Parser(data, start);
      const tableVersion = p.parseULong();
      check.argument(tableVersion === 1, 'Unsupported META table version.');
      p.parseULong(); // flags - currently unused and set to 0
      p.parseULong(); // tableOffset
      const numDataMaps = p.parseULong();

      const tags = {};
      for (let i = 0; i < numDataMaps; i++) {
          const tag = p.parseTag();
          const dataOffset = p.parseULong();
          const dataLength = p.parseULong();
          const text = decode.UTF8(data, start + dataOffset, dataLength);

          tags[tag] = text;
      }
      return tags;
  }

  function makeMetaTable(tags) {
      const numTags = Object.keys(tags).length;
      let stringPool = '';
      const stringPoolOffset = 16 + numTags * 12;

      const result = new table.Table('meta', [
          {name: 'version', type: 'ULONG', value: 1},
          {name: 'flags', type: 'ULONG', value: 0},
          {name: 'offset', type: 'ULONG', value: stringPoolOffset},
          {name: 'numTags', type: 'ULONG', value: numTags}
      ]);

      for (let tag in tags) {
          const pos = stringPool.length;
          stringPool += tags[tag];

          result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});
          result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});
          result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});
      }

      result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});

      return result;
  }

  var meta = { parse: parseMetaTable, make: makeMetaTable };

  // The `sfnt` wrapper provides organization for the tables in the font.

  function log2(v) {
      return Math.log(v) / Math.log(2) | 0;
  }

  function computeCheckSum(bytes) {
      while (bytes.length % 4 !== 0) {
          bytes.push(0);
      }

      let sum = 0;
      for (let i = 0; i < bytes.length; i += 4) {
          sum += (bytes[i] << 24) +
              (bytes[i + 1] << 16) +
              (bytes[i + 2] << 8) +
              (bytes[i + 3]);
      }

      sum %= Math.pow(2, 32);
      return sum;
  }

  function makeTableRecord(tag, checkSum, offset, length) {
      return new table.Record('Table Record', [
          {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},
          {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},
          {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},
          {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}
      ]);
  }

  function makeSfntTable(tables) {
      const sfnt = new table.Table('sfnt', [
          {name: 'version', type: 'TAG', value: 'OTTO'},
          {name: 'numTables', type: 'USHORT', value: 0},
          {name: 'searchRange', type: 'USHORT', value: 0},
          {name: 'entrySelector', type: 'USHORT', value: 0},
          {name: 'rangeShift', type: 'USHORT', value: 0}
      ]);
      sfnt.tables = tables;
      sfnt.numTables = tables.length;
      const highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));
      sfnt.searchRange = 16 * highestPowerOf2;
      sfnt.entrySelector = log2(highestPowerOf2);
      sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;

      const recordFields = [];
      const tableFields = [];

      let offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);
      while (offset % 4 !== 0) {
          offset += 1;
          tableFields.push({name: 'padding', type: 'BYTE', value: 0});
      }

      for (let i = 0; i < tables.length; i += 1) {
          const t = tables[i];
          check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
          const tableLength = t.sizeOf();
          const tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
          recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});
          tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});
          offset += tableLength;
          check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');
          while (offset % 4 !== 0) {
              offset += 1;
              tableFields.push({name: 'padding', type: 'BYTE', value: 0});
          }
      }

      // Table records need to be sorted alphabetically.
      recordFields.sort(function(r1, r2) {
          if (r1.value.tag > r2.value.tag) {
              return 1;
          } else {
              return -1;
          }
      });

      sfnt.fields = sfnt.fields.concat(recordFields);
      sfnt.fields = sfnt.fields.concat(tableFields);
      return sfnt;
  }

  // Get the metrics for a character. If the string has more than one character
  // this function returns metrics for the first available character.
  // You can provide optional fallback metrics if no characters are available.
  function metricsForChar(font, chars, notFoundMetrics) {
      for (let i = 0; i < chars.length; i += 1) {
          const glyphIndex = font.charToGlyphIndex(chars[i]);
          if (glyphIndex > 0) {
              const glyph = font.glyphs.get(glyphIndex);
              return glyph.getMetrics();
          }
      }

      return notFoundMetrics;
  }

  function average(vs) {
      let sum = 0;
      for (let i = 0; i < vs.length; i += 1) {
          sum += vs[i];
      }

      return sum / vs.length;
  }

  // Convert the font object to a SFNT data structure.
  // This structure contains all the necessary tables and metadata to create a binary OTF file.
  function fontToSfntTable(font) {
      const xMins = [];
      const yMins = [];
      const xMaxs = [];
      const yMaxs = [];
      const advanceWidths = [];
      const leftSideBearings = [];
      const rightSideBearings = [];
      let firstCharIndex;
      let lastCharIndex = 0;
      let ulUnicodeRange1 = 0;
      let ulUnicodeRange2 = 0;
      let ulUnicodeRange3 = 0;
      let ulUnicodeRange4 = 0;

      for (let i = 0; i < font.glyphs.length; i += 1) {
          const glyph = font.glyphs.get(i);
          const unicode = glyph.unicode | 0;

          if (isNaN(glyph.advanceWidth)) {
              throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');
          }

          if (firstCharIndex > unicode || firstCharIndex === undefined) {
              // ignore .notdef char
              if (unicode > 0) {
                  firstCharIndex = unicode;
              }
          }

          if (lastCharIndex < unicode) {
              lastCharIndex = unicode;
          }

          const position = os2.getUnicodeRange(unicode);
          if (position < 32) {
              ulUnicodeRange1 |= 1 << position;
          } else if (position < 64) {
              ulUnicodeRange2 |= 1 << position - 32;
          } else if (position < 96) {
              ulUnicodeRange3 |= 1 << position - 64;
          } else if (position < 123) {
              ulUnicodeRange4 |= 1 << position - 96;
          } else {
              throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
          }
          // Skip non-important characters.
          if (glyph.name === '.notdef') continue;
          const metrics = glyph.getMetrics();
          xMins.push(metrics.xMin);
          yMins.push(metrics.yMin);
          xMaxs.push(metrics.xMax);
          yMaxs.push(metrics.yMax);
          leftSideBearings.push(metrics.leftSideBearing);
          rightSideBearings.push(metrics.rightSideBearing);
          advanceWidths.push(glyph.advanceWidth);
      }

      const globals = {
          xMin: Math.min.apply(null, xMins),
          yMin: Math.min.apply(null, yMins),
          xMax: Math.max.apply(null, xMaxs),
          yMax: Math.max.apply(null, yMaxs),
          advanceWidthMax: Math.max.apply(null, advanceWidths),
          advanceWidthAvg: average(advanceWidths),
          minLeftSideBearing: Math.min.apply(null, leftSideBearings),
          maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
          minRightSideBearing: Math.min.apply(null, rightSideBearings)
      };
      globals.ascender = font.ascender;
      globals.descender = font.descender;

      const headTable = head.make({
          flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
          unitsPerEm: font.unitsPerEm,
          xMin: globals.xMin,
          yMin: globals.yMin,
          xMax: globals.xMax,
          yMax: globals.yMax,
          lowestRecPPEM: 3,
          createdTimestamp: font.createdTimestamp
      });

      const hheaTable = hhea.make({
          ascender: globals.ascender,
          descender: globals.descender,
          advanceWidthMax: globals.advanceWidthMax,
          minLeftSideBearing: globals.minLeftSideBearing,
          minRightSideBearing: globals.minRightSideBearing,
          xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
          numberOfHMetrics: font.glyphs.length
      });

      const maxpTable = maxp.make(font.glyphs.length);

      const os2Table = os2.make({
          xAvgCharWidth: Math.round(globals.advanceWidthAvg),
          usWeightClass: font.tables.os2.usWeightClass,
          usWidthClass: font.tables.os2.usWidthClass,
          usFirstCharIndex: firstCharIndex,
          usLastCharIndex: lastCharIndex,
          ulUnicodeRange1: ulUnicodeRange1,
          ulUnicodeRange2: ulUnicodeRange2,
          ulUnicodeRange3: ulUnicodeRange3,
          ulUnicodeRange4: ulUnicodeRange4,
          fsSelection: font.tables.os2.fsSelection, // REGULAR
          // See http://typophile.com/node/13081 for more info on vertical metrics.
          // We get metrics for typical characters (such as "x" for xHeight).
          // We provide some fallback characters if characters are unavailable: their
          // ordering was chosen experimentally.
          sTypoAscender: globals.ascender,
          sTypoDescender: globals.descender,
          sTypoLineGap: 0,
          usWinAscent: globals.yMax,
          usWinDescent: Math.abs(globals.yMin),
          ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now
          sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,
          sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
          usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.
          usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.
      });

      const hmtxTable = hmtx.make(font.glyphs);
      const cmapTable = cmap.make(font.glyphs);

      const englishFamilyName = font.getEnglishName('fontFamily');
      const englishStyleName = font.getEnglishName('fontSubfamily');
      const englishFullName = englishFamilyName + ' ' + englishStyleName;
      let postScriptName = font.getEnglishName('postScriptName');
      if (!postScriptName) {
          postScriptName = englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
      }

      const names = {};
      for (let n in font.names) {
          names[n] = font.names[n];
      }

      if (!names.uniqueID) {
          names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};
      }

      if (!names.postScriptName) {
          names.postScriptName = {en: postScriptName};
      }

      if (!names.preferredFamily) {
          names.preferredFamily = font.names.fontFamily;
      }

      if (!names.preferredSubfamily) {
          names.preferredSubfamily = font.names.fontSubfamily;
      }

      const languageTags = [];
      const nameTable = _name.make(names, languageTags);
      const ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);

      const postTable = post.make();
      const cffTable = cff.make(font.glyphs, {
          version: font.getEnglishName('version'),
          fullName: englishFullName,
          familyName: englishFamilyName,
          weightName: englishStyleName,
          postScriptName: postScriptName,
          unitsPerEm: font.unitsPerEm,
          fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]
      });

      const metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;

      // The order does not matter because makeSfntTable() will sort them.
      const tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];
      if (ltagTable) {
          tables.push(ltagTable);
      }
      // Optional tables
      if (font.tables.gsub) {
          tables.push(gsub.make(font.tables.gsub));
      }
      if (metaTable) {
          tables.push(metaTable);
      }

      const sfntTable = makeSfntTable(tables);

      // Compute the font's checkSum and store it in head.checkSumAdjustment.
      const bytes = sfntTable.encode();
      const checkSum = computeCheckSum(bytes);
      const tableFields = sfntTable.fields;
      let checkSumAdjusted = false;
      for (let i = 0; i < tableFields.length; i += 1) {
          if (tableFields[i].name === 'head table') {
              tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
              checkSumAdjusted = true;
              break;
          }
      }

      if (!checkSumAdjusted) {
          throw new Error('Could not find head table with checkSum to adjust.');
      }

      return sfntTable;
  }

  var sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum };

  // The Layout object is the prototype of Substitution objects, and provides

  function searchTag(arr, tag) {
      /* jshint bitwise: false */
      let imin = 0;
      let imax = arr.length - 1;
      while (imin <= imax) {
          const imid = (imin + imax) >>> 1;
          const val = arr[imid].tag;
          if (val === tag) {
              return imid;
          } else if (val < tag) {
              imin = imid + 1;
          } else { imax = imid - 1; }
      }
      // Not found: return -1-insertion point
      return -imin - 1;
  }

  function binSearch(arr, value) {
      /* jshint bitwise: false */
      let imin = 0;
      let imax = arr.length - 1;
      while (imin <= imax) {
          const imid = (imin + imax) >>> 1;
          const val = arr[imid];
          if (val === value) {
              return imid;
          } else if (val < value) {
              imin = imid + 1;
          } else { imax = imid - 1; }
      }
      // Not found: return -1-insertion point
      return -imin - 1;
  }

  // binary search in a list of ranges (coverage, class definition)
  function searchRange(ranges, value) {
      // jshint bitwise: false
      let range;
      let imin = 0;
      let imax = ranges.length - 1;
      while (imin <= imax) {
          const imid = (imin + imax) >>> 1;
          range = ranges[imid];
          const start = range.start;
          if (start === value) {
              return range;
          } else if (start < value) {
              imin = imid + 1;
          } else { imax = imid - 1; }
      }
      if (imin > 0) {
          range = ranges[imin - 1];
          if (value > range.end) return 0;
          return range;
      }
  }

  /**
   * @exports opentype.Layout
   * @class
   */
  function Layout(font, tableName) {
      this.font = font;
      this.tableName = tableName;
  }

  Layout.prototype = {

      /**
       * Binary search an object by "tag" property
       * @instance
       * @function searchTag
       * @memberof opentype.Layout
       * @param  {Array} arr
       * @param  {string} tag
       * @return {number}
       */
      searchTag: searchTag,

      /**
       * Binary search in a list of numbers
       * @instance
       * @function binSearch
       * @memberof opentype.Layout
       * @param  {Array} arr
       * @param  {number} value
       * @return {number}
       */
      binSearch: binSearch,

      /**
       * Get or create the Layout table (GSUB, GPOS etc).
       * @param  {boolean} create - Whether to create a new one.
       * @return {Object} The GSUB or GPOS table.
       */
      getTable: function(create) {
          let layout = this.font.tables[this.tableName];
          if (!layout && create) {
              layout = this.font.tables[this.tableName] = this.createDefaultTable();
          }
          return layout;
      },

      /**
       * Returns all scripts in the substitution table.
       * @instance
       * @return {Array}
       */
      getScriptNames: function() {
          let layout = this.getTable();
          if (!layout) { return []; }
          return layout.scripts.map(function(script) {
              return script.tag;
          });
      },

      /**
       * Returns the best bet for a script name.
       * Returns 'DFLT' if it exists.
       * If not, returns 'latn' if it exists.
       * If neither exist, returns undefined.
       */
      getDefaultScriptName: function() {
          let layout = this.getTable();
          if (!layout) { return; }
          let hasLatn = false;
          for (let i = 0; i < layout.scripts.length; i++) {
              const name = layout.scripts[i].tag;
              if (name === 'DFLT') return name;
              if (name === 'latn') hasLatn = true;
          }
          if (hasLatn) return 'latn';
      },

      /**
       * Returns all LangSysRecords in the given script.
       * @instance
       * @param {string} [script='DFLT']
       * @param {boolean} create - forces the creation of this script table if it doesn't exist.
       * @return {Object} An object with tag and script properties.
       */
      getScriptTable: function(script, create) {
          const layout = this.getTable(create);
          if (layout) {
              script = script || 'DFLT';
              const scripts = layout.scripts;
              const pos = searchTag(layout.scripts, script);
              if (pos >= 0) {
                  return scripts[pos].script;
              } else if (create) {
                  const scr = {
                      tag: script,
                      script: {
                          defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},
                          langSysRecords: []
                      }
                  };
                  scripts.splice(-1 - pos, 0, scr);
                  return scr.script;
              }
          }
      },

      /**
       * Returns a language system table
       * @instance
       * @param {string} [script='DFLT']
       * @param {string} [language='dlft']
       * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
       * @return {Object}
       */
      getLangSysTable: function(script, language, create) {
          const scriptTable = this.getScriptTable(script, create);
          if (scriptTable) {
              if (!language || language === 'dflt' || language === 'DFLT') {
                  return scriptTable.defaultLangSys;
              }
              const pos = searchTag(scriptTable.langSysRecords, language);
              if (pos >= 0) {
                  return scriptTable.langSysRecords[pos].langSys;
              } else if (create) {
                  const langSysRecord = {
                      tag: language,
                      langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}
                  };
                  scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
                  return langSysRecord.langSys;
              }
          }
      },

      /**
       * Get a specific feature table.
       * @instance
       * @param {string} [script='DFLT']
       * @param {string} [language='dlft']
       * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
       * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
       * @return {Object}
       */
      getFeatureTable: function(script, language, feature, create) {
          const langSysTable = this.getLangSysTable(script, language, create);
          if (langSysTable) {
              let featureRecord;
              const featIndexes = langSysTable.featureIndexes;
              const allFeatures = this.font.tables[this.tableName].features;
              // The FeatureIndex array of indices is in arbitrary order,
              // even if allFeatures is sorted alphabetically by feature tag.
              for (let i = 0; i < featIndexes.length; i++) {
                  featureRecord = allFeatures[featIndexes[i]];
                  if (featureRecord.tag === feature) {
                      return featureRecord.feature;
                  }
              }
              if (create) {
                  const index = allFeatures.length;
                  // Automatic ordering of features would require to shift feature indexes in the script list.
                  check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');
                  featureRecord = {
                      tag: feature,
                      feature: { params: 0, lookupListIndexes: [] }
                  };
                  allFeatures.push(featureRecord);
                  featIndexes.push(index);
                  return featureRecord.feature;
              }
          }
      },

      /**
       * Get the lookup tables of a given type for a script/language/feature.
       * @instance
       * @param {string} [script='DFLT']
       * @param {string} [language='dlft']
       * @param {string} feature - 4-letter feature code
       * @param {number} lookupType - 1 to 9
       * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
       * @return {Object[]}
       */
      getLookupTables: function(script, language, feature, lookupType, create) {
          const featureTable = this.getFeatureTable(script, language, feature, create);
          const tables = [];
          if (featureTable) {
              let lookupTable;
              const lookupListIndexes = featureTable.lookupListIndexes;
              const allLookups = this.font.tables[this.tableName].lookups;
              // lookupListIndexes are in no particular order, so use naive search.
              for (let i = 0; i < lookupListIndexes.length; i++) {
                  lookupTable = allLookups[lookupListIndexes[i]];
                  if (lookupTable.lookupType === lookupType) {
                      tables.push(lookupTable);
                  }
              }
              if (tables.length === 0 && create) {
                  lookupTable = {
                      lookupType: lookupType,
                      lookupFlag: 0,
                      subtables: [],
                      markFilteringSet: undefined
                  };
                  const index = allLookups.length;
                  allLookups.push(lookupTable);
                  lookupListIndexes.push(index);
                  return [lookupTable];
              }
          }
          return tables;
      },

      /**
       * Find a glyph in a class definition table
       * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table
       * @param {object} classDefTable - an OpenType Layout class definition table
       * @param {number} glyphIndex - the index of the glyph to find
       * @returns {number} -1 if not found
       */
      getGlyphClass: function(classDefTable, glyphIndex) {
          switch (classDefTable.format) {
              case 1:
                  if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {
                      return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
                  }
                  return 0;
              case 2:
                  const range = searchRange(classDefTable.ranges, glyphIndex);
                  return range ? range.classId : 0;
          }
      },

      /**
       * Find a glyph in a coverage table
       * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table
       * @param {object} coverageTable - an OpenType Layout coverage table
       * @param {number} glyphIndex - the index of the glyph to find
       * @returns {number} -1 if not found
       */
      getCoverageIndex: function(coverageTable, glyphIndex) {
          switch (coverageTable.format) {
              case 1:
                  const index = binSearch(coverageTable.glyphs, glyphIndex);
                  return index >= 0 ? index : -1;
              case 2:
                  const range = searchRange(coverageTable.ranges, glyphIndex);
                  return range ? range.index + glyphIndex - range.start : -1;
          }
      },

      /**
       * Returns the list of glyph indexes of a coverage table.
       * Format 1: the list is stored raw
       * Format 2: compact list as range records.
       * @instance
       * @param  {Object} coverageTable
       * @return {Array}
       */
      expandCoverage: function(coverageTable) {
          if (coverageTable.format === 1) {
              return coverageTable.glyphs;
          } else {
              const glyphs = [];
              const ranges = coverageTable.ranges;
              for (let i = 0; i < ranges.length; i++) {
                  const range = ranges[i];
                  const start = range.start;
                  const end = range.end;
                  for (let j = start; j <= end; j++) {
                      glyphs.push(j);
                  }
              }
              return glyphs;
          }
      }

  };

  // The Position object provides utility methods to manipulate

  /**
   * @exports opentype.Position
   * @class
   * @extends opentype.Layout
   * @param {opentype.Font}
   * @constructor
   */
  function Position(font) {
      Layout.call(this, font, 'gpos');
  }

  Position.prototype = Layout.prototype;

  /**
   * Init some data for faster and easier access later.
   */
  Position.prototype.init = function() {
      const script = this.getDefaultScriptName();
      this.defaultKerningTables = this.getKerningTables(script);
  };

  /**
   * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.
   *
   * @param {integer} leftIndex - left glyph index
   * @param {integer} rightIndex - right glyph index
   * @returns {integer}
   */
  Position.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {
      for (let i = 0; i < kerningLookups.length; i++) {
          const subtables = kerningLookups[i].subtables;
          for (let j = 0; j < subtables.length; j++) {
              const subtable = subtables[j];
              const covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);
              if (covIndex < 0) continue;
              switch (subtable.posFormat) {
                  case 1:
                      // Search Pair Adjustment Positioning Format 1
                      let pairSet = subtable.pairSets[covIndex];
                      for (let k = 0; k < pairSet.length; k++) {
                          let pair = pairSet[k];
                          if (pair.secondGlyph === rightIndex) {
                              return pair.value1 && pair.value1.xAdvance || 0;
                          }
                      }
                      break;      // left glyph found, not right glyph - try next subtable
                  case 2:
                      // Search Pair Adjustment Positioning Format 2
                      const class1 = this.getGlyphClass(subtable.classDef1, leftIndex);
                      const class2 = this.getGlyphClass(subtable.classDef2, rightIndex);
                      const pair = subtable.classRecords[class1][class2];
                      return pair.value1 && pair.value1.xAdvance || 0;
              }
          }
      }
      return 0;
  };

  /**
   * List all kerning lookup tables.
   *
   * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value
   * @param {string} [language='dflt']
   * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)
   */
  Position.prototype.getKerningTables = function(script, language) {
      if (this.font.tables.gpos) {
          return this.getLookupTables(script, language, 'kern', 2);
      }
  };

  // The Substitution object provides utility methods to manipulate

  /**
   * @exports opentype.Substitution
   * @class
   * @extends opentype.Layout
   * @param {opentype.Font}
   * @constructor
   */
  function Substitution(font) {
      Layout.call(this, font, 'gsub');
  }

  // Check if 2 arrays of primitives are equal.
  function arraysEqual(ar1, ar2) {
      const n = ar1.length;
      if (n !== ar2.length) { return false; }
      for (let i = 0; i < n; i++) {
          if (ar1[i] !== ar2[i]) { return false; }
      }
      return true;
  }

  // Find the first subtable of a lookup table in a particular format.
  function getSubstFormat(lookupTable, format, defaultSubtable) {
      const subtables = lookupTable.subtables;
      for (let i = 0; i < subtables.length; i++) {
          const subtable = subtables[i];
          if (subtable.substFormat === format) {
              return subtable;
          }
      }
      if (defaultSubtable) {
          subtables.push(defaultSubtable);
          return defaultSubtable;
      }
      return undefined;
  }

  Substitution.prototype = Layout.prototype;

  /**
   * Create a default GSUB table.
   * @return {Object} gsub - The GSUB table.
   */
  Substitution.prototype.createDefaultTable = function() {
      // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.
      return {
          version: 1,
          scripts: [{
              tag: 'DFLT',
              script: {
                  defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },
                  langSysRecords: []
              }
          }],
          features: [],
          lookups: []
      };
  };

  /**
   * List all single substitutions (lookup type 1) for a given script, language, and feature.
   * @param {string} [script='DFLT']
   * @param {string} [language='dflt']
   * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)
   * @return {Array} substitutions - The list of substitutions.
   */
  Substitution.prototype.getSingle = function(feature, script, language) {
      const substitutions = [];
      const lookupTables = this.getLookupTables(script, language, feature, 1);
      for (let idx = 0; idx < lookupTables.length; idx++) {
          const subtables = lookupTables[idx].subtables;
          for (let i = 0; i < subtables.length; i++) {
              const subtable = subtables[i];
              const glyphs = this.expandCoverage(subtable.coverage);
              let j;
              if (subtable.substFormat === 1) {
                  const delta = subtable.deltaGlyphId;
                  for (j = 0; j < glyphs.length; j++) {
                      const glyph = glyphs[j];
                      substitutions.push({ sub: glyph, by: glyph + delta });
                  }
              } else {
                  const substitute = subtable.substitute;
                  for (j = 0; j < glyphs.length; j++) {
                      substitutions.push({ sub: glyphs[j], by: substitute[j] });
                  }
              }
          }
      }
      return substitutions;
  };

  /**
   * List all alternates (lookup type 3) for a given script, language, and feature.
   * @param {string} [script='DFLT']
   * @param {string} [language='dflt']
   * @param {string} feature - 4-character feature name ('aalt', 'salt'...)
   * @return {Array} alternates - The list of alternates
   */
  Substitution.prototype.getAlternates = function(feature, script, language) {
      const alternates = [];
      const lookupTables = this.getLookupTables(script, language, feature, 3);
      for (let idx = 0; idx < lookupTables.length; idx++) {
          const subtables = lookupTables[idx].subtables;
          for (let i = 0; i < subtables.length; i++) {
              const subtable = subtables[i];
              const glyphs = this.expandCoverage(subtable.coverage);
              const alternateSets = subtable.alternateSets;
              for (let j = 0; j < glyphs.length; j++) {
                  alternates.push({ sub: glyphs[j], by: alternateSets[j] });
              }
          }
      }
      return alternates;
  };

  /**
   * List all ligatures (lookup type 4) for a given script, language, and feature.
   * The result is an array of ligature objects like { sub: [ids], by: id }
   * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
   * @param {string} [script='DFLT']
   * @param {string} [language='dflt']
   * @return {Array} ligatures - The list of ligatures.
   */
  Substitution.prototype.getLigatures = function(feature, script, language) {
      const ligatures = [];
      const lookupTables = this.getLookupTables(script, language, feature, 4);
      for (let idx = 0; idx < lookupTables.length; idx++) {
          const subtables = lookupTables[idx].subtables;
          for (let i = 0; i < subtables.length; i++) {
              const subtable = subtables[i];
              const glyphs = this.expandCoverage(subtable.coverage);
              const ligatureSets = subtable.ligatureSets;
              for (let j = 0; j < glyphs.length; j++) {
                  const startGlyph = glyphs[j];
                  const ligSet = ligatureSets[j];
                  for (let k = 0; k < ligSet.length; k++) {
                      const lig = ligSet[k];
                      ligatures.push({
                          sub: [startGlyph].concat(lig.components),
                          by: lig.ligGlyph
                      });
                  }
              }
          }
      }
      return ligatures;
  };

  /**
   * Add or modify a single substitution (lookup type 1)
   * Format 2, more flexible, is always used.
   * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
   * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.
   * @param {string} [script='DFLT']
   * @param {string} [language='dflt']
   */
  Substitution.prototype.addSingle = function(feature, substitution, script, language) {
      const lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];
      const subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1
          substFormat: 2,
          coverage: {format: 1, glyphs: []},
          substitute: []
      });
      check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
      const coverageGlyph = substitution.sub;
      let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
      if (pos < 0) {
          pos = -1 - pos;
          subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
          subtable.substitute.splice(pos, 0, 0);
      }
      subtable.substitute[pos] = substitution.by;
  };

  /**
   * Add or modify an alternate substitution (lookup type 1)
   * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
   * @param {Object} substitution - { sub: id, by: [ids] }
   * @param {string} [script='DFLT']
   * @param {string} [language='dflt']
   */
  Substitution.prototype.addAlternate = function(feature, substitution, script, language) {
      const lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];
      const subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1
          substFormat: 1,
          coverage: {format: 1, glyphs: []},
          alternateSets: []
      });
      check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
      const coverageGlyph = substitution.sub;
      let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
      if (pos < 0) {
          pos = -1 - pos;
          subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
          subtable.alternateSets.splice(pos, 0, 0);
      }
      subtable.alternateSets[pos] = substitution.by;
  };

  /**
   * Add a ligature (lookup type 4)
   * Ligatures with more components must be stored ahead of those with fewer components in order to be found
   * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
   * @param {Object} ligature - { sub: [ids], by: id }
   * @param {string} [script='DFLT']
   * @param {string} [language='dflt']
   */
  Substitution.prototype.addLigature = function(feature, ligature, script, language) {
      const lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];
      let subtable = lookupTable.subtables[0];
      if (!subtable) {
          subtable = {                // lookup type 4 subtable, format 1, coverage format 1
              substFormat: 1,
              coverage: { format: 1, glyphs: [] },
              ligatureSets: []
          };
          lookupTable.subtables[0] = subtable;
      }
      check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
      const coverageGlyph = ligature.sub[0];
      const ligComponents = ligature.sub.slice(1);
      const ligatureTable = {
          ligGlyph: ligature.by,
          components: ligComponents
      };
      let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
      if (pos >= 0) {
          // ligatureSet already exists
          const ligatureSet = subtable.ligatureSets[pos];
          for (let i = 0; i < ligatureSet.length; i++) {
              // If ligature already exists, return.
              if (arraysEqual(ligatureSet[i].components, ligComponents)) {
                  return;
              }
          }
          // ligature does not exist: add it.
          ligatureSet.push(ligatureTable);
      } else {
          // Create a new ligatureSet and add coverage for the first glyph.
          pos = -1 - pos;
          subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
          subtable.ligatureSets.splice(pos, 0, [ligatureTable]);
      }
  };

  /**
   * List all feature data for a given script and language.
   * @param {string} feature - 4-letter feature name
   * @param {string} [script='DFLT']
   * @param {string} [language='dflt']
   * @return {Array} substitutions - The list of substitutions.
   */
  Substitution.prototype.getFeature = function(feature, script, language) {
      if (/ss\d\d/.test(feature)) {
          // ss01 - ss20
          return this.getSingle(feature, script, language);
      }
      switch (feature) {
          case 'aalt':
          case 'salt':
              return this.getSingle(feature, script, language)
                      .concat(this.getAlternates(feature, script, language));
          case 'dlig':
          case 'liga':
          case 'rlig': return this.getLigatures(feature, script, language);
      }
      return undefined;
  };

  /**
   * Add a substitution to a feature for a given script and language.
   * @param {string} feature - 4-letter feature name
   * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })
   * @param {string} [script='DFLT']
   * @param {string} [language='dflt']
   */
  Substitution.prototype.add = function(feature, sub, script, language) {
      if (/ss\d\d/.test(feature)) {
          // ss01 - ss20
          return this.addSingle(feature, sub, script, language);
      }
      switch (feature) {
          case 'aalt':
          case 'salt':
              if (typeof sub.by === 'number') {
                  return this.addSingle(feature, sub, script, language);
              }
              return this.addAlternate(feature, sub, script, language);
          case 'dlig':
          case 'liga':
          case 'rlig':
              return this.addLigature(feature, sub, script, language);
      }
      return undefined;
  };

  function isBrowser() {
      return typeof window !== 'undefined';
  }

  function nodeBufferToArrayBuffer(buffer) {
      const ab = new ArrayBuffer(buffer.length);
      const view = new Uint8Array(ab);
      for (let i = 0; i < buffer.length; ++i) {
          view[i] = buffer[i];
      }

      return ab;
  }

  function arrayBufferToNodeBuffer(ab) {
      const buffer = new Buffer(ab.byteLength);
      const view = new Uint8Array(ab);
      for (let i = 0; i < buffer.length; ++i) {
          buffer[i] = view[i];
      }

      return buffer;
  }

  function checkArgument(expression, message) {
      if (!expression) {
          throw message;
      }
  }

  // The `glyf` table describes the glyphs in TrueType outline format.

  // Parse the coordinate data for a glyph.
  function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
      let v;
      if ((flag & shortVectorBitMask) > 0) {
          // The coordinate is 1 byte long.
          v = p.parseByte();
          // The `same` bit is re-used for short values to signify the sign of the value.
          if ((flag & sameBitMask) === 0) {
              v = -v;
          }

          v = previousValue + v;
      } else {
          //  The coordinate is 2 bytes long.
          // If the `same` bit is set, the coordinate is the same as the previous coordinate.
          if ((flag & sameBitMask) > 0) {
              v = previousValue;
          } else {
              // Parse the coordinate as a signed 16-bit delta value.
              v = previousValue + p.parseShort();
          }
      }

      return v;
  }

  // Parse a TrueType glyph.
  function parseGlyph(glyph, data, start) {
      const p = new parse$3.Parser(data, start);
      glyph.numberOfContours = p.parseShort();
      glyph._xMin = p.parseShort();
      glyph._yMin = p.parseShort();
      glyph._xMax = p.parseShort();
      glyph._yMax = p.parseShort();
      let flags;
      let flag;

      if (glyph.numberOfContours > 0) {
          // This glyph is not a composite.
          const endPointIndices = glyph.endPointIndices = [];
          for (let i = 0; i < glyph.numberOfContours; i += 1) {
              endPointIndices.push(p.parseUShort());
          }

          glyph.instructionLength = p.parseUShort();
          glyph.instructions = [];
          for (let i = 0; i < glyph.instructionLength; i += 1) {
              glyph.instructions.push(p.parseByte());
          }

          const numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
          flags = [];
          for (let i = 0; i < numberOfCoordinates; i += 1) {
              flag = p.parseByte();
              flags.push(flag);
              // If bit 3 is set, we repeat this flag n times, where n is the next byte.
              if ((flag & 8) > 0) {
                  const repeatCount = p.parseByte();
                  for (let j = 0; j < repeatCount; j += 1) {
                      flags.push(flag);
                      i += 1;
                  }
              }
          }

          check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

          if (endPointIndices.length > 0) {
              const points = [];
              let point;
              // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
              if (numberOfCoordinates > 0) {
                  for (let i = 0; i < numberOfCoordinates; i += 1) {
                      flag = flags[i];
                      point = {};
                      point.onCurve = !!(flag & 1);
                      point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;
                      points.push(point);
                  }

                  let px = 0;
                  for (let i = 0; i < numberOfCoordinates; i += 1) {
                      flag = flags[i];
                      point = points[i];
                      point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                      px = point.x;
                  }

                  let py = 0;
                  for (let i = 0; i < numberOfCoordinates; i += 1) {
                      flag = flags[i];
                      point = points[i];
                      point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                      py = point.y;
                  }
              }

              glyph.points = points;
          } else {
              glyph.points = [];
          }
      } else if (glyph.numberOfContours === 0) {
          glyph.points = [];
      } else {
          glyph.isComposite = true;
          glyph.points = [];
          glyph.components = [];
          let moreComponents = true;
          while (moreComponents) {
              flags = p.parseUShort();
              const component = {
                  glyphIndex: p.parseUShort(),
                  xScale: 1,
                  scale01: 0,
                  scale10: 0,
                  yScale: 1,
                  dx: 0,
                  dy: 0
              };
              if ((flags & 1) > 0) {
                  // The arguments are words
                  if ((flags & 2) > 0) {
                      // values are offset
                      component.dx = p.parseShort();
                      component.dy = p.parseShort();
                  } else {
                      // values are matched points
                      component.matchedPoints = [p.parseUShort(), p.parseUShort()];
                  }

              } else {
                  // The arguments are bytes
                  if ((flags & 2) > 0) {
                      // values are offset
                      component.dx = p.parseChar();
                      component.dy = p.parseChar();
                  } else {
                      // values are matched points
                      component.matchedPoints = [p.parseByte(), p.parseByte()];
                  }
              }

              if ((flags & 8) > 0) {
                  // We have a scale
                  component.xScale = component.yScale = p.parseF2Dot14();
              } else if ((flags & 64) > 0) {
                  // We have an X / Y scale
                  component.xScale = p.parseF2Dot14();
                  component.yScale = p.parseF2Dot14();
              } else if ((flags & 128) > 0) {
                  // We have a 2x2 transformation
                  component.xScale = p.parseF2Dot14();
                  component.scale01 = p.parseF2Dot14();
                  component.scale10 = p.parseF2Dot14();
                  component.yScale = p.parseF2Dot14();
              }

              glyph.components.push(component);
              moreComponents = !!(flags & 32);
          }
          if (flags & 0x100) {
              // We have instructions
              glyph.instructionLength = p.parseUShort();
              glyph.instructions = [];
              for (let i = 0; i < glyph.instructionLength; i += 1) {
                  glyph.instructions.push(p.parseByte());
              }
          }
      }
  }

  // Transform an array of points and return a new array.
  function transformPoints(points, transform) {
      const newPoints = [];
      for (let i = 0; i < points.length; i += 1) {
          const pt = points[i];
          const newPt = {
              x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
              y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
              onCurve: pt.onCurve,
              lastPointOfContour: pt.lastPointOfContour
          };
          newPoints.push(newPt);
      }

      return newPoints;
  }

  function getContours(points) {
      const contours = [];
      let currentContour = [];
      for (let i = 0; i < points.length; i += 1) {
          const pt = points[i];
          currentContour.push(pt);
          if (pt.lastPointOfContour) {
              contours.push(currentContour);
              currentContour = [];
          }
      }

      check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
      return contours;
  }

  // Convert the TrueType glyph outline to a Path.
  function getPath(points) {
      const p = new Path();
      if (!points) {
          return p;
      }

      const contours = getContours(points);

      for (let contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
          const contour = contours[contourIndex];

          let prev = null;
          let curr = contour[contour.length - 1];
          let next = contour[0];

          if (curr.onCurve) {
              p.moveTo(curr.x, curr.y);
          } else {
              if (next.onCurve) {
                  p.moveTo(next.x, next.y);
              } else {
                  // If both first and last points are off-curve, start at their middle.
                  const start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};
                  p.moveTo(start.x, start.y);
              }
          }

          for (let i = 0; i < contour.length; ++i) {
              prev = curr;
              curr = next;
              next = contour[(i + 1) % contour.length];

              if (curr.onCurve) {
                  // This is a straight line.
                  p.lineTo(curr.x, curr.y);
              } else {
                  let prev2 = prev;
                  let next2 = next;

                  if (!prev.onCurve) {
                      prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };
                  }

                  if (!next.onCurve) {
                      next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };
                  }

                  p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
              }
          }

          p.closePath();
      }
      return p;
  }

  function buildPath(glyphs, glyph) {
      if (glyph.isComposite) {
          for (let j = 0; j < glyph.components.length; j += 1) {
              const component = glyph.components[j];
              const componentGlyph = glyphs.get(component.glyphIndex);
              // Force the ttfGlyphLoader to parse the glyph.
              componentGlyph.getPath();
              if (componentGlyph.points) {
                  let transformedPoints;
                  if (component.matchedPoints === undefined) {
                      // component positioned by offset
                      transformedPoints = transformPoints(componentGlyph.points, component);
                  } else {
                      // component positioned by matched points
                      if ((component.matchedPoints[0] > glyph.points.length - 1) ||
                          (component.matchedPoints[1] > componentGlyph.points.length - 1)) {
                          throw Error('Matched points out of range in ' + glyph.name);
                      }
                      const firstPt = glyph.points[component.matchedPoints[0]];
                      let secondPt = componentGlyph.points[component.matchedPoints[1]];
                      const transform = {
                          xScale: component.xScale, scale01: component.scale01,
                          scale10: component.scale10, yScale: component.yScale,
                          dx: 0, dy: 0
                      };
                      secondPt = transformPoints([secondPt], transform)[0];
                      transform.dx = firstPt.x - secondPt.x;
                      transform.dy = firstPt.y - secondPt.y;
                      transformedPoints = transformPoints(componentGlyph.points, transform);
                  }
                  glyph.points = glyph.points.concat(transformedPoints);
              }
          }
      }

      return getPath(glyph.points);
  }

  // Parse all the glyphs according to the offsets from the `loca` table.
  function parseGlyfTable(data, start, loca, font) {
      const glyphs = new glyphset.GlyphSet(font);

      // The last element of the loca table is invalid.
      for (let i = 0; i < loca.length - 1; i += 1) {
          const offset = loca[i];
          const nextOffset = loca[i + 1];
          if (offset !== nextOffset) {
              glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
          } else {
              glyphs.push(i, glyphset.glyphLoader(font, i));
          }
      }

      return glyphs;
  }

  var glyf = { getPath, parse: parseGlyfTable };

  /* A TrueType font hinting interpreter.
  *
  * (c) 2017 Axel Kittenberger
  *
  * This interpreter has been implemented according to this documentation:
  * https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html
  *
  * According to the documentation F24DOT6 values are used for pixels.
  * That means calculation is 1/64 pixel accurate and uses integer operations.
  * However, Javascript has floating point operations by default and only
  * those are available. One could make a case to simulate the 1/64 accuracy
  * exactly by truncating after every division operation
  * (for example with << 0) to get pixel exactly results as other TrueType
  * implementations. It may make sense since some fonts are pixel optimized
  * by hand using DELTAP instructions. The current implementation doesn't
  * and rather uses full floating point precision.
  *
  * xScale, yScale and rotation is currently ignored.
  *
  * A few non-trivial instructions are missing as I didn't encounter yet
  * a font that used them to test a possible implementation.
  *
  * Some fonts seem to use undocumented features regarding the twilight zone.
  * Only some of them are implemented as they were encountered.
  *
  * The exports.DEBUG statements are removed on the minified distribution file.
  */

  let instructionTable;
  let exec;
  let execGlyph;
  let execComponent;

  /*
  * Creates a hinting object.
  *
  * There ought to be exactly one
  * for each truetype font that is used for hinting.
  */
  function Hinting(font) {
      // the font this hinting object is for
      this.font = font;

      this.getCommands = function (hPoints) {
          return glyf.getPath(hPoints).commands;
      };

      // cached states
      this._fpgmState  =
      this._prepState  =
          undefined;

      // errorState
      // 0 ... all okay
      // 1 ... had an error in a glyf,
      //       continue working but stop spamming
      //       the console
      // 2 ... error at prep, stop hinting at this ppem
      // 3 ... error at fpeg, stop hinting for this font at all
      this._errorState = 0;
  }

  /*
  * Not rounding.
  */
  function roundOff(v) {
      return v;
  }

  /*
  * Rounding to grid.
  */
  function roundToGrid(v) {
      //Rounding in TT is supposed to "symmetrical around zero"
      return Math.sign(v) * Math.round(Math.abs(v));
  }

  /*
  * Rounding to double grid.
  */
  function roundToDoubleGrid(v) {
      return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
  }

  /*
  * Rounding to half grid.
  */
  function roundToHalfGrid(v) {
      return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
  }

  /*
  * Rounding to up to grid.
  */
  function roundUpToGrid(v) {
      return Math.sign(v) * Math.ceil(Math.abs(v));
  }

  /*
  * Rounding to down to grid.
  */
  function roundDownToGrid(v) {
      return Math.sign(v) * Math.floor(Math.abs(v));
  }

  /*
  * Super rounding.
  */
  const roundSuper = function (v) {
      const period = this.srPeriod;
      let phase = this.srPhase;
      const threshold = this.srThreshold;
      let sign = 1;

      if (v < 0) {
          v = -v;
          sign = -1;
      }

      v += threshold - phase;

      v = Math.trunc(v / period) * period;

      v += phase;

      // according to http://xgridfit.sourceforge.net/round.html
      if (v < 0) return phase * sign;

      return v * sign;
  };

  /*
  * Unit vector of x-axis.
  */
  const xUnitVector = {
      x: 1,

      y: 0,

      axis: 'x',

      // Gets the projected distance between two points.
      // o1/o2 ... if true, respective original position is used.
      distance: function (p1, p2, o1, o2) {
          return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
      },

      // Moves point p so the moved position has the same relative
      // position to the moved positions of rp1 and rp2 than the
      // original positions had.
      //
      // See APPENDIX on INTERPOLATE at the bottom of this file.
      interpolate: function (p, rp1, rp2, pv) {
          let do1;
          let do2;
          let doa1;
          let doa2;
          let dm1;
          let dm2;
          let dt;

          if (!pv || pv === this) {
              do1 = p.xo - rp1.xo;
              do2 = p.xo - rp2.xo;
              dm1 = rp1.x - rp1.xo;
              dm2 = rp2.x - rp2.xo;
              doa1 = Math.abs(do1);
              doa2 = Math.abs(do2);
              dt = doa1 + doa2;

              if (dt === 0) {
                  p.x = p.xo + (dm1 + dm2) / 2;
                  return;
              }

              p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
              return;
          }

          do1 = pv.distance(p, rp1, true, true);
          do2 = pv.distance(p, rp2, true, true);
          dm1 = pv.distance(rp1, rp1, false, true);
          dm2 = pv.distance(rp2, rp2, false, true);
          doa1 = Math.abs(do1);
          doa2 = Math.abs(do2);
          dt = doa1 + doa2;

          if (dt === 0) {
              xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
              return;
          }

          xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
      },

      // Slope of line normal to this
      normalSlope: Number.NEGATIVE_INFINITY,

      // Sets the point 'p' relative to point 'rp'
      // by the distance 'd'.
      //
      // See APPENDIX on SETRELATIVE at the bottom of this file.
      //
      // p   ... point to set
      // rp  ... reference point
      // d   ... distance on projection vector
      // pv  ... projection vector (undefined = this)
      // org ... if true, uses the original position of rp as reference.
      setRelative: function (p, rp, d, pv, org) {
          if (!pv || pv === this) {
              p.x = (org ? rp.xo : rp.x) + d;
              return;
          }

          const rpx = org ? rp.xo : rp.x;
          const rpy = org ? rp.yo : rp.y;
          const rpdx = rpx + d * pv.x;
          const rpdy = rpy + d * pv.y;

          p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
      },

      // Slope of vector line.
      slope: 0,

      // Touches the point p.
      touch: function (p) {
          p.xTouched = true;
      },

      // Tests if a point p is touched.
      touched: function (p) {
          return p.xTouched;
      },

      // Untouches the point p.
      untouch: function (p) {
          p.xTouched = false;
      }
  };

  /*
  * Unit vector of y-axis.
  */
  const yUnitVector = {
      x: 0,

      y: 1,

      axis: 'y',

      // Gets the projected distance between two points.
      // o1/o2 ... if true, respective original position is used.
      distance: function (p1, p2, o1, o2) {
          return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
      },

      // Moves point p so the moved position has the same relative
      // position to the moved positions of rp1 and rp2 than the
      // original positions had.
      //
      // See APPENDIX on INTERPOLATE at the bottom of this file.
      interpolate: function (p, rp1, rp2, pv) {
          let do1;
          let do2;
          let doa1;
          let doa2;
          let dm1;
          let dm2;
          let dt;

          if (!pv || pv === this) {
              do1 = p.yo - rp1.yo;
              do2 = p.yo - rp2.yo;
              dm1 = rp1.y - rp1.yo;
              dm2 = rp2.y - rp2.yo;
              doa1 = Math.abs(do1);
              doa2 = Math.abs(do2);
              dt = doa1 + doa2;

              if (dt === 0) {
                  p.y = p.yo + (dm1 + dm2) / 2;
                  return;
              }

              p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
              return;
          }

          do1 = pv.distance(p, rp1, true, true);
          do2 = pv.distance(p, rp2, true, true);
          dm1 = pv.distance(rp1, rp1, false, true);
          dm2 = pv.distance(rp2, rp2, false, true);
          doa1 = Math.abs(do1);
          doa2 = Math.abs(do2);
          dt = doa1 + doa2;

          if (dt === 0) {
              yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
              return;
          }

          yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
      },

      // Slope of line normal to this.
      normalSlope: 0,

      // Sets the point 'p' relative to point 'rp'
      // by the distance 'd'
      //
      // See APPENDIX on SETRELATIVE at the bottom of this file.
      //
      // p   ... point to set
      // rp  ... reference point
      // d   ... distance on projection vector
      // pv  ... projection vector (undefined = this)
      // org ... if true, uses the original position of rp as reference.
      setRelative: function (p, rp, d, pv, org) {
          if (!pv || pv === this) {
              p.y = (org ? rp.yo : rp.y) + d;
              return;
          }

          const rpx = org ? rp.xo : rp.x;
          const rpy = org ? rp.yo : rp.y;
          const rpdx = rpx + d * pv.x;
          const rpdy = rpy + d * pv.y;

          p.y = rpdy + pv.normalSlope * (p.x - rpdx);
      },

      // Slope of vector line.
      slope: Number.POSITIVE_INFINITY,

      // Touches the point p.
      touch: function (p) {
          p.yTouched = true;
      },

      // Tests if a point p is touched.
      touched: function (p) {
          return p.yTouched;
      },

      // Untouches the point p.
      untouch: function (p) {
          p.yTouched = false;
      }
  };

  Object.freeze(xUnitVector);
  Object.freeze(yUnitVector);

  /*
  * Creates a unit vector that is not x- or y-axis.
  */
  function UnitVector(x, y) {
      this.x = x;
      this.y = y;
      this.axis = undefined;
      this.slope = y / x;
      this.normalSlope = -x / y;
      Object.freeze(this);
  }

  /*
  * Gets the projected distance between two points.
  * o1/o2 ... if true, respective original position is used.
  */
  UnitVector.prototype.distance = function(p1, p2, o1, o2) {
      return (
          this.x * xUnitVector.distance(p1, p2, o1, o2) +
          this.y * yUnitVector.distance(p1, p2, o1, o2)
      );
  };

  /*
  * Moves point p so the moved position has the same relative
  * position to the moved positions of rp1 and rp2 than the
  * original positions had.
  *
  * See APPENDIX on INTERPOLATE at the bottom of this file.
  */
  UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {
      let dm1;
      let dm2;
      let do1;
      let do2;
      let doa1;
      let doa2;
      let dt;

      do1 = pv.distance(p, rp1, true, true);
      do2 = pv.distance(p, rp2, true, true);
      dm1 = pv.distance(rp1, rp1, false, true);
      dm2 = pv.distance(rp2, rp2, false, true);
      doa1 = Math.abs(do1);
      doa2 = Math.abs(do2);
      dt = doa1 + doa2;

      if (dt === 0) {
          this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
          return;
      }

      this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
  };

  /*
  * Sets the point 'p' relative to point 'rp'
  * by the distance 'd'
  *
  * See APPENDIX on SETRELATIVE at the bottom of this file.
  *
  * p   ...  point to set
  * rp  ... reference point
  * d   ... distance on projection vector
  * pv  ... projection vector (undefined = this)
  * org ... if true, uses the original position of rp as reference.
  */
  UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {
      pv = pv || this;

      const rpx = org ? rp.xo : rp.x;
      const rpy = org ? rp.yo : rp.y;
      const rpdx = rpx + d * pv.x;
      const rpdy = rpy + d * pv.y;

      const pvns = pv.normalSlope;
      const fvs = this.slope;

      const px = p.x;
      const py = p.y;

      p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
      p.y = fvs * (p.x - px) + py;
  };

  /*
  * Touches the point p.
  */
  UnitVector.prototype.touch = function(p) {
      p.xTouched = true;
      p.yTouched = true;
  };

  /*
  * Returns a unit vector with x/y coordinates.
  */
  function getUnitVector(x, y) {
      const d = Math.sqrt(x * x + y * y);

      x /= d;
      y /= d;

      if (x === 1 && y === 0) return xUnitVector;
      else if (x === 0 && y === 1) return yUnitVector;
      else return new UnitVector(x, y);
  }

  /*
  * Creates a point in the hinting engine.
  */
  function HPoint(
      x,
      y,
      lastPointOfContour,
      onCurve
  ) {
      this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value
      this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value

      this.lastPointOfContour = lastPointOfContour;
      this.onCurve = onCurve;
      this.prevPointOnContour = undefined;
      this.nextPointOnContour = undefined;
      this.xTouched = false;
      this.yTouched = false;

      Object.preventExtensions(this);
  }

  /*
  * Returns the next touched point on the contour.
  *
  * v  ... unit vector to test touch axis.
  */
  HPoint.prototype.nextTouched = function(v) {
      let p = this.nextPointOnContour;

      while (!v.touched(p) && p !== this) p = p.nextPointOnContour;

      return p;
  };

  /*
  * Returns the previous touched point on the contour
  *
  * v  ... unit vector to test touch axis.
  */
  HPoint.prototype.prevTouched = function(v) {
      let p = this.prevPointOnContour;

      while (!v.touched(p) && p !== this) p = p.prevPointOnContour;

      return p;
  };

  /*
  * The zero point.
  */
  const HPZero = Object.freeze(new HPoint(0, 0));

  /*
  * The default state of the interpreter.
  *
  * Note: Freezing the defaultState and then deriving from it
  * makes the V8 Javascript engine going awkward,
  * so this is avoided, albeit the defaultState shouldn't
  * ever change.
  */
  const defaultState = {
      cvCutIn: 17 / 16,    // control value cut in
      deltaBase: 9,
      deltaShift: 0.125,
      loop: 1,             // loops some instructions
      minDis: 1,           // minimum distance
      autoFlip: true
  };

  /*
  * The current state of the interpreter.
  *
  * env  ... 'fpgm' or 'prep' or 'glyf'
  * prog ... the program
  */
  function State(env, prog) {
      this.env = env;
      this.stack = [];
      this.prog = prog;

      switch (env) {
          case 'glyf' :
              this.zp0 = this.zp1 = this.zp2 = 1;
              this.rp0 = this.rp1 = this.rp2 = 0;
              /* fall through */
          case 'prep' :
              this.fv = this.pv = this.dpv = xUnitVector;
              this.round = roundToGrid;
      }
  }

  /*
  * Executes a glyph program.
  *
  * This does the hinting for each glyph.
  *
  * Returns an array of moved points.
  *
  * glyph: the glyph to hint
  * ppem: the size the glyph is rendered for
  */
  Hinting.prototype.exec = function(glyph, ppem) {
      if (typeof ppem !== 'number') {
          throw new Error('Point size is not a number!');
      }

      // Received a fatal error, don't do any hinting anymore.
      if (this._errorState > 2) return;

      const font = this.font;
      let prepState = this._prepState;

      if (!prepState || prepState.ppem !== ppem) {
          let fpgmState = this._fpgmState;

          if (!fpgmState) {
              // Executes the fpgm state.
              // This is used by fonts to define functions.
              State.prototype = defaultState;

              fpgmState =
              this._fpgmState =
                  new State('fpgm', font.tables.fpgm);

              fpgmState.funcs = [ ];
              fpgmState.font = font;

              if (exports.DEBUG) {
                  console.log('---EXEC FPGM---');
                  fpgmState.step = -1;
              }

              try {
                  exec(fpgmState);
              } catch (e) {
                  console.log('Hinting error in FPGM:' + e);
                  this._errorState = 3;
                  return;
              }
          }

          // Executes the prep program for this ppem setting.
          // This is used by fonts to set cvt values
          // depending on to be rendered font size.

          State.prototype = fpgmState;
          prepState =
          this._prepState =
              new State('prep', font.tables.prep);

          prepState.ppem = ppem;

          // Creates a copy of the cvt table
          // and scales it to the current ppem setting.
          const oCvt = font.tables.cvt;
          if (oCvt) {
              const cvt = prepState.cvt = new Array(oCvt.length);
              const scale = ppem / font.unitsPerEm;
              for (let c = 0; c < oCvt.length; c++) {
                  cvt[c] = oCvt[c] * scale;
              }
          } else {
              prepState.cvt = [];
          }

          if (exports.DEBUG) {
              console.log('---EXEC PREP---');
              prepState.step = -1;
          }

          try {
              exec(prepState);
          } catch (e) {
              if (this._errorState < 2) {
                  console.log('Hinting error in PREP:' + e);
              }
              this._errorState = 2;
          }
      }

      if (this._errorState > 1) return;

      try {
          return execGlyph(glyph, prepState);
      } catch (e) {
          if (this._errorState < 1) {
              console.log('Hinting error:' + e);
              console.log('Note: further hinting errors are silenced');
          }
          this._errorState = 1;
          return undefined;
      }
  };

  /*
  * Executes the hinting program for a glyph.
  */
  execGlyph = function(glyph, prepState) {
      // original point positions
      const xScale = prepState.ppem / prepState.font.unitsPerEm;
      const yScale = xScale;
      let components = glyph.components;
      let contours;
      let gZone;
      let state;

      State.prototype = prepState;
      if (!components) {
          state = new State('glyf', glyph.instructions);
          if (exports.DEBUG) {
              console.log('---EXEC GLYPH---');
              state.step = -1;
          }
          execComponent(glyph, state, xScale, yScale);
          gZone = state.gZone;
      } else {
          const font = prepState.font;
          gZone = [];
          contours = [];
          for (let i = 0; i < components.length; i++) {
              const c = components[i];
              const cg = font.glyphs.get(c.glyphIndex);

              state = new State('glyf', cg.instructions);

              if (exports.DEBUG) {
                  console.log('---EXEC COMP ' + i + '---');
                  state.step = -1;
              }

              execComponent(cg, state, xScale, yScale);
              // appends the computed points to the result array
              // post processes the component points
              const dx = Math.round(c.dx * xScale);
              const dy = Math.round(c.dy * yScale);
              const gz = state.gZone;
              const cc = state.contours;
              for (let pi = 0; pi < gz.length; pi++) {
                  const p = gz[pi];
                  p.xTouched = p.yTouched = false;
                  p.xo = p.x = p.x + dx;
                  p.yo = p.y = p.y + dy;
              }

              const gLen = gZone.length;
              gZone.push.apply(gZone, gz);
              for (let j = 0; j < cc.length; j++) {
                  contours.push(cc[j] + gLen);
              }
          }

          if (glyph.instructions && !state.inhibitGridFit) {
              // the composite has instructions on its own
              state = new State('glyf', glyph.instructions);

              state.gZone = state.z0 = state.z1 = state.z2 = gZone;

              state.contours = contours;

              // note: HPZero cannot be used here, since
              //       the point might be modified
              gZone.push(
                  new HPoint(0, 0),
                  new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
              );

              if (exports.DEBUG) {
                  console.log('---EXEC COMPOSITE---');
                  state.step = -1;
              }

              exec(state);

              gZone.length -= 2;
          }
      }

      return gZone;
  };

  /*
  * Executes the hinting program for a component of a multi-component glyph
  * or of the glyph itself for a non-component glyph.
  */
  execComponent = function(glyph, state, xScale, yScale)
  {
      const points = glyph.points || [];
      const pLen = points.length;
      const gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];
      const contours = state.contours = [];

      // Scales the original points and
      // makes copies for the hinted points.
      let cp; // current point
      for (let i = 0; i < pLen; i++) {
          cp = points[i];

          gZone[i] = new HPoint(
              cp.x * xScale,
              cp.y * yScale,
              cp.lastPointOfContour,
              cp.onCurve
          );
      }

      // Chain links the contours.
      let sp; // start point
      let np; // next point

      for (let i = 0; i < pLen; i++) {
          cp = gZone[i];

          if (!sp) {
              sp = cp;
              contours.push(i);
          }

          if (cp.lastPointOfContour) {
              cp.nextPointOnContour = sp;
              sp.prevPointOnContour = cp;
              sp = undefined;
          } else {
              np = gZone[i + 1];
              cp.nextPointOnContour = np;
              np.prevPointOnContour = cp;
          }
      }

      if (state.inhibitGridFit) return;

      if (exports.DEBUG) {
          console.log('PROCESSING GLYPH', state.stack);
          for (let i = 0; i < pLen; i++) {
              console.log(i, gZone[i].x, gZone[i].y);
          }
      }

      gZone.push(
          new HPoint(0, 0),
          new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
      );

      exec(state);

      // Removes the extra points.
      gZone.length -= 2;

      if (exports.DEBUG) {
          console.log('FINISHED GLYPH', state.stack);
          for (let i = 0; i < pLen; i++) {
              console.log(i, gZone[i].x, gZone[i].y);
          }
      }
  };

  /*
  * Executes the program loaded in state.
  */
  exec = function(state) {
      let prog = state.prog;

      if (!prog) return;

      const pLen = prog.length;
      let ins;

      for (state.ip = 0; state.ip < pLen; state.ip++) {
          if (exports.DEBUG) state.step++;
          ins = instructionTable[prog[state.ip]];

          if (!ins) {
              throw new Error(
                  'unknown instruction: 0x' +
                  Number(prog[state.ip]).toString(16)
              );
          }

          ins(state);

          // very extensive debugging for each step
          /*
          if (exports.DEBUG) {
              var da;
              if (state.gZone) {
                  da = [];
                  for (let i = 0; i < state.gZone.length; i++)
                  {
                      da.push(i + ' ' +
                          state.gZone[i].x * 64 + ' ' +
                          state.gZone[i].y * 64 + ' ' +
                          (state.gZone[i].xTouched ? 'x' : '') +
                          (state.gZone[i].yTouched ? 'y' : '')
                      );
                  }
                  console.log('GZ', da);
              }

              if (state.tZone) {
                  da = [];
                  for (let i = 0; i < state.tZone.length; i++) {
                      da.push(i + ' ' +
                          state.tZone[i].x * 64 + ' ' +
                          state.tZone[i].y * 64 + ' ' +
                          (state.tZone[i].xTouched ? 'x' : '') +
                          (state.tZone[i].yTouched ? 'y' : '')
                      );
                  }
                  console.log('TZ', da);
              }

              if (state.stack.length > 10) {
                  console.log(
                      state.stack.length,
                      '...', state.stack.slice(state.stack.length - 10)
                  );
              } else {
                  console.log(state.stack.length, state.stack);
              }
          }
          */
      }
  };

  /*
  * Initializes the twilight zone.
  *
  * This is only done if a SZPx instruction
  * refers to the twilight zone.
  */
  function initTZone(state)
  {
      const tZone = state.tZone = new Array(state.gZone.length);

      // no idea if this is actually correct...
      for (let i = 0; i < tZone.length; i++)
      {
          tZone[i] = new HPoint(0, 0);
      }
  }

  /*
  * Skips the instruction pointer ahead over an IF/ELSE block.
  * handleElse .. if true breaks on matching ELSE
  */
  function skip(state, handleElse)
  {
      const prog = state.prog;
      let ip = state.ip;
      let nesting = 1;
      let ins;

      do {
          ins = prog[++ip];
          if (ins === 0x58) // IF
              nesting++;
          else if (ins === 0x59) // EIF
              nesting--;
          else if (ins === 0x40) // NPUSHB
              ip += prog[ip + 1] + 1;
          else if (ins === 0x41) // NPUSHW
              ip += 2 * prog[ip + 1] + 1;
          else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB
              ip += ins - 0xB0 + 1;
          else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW
              ip += (ins - 0xB8 + 1) * 2;
          else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE
              break;
      } while (nesting > 0);

      state.ip = ip;
  }

  /*----------------------------------------------------------*
  *          And then a lot of instructions...                *
  *----------------------------------------------------------*/

  // SVTCA[a] Set freedom and projection Vectors To Coordinate Axis
  // 0x00-0x01
  function SVTCA(v, state) {
      if (exports.DEBUG) console.log(state.step, 'SVTCA[' + v.axis + ']');

      state.fv = state.pv = state.dpv = v;
  }

  // SPVTCA[a] Set Projection Vector to Coordinate Axis
  // 0x02-0x03
  function SPVTCA(v, state) {
      if (exports.DEBUG) console.log(state.step, 'SPVTCA[' + v.axis + ']');

      state.pv = state.dpv = v;
  }

  // SFVTCA[a] Set Freedom Vector to Coordinate Axis
  // 0x04-0x05
  function SFVTCA(v, state) {
      if (exports.DEBUG) console.log(state.step, 'SFVTCA[' + v.axis + ']');

      state.fv = v;
  }

  // SPVTL[a] Set Projection Vector To Line
  // 0x06-0x07
  function SPVTL(a, state) {
      const stack = state.stack;
      const p2i = stack.pop();
      const p1i = stack.pop();
      const p2 = state.z2[p2i];
      const p1 = state.z1[p1i];

      if (exports.DEBUG) console.log('SPVTL[' + a + ']', p2i, p1i);

      let dx;
      let dy;

      if (!a) {
          dx = p1.x - p2.x;
          dy = p1.y - p2.y;
      } else {
          dx = p2.y - p1.y;
          dy = p1.x - p2.x;
      }

      state.pv = state.dpv = getUnitVector(dx, dy);
  }

  // SFVTL[a] Set Freedom Vector To Line
  // 0x08-0x09
  function SFVTL(a, state) {
      const stack = state.stack;
      const p2i = stack.pop();
      const p1i = stack.pop();
      const p2 = state.z2[p2i];
      const p1 = state.z1[p1i];

      if (exports.DEBUG) console.log('SFVTL[' + a + ']', p2i, p1i);

      let dx;
      let dy;

      if (!a) {
          dx = p1.x - p2.x;
          dy = p1.y - p2.y;
      } else {
          dx = p2.y - p1.y;
          dy = p1.x - p2.x;
      }

      state.fv = getUnitVector(dx, dy);
  }

  // SPVFS[] Set Projection Vector From Stack
  // 0x0A
  function SPVFS(state) {
      const stack = state.stack;
      const y = stack.pop();
      const x = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);

      state.pv = state.dpv = getUnitVector(x, y);
  }

  // SFVFS[] Set Freedom Vector From Stack
  // 0x0B
  function SFVFS(state) {
      const stack = state.stack;
      const y = stack.pop();
      const x = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);

      state.fv = getUnitVector(x, y);
  }

  // GPV[] Get Projection Vector
  // 0x0C
  function GPV(state) {
      const stack = state.stack;
      const pv = state.pv;

      if (exports.DEBUG) console.log(state.step, 'GPV[]');

      stack.push(pv.x * 0x4000);
      stack.push(pv.y * 0x4000);
  }

  // GFV[] Get Freedom Vector
  // 0x0C
  function GFV(state) {
      const stack = state.stack;
      const fv = state.fv;

      if (exports.DEBUG) console.log(state.step, 'GFV[]');

      stack.push(fv.x * 0x4000);
      stack.push(fv.y * 0x4000);
  }

  // SFVTPV[] Set Freedom Vector To Projection Vector
  // 0x0E
  function SFVTPV(state) {
      state.fv = state.pv;

      if (exports.DEBUG) console.log(state.step, 'SFVTPV[]');
  }

  // ISECT[] moves point p to the InterSECTion of two lines
  // 0x0F
  function ISECT(state)
  {
      const stack = state.stack;
      const pa0i = stack.pop();
      const pa1i = stack.pop();
      const pb0i = stack.pop();
      const pb1i = stack.pop();
      const pi = stack.pop();
      const z0 = state.z0;
      const z1 = state.z1;
      const pa0 = z0[pa0i];
      const pa1 = z0[pa1i];
      const pb0 = z1[pb0i];
      const pb1 = z1[pb1i];
      const p = state.z2[pi];

      if (exports.DEBUG) console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);

      // math from
      // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line

      const x1 = pa0.x;
      const y1 = pa0.y;
      const x2 = pa1.x;
      const y2 = pa1.y;
      const x3 = pb0.x;
      const y3 = pb0.y;
      const x4 = pb1.x;
      const y4 = pb1.y;

      const div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
      const f1 = x1 * y2 - y1 * x2;
      const f2 = x3 * y4 - y3 * x4;

      p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;
      p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;
  }

  // SRP0[] Set Reference Point 0
  // 0x10
  function SRP0(state) {
      state.rp0 = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SRP0[]', state.rp0);
  }

  // SRP1[] Set Reference Point 1
  // 0x11
  function SRP1(state) {
      state.rp1 = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SRP1[]', state.rp1);
  }

  // SRP1[] Set Reference Point 2
  // 0x12
  function SRP2(state) {
      state.rp2 = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SRP2[]', state.rp2);
  }

  // SZP0[] Set Zone Pointer 0
  // 0x13
  function SZP0(state) {
      const n = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SZP0[]', n);

      state.zp0 = n;

      switch (n) {
          case 0:
              if (!state.tZone) initTZone(state);
              state.z0 = state.tZone;
              break;
          case 1 :
              state.z0 = state.gZone;
              break;
          default :
              throw new Error('Invalid zone pointer');
      }
  }

  // SZP1[] Set Zone Pointer 1
  // 0x14
  function SZP1(state) {
      const n = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SZP1[]', n);

      state.zp1 = n;

      switch (n) {
          case 0:
              if (!state.tZone) initTZone(state);
              state.z1 = state.tZone;
              break;
          case 1 :
              state.z1 = state.gZone;
              break;
          default :
              throw new Error('Invalid zone pointer');
      }
  }

  // SZP2[] Set Zone Pointer 2
  // 0x15
  function SZP2(state) {
      const n = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SZP2[]', n);

      state.zp2 = n;

      switch (n) {
          case 0:
              if (!state.tZone) initTZone(state);
              state.z2 = state.tZone;
              break;
          case 1 :
              state.z2 = state.gZone;
              break;
          default :
              throw new Error('Invalid zone pointer');
      }
  }

  // SZPS[] Set Zone PointerS
  // 0x16
  function SZPS(state) {
      const n = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SZPS[]', n);

      state.zp0 = state.zp1 = state.zp2 = n;

      switch (n) {
          case 0:
              if (!state.tZone) initTZone(state);
              state.z0 = state.z1 = state.z2 = state.tZone;
              break;
          case 1 :
              state.z0 = state.z1 = state.z2 = state.gZone;
              break;
          default :
              throw new Error('Invalid zone pointer');
      }
  }

  // SLOOP[] Set LOOP variable
  // 0x17
  function SLOOP(state) {
      state.loop = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SLOOP[]', state.loop);
  }

  // RTG[] Round To Grid
  // 0x18
  function RTG(state) {
      if (exports.DEBUG) console.log(state.step, 'RTG[]');

      state.round = roundToGrid;
  }

  // RTHG[] Round To Half Grid
  // 0x19
  function RTHG(state) {
      if (exports.DEBUG) console.log(state.step, 'RTHG[]');

      state.round = roundToHalfGrid;
  }

  // SMD[] Set Minimum Distance
  // 0x1A
  function SMD(state) {
      const d = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SMD[]', d);

      state.minDis = d / 0x40;
  }

  // ELSE[] ELSE clause
  // 0x1B
  function ELSE(state) {
      // This instruction has been reached by executing a then branch
      // so it just skips ahead until matching EIF.
      //
      // In case the IF was negative the IF[] instruction already
      // skipped forward over the ELSE[]

      if (exports.DEBUG) console.log(state.step, 'ELSE[]');

      skip(state, false);
  }

  // JMPR[] JuMP Relative
  // 0x1C
  function JMPR(state) {
      const o = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'JMPR[]', o);

      // A jump by 1 would do nothing.
      state.ip += o - 1;
  }

  // SCVTCI[] Set Control Value Table Cut-In
  // 0x1D
  function SCVTCI(state) {
      const n = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SCVTCI[]', n);

      state.cvCutIn = n / 0x40;
  }

  // DUP[] DUPlicate top stack element
  // 0x20
  function DUP(state) {
      const stack = state.stack;

      if (exports.DEBUG) console.log(state.step, 'DUP[]');

      stack.push(stack[stack.length - 1]);
  }

  // POP[] POP top stack element
  // 0x21
  function POP(state) {
      if (exports.DEBUG) console.log(state.step, 'POP[]');

      state.stack.pop();
  }

  // CLEAR[] CLEAR the stack
  // 0x22
  function CLEAR(state) {
      if (exports.DEBUG) console.log(state.step, 'CLEAR[]');

      state.stack.length = 0;
  }

  // SWAP[] SWAP the top two elements on the stack
  // 0x23
  function SWAP(state) {
      const stack = state.stack;

      const a = stack.pop();
      const b = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SWAP[]');

      stack.push(a);
      stack.push(b);
  }

  // DEPTH[] DEPTH of the stack
  // 0x24
  function DEPTH(state) {
      const stack = state.stack;

      if (exports.DEBUG) console.log(state.step, 'DEPTH[]');

      stack.push(stack.length);
  }

  // LOOPCALL[] LOOPCALL function
  // 0x2A
  function LOOPCALL(state) {
      const stack = state.stack;
      const fn = stack.pop();
      const c = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'LOOPCALL[]', fn, c);

      // saves callers program
      const cip = state.ip;
      const cprog = state.prog;

      state.prog = state.funcs[fn];

      // executes the function
      for (let i = 0; i < c; i++) {
          exec(state);

          if (exports.DEBUG) console.log(
              ++state.step,
              i + 1 < c ? 'next loopcall' : 'done loopcall',
              i
          );
      }

      // restores the callers program
      state.ip = cip;
      state.prog = cprog;
  }

  // CALL[] CALL function
  // 0x2B
  function CALL(state) {
      const fn = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'CALL[]', fn);

      // saves callers program
      const cip = state.ip;
      const cprog = state.prog;

      state.prog = state.funcs[fn];

      // executes the function
      exec(state);

      // restores the callers program
      state.ip = cip;
      state.prog = cprog;

      if (exports.DEBUG) console.log(++state.step, 'returning from', fn);
  }

  // CINDEX[] Copy the INDEXed element to the top of the stack
  // 0x25
  function CINDEX(state) {
      const stack = state.stack;
      const k = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'CINDEX[]', k);

      // In case of k == 1, it copies the last element after popping
      // thus stack.length - k.
      stack.push(stack[stack.length - k]);
  }

  // MINDEX[] Move the INDEXed element to the top of the stack
  // 0x26
  function MINDEX(state) {
      const stack = state.stack;
      const k = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'MINDEX[]', k);

      stack.push(stack.splice(stack.length - k, 1)[0]);
  }

  // FDEF[] Function DEFinition
  // 0x2C
  function FDEF(state) {
      if (state.env !== 'fpgm') throw new Error('FDEF not allowed here');
      const stack = state.stack;
      const prog = state.prog;
      let ip = state.ip;

      const fn = stack.pop();
      const ipBegin = ip;

      if (exports.DEBUG) console.log(state.step, 'FDEF[]', fn);

      while (prog[++ip] !== 0x2D);

      state.ip = ip;
      state.funcs[fn] = prog.slice(ipBegin + 1, ip);
  }

  // MDAP[a] Move Direct Absolute Point
  // 0x2E-0x2F
  function MDAP(round, state) {
      const pi = state.stack.pop();
      const p = state.z0[pi];
      const fv = state.fv;
      const pv = state.pv;

      if (exports.DEBUG) console.log(state.step, 'MDAP[' + round + ']', pi);

      let d = pv.distance(p, HPZero);

      if (round) d = state.round(d);

      fv.setRelative(p, HPZero, d, pv);
      fv.touch(p);

      state.rp0 = state.rp1 = pi;
  }

  // IUP[a] Interpolate Untouched Points through the outline
  // 0x30
  function IUP(v, state) {
      const z2 = state.z2;
      const pLen = z2.length - 2;
      let cp;
      let pp;
      let np;

      if (exports.DEBUG) console.log(state.step, 'IUP[' + v.axis + ']');

      for (let i = 0; i < pLen; i++) {
          cp = z2[i]; // current point

          // if this point has been touched go on
          if (v.touched(cp)) continue;

          pp = cp.prevTouched(v);

          // no point on the contour has been touched?
          if (pp === cp) continue;

          np = cp.nextTouched(v);

          if (pp === np) {
              // only one point on the contour has been touched
              // so simply moves the point like that

              v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);
          }

          v.interpolate(cp, pp, np, v);
      }
  }

  // SHP[] SHift Point using reference point
  // 0x32-0x33
  function SHP(a, state) {
      const stack = state.stack;
      const rpi = a ? state.rp1 : state.rp2;
      const rp = (a ? state.z0 : state.z1)[rpi];
      const fv = state.fv;
      const pv = state.pv;
      let loop = state.loop;
      const z2 = state.z2;

      while (loop--)
      {
          const pi = stack.pop();
          const p = z2[pi];

          const d = pv.distance(rp, rp, false, true);
          fv.setRelative(p, p, d, pv);
          fv.touch(p);

          if (exports.DEBUG) {
              console.log(
                  state.step,
                  (state.loop > 1 ?
                     'loop ' + (state.loop - loop) + ': ' :
                     ''
                  ) +
                  'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi
              );
          }
      }

      state.loop = 1;
  }

  // SHC[] SHift Contour using reference point
  // 0x36-0x37
  function SHC(a, state) {
      const stack = state.stack;
      const rpi = a ? state.rp1 : state.rp2;
      const rp = (a ? state.z0 : state.z1)[rpi];
      const fv = state.fv;
      const pv = state.pv;
      const ci = stack.pop();
      const sp = state.z2[state.contours[ci]];
      let p = sp;

      if (exports.DEBUG) console.log(state.step, 'SHC[' + a + ']', ci);

      const d = pv.distance(rp, rp, false, true);

      do {
          if (p !== rp) fv.setRelative(p, p, d, pv);
          p = p.nextPointOnContour;
      } while (p !== sp);
  }

  // SHZ[] SHift Zone using reference point
  // 0x36-0x37
  function SHZ(a, state) {
      const stack = state.stack;
      const rpi = a ? state.rp1 : state.rp2;
      const rp = (a ? state.z0 : state.z1)[rpi];
      const fv = state.fv;
      const pv = state.pv;

      const e = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SHZ[' + a + ']', e);

      let z;
      switch (e) {
          case 0 : z = state.tZone; break;
          case 1 : z = state.gZone; break;
          default : throw new Error('Invalid zone');
      }

      let p;
      const d = pv.distance(rp, rp, false, true);
      const pLen = z.length - 2;
      for (let i = 0; i < pLen; i++)
      {
          p = z[i];
          fv.setRelative(p, p, d, pv);
          //if (p !== rp) fv.setRelative(p, p, d, pv);
      }
  }

  // SHPIX[] SHift point by a PIXel amount
  // 0x38
  function SHPIX(state) {
      const stack = state.stack;
      let loop = state.loop;
      const fv = state.fv;
      const d = stack.pop() / 0x40;
      const z2 = state.z2;

      while (loop--) {
          const pi = stack.pop();
          const p = z2[pi];

          if (exports.DEBUG) {
              console.log(
                  state.step,
                  (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                  'SHPIX[]', pi, d
              );
          }

          fv.setRelative(p, p, d);
          fv.touch(p);
      }

      state.loop = 1;
  }

  // IP[] Interpolate Point
  // 0x39
  function IP(state) {
      const stack = state.stack;
      const rp1i = state.rp1;
      const rp2i = state.rp2;
      let loop = state.loop;
      const rp1 = state.z0[rp1i];
      const rp2 = state.z1[rp2i];
      const fv = state.fv;
      const pv = state.dpv;
      const z2 = state.z2;

      while (loop--) {
          const pi = stack.pop();
          const p = z2[pi];

          if (exports.DEBUG) {
              console.log(
                  state.step,
                  (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                  'IP[]', pi, rp1i, '<->', rp2i
              );
          }

          fv.interpolate(p, rp1, rp2, pv);

          fv.touch(p);
      }

      state.loop = 1;
  }

  // MSIRP[a] Move Stack Indirect Relative Point
  // 0x3A-0x3B
  function MSIRP(a, state) {
      const stack = state.stack;
      const d = stack.pop() / 64;
      const pi = stack.pop();
      const p = state.z1[pi];
      const rp0 = state.z0[state.rp0];
      const fv = state.fv;
      const pv = state.pv;

      fv.setRelative(p, rp0, d, pv);
      fv.touch(p);

      if (exports.DEBUG) console.log(state.step, 'MSIRP[' + a + ']', d, pi);

      state.rp1 = state.rp0;
      state.rp2 = pi;
      if (a) state.rp0 = pi;
  }

  // ALIGNRP[] Align to reference point.
  // 0x3C
  function ALIGNRP(state) {
      const stack = state.stack;
      const rp0i = state.rp0;
      const rp0 = state.z0[rp0i];
      let loop = state.loop;
      const fv = state.fv;
      const pv = state.pv;
      const z1 = state.z1;

      while (loop--) {
          const pi = stack.pop();
          const p = z1[pi];

          if (exports.DEBUG) {
              console.log(
                  state.step,
                  (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                  'ALIGNRP[]', pi
              );
          }

          fv.setRelative(p, rp0, 0, pv);
          fv.touch(p);
      }

      state.loop = 1;
  }

  // RTG[] Round To Double Grid
  // 0x3D
  function RTDG(state) {
      if (exports.DEBUG) console.log(state.step, 'RTDG[]');

      state.round = roundToDoubleGrid;
  }

  // MIAP[a] Move Indirect Absolute Point
  // 0x3E-0x3F
  function MIAP(round, state) {
      const stack = state.stack;
      const n = stack.pop();
      const pi = stack.pop();
      const p = state.z0[pi];
      const fv = state.fv;
      const pv = state.pv;
      let cv = state.cvt[n];

      if (exports.DEBUG) {
          console.log(
              state.step,
              'MIAP[' + round + ']',
              n, '(', cv, ')', pi
          );
      }

      let d = pv.distance(p, HPZero);

      if (round) {
          if (Math.abs(d - cv) < state.cvCutIn) d = cv;

          d = state.round(d);
      }

      fv.setRelative(p, HPZero, d, pv);

      if (state.zp0 === 0) {
          p.xo = p.x;
          p.yo = p.y;
      }

      fv.touch(p);

      state.rp0 = state.rp1 = pi;
  }

  // NPUSB[] PUSH N Bytes
  // 0x40
  function NPUSHB(state) {
      const prog = state.prog;
      let ip = state.ip;
      const stack = state.stack;

      const n = prog[++ip];

      if (exports.DEBUG) console.log(state.step, 'NPUSHB[]', n);

      for (let i = 0; i < n; i++) stack.push(prog[++ip]);

      state.ip = ip;
  }

  // NPUSHW[] PUSH N Words
  // 0x41
  function NPUSHW(state) {
      let ip = state.ip;
      const prog = state.prog;
      const stack = state.stack;
      const n = prog[++ip];

      if (exports.DEBUG) console.log(state.step, 'NPUSHW[]', n);

      for (let i = 0; i < n; i++) {
          let w = (prog[++ip] << 8) | prog[++ip];
          if (w & 0x8000) w = -((w ^ 0xffff) + 1);
          stack.push(w);
      }

      state.ip = ip;
  }

  // WS[] Write Store
  // 0x42
  function WS(state) {
      const stack = state.stack;
      let store = state.store;

      if (!store) store = state.store = [];

      const v = stack.pop();
      const l = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'WS', v, l);

      store[l] = v;
  }

  // RS[] Read Store
  // 0x43
  function RS(state) {
      const stack = state.stack;
      const store = state.store;

      const l = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'RS', l);

      const v = (store && store[l]) || 0;

      stack.push(v);
  }

  // WCVTP[] Write Control Value Table in Pixel units
  // 0x44
  function WCVTP(state) {
      const stack = state.stack;

      const v = stack.pop();
      const l = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'WCVTP', v, l);

      state.cvt[l] = v / 0x40;
  }

  // RCVT[] Read Control Value Table entry
  // 0x45
  function RCVT(state) {
      const stack = state.stack;
      const cvte = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'RCVT', cvte);

      stack.push(state.cvt[cvte] * 0x40);
  }

  // GC[] Get Coordinate projected onto the projection vector
  // 0x46-0x47
  function GC(a, state) {
      const stack = state.stack;
      const pi = stack.pop();
      const p = state.z2[pi];

      if (exports.DEBUG) console.log(state.step, 'GC[' + a + ']', pi);

      stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);
  }

  // MD[a] Measure Distance
  // 0x49-0x4A
  function MD(a, state) {
      const stack = state.stack;
      const pi2 = stack.pop();
      const pi1 = stack.pop();
      const p2 = state.z1[pi2];
      const p1 = state.z0[pi1];
      const d = state.dpv.distance(p1, p2, a, a);

      if (exports.DEBUG) console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);

      state.stack.push(Math.round(d * 64));
  }

  // MPPEM[] Measure Pixels Per EM
  // 0x4B
  function MPPEM(state) {
      if (exports.DEBUG) console.log(state.step, 'MPPEM[]');
      state.stack.push(state.ppem);
  }

  // FLIPON[] set the auto FLIP Boolean to ON
  // 0x4D
  function FLIPON(state) {
      if (exports.DEBUG) console.log(state.step, 'FLIPON[]');
      state.autoFlip = true;
  }

  // LT[] Less Than
  // 0x50
  function LT(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'LT[]', e2, e1);

      stack.push(e1 < e2 ? 1 : 0);
  }

  // LTEQ[] Less Than or EQual
  // 0x53
  function LTEQ(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'LTEQ[]', e2, e1);

      stack.push(e1 <= e2 ? 1 : 0);
  }

  // GTEQ[] Greater Than
  // 0x52
  function GT(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'GT[]', e2, e1);

      stack.push(e1 > e2 ? 1 : 0);
  }

  // GTEQ[] Greater Than or EQual
  // 0x53
  function GTEQ(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'GTEQ[]', e2, e1);

      stack.push(e1 >= e2 ? 1 : 0);
  }

  // EQ[] EQual
  // 0x54
  function EQ(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'EQ[]', e2, e1);

      stack.push(e2 === e1 ? 1 : 0);
  }

  // NEQ[] Not EQual
  // 0x55
  function NEQ(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'NEQ[]', e2, e1);

      stack.push(e2 !== e1 ? 1 : 0);
  }

  // ODD[] ODD
  // 0x56
  function ODD(state) {
      const stack = state.stack;
      const n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'ODD[]', n);

      stack.push(Math.trunc(n) % 2 ? 1 : 0);
  }

  // EVEN[] EVEN
  // 0x57
  function EVEN(state) {
      const stack = state.stack;
      const n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'EVEN[]', n);

      stack.push(Math.trunc(n) % 2 ? 0 : 1);
  }

  // IF[] IF test
  // 0x58
  function IF(state) {
      let test = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'IF[]', test);

      // if test is true it just continues
      // if not the ip is skipped until matching ELSE or EIF
      if (!test) {
          skip(state, true);

          if (exports.DEBUG) console.log(state.step, 'EIF[]');
      }
  }

  // EIF[] End IF
  // 0x59
  function EIF(state) {
      // this can be reached normally when
      // executing an else branch.
      // -> just ignore it

      if (exports.DEBUG) console.log(state.step, 'EIF[]');
  }

  // AND[] logical AND
  // 0x5A
  function AND(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'AND[]', e2, e1);

      stack.push(e2 && e1 ? 1 : 0);
  }

  // OR[] logical OR
  // 0x5B
  function OR(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'OR[]', e2, e1);

      stack.push(e2 || e1 ? 1 : 0);
  }

  // NOT[] logical NOT
  // 0x5C
  function NOT(state) {
      const stack = state.stack;
      const e = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'NOT[]', e);

      stack.push(e ? 0 : 1);
  }

  // DELTAP1[] DELTA exception P1
  // DELTAP2[] DELTA exception P2
  // DELTAP3[] DELTA exception P3
  // 0x5D, 0x71, 0x72
  function DELTAP123(b, state) {
      const stack = state.stack;
      const n = stack.pop();
      const fv = state.fv;
      const pv = state.pv;
      const ppem = state.ppem;
      const base = state.deltaBase + (b - 1) * 16;
      const ds = state.deltaShift;
      const z0 = state.z0;

      if (exports.DEBUG) console.log(state.step, 'DELTAP[' + b + ']', n, stack);

      for (let i = 0; i < n; i++) {
          const pi = stack.pop();
          const arg = stack.pop();
          const appem = base + ((arg & 0xF0) >> 4);
          if (appem !== ppem) continue;

          let mag = (arg & 0x0F) - 8;
          if (mag >= 0) mag++;
          if (exports.DEBUG) console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);

          const p = z0[pi];
          fv.setRelative(p, p, mag * ds, pv);
      }
  }

  // SDB[] Set Delta Base in the graphics state
  // 0x5E
  function SDB(state) {
      const stack = state.stack;
      const n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SDB[]', n);

      state.deltaBase = n;
  }

  // SDS[] Set Delta Shift in the graphics state
  // 0x5F
  function SDS(state) {
      const stack = state.stack;
      const n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SDS[]', n);

      state.deltaShift = Math.pow(0.5, n);
  }

  // ADD[] ADD
  // 0x60
  function ADD(state) {
      const stack = state.stack;
      const n2 = stack.pop();
      const n1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'ADD[]', n2, n1);

      stack.push(n1 + n2);
  }

  // SUB[] SUB
  // 0x61
  function SUB(state) {
      const stack = state.stack;
      const n2 = stack.pop();
      const n1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SUB[]', n2, n1);

      stack.push(n1 - n2);
  }

  // DIV[] DIV
  // 0x62
  function DIV(state) {
      const stack = state.stack;
      const n2 = stack.pop();
      const n1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'DIV[]', n2, n1);

      stack.push(n1 * 64 / n2);
  }

  // MUL[] MUL
  // 0x63
  function MUL(state) {
      const stack = state.stack;
      const n2 = stack.pop();
      const n1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'MUL[]', n2, n1);

      stack.push(n1 * n2 / 64);
  }

  // ABS[] ABSolute value
  // 0x64
  function ABS(state) {
      const stack = state.stack;
      const n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'ABS[]', n);

      stack.push(Math.abs(n));
  }

  // NEG[] NEGate
  // 0x65
  function NEG(state) {
      const stack = state.stack;
      let n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'NEG[]', n);

      stack.push(-n);
  }

  // FLOOR[] FLOOR
  // 0x66
  function FLOOR(state) {
      const stack = state.stack;
      const n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'FLOOR[]', n);

      stack.push(Math.floor(n / 0x40) * 0x40);
  }

  // CEILING[] CEILING
  // 0x67
  function CEILING(state) {
      const stack = state.stack;
      const n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'CEILING[]', n);

      stack.push(Math.ceil(n / 0x40) * 0x40);
  }

  // ROUND[ab] ROUND value
  // 0x68-0x6B
  function ROUND(dt, state) {
      const stack = state.stack;
      const n = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'ROUND[]');

      stack.push(state.round(n / 0x40) * 0x40);
  }

  // WCVTF[] Write Control Value Table in Funits
  // 0x70
  function WCVTF(state) {
      const stack = state.stack;
      const v = stack.pop();
      const l = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'WCVTF[]', v, l);

      state.cvt[l] = v * state.ppem / state.font.unitsPerEm;
  }

  // DELTAC1[] DELTA exception C1
  // DELTAC2[] DELTA exception C2
  // DELTAC3[] DELTA exception C3
  // 0x73, 0x74, 0x75
  function DELTAC123(b, state) {
      const stack = state.stack;
      const n = stack.pop();
      const ppem = state.ppem;
      const base = state.deltaBase + (b - 1) * 16;
      const ds = state.deltaShift;

      if (exports.DEBUG) console.log(state.step, 'DELTAC[' + b + ']', n, stack);

      for (let i = 0; i < n; i++) {
          const c = stack.pop();
          const arg = stack.pop();
          const appem = base + ((arg & 0xF0) >> 4);
          if (appem !== ppem) continue;

          let mag = (arg & 0x0F) - 8;
          if (mag >= 0) mag++;

          const delta = mag * ds;

          if (exports.DEBUG) console.log(state.step, 'DELTACFIX', c, 'by', delta);

          state.cvt[c] += delta;
      }
  }

  // SROUND[] Super ROUND
  // 0x76
  function SROUND(state) {
      let n = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'SROUND[]', n);

      state.round = roundSuper;

      let period;

      switch (n & 0xC0) {
          case 0x00:
              period = 0.5;
              break;
          case 0x40:
              period = 1;
              break;
          case 0x80:
              period = 2;
              break;
          default:
              throw new Error('invalid SROUND value');
      }

      state.srPeriod = period;

      switch (n & 0x30) {
          case 0x00:
              state.srPhase = 0;
              break;
          case 0x10:
              state.srPhase = 0.25 * period;
              break;
          case 0x20:
              state.srPhase = 0.5  * period;
              break;
          case 0x30:
              state.srPhase = 0.75 * period;
              break;
          default: throw new Error('invalid SROUND value');
      }

      n &= 0x0F;

      if (n === 0) state.srThreshold = 0;
      else state.srThreshold = (n / 8 - 0.5) * period;
  }

  // S45ROUND[] Super ROUND 45 degrees
  // 0x77
  function S45ROUND(state) {
      let n = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'S45ROUND[]', n);

      state.round = roundSuper;

      let period;

      switch (n & 0xC0) {
          case 0x00:
              period = Math.sqrt(2) / 2;
              break;
          case 0x40:
              period = Math.sqrt(2);
              break;
          case 0x80:
              period = 2 * Math.sqrt(2);
              break;
          default:
              throw new Error('invalid S45ROUND value');
      }

      state.srPeriod = period;

      switch (n & 0x30) {
          case 0x00:
              state.srPhase = 0;
              break;
          case 0x10:
              state.srPhase = 0.25 * period;
              break;
          case 0x20:
              state.srPhase = 0.5  * period;
              break;
          case 0x30:
              state.srPhase = 0.75 * period;
              break;
          default:
              throw new Error('invalid S45ROUND value');
      }

      n &= 0x0F;

      if (n === 0) state.srThreshold = 0;
      else state.srThreshold = (n / 8 - 0.5) * period;
  }

  // ROFF[] Round Off
  // 0x7A
  function ROFF(state) {
      if (exports.DEBUG) console.log(state.step, 'ROFF[]');

      state.round = roundOff;
  }

  // RUTG[] Round Up To Grid
  // 0x7C
  function RUTG(state) {
      if (exports.DEBUG) console.log(state.step, 'RUTG[]');

      state.round = roundUpToGrid;
  }

  // RDTG[] Round Down To Grid
  // 0x7D
  function RDTG(state) {
      if (exports.DEBUG) console.log(state.step, 'RDTG[]');

      state.round = roundDownToGrid;
  }

  // SCANCTRL[] SCAN conversion ConTRoL
  // 0x85
  function SCANCTRL(state) {
      const n = state.stack.pop();

      // ignored by opentype.js

      if (exports.DEBUG) console.log(state.step, 'SCANCTRL[]', n);
  }

  // SDPVTL[a] Set Dual Projection Vector To Line
  // 0x86-0x87
  function SDPVTL(a, state) {
      const stack = state.stack;
      const p2i = stack.pop();
      const p1i = stack.pop();
      const p2 = state.z2[p2i];
      const p1 = state.z1[p1i];

      if (exports.DEBUG) console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i);

      let dx;
      let dy;

      if (!a) {
          dx = p1.x - p2.x;
          dy = p1.y - p2.y;
      } else {
          dx = p2.y - p1.y;
          dy = p1.x - p2.x;
      }

      state.dpv = getUnitVector(dx, dy);
  }

  // GETINFO[] GET INFOrmation
  // 0x88
  function GETINFO(state) {
      const stack = state.stack;
      const sel = stack.pop();
      let r = 0;

      if (exports.DEBUG) console.log(state.step, 'GETINFO[]', sel);

      // v35 as in no subpixel hinting
      if (sel & 0x01) r = 35;

      // TODO rotation and stretch currently not supported
      // and thus those GETINFO are always 0.

      // opentype.js is always gray scaling
      if (sel & 0x20) r |= 0x1000;

      stack.push(r);
  }

  // ROLL[] ROLL the top three stack elements
  // 0x8A
  function ROLL(state) {
      const stack = state.stack;
      const a = stack.pop();
      const b = stack.pop();
      const c = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'ROLL[]');

      stack.push(b);
      stack.push(a);
      stack.push(c);
  }

  // MAX[] MAXimum of top two stack elements
  // 0x8B
  function MAX(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'MAX[]', e2, e1);

      stack.push(Math.max(e1, e2));
  }

  // MIN[] MINimum of top two stack elements
  // 0x8C
  function MIN(state) {
      const stack = state.stack;
      const e2 = stack.pop();
      const e1 = stack.pop();

      if (exports.DEBUG) console.log(state.step, 'MIN[]', e2, e1);

      stack.push(Math.min(e1, e2));
  }

  // SCANTYPE[] SCANTYPE
  // 0x8D
  function SCANTYPE(state) {
      const n = state.stack.pop();
      // ignored by opentype.js
      if (exports.DEBUG) console.log(state.step, 'SCANTYPE[]', n);
  }

  // INSTCTRL[] INSTCTRL
  // 0x8D
  function INSTCTRL(state) {
      const s = state.stack.pop();
      let v = state.stack.pop();

      if (exports.DEBUG) console.log(state.step, 'INSTCTRL[]', s, v);

      switch (s) {
          case 1 : state.inhibitGridFit = !!v; return;
          case 2 : state.ignoreCvt = !!v; return;
          default: throw new Error('invalid INSTCTRL[] selector');
      }
  }

  // PUSHB[abc] PUSH Bytes
  // 0xB0-0xB7
  function PUSHB(n, state) {
      const stack = state.stack;
      const prog = state.prog;
      let ip = state.ip;

      if (exports.DEBUG) console.log(state.step, 'PUSHB[' + n + ']');

      for (let i = 0; i < n; i++) stack.push(prog[++ip]);

      state.ip = ip;
  }

  // PUSHW[abc] PUSH Words
  // 0xB8-0xBF
  function PUSHW(n, state) {
      let ip = state.ip;
      const prog = state.prog;
      const stack = state.stack;

      if (exports.DEBUG) console.log(state.ip, 'PUSHW[' + n + ']');

      for (let i = 0; i < n; i++) {
          let w = (prog[++ip] << 8) | prog[++ip];
          if (w & 0x8000) w = -((w ^ 0xffff) + 1);
          stack.push(w);
      }

      state.ip = ip;
  }

  // MDRP[abcde] Move Direct Relative Point
  // 0xD0-0xEF
  // (if indirect is 0)
  //
  // and
  //
  // MIRP[abcde] Move Indirect Relative Point
  // 0xE0-0xFF
  // (if indirect is 1)

  function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {
      const stack = state.stack;
      const cvte = indirect && stack.pop();
      const pi = stack.pop();
      const rp0i = state.rp0;
      const rp = state.z0[rp0i];
      const p = state.z1[pi];

      const md = state.minDis;
      const fv = state.fv;
      const pv = state.dpv;
      let od; // original distance
      let d; // moving distance
      let sign; // sign of distance
      let cv;

      d = od = pv.distance(p, rp, true, true);
      sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0

      // TODO consider autoFlip
      d = Math.abs(d);

      if (indirect) {
          cv = state.cvt[cvte];

          if (ro && Math.abs(d - cv) < state.cvCutIn) d = cv;
      }

      if (keepD && d < md) d = md;

      if (ro) d = state.round(d);

      fv.setRelative(p, rp, sign * d, pv);
      fv.touch(p);

      if (exports.DEBUG) {
          console.log(
              state.step,
              (indirect ? 'MIRP[' : 'MDRP[') +
              (setRp0 ? 'M' : 'm') +
              (keepD ? '>' : '_') +
              (ro ? 'R' : '_') +
              (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +
              ']',
              indirect ?
                  cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :
                  '',
              pi,
              '(d =', od, '->', sign * d, ')'
          );
      }

      state.rp1 = state.rp0;
      state.rp2 = pi;
      if (setRp0) state.rp0 = pi;
  }

  /*
  * The instruction table.
  */
  instructionTable = [
      /* 0x00 */ SVTCA.bind(undefined, yUnitVector),
      /* 0x01 */ SVTCA.bind(undefined, xUnitVector),
      /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),
      /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),
      /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),
      /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),
      /* 0x06 */ SPVTL.bind(undefined, 0),
      /* 0x07 */ SPVTL.bind(undefined, 1),
      /* 0x08 */ SFVTL.bind(undefined, 0),
      /* 0x09 */ SFVTL.bind(undefined, 1),
      /* 0x0A */ SPVFS,
      /* 0x0B */ SFVFS,
      /* 0x0C */ GPV,
      /* 0x0D */ GFV,
      /* 0x0E */ SFVTPV,
      /* 0x0F */ ISECT,
      /* 0x10 */ SRP0,
      /* 0x11 */ SRP1,
      /* 0x12 */ SRP2,
      /* 0x13 */ SZP0,
      /* 0x14 */ SZP1,
      /* 0x15 */ SZP2,
      /* 0x16 */ SZPS,
      /* 0x17 */ SLOOP,
      /* 0x18 */ RTG,
      /* 0x19 */ RTHG,
      /* 0x1A */ SMD,
      /* 0x1B */ ELSE,
      /* 0x1C */ JMPR,
      /* 0x1D */ SCVTCI,
      /* 0x1E */ undefined,   // TODO SSWCI
      /* 0x1F */ undefined,   // TODO SSW
      /* 0x20 */ DUP,
      /* 0x21 */ POP,
      /* 0x22 */ CLEAR,
      /* 0x23 */ SWAP,
      /* 0x24 */ DEPTH,
      /* 0x25 */ CINDEX,
      /* 0x26 */ MINDEX,
      /* 0x27 */ undefined,   // TODO ALIGNPTS
      /* 0x28 */ undefined,
      /* 0x29 */ undefined,   // TODO UTP
      /* 0x2A */ LOOPCALL,
      /* 0x2B */ CALL,
      /* 0x2C */ FDEF,
      /* 0x2D */ undefined,   // ENDF (eaten by FDEF)
      /* 0x2E */ MDAP.bind(undefined, 0),
      /* 0x2F */ MDAP.bind(undefined, 1),
      /* 0x30 */ IUP.bind(undefined, yUnitVector),
      /* 0x31 */ IUP.bind(undefined, xUnitVector),
      /* 0x32 */ SHP.bind(undefined, 0),
      /* 0x33 */ SHP.bind(undefined, 1),
      /* 0x34 */ SHC.bind(undefined, 0),
      /* 0x35 */ SHC.bind(undefined, 1),
      /* 0x36 */ SHZ.bind(undefined, 0),
      /* 0x37 */ SHZ.bind(undefined, 1),
      /* 0x38 */ SHPIX,
      /* 0x39 */ IP,
      /* 0x3A */ MSIRP.bind(undefined, 0),
      /* 0x3B */ MSIRP.bind(undefined, 1),
      /* 0x3C */ ALIGNRP,
      /* 0x3D */ RTDG,
      /* 0x3E */ MIAP.bind(undefined, 0),
      /* 0x3F */ MIAP.bind(undefined, 1),
      /* 0x40 */ NPUSHB,
      /* 0x41 */ NPUSHW,
      /* 0x42 */ WS,
      /* 0x43 */ RS,
      /* 0x44 */ WCVTP,
      /* 0x45 */ RCVT,
      /* 0x46 */ GC.bind(undefined, 0),
      /* 0x47 */ GC.bind(undefined, 1),
      /* 0x48 */ undefined,   // TODO SCFS
      /* 0x49 */ MD.bind(undefined, 0),
      /* 0x4A */ MD.bind(undefined, 1),
      /* 0x4B */ MPPEM,
      /* 0x4C */ undefined,   // TODO MPS
      /* 0x4D */ FLIPON,
      /* 0x4E */ undefined,   // TODO FLIPOFF
      /* 0x4F */ undefined,   // TODO DEBUG
      /* 0x50 */ LT,
      /* 0x51 */ LTEQ,
      /* 0x52 */ GT,
      /* 0x53 */ GTEQ,
      /* 0x54 */ EQ,
      /* 0x55 */ NEQ,
      /* 0x56 */ ODD,
      /* 0x57 */ EVEN,
      /* 0x58 */ IF,
      /* 0x59 */ EIF,
      /* 0x5A */ AND,
      /* 0x5B */ OR,
      /* 0x5C */ NOT,
      /* 0x5D */ DELTAP123.bind(undefined, 1),
      /* 0x5E */ SDB,
      /* 0x5F */ SDS,
      /* 0x60 */ ADD,
      /* 0x61 */ SUB,
      /* 0x62 */ DIV,
      /* 0x63 */ MUL,
      /* 0x64 */ ABS,
      /* 0x65 */ NEG,
      /* 0x66 */ FLOOR,
      /* 0x67 */ CEILING,
      /* 0x68 */ ROUND.bind(undefined, 0),
      /* 0x69 */ ROUND.bind(undefined, 1),
      /* 0x6A */ ROUND.bind(undefined, 2),
      /* 0x6B */ ROUND.bind(undefined, 3),
      /* 0x6C */ undefined,   // TODO NROUND[ab]
      /* 0x6D */ undefined,   // TODO NROUND[ab]
      /* 0x6E */ undefined,   // TODO NROUND[ab]
      /* 0x6F */ undefined,   // TODO NROUND[ab]
      /* 0x70 */ WCVTF,
      /* 0x71 */ DELTAP123.bind(undefined, 2),
      /* 0x72 */ DELTAP123.bind(undefined, 3),
      /* 0x73 */ DELTAC123.bind(undefined, 1),
      /* 0x74 */ DELTAC123.bind(undefined, 2),
      /* 0x75 */ DELTAC123.bind(undefined, 3),
      /* 0x76 */ SROUND,
      /* 0x77 */ S45ROUND,
      /* 0x78 */ undefined,   // TODO JROT[]
      /* 0x79 */ undefined,   // TODO JROF[]
      /* 0x7A */ ROFF,
      /* 0x7B */ undefined,
      /* 0x7C */ RUTG,
      /* 0x7D */ RDTG,
      /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though
      /* 0x7F */ POP, // actually AA, supposed to do only a pop though
      /* 0x80 */ undefined,   // TODO FLIPPT
      /* 0x81 */ undefined,   // TODO FLIPRGON
      /* 0x82 */ undefined,   // TODO FLIPRGOFF
      /* 0x83 */ undefined,
      /* 0x84 */ undefined,
      /* 0x85 */ SCANCTRL,
      /* 0x86 */ SDPVTL.bind(undefined, 0),
      /* 0x87 */ SDPVTL.bind(undefined, 1),
      /* 0x88 */ GETINFO,
      /* 0x89 */ undefined,   // TODO IDEF
      /* 0x8A */ ROLL,
      /* 0x8B */ MAX,
      /* 0x8C */ MIN,
      /* 0x8D */ SCANTYPE,
      /* 0x8E */ INSTCTRL,
      /* 0x8F */ undefined,
      /* 0x90 */ undefined,
      /* 0x91 */ undefined,
      /* 0x92 */ undefined,
      /* 0x93 */ undefined,
      /* 0x94 */ undefined,
      /* 0x95 */ undefined,
      /* 0x96 */ undefined,
      /* 0x97 */ undefined,
      /* 0x98 */ undefined,
      /* 0x99 */ undefined,
      /* 0x9A */ undefined,
      /* 0x9B */ undefined,
      /* 0x9C */ undefined,
      /* 0x9D */ undefined,
      /* 0x9E */ undefined,
      /* 0x9F */ undefined,
      /* 0xA0 */ undefined,
      /* 0xA1 */ undefined,
      /* 0xA2 */ undefined,
      /* 0xA3 */ undefined,
      /* 0xA4 */ undefined,
      /* 0xA5 */ undefined,
      /* 0xA6 */ undefined,
      /* 0xA7 */ undefined,
      /* 0xA8 */ undefined,
      /* 0xA9 */ undefined,
      /* 0xAA */ undefined,
      /* 0xAB */ undefined,
      /* 0xAC */ undefined,
      /* 0xAD */ undefined,
      /* 0xAE */ undefined,
      /* 0xAF */ undefined,
      /* 0xB0 */ PUSHB.bind(undefined, 1),
      /* 0xB1 */ PUSHB.bind(undefined, 2),
      /* 0xB2 */ PUSHB.bind(undefined, 3),
      /* 0xB3 */ PUSHB.bind(undefined, 4),
      /* 0xB4 */ PUSHB.bind(undefined, 5),
      /* 0xB5 */ PUSHB.bind(undefined, 6),
      /* 0xB6 */ PUSHB.bind(undefined, 7),
      /* 0xB7 */ PUSHB.bind(undefined, 8),
      /* 0xB8 */ PUSHW.bind(undefined, 1),
      /* 0xB9 */ PUSHW.bind(undefined, 2),
      /* 0xBA */ PUSHW.bind(undefined, 3),
      /* 0xBB */ PUSHW.bind(undefined, 4),
      /* 0xBC */ PUSHW.bind(undefined, 5),
      /* 0xBD */ PUSHW.bind(undefined, 6),
      /* 0xBE */ PUSHW.bind(undefined, 7),
      /* 0xBF */ PUSHW.bind(undefined, 8),
      /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),
      /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),
      /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),
      /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),
      /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),
      /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),
      /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),
      /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),
      /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),
      /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),
      /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),
      /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),
      /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),
      /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),
      /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),
      /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),
      /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),
      /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),
      /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),
      /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),
      /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),
      /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),
      /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),
      /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),
      /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),
      /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),
      /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),
      /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),
      /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),
      /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),
      /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),
      /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),
      /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),
      /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),
      /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),
      /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),
      /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),
      /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),
      /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),
      /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),
      /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),
      /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),
      /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),
      /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),
      /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),
      /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),
      /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),
      /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),
      /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),
      /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),
      /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),
      /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),
      /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),
      /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),
      /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),
      /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),
      /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),
      /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),
      /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),
      /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),
      /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),
      /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),
      /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),
      /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)
  ];

  /*****************************
    Mathematical Considerations
  ******************************

  fv ... refers to freedom vector
  pv ... refers to projection vector
  rp ... refers to reference point
  p  ... refers to to point being operated on
  d  ... refers to distance

  SETRELATIVE:
  ============

  case freedom vector == x-axis:
  ------------------------------

                          (pv)
                       .-'
                rpd .-'
                 .-*
            d .-'90°'
           .-'       '
        .-'           '
     *-'               ' b
    rp                  '
                         '
                          '
              p *----------*-------------- (fv)
                            pm

    rpdx = rpx + d * pv.x
    rpdy = rpy + d * pv.y

    equation of line b

     y - rpdy = pvns * (x- rpdx)

     y = p.y

     x = rpdx + ( p.y - rpdy ) / pvns


  case freedom vector == y-axis:
  ------------------------------

      * pm
      |\
      | \
      |  \
      |   \
      |    \
      |     \
      |      \
      |       \
      |        \
      |         \ b
      |          \
      |           \
      |            \    .-' (pv)
      |         90° \.-'
      |           .-'* rpd
      |        .-'
      *     *-'  d
      p     rp

    rpdx = rpx + d * pv.x
    rpdy = rpy + d * pv.y

    equation of line b:
             pvns ... normal slope to pv

     y - rpdy = pvns * (x - rpdx)

     x = p.x

     y = rpdy +  pvns * (p.x - rpdx)



  generic case:
  -------------


                                .'(fv)
                              .'
                            .* pm
                          .' !
                        .'    .
                      .'      !
                    .'         . b
                  .'           !
                 *              .
                p               !
                           90°   .    ... (pv)
                             ...-*-'''
                    ...---'''    rpd
           ...---'''   d
     *--'''
    rp

      rpdx = rpx + d * pv.x
      rpdy = rpy + d * pv.y

   equation of line b:
      pvns... normal slope to pv

      y - rpdy = pvns * (x - rpdx)

   equation of freedom vector line:
      fvs ... slope of freedom vector (=fy/fx)

      y - py = fvs * (x - px)


    on pm both equations are true for same x/y

      y - rpdy = pvns * (x - rpdx)

      y - py = fvs * (x - px)

    form to y and set equal:

      pvns * (x - rpdx) + rpdy = fvs * (x - px) + py

    expand:

      pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py

    switch:

      fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy

    solve for x:

      fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy



            fvs * px - pvns * rpdx + rpdy - py
      x =  -----------------------------------
                   fvs - pvns

    and:

      y = fvs * (x - px) + py



  INTERPOLATE:
  ============

  Examples of point interpolation.

  The weight of the movement of the reference point gets bigger
  the further the other reference point is away, thus the safest
  option (that is avoiding 0/0 divisions) is to weight the
  original distance of the other point by the sum of both distances.

  If the sum of both distances is 0, then move the point by the
  arithmetic average of the movement of both reference points.




             (+6)
      rp1o *---->*rp1
           .     .                          (+12)
           .     .                  rp2o *---------->* rp2
           .     .                       .           .
           .     .                       .           .
           .    10          20           .           .
           |.........|...................|           .
                 .   .                               .
                 .   . (+8)                          .
                  po *------>*p                      .
                 .           .                       .
                 .    12     .          24           .
                 |...........|.......................|
                                    36


  -------



             (+10)
      rp1o *-------->*rp1
           .         .                      (-10)
           .         .              rp2 *<---------* rpo2
           .         .                   .         .
           .         .                   .         .
           .    10   .          30       .         .
           |.........|.............................|
                     .                   .
                     . (+5)              .
                  po *--->* p            .
                     .    .              .
                     .    .   20         .
                     |....|..............|
                       5        15


  -------


             (+10)
      rp1o *-------->*rp1
           .         .
           .         .
      rp2o *-------->*rp2


                                 (+10)
                            po *-------->* p

  -------


             (+10)
      rp1o *-------->*rp1
           .         .
           .         .(+30)
      rp2o *---------------------------->*rp2


                                          (+25)
                            po *----------------------->* p



  vim: set ts=4 sw=4 expandtab:
  *****/

  /**
   * Converts a string into a list of tokens.
   */

  /**
   * Create a new token
   * @param {string} char a single char
   */
  function Token(char) {
      this.char = char;
      this.state = {};
      this.activeState = null;
  }

  /**
   * Create a new context range
   * @param {number} startIndex range start index
   * @param {number} endOffset range end index offset
   * @param {string} contextName owner context name
   */
  function ContextRange(startIndex, endOffset, contextName) {
      this.contextName = contextName;
      this.startIndex = startIndex;
      this.endOffset = endOffset;
  }

  /**
   * Check context start and end
   * @param {string} contextName a unique context name
   * @param {function} checkStart a predicate function the indicates a context's start
   * @param {function} checkEnd a predicate function the indicates a context's end
   */
  function ContextChecker(contextName, checkStart, checkEnd) {
      this.contextName = contextName;
      this.openRange = null;
      this.ranges = [];
      this.checkStart = checkStart;
      this.checkEnd = checkEnd;
  }

  /**
   * Create a context params
   * @param {array} context a list of items
   * @param {number} currentIndex current item index
   */
  function ContextParams(context, currentIndex) {
      this.context = context;
      this.index = currentIndex;
      this.length = context.length;
      this.current = context[currentIndex];
      this.backtrack = context.slice(0, currentIndex);
      this.lookahead = context.slice(currentIndex + 1);
  }

  /**
   * Create an event instance
   * @param {string} eventId event unique id
   */
  function Event(eventId) {
      this.eventId = eventId;
      this.subscribers = [];
  }

  /**
   * Initialize a core events and auto subscribe required event handlers
   * @param {any} events an object that enlists core events handlers
   */
  function initializeCoreEvents(events) {
      const coreEvents = [
          'start', 'end', 'next', 'newToken', 'contextStart',
          'contextEnd', 'insertToken', 'removeToken', 'removeRange',
          'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'
      ];

      coreEvents.forEach(eventId => {
          Object.defineProperty(this.events, eventId, {
              value: new Event(eventId)
          });
      });

      if (!!events) {
          coreEvents.forEach(eventId => {
              const event = events[eventId];
              if (typeof event === 'function') {
                  this.events[eventId].subscribe(event);
              }
          });
      }
      const requiresContextUpdate = [
          'insertToken', 'removeToken', 'removeRange',
          'replaceToken', 'replaceRange', 'composeRUD'
      ];
      requiresContextUpdate.forEach(eventId => {
          this.events[eventId].subscribe(
              this.updateContextsRanges
          );
      });
  }

  /**
   * Converts a string into a list of tokens
   * @param {any} events tokenizer core events
   */
  function Tokenizer(events) {
      this.tokens = [];
      this.registeredContexts = {};
      this.contextCheckers = [];
      this.events = {};
      this.registeredModifiers = [];

      initializeCoreEvents.call(this, events);
  }

  /**
   * Sets the state of a token, usually called by a state modifier.
   * @param {string} key state item key
   * @param {any} value state item value
   */
  Token.prototype.setState = function(key, value) {
      this.state[key] = value;
      this.activeState = { key, value: this.state[key] };
      return this.activeState;
  };

  Token.prototype.getState = function (stateId) {
      return this.state[stateId] || null;
  };

  /**
   * Checks if an index exists in the tokens list.
   * @param {number} index token index
   */
  Tokenizer.prototype.inboundIndex = function(index) {
      return index >= 0 && index < this.tokens.length;
  };

  /**
   * Compose and apply a list of operations (replace, update, delete)
   * @param {array} RUDs replace, update and delete operations
   * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)
   */
  Tokenizer.prototype.composeRUD = function (RUDs) {
      const silent = true;
      const state = RUDs.map(RUD => (
          this[RUD[0]].apply(this, RUD.slice(1).concat(silent))
      ));
      const hasFAILObject = obj => (
          typeof obj === 'object' &&
          obj.hasOwnProperty('FAIL')
      );
      if (state.every(hasFAILObject)) {
          return {
              FAIL: `composeRUD: one or more operations hasn't completed successfully`,
              report: state.filter(hasFAILObject)
          };
      }
      this.dispatch('composeRUD', [state.filter(op => !hasFAILObject(op))]);
  };

  /**
   * Replace a range of tokens with a list of tokens
   * @param {number} startIndex range start index
   * @param {number} offset range offset
   * @param {token} tokens a list of tokens to replace
   * @param {boolean} silent dispatch events and update context ranges
   */
  Tokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {
      offset = offset !== null ? offset : this.tokens.length;
      const isTokenType = tokens.every(token => token instanceof Token);
      if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {
          const replaced = this.tokens.splice.apply(
              this.tokens, [startIndex, offset].concat(tokens)
          );
          if (!silent) this.dispatch('replaceToken', [startIndex, offset, tokens]);
          return [replaced, tokens];
      } else {
          return { FAIL: 'replaceRange: invalid tokens or startIndex.' };
      }
  };

  /**
   * Replace a token with another token
   * @param {number} index token index
   * @param {token} token a token to replace
   * @param {boolean} silent dispatch events and update context ranges
   */
  Tokenizer.prototype.replaceToken = function (index, token, silent) {
      if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {
          const replaced = this.tokens.splice(index, 1, token);
          if (!silent) this.dispatch('replaceToken', [index, token]);
          return [replaced[0], token];
      } else {
          return { FAIL: 'replaceToken: invalid token or index.' };
      }
  };

  /**
   * Removes a range of tokens
   * @param {number} startIndex range start index
   * @param {number} offset range offset
   * @param {boolean} silent dispatch events and update context ranges
   */
  Tokenizer.prototype.removeRange = function(startIndex, offset, silent) {
      offset = !isNaN(offset) ? offset : this.tokens.length;
      const tokens = this.tokens.splice(startIndex, offset);
      if (!silent) this.dispatch('removeRange', [tokens, startIndex, offset]);
      return tokens;
  };

  /**
   * Remove a token at a certain index
   * @param {number} index token index
   * @param {boolean} silent dispatch events and update context ranges
   */
  Tokenizer.prototype.removeToken = function(index, silent) {
      if (!isNaN(index) && this.inboundIndex(index)) {
          const token = this.tokens.splice(index, 1);
          if (!silent) this.dispatch('removeToken', [token, index]);
          return token;
      } else {
          return { FAIL: 'removeToken: invalid token index.' };
      }
  };

  /**
   * Insert a list of tokens at a certain index
   * @param {array} tokens a list of tokens to insert
   * @param {number} index insert the list of tokens at index
   * @param {boolean} silent dispatch events and update context ranges
   */
  Tokenizer.prototype.insertToken = function (tokens, index, silent) {
      const tokenType = tokens.every(
          token => token instanceof Token
      );
      if (tokenType) {
          this.tokens.splice.apply(
              this.tokens, [index, 0].concat(tokens)
          );
          if (!silent) this.dispatch('insertToken', [tokens, index]);
          return tokens;
      } else {
          return { FAIL: 'insertToken: invalid token(s).' };
      }
  };

  /**
   * A state modifier that is called on 'newToken' event
   * @param {string} modifierId state modifier id
   * @param {function} condition a predicate function that returns true or false
   * @param {function} modifier a function to update token state
   */
  Tokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {
      this.events.newToken.subscribe(function(token, contextParams) {
          const conditionParams = [token, contextParams];
          const canApplyModifier = (
              condition === null ||
              condition.apply(this, conditionParams) === true
          );
          const modifierParams = [token, contextParams];
          if (canApplyModifier) {
              let newStateValue = modifier.apply(this, modifierParams);
              token.setState(modifierId, newStateValue);
          }
      });
      this.registeredModifiers.push(modifierId);
  };

  /**
   * Subscribe a handler to an event
   * @param {function} eventHandler an event handler function
   */
  Event.prototype.subscribe = function (eventHandler) {
      if (typeof eventHandler === 'function') {
          return ((this.subscribers.push(eventHandler)) - 1);
      } else {
          return { FAIL: `invalid '${this.eventId}' event handler`};
      }
  };

  /**
   * Unsubscribe an event handler
   * @param {string} subsId subscription id
   */
  Event.prototype.unsubscribe = function (subsId) {
      this.subscribers.splice(subsId, 1);
  };

  /**
   * Sets context params current value index
   * @param {number} index context params current value index
   */
  ContextParams.prototype.setCurrentIndex = function(index) {
      this.index = index;
      this.current = this.context[index];
      this.backtrack = this.context.slice(0, index);
      this.lookahead = this.context.slice(index + 1);
  };

  /**
   * Get an item at an offset from the current value
   * example (current value is 3):
   *  1    2   [3]   4    5   |   items values
   * -2   -1    0    1    2   |   offset values
   * @param {number} offset an offset from current value index
   */
  ContextParams.prototype.get = function (offset) {
      switch (true) {
          case (offset === 0):
              return this.current;
          case (offset < 0 && Math.abs(offset) <= this.backtrack.length):
              return this.backtrack.slice(offset)[0];
          case (offset > 0 && offset <= this.lookahead.length):
              return this.lookahead[offset - 1];
          default:
              return null;
      }
  };

  /**
   * Converts a context range into a string value
   * @param {contextRange} range a context range
   */
  Tokenizer.prototype.rangeToText = function (range) {
      if (range instanceof ContextRange) {
          return (
              this.getRangeTokens(range)
                  .map(token => token.char).join('')
          );
      }
  };

  /**
   * Converts all tokens into a string
   */
  Tokenizer.prototype.getText = function () {
      return this.tokens.map(token => token.char).join('');
  };

  /**
   * Get a context by name
   * @param {string} contextName context name to get
   */
  Tokenizer.prototype.getContext = function (contextName) {
      let context = this.registeredContexts[contextName];
      return !!context ? context : null;
  };

  /**
   * Subscribes a new event handler to an event
   * @param {string} eventName event name to subscribe to
   * @param {function} eventHandler a function to be invoked on event
   */
  Tokenizer.prototype.on = function(eventName, eventHandler) {
      const event = this.events[eventName];
      if (!!event) {
          return event.subscribe(eventHandler);
      } else {
          return null;
      }
  };

  /**
   * Dispatches an event
   * @param {string} eventName event name
   * @param {any} args event handler arguments
   */
  Tokenizer.prototype.dispatch = function(eventName, args) {
      const event = this.events[eventName];
      if (event instanceof Event) {
          event.subscribers.forEach(subscriber => {
              subscriber.apply(this, args || []);
          });
      }
  };

  /**
   * Register a new context checker
   * @param {string} contextName a unique context name
   * @param {function} contextStartCheck a predicate function that returns true on context start
   * @param {function} contextEndCheck  a predicate function that returns true on context end
   * TODO: call tokenize on registration to update context ranges with the new context.
   */
  Tokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {
      if (!!this.getContext(contextName)) return {
          FAIL:
          `context name '${contextName}' is already registered.`
      };
      if (typeof contextStartCheck !== 'function') return {
          FAIL:
          `missing context start check.`
      };
      if (typeof contextEndCheck !== 'function') return {
          FAIL:
          `missing context end check.`
      };
      const contextCheckers = new ContextChecker(
          contextName, contextStartCheck, contextEndCheck
      );
      this.registeredContexts[contextName] = contextCheckers;
      this.contextCheckers.push(contextCheckers);
      return contextCheckers;
  };

  /**
   * Gets a context range tokens
   * @param {contextRange} range a context range
   */
  Tokenizer.prototype.getRangeTokens = function(range) {
      const endIndex = range.startIndex + range.endOffset;
      return [].concat(
          this.tokens
              .slice(range.startIndex, endIndex)
      );
  };

  /**
   * Gets the ranges of a context
   * @param {string} contextName context name
   */
  Tokenizer.prototype.getContextRanges = function(contextName) {
      const context = this.getContext(contextName);
      if (!!context) {
          return context.ranges;
      } else {
          return { FAIL: `context checker '${contextName}' is not registered.` };
      }
  };

  /**
   * Resets context ranges to run context update
   */
  Tokenizer.prototype.resetContextsRanges = function () {
      const registeredContexts = this.registeredContexts;
      for (const contextName in registeredContexts) {
          if (registeredContexts.hasOwnProperty(contextName)) {
              const context = registeredContexts[contextName];
              context.ranges = [];
          }
      }
  };

  /**
   * Updates context ranges
   */
  Tokenizer.prototype.updateContextsRanges = function () {
      this.resetContextsRanges();
      const chars = this.tokens.map(token => token.char);
      for (let i = 0; i < chars.length; i++) {
          const contextParams = new ContextParams(chars, i);
          this.runContextCheck(contextParams);
      }
      this.dispatch('updateContextsRanges', [this.registeredContexts]);
  };

  /**
   * Sets the end offset of an open range
   * @param {number} offset range end offset
   * @param {string} contextName context name
   */
  Tokenizer.prototype.setEndOffset = function (offset, contextName) {
      const startIndex = this.getContext(contextName).openRange.startIndex;
      let range = new ContextRange(startIndex, offset, contextName);
      const ranges = this.getContext(contextName).ranges;
      range.rangeId = `${contextName}.${ranges.length}`;
      ranges.push(range);
      this.getContext(contextName).openRange = null;
      return range;
  };

  /**
   * Runs a context check on the current context
   * @param {contextParams} contextParams current context params
   */
  Tokenizer.prototype.runContextCheck = function(contextParams) {
      const index = contextParams.index;
      this.contextCheckers.forEach(contextChecker => {
          let contextName = contextChecker.contextName;
          let openRange = this.getContext(contextName).openRange;
          if (!openRange && contextChecker.checkStart(contextParams)) {
              openRange = new ContextRange(index, null, contextName);
              this.getContext(contextName).openRange = openRange;
              this.dispatch('contextStart', [contextName, index]);
          }
          if (!!openRange && contextChecker.checkEnd(contextParams)) {
              const offset = (index - openRange.startIndex) + 1;
              const range = this.setEndOffset(offset, contextName);
              this.dispatch('contextEnd', [contextName, range]);
          }
      });
  };

  /**
   * Converts a text into a list of tokens
   * @param {string} text a text to tokenize
   */
  Tokenizer.prototype.tokenize = function (text) {
      this.tokens = [];
      this.resetContextsRanges();
      let chars = Array.from(text);
      this.dispatch('start');
      for (let i = 0; i < chars.length; i++) {
          const char = chars[i];
          const contextParams = new ContextParams(chars, i);
          this.dispatch('next', [contextParams]);
          this.runContextCheck(contextParams);
          let token = new Token(char);
          this.tokens.push(token);
          this.dispatch('newToken', [token, contextParams]);
      }
      this.dispatch('end', [this.tokens]);
      return this.tokens;
  };

  // ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮
  // ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊
  // ╰─╾──────────────────────────┄─────────────────────────────────────────────╯
  // jscs:disable maximumLineLength
  /**
   * Check if a char is Arabic
   * @param {string} c a single char
   */
  function isArabicChar(c) {
      return /[\u0600-\u065F\u066A-\u06D2\u06FA-\u06FF]/.test(c);
  }

  /**
   * Check if a char is an isolated arabic char
   * @param {string} c a single char
   */
  function isIsolatedArabicChar(char) {
      return /[\u0630\u0690\u0621\u0631\u0661\u0671\u0622\u0632\u0672\u0692\u06C2\u0623\u0673\u0693\u06C3\u0624\u0694\u06C4\u0625\u0675\u0695\u06C5\u06E5\u0676\u0696\u06C6\u0627\u0677\u0697\u06C7\u0648\u0688\u0698\u06C8\u0689\u0699\u06C9\u068A\u06CA\u066B\u068B\u06CB\u068C\u068D\u06CD\u06FD\u068E\u06EE\u06FE\u062F\u068F\u06CF\u06EF]/.test(char);
  }

  /**
   * Check if a char is an Arabic Tashkeel char
   * @param {string} c a single char
   */
  function isTashkeelArabicChar(char) {
      return /[\u0600-\u0605\u060C-\u060E\u0610-\u061B\u061E\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/.test(char);
  }

  /**
   * Check if a char is whitespace char
   * @param {string} c a single char
   */
  function isWhiteSpace(c) {
      return /\s/.test(c);
  }

  /**
   * Arabic word context checkers
   */

  function arabicWordStartCheck(contextParams) {
      const char = contextParams.current;
      const prevChar = contextParams.get(-1);
      return (
          // ? arabic first char
          (prevChar === null && isArabicChar(char)) ||
          // ? arabic char preceded with a non arabic char
          (!isArabicChar(prevChar) && isArabicChar(char))
      );
  }

  function arabicWordEndCheck(contextParams) {
      const nextChar = contextParams.get(1);
      return (
          // ? last arabic char
          (nextChar === null) ||
          // ? next char is not arabic
          (!isArabicChar(nextChar))
      );
  }
  var arabicWordCheck = { arabicWordStartCheck, arabicWordEndCheck };

  /**
   * Arabic sentence context checkers
   */

  function arabicSentenceStartCheck(contextParams) {
      const char = contextParams.current;
      const prevChar = contextParams.get(-1);
      return (
          // ? an arabic char preceded with a non arabic char
          (isArabicChar(char) || isTashkeelArabicChar(char)) &&
          !isArabicChar(prevChar)
      );
  }

  function arabicSentenceEndCheck(contextParams) {
      const nextChar = contextParams.get(1);
      switch (true) {
          case nextChar === null:
              return true;
          case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):
              const nextIsWhitespace = isWhiteSpace(nextChar);
              if (!nextIsWhitespace) return true;
              if (nextIsWhitespace) {
                  let arabicCharAhead = false;
                  arabicCharAhead = (
                      contextParams.lookahead.some(
                          c => isArabicChar(c) || isTashkeelArabicChar(c)
                      )
                  );
                  if (!arabicCharAhead) return true;
              }
              break;
          default:
              return false;
      }
  }
  var arabicSentenceCheck = { arabicSentenceStartCheck, arabicSentenceEndCheck };

  /**
   * Apply Arabic presentation forms to a range of tokens
   */
  /**
   * Check if a char can be connected to it's preceding char
   * @param {ContextParams} charContextParams context params of a char
   */
  function willConnectPrev(charContextParams) {
      let backtrack = [].concat(charContextParams.backtrack);
      for (let i = backtrack.length - 1; i >= 0; i--) {
          const prevChar = backtrack[i];
          const isolated = isIsolatedArabicChar(prevChar);
          const tashkeel = isTashkeelArabicChar(prevChar);
          if (!isolated && !tashkeel) return true;
          if (isolated) return false;
      }
      return false;
  }

  /**
   * Check if a char can be connected to it's proceeding char
   * @param {ContextParams} charContextParams context params of a char
   */
  function willConnectNext(charContextParams) {
      if (isIsolatedArabicChar(charContextParams.current)) return false;
      for (let i = 0; i < charContextParams.lookahead.length; i++) {
          const nextChar = charContextParams.lookahead[i];
          const tashkeel = isTashkeelArabicChar(nextChar);
          if (!tashkeel) return true;
      }
      return false;
  }

  /**
   * Apply arabic presentation forms to a list of tokens
   * @param {ContextRange} range a range of tokens
   */
  function arabicPresentationForms(range) {
      const features = this.features.arab;
      const rangeTokens = this.tokenizer.getRangeTokens(range);
      if (rangeTokens.length === 1) return;
      const getSubstitutionIndex = substitution => (
          substitution.length === 1 &&
          substitution[0].id === 12 &&
          substitution[0].substitution
      );
      const applyForm = (tag, token, params) => {
          if (!features.hasOwnProperty(tag)) return;
          let substitution = features[tag].lookup(params) || null;
          let substIndex = getSubstitutionIndex(substitution)[0];
          if (substIndex >= 0) {
              return token.setState(tag, substIndex);
          }
      };
      const tokensParams = new ContextParams(rangeTokens, 0);
      const charContextParams = new ContextParams(rangeTokens.map(t=>t.char), 0);
      rangeTokens.forEach((token, i) => {
          if (isTashkeelArabicChar(token.char)) return;
          tokensParams.setCurrentIndex(i);
          charContextParams.setCurrentIndex(i);
          let CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)
          if (willConnectPrev(charContextParams)) CONNECT |= 1;
          if (willConnectNext(charContextParams)) CONNECT |= 2;
          switch (CONNECT) {
              case 0: // isolated * original form
                  return;
              case 1: // fina
                  applyForm('fina', token, tokensParams);
                  break;
              case 2: // init
                  applyForm('init', token, tokensParams);
                  break;
              case 3: // medi
                  applyForm('medi', token, tokensParams);
                  break;
          }
      });
  }

  /**
   * Apply Arabic required ligatures feature to a range of tokens
   */

  /**
   * Apply Arabic required ligatures to a context range
   * @param {ContextRange} range a range of tokens
   */
  function arabicRequiredLigatures(range) {
      const features = this.features.arab;
      if (!features.hasOwnProperty('rlig')) return;
      let tokens = this.tokenizer.getRangeTokens(range);
      for (let i = 0; i < tokens.length; i++) {
          const lookupParams = new ContextParams(tokens, i);
          let substitution = features.rlig.lookup(lookupParams) || null;
          const chainingContext = (
              substitution.length === 1 &&
              substitution[0].id === 63 &&
              substitution[0].substitution
          );
          const ligature = (
              substitution.length === 1 &&
              substitution[0].id === 41 &&
              substitution[0].substitution[0]
          );
          const token = tokens[i];
          if (!!ligature) {
              token.setState('rlig', [ligature.ligGlyph]);
              for (let c = 0; c < ligature.components.length; c++) {
                  const component = ligature.components[c];
                  const lookaheadToken = lookupParams.get(c + 1);
                  if (lookaheadToken.activeState.value === component) {
                      lookaheadToken.state.deleted = true;
                  }
              }
          } else if (chainingContext) {
              const substIndex = (
                  chainingContext &&
                  chainingContext.length === 1 &&
                  chainingContext[0].id === 12 &&
                  chainingContext[0].substitution
              );
              if (!!substIndex && substIndex >= 0) token.setState('rlig', substIndex);
          }
      }
  }

  /**
   * Infer bidirectional properties for a given text and apply
   * the corresponding layout rules.
   */

  /**
   * Create Bidi. features
   * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'
   */
  function Bidi(baseDir) {
      this.baseDir = baseDir || 'ltr';
      this.tokenizer = new Tokenizer();
      this.features = [];
  }

  /**
   * Sets Bidi text
   * @param {string} text a text input
   */
  Bidi.prototype.setText = function (text) {
      this.text = text;
  };

  /**
   * Store essential context checks:
   * arabic word check for applying gsub features
   * arabic sentence check for adjusting arabic layout
   */
  Bidi.prototype.contextChecks = ({
      arabicWordCheck,
      arabicSentenceCheck
  });

  /**
   * Register arabic word check
   */
  function registerArabicWordCheck() {
      const checks = this.contextChecks.arabicWordCheck;
      return this.tokenizer.registerContextChecker(
          'arabicWord',
          checks.arabicWordStartCheck,
          checks.arabicWordEndCheck
      );
  }

  /**
   * Register arabic sentence check
   */
  function registerArabicSentenceCheck() {
      const checks = this.contextChecks.arabicSentenceCheck;
      return this.tokenizer.registerContextChecker(
          'arabicSentence',
          checks.arabicSentenceStartCheck,
          checks.arabicSentenceEndCheck
      );
  }

  /**
   * Perform pre tokenization procedure then
   * tokenize text input
   */
  function tokenizeText() {
      registerArabicWordCheck.call(this);
      registerArabicSentenceCheck.call(this);
      return this.tokenizer.tokenize(this.text);
  }

  /**
   * Reverse arabic sentence layout
   * TODO: check base dir before applying adjustments - priority low
   */
  function reverseArabicSentences() {
      const ranges = this.tokenizer.getContextRanges('arabicSentence');
      ranges.forEach(range => {
          let rangeTokens = this.tokenizer.getRangeTokens(range);
          this.tokenizer.replaceRange(
              range.startIndex,
              range.endOffset,
              rangeTokens.reverse()
          );
      });
  }

  /**
   * Subscribe arabic presentation form features
   * @param {feature} feature a feature to apply
   */
  Bidi.prototype.subscribeArabicForms = function(feature) {
      this.tokenizer.events.contextEnd.subscribe(
          (contextName, range) => {
              if (contextName === 'arabicWord') {
                  return arabicPresentationForms.call(
                      this.tokenizer, range, feature
                  );
              }
          }
      );
  };

  /**
   * Apply Gsub features
   * @param {feature} features a list of features
   */
  Bidi.prototype.applyFeatures = function (features) {
      for (let i = 0; i < features.length; i++) {
          const feature = features[i];
          if (feature) {
              const script = feature.script;
              if (!this.features[script]) {
                  this.features[script] = {};
              }
              this.features[script][feature.tag] = feature;
          }
      }
  };

  /**
   * Register a state modifier
   * @param {string} modifierId state modifier id
   * @param {function} condition a predicate function that returns true or false
   * @param {function} modifier a modifier function to set token state
   */
  Bidi.prototype.registerModifier = function (modifierId, condition, modifier) {
      this.tokenizer.registerModifier(modifierId, condition, modifier);
  };

  /**
   * Check if 'glyphIndex' is registered
   */
  function checkGlyphIndexStatus() {
      if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {
          throw new Error(
              'glyphIndex modifier is required to apply ' +
              'arabic presentation features.'
          );
      }
  }

  /**
   * Apply arabic presentation forms features
   */
  function applyArabicPresentationForms() {
      if (!this.features.hasOwnProperty('arab')) return;
      checkGlyphIndexStatus.call(this);
      const ranges = this.tokenizer.getContextRanges('arabicWord');
      ranges.forEach(range => {
          arabicPresentationForms.call(this, range);
      });
  }

  /**
   * Apply required arabic ligatures
   */
  function applyArabicRequireLigatures() {
      if (!this.features.hasOwnProperty('arab')) return;
      if (!this.features.arab.hasOwnProperty('rlig')) return;
      checkGlyphIndexStatus.call(this);
      const ranges = this.tokenizer.getContextRanges('arabicWord');
      ranges.forEach(range => {
          arabicRequiredLigatures.call(this, range);
      });
  }

  /**
   * process text input
   * @param {string} text an input text
   */
  Bidi.prototype.processText = function(text) {
      if (!this.text || this.text !== text) {
          this.setText(text);
          tokenizeText.call(this);
          applyArabicPresentationForms.call(this);
          applyArabicRequireLigatures.call(this);
          reverseArabicSentences.call(this);
      }
  };

  /**
   * Process a string of text to identify and adjust
   * bidirectional text entities.
   * @param {string} text input text
   */
  Bidi.prototype.getBidiText = function (text) {
      this.processText(text);
      return this.tokenizer.getText();
  };

  /**
   * Get the current state index of each token
   * @param {text} text an input text
   */
  Bidi.prototype.getTextGlyphs = function (text) {
      this.processText(text);
      let indexes = [];
      for (let i = 0; i < this.tokenizer.tokens.length; i++) {
          const token = this.tokenizer.tokens[i];
          if (token.state.deleted) continue;
          const index = token.activeState.value;
          indexes.push(Array.isArray(index) ? index[0] : index);
      }
      return indexes;
  };

  /**
   * Query a feature by some of it's properties to lookup a glyph substitution.
   */

  // DEFAULT TEXT BASE DIRECTION
  let BASE_DIR = 'ltr';

  /**
   * Create feature query instance
   * @param {Font} font opentype font instance
   * @param {string} baseDir text base direction
   */
  function FeatureQuery(font, baseDir) {
      this.font = font;
      this.features = {};
      BASE_DIR = !!baseDir ? baseDir : BASE_DIR;
  }

  /**
   * Create a new feature lookup
   * @param {string} tag feature tag
   * @param {feature} feature reference to feature at gsub table
   * @param {FeatureLookups} feature lookups associated with this feature
   * @param {string} script gsub script tag
   */
  function Feature(tag, feature, featureLookups, script) {
      this.tag = tag;
      this.featureRef = feature;
      this.lookups = featureLookups.lookups;
      this.script = script;
  }

  /**
   * Create a coverage table lookup
   * @param {any} coverageTable gsub coverage table
   */
  function Coverage$1(coverageTable) {
      this.table = coverageTable;
  }

  /**
   * Create a ligature set lookup
   * @param {any} ligatureSets gsub ligature set
   */
  function LigatureSets(ligatureSets) {
      this.ligatureSets = ligatureSets;
  }

  /**
   * Lookup a glyph ligature
   * @param {ContextParams} contextParams context params to lookup
   * @param {number} ligSetIndex ligature set index at ligature sets
   */
  LigatureSets.prototype.lookup = function (contextParams, ligSetIndex) {
      const ligatureSet = this.ligatureSets[ligSetIndex];
      const matchComponents = (components, indexes) => {
          if (components.length > indexes.length) return null;
          for (let c = 0; c < components.length; c++) {
              const component = components[c];
              const index = indexes[c];
              if (component !== index) return false;
          }
          return true;
      };
      for (let s = 0; s < ligatureSet.length; s++) {
          const ligSetItem = ligatureSet[s];
          const lookaheadIndexes = contextParams.lookahead.map(
              token => token.activeState.value
          );
          if (BASE_DIR === 'rtl') lookaheadIndexes.reverse();
          const componentsMatch = matchComponents(
              ligSetItem.components, lookaheadIndexes
          );
          if (componentsMatch) return ligSetItem;
      }
      return null;
  };

  /**
   * Create a feature substitution
   * @param {any} lookups a reference to gsub lookups
   * @param {Lookuptable} lookupTable a feature lookup table
   * @param {any} subtable substitution table
   */
  function Substitution$1(lookups, lookupTable, subtable) {
      this.lookups = lookups;
      this.subtable = subtable;
      this.lookupTable = lookupTable;
      if (subtable.hasOwnProperty('coverage')) {
          this.coverage = new Coverage$1(
              subtable.coverage
          );
      }
      if (subtable.hasOwnProperty('inputCoverage')) {
          this.inputCoverage = subtable.inputCoverage.map(
              table => new Coverage$1(table)
          );
      }
      if (subtable.hasOwnProperty('backtrackCoverage')) {
          this.backtrackCoverage = subtable.backtrackCoverage.map(
              table => new Coverage$1(table)
          );
      }
      if (subtable.hasOwnProperty('lookaheadCoverage')) {
          this.lookaheadCoverage = subtable.lookaheadCoverage.map(
              table => new Coverage$1(table)
          );
      }
      if (subtable.hasOwnProperty('ligatureSets')) {
          this.ligatureSets = new LigatureSets(subtable.ligatureSets);
      }
  }

  /**
   * Create a lookup table lookup
   * @param {number} index table index at gsub lookups
   * @param {any} lookups a reference to gsub lookups
   */
  function LookupTable(index, lookups) {
      this.index = index;
      this.subtables = lookups[index].subtables.map(
          subtable => new Substitution$1(
              lookups, lookups[index], subtable
          )
      );
  }

  function FeatureLookups(lookups, lookupListIndexes) {
      this.lookups = lookupListIndexes.map(
          index => new LookupTable(index, lookups)
      );
  }

  /**
   * Lookup a lookup table subtables
   * @param {ContextParams} contextParams context params to lookup
   */
  LookupTable.prototype.lookup = function (contextParams) {
      let substitutions = [];
      for (let i = 0; i < this.subtables.length; i++) {
          const subsTable = this.subtables[i];
          let substitution = subsTable.lookup(contextParams);
          if (substitution !== null || substitution.length) {
              substitutions = substitutions.concat(substitution);
          }
      }
      return substitutions;
  };

  /**
   * Handle a single substitution - format 2
   * @param {ContextParams} contextParams context params to lookup
   */
  function singleSubstitutionFormat2(contextParams) {
      let glyphIndex = contextParams.current.activeState.value;
      glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;
      let substituteIndex = this.coverage.lookup(glyphIndex);
      if (substituteIndex === -1) return [];
      return [this.subtable.substitute[substituteIndex]];
  }

  /**
   * Lookup a list of coverage tables
   * @param {any} coverageList a list of coverage tables
   * @param {any} contextParams context params to lookup
   */
  function lookupCoverageList(coverageList, contextParams) {
      let lookupList = [];
      for (let i = 0; i < coverageList.length; i++) {
          const coverage = coverageList[i];
          let glyphIndex = contextParams.current.activeState.value;
          glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;
          const lookupIndex = coverage.lookup(glyphIndex);
          if (lookupIndex !== -1) {
              lookupList.push(lookupIndex);
          }
      }
      if (lookupList.length !== coverageList.length) return -1;
      return lookupList;
  }

  /**
   * Handle chaining context substitution - format 3
   * @param {any} contextParams context params to lookup
   */
  function chainingSubstitutionFormat3(contextParams) {
      const lookupsCount = (
          this.inputCoverage.length +
          this.lookaheadCoverage.length +
          this.backtrackCoverage.length
      );
      if (contextParams.context.length < lookupsCount) return [];
      // INPUT LOOKUP //
      let inputLookups = lookupCoverageList(
          this.inputCoverage, contextParams
      );
      if (inputLookups === -1) return [];
      // LOOKAHEAD LOOKUP //
      const lookaheadOffset = this.inputCoverage.length - 1;
      if (contextParams.lookahead.length < this.lookaheadCoverage.length) return [];
      let lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);
      while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {
          lookaheadContext.shift();
      }
      const lookaheadParams = new ContextParams(lookaheadContext, 0);
      let lookaheadLookups = lookupCoverageList(
          this.lookaheadCoverage, lookaheadParams
      );
      // BACKTRACK LOOKUP //
      let backtrackContext = [].concat(contextParams.backtrack);
      backtrackContext.reverse();
      while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {
          backtrackContext.shift();
      }
      if (backtrackContext.length < this.backtrackCoverage.length) return [];
      const backtrackParams = new ContextParams(backtrackContext, 0);
      let backtrackLookups = lookupCoverageList(
          this.backtrackCoverage, backtrackParams
      );
      const contextRulesMatch = (
          inputLookups.length === this.inputCoverage.length &&
          lookaheadLookups.length === this.lookaheadCoverage.length &&
          backtrackLookups.length === this.backtrackCoverage.length
      );
      let substitutions = [];
      if (contextRulesMatch) {
          let lookupRecords = this.subtable.lookupRecords;
          for (let i = 0; i < lookupRecords.length; i++) {
              const lookupRecord = lookupRecords[i];
              for (let j = 0; j < inputLookups.length; j++) {
                  const inputContext = new ContextParams([contextParams.get(j)], 0);
                  let lookupIndex = lookupRecord.lookupListIndex;
                  const lookupTable = new LookupTable(lookupIndex, this.lookups);
                  let lookup = lookupTable.lookup(inputContext);
                  substitutions = substitutions.concat(lookup);
              }
          }
      }
      return substitutions;
  }

  /**
   * Handle ligature substitution - format 1
   * @param {any} contextParams context params to lookup
   */
  function ligatureSubstitutionFormat1(contextParams) {
      // COVERAGE LOOKUP //
      let glyphIndex = contextParams.current.activeState.value;
      let ligSetIndex = this.coverage.lookup(glyphIndex);
      if (ligSetIndex === -1) return [];
      // COMPONENTS LOOKUP * note that components is logically ordered
      let ligGlyphs = this.ligatureSets.lookup(contextParams, ligSetIndex);
      return ligGlyphs ? [ligGlyphs] : [];
  }

  /**
   * [ LOOKUP TYPES ]
   * -------------------------------
   * Single                        1;
   * Multiple                      2;
   * Alternate                     3;
   * Ligature                      4;
   * Context                       5;
   * ChainingContext               6;
   * ExtensionSubstitution         7;
   * ReverseChainingContext        8;
   * -------------------------------
   * @param {any} contextParams context params to lookup
   */
  Substitution$1.prototype.lookup = function (contextParams) {
      const substitutions = [];
      const lookupType = this.lookupTable.lookupType;
      const substFormat = this.subtable.substFormat;
      if (lookupType === 1 && substFormat === 2) {
          let substitution = singleSubstitutionFormat2.call(this, contextParams);
          if (substitution.length > 0) {
              substitutions.push({ id: 12, substitution });
          }
      }
      if (lookupType === 6 && substFormat === 3) {
          const substitution = chainingSubstitutionFormat3.call(this, contextParams);
          if (substitution.length > 0) {
              substitutions.push({ id: 63, substitution });
          }
      }
      if (lookupType === 4 && substFormat === 1) {
          const substitution = ligatureSubstitutionFormat1.call(this, contextParams);
          if (substitution.length > 0) {
              substitutions.push({ id: 41, substitution });
          }
      }
      return substitutions;
  };

  /**
   * Lookup a coverage table
   * @param {number} glyphIndex to lookup
   */
  Coverage$1.prototype.lookup = function (glyphIndex) {
      if (!glyphIndex) return -1;
      switch (this.table.format) {
          case 1:
              return this.table.glyphs.indexOf(glyphIndex);

          case 2:
              let ranges = this.table.ranges;
              for (let i = 0; i < ranges.length; i++) {
                  const range = ranges[i];
                  if (glyphIndex >= range.start && glyphIndex <= range.end) {
                      let offset = glyphIndex - range.start;
                      return range.index + offset;
                  }
              }
              break;
          default:
              return -1; // not found
      }
      return -1;
  };

  /**
   * Lookup a feature for a substitution or more
   * @param {any} contextParams context params to lookup
   */
  Feature.prototype.lookup = function(contextParams) {
      let lookups = [];
      for (let i = 0; i < this.lookups.length; i++) {
          const lookupTable = this.lookups[i];
          let lookup = lookupTable.lookup(contextParams);
          if (lookup !== null || lookup.length) {
              lookups = lookups.concat(lookup);
          }
      }
      return lookups;
  };

  /**
   * Get feature indexes of a specific script
   * @param {string} scriptTag script tag
   */
  FeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {
      if (!scriptTag) return [];
      const tables = this.font.tables;
      if (!tables.gsub) return [];
      const scripts = this.font.tables.gsub.scripts;
      for (let i = 0; i < scripts.length; i++) {
          const script = scripts[i];
          if (script.tag === scriptTag) {
              let defaultLangSys = script.script.defaultLangSys;
              return defaultLangSys.featureIndexes;
          } else {
              let langSysRecords = script.langSysRecords;
              if (!!langSysRecords) {
                  for (let j = 0; j < langSysRecords.length; j++) {
                      const langSysRecord = langSysRecords[j];
                      if (langSysRecord.tag === scriptTag) {
                          let langSys = langSysRecord.langSys;
                          return langSys.featureIndexes;
                      }
                  }
              }
          }
      }
      return [];
  };

  /**
   * Map a feature tag to a gsub feature
   * @param {any} features gsub features
   * @param {*} scriptTag script tag
   */
  FeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {
      let tags = {};
      for (let i = 0; i < features.length; i++) {
          const feature = features[i].feature;
          const tag = features[i].tag;
          const lookups = this.font.tables.gsub.lookups;
          const featureLookups = new FeatureLookups(lookups, feature.lookupListIndexes);
          tags[tag] = new Feature(tag, feature, featureLookups, scriptTag);
      }
      this.features[scriptTag].tags = tags;
  };

  /**
   * Get features of a specific script
   * @param {string} scriptTag script tag
   */
  FeatureQuery.prototype.getScriptFeatures = function (scriptTag) {
      let features = this.features[scriptTag];
      if (this.features.hasOwnProperty(scriptTag)) return features;
      const featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);
      if (!featuresIndexes) return null;
      const gsub = this.font.tables.gsub;
      features = featuresIndexes.map(index => gsub.features[index]);
      this.features[scriptTag] = features;
      this.mapTagsToFeatures(features, scriptTag);
      return features;
  };

  /**
   * Query a feature by it's properties
   * @param {any} query an object that describes the properties of a query
   */
  FeatureQuery.prototype.getFeature = function (query) {
      if (!this.font) return { FAIL: `No font was found`};
      if (!this.features.hasOwnProperty(query.script)) {
          this.getScriptFeatures(query.script);
      }
      return this.features[query.script].tags[query.tag] || null;
  };

  // The Font object

  /**
   * @typedef FontOptions
   * @type Object
   * @property {Boolean} empty - whether to create a new empty font
   * @property {string} familyName
   * @property {string} styleName
   * @property {string=} fullName
   * @property {string=} postScriptName
   * @property {string=} designer
   * @property {string=} designerURL
   * @property {string=} manufacturer
   * @property {string=} manufacturerURL
   * @property {string=} license
   * @property {string=} licenseURL
   * @property {string=} version
   * @property {string=} description
   * @property {string=} copyright
   * @property {string=} trademark
   * @property {Number} unitsPerEm
   * @property {Number} ascender
   * @property {Number} descender
   * @property {Number} createdTimestamp
   * @property {string=} weightClass
   * @property {string=} widthClass
   * @property {string=} fsSelection
   */

  /**
   * A Font represents a loaded OpenType font file.
   * It contains a set of glyphs and methods to draw text on a drawing context,
   * or to get a path representing the text.
   * @exports opentype.Font
   * @class
   * @param {FontOptions}
   * @constructor
   */
  function Font(options) {
      options = options || {};

      if (!options.empty) {
          // Check that we've provided the minimum set of names.
          checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');
          checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');
          checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');
          checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');
          checkArgument(options.descender, 'When creating a new Font object, descender is required.');
          checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');

          // OS X will complain if the names are empty, so we put a single space everywhere by default.
          this.names = {
              fontFamily: {en: options.familyName || ' '},
              fontSubfamily: {en: options.styleName || ' '},
              fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},
              // postScriptName may not contain any whitespace
              postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\s/g, '')},
              designer: {en: options.designer || ' '},
              designerURL: {en: options.designerURL || ' '},
              manufacturer: {en: options.manufacturer || ' '},
              manufacturerURL: {en: options.manufacturerURL || ' '},
              license: {en: options.license || ' '},
              licenseURL: {en: options.licenseURL || ' '},
              version: {en: options.version || 'Version 0.1'},
              description: {en: options.description || ' '},
              copyright: {en: options.copyright || ' '},
              trademark: {en: options.trademark || ' '}
          };
          this.unitsPerEm = options.unitsPerEm || 1000;
          this.ascender = options.ascender;
          this.descender = options.descender;
          this.createdTimestamp = options.createdTimestamp;
          this.tables = { os2: {
              usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,
              usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,
              fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR
          } };
      }

      this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.
      this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
      this.encoding = new DefaultEncoding(this);
      this.position = new Position(this);
      this.substitution = new Substitution(this);
      this.tables = this.tables || {};

      Object.defineProperty(this, 'hinting', {
          get: function() {
              if (this._hinting) return this._hinting;
              if (this.outlinesFormat === 'truetype') {
                  return (this._hinting = new Hinting(this));
              }
          }
      });
  }

  /**
   * Check if the font has a glyph for the given character.
   * @param  {string}
   * @return {Boolean}
   */
  Font.prototype.hasChar = function(c) {
      return this.encoding.charToGlyphIndex(c) !== null;
  };

  /**
   * Convert the given character to a single glyph index.
   * Note that this function assumes that there is a one-to-one mapping between
   * the given character and a glyph; for complex scripts this might not be the case.
   * @param  {string}
   * @return {Number}
   */
  Font.prototype.charToGlyphIndex = function(s) {
      return this.encoding.charToGlyphIndex(s);
  };

  /**
   * Convert the given character to a single Glyph object.
   * Note that this function assumes that there is a one-to-one mapping between
   * the given character and a glyph; for complex scripts this might not be the case.
   * @param  {string}
   * @return {opentype.Glyph}
   */
  Font.prototype.charToGlyph = function(c) {
      const glyphIndex = this.charToGlyphIndex(c);
      let glyph = this.glyphs.get(glyphIndex);
      if (!glyph) {
          // .notdef
          glyph = this.glyphs.get(0);
      }

      return glyph;
  };

  /**
   * Convert the given text to a list of Glyph objects.
   * Note that there is no strict one-to-one mapping between characters and
   * glyphs, so the list of returned glyphs can be larger or smaller than the
   * length of the given string.
   * @param  {string}
   * @param  {GlyphRenderOptions} [options]
   * @return {opentype.Glyph[]}
   */
  Font.prototype.stringToGlyphs = function(s, options) {
      options = options || this.defaultRenderOptions;

      const bidi = new Bidi();

      // Create and register 'glyphIndex' state modifier
      const charToGlyphIndexMod = token => this.charToGlyphIndex(token.char);
      bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);

      const arabFeatureQuery = new FeatureQuery(this);
      const arabFeatures = ['init', 'medi', 'fina', 'rlig'];
      bidi.applyFeatures(
          arabFeatures.map(tag => {
              let query = { tag, script: 'arab' };
              let feature = arabFeatureQuery.getFeature(query);
              if (!!feature) return feature;
          })
      );
      const indexes = bidi.getTextGlyphs(s);

      let length = indexes.length;

      // Apply substitutions on glyph indexes
      if (options.features) {
          const script = options.script || this.substitution.getDefaultScriptName();
          let manyToOne = [];
          if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));
          if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));
          for (let i = 0; i < length; i += 1) {
              for (let j = 0; j < manyToOne.length; j++) {
                  const ligature = manyToOne[j];
                  const components = ligature.sub;
                  const compCount = components.length;
                  let k = 0;
                  while (k < compCount && components[k] === indexes[i + k]) k++;
                  if (k === compCount) {
                      indexes.splice(i, compCount, ligature.by);
                      length = length - compCount + 1;
                  }
              }
          }
      }

      // convert glyph indexes to glyph objects
      const glyphs = new Array(length);
      const notdef = this.glyphs.get(0);
      for (let i = 0; i < length; i += 1) {
          glyphs[i] = this.glyphs.get(indexes[i]) || notdef;
      }
      return glyphs;
  };

  /**
   * @param  {string}
   * @return {Number}
   */
  Font.prototype.nameToGlyphIndex = function(name) {
      return this.glyphNames.nameToGlyphIndex(name);
  };

  /**
   * @param  {string}
   * @return {opentype.Glyph}
   */
  Font.prototype.nameToGlyph = function(name) {
      const glyphIndex = this.nameToGlyphIndex(name);
      let glyph = this.glyphs.get(glyphIndex);
      if (!glyph) {
          // .notdef
          glyph = this.glyphs.get(0);
      }

      return glyph;
  };

  /**
   * @param  {Number}
   * @return {String}
   */
  Font.prototype.glyphIndexToName = function(gid) {
      if (!this.glyphNames.glyphIndexToName) {
          return '';
      }

      return this.glyphNames.glyphIndexToName(gid);
  };

  /**
   * Retrieve the value of the kerning pair between the left glyph (or its index)
   * and the right glyph (or its index). If no kerning pair is found, return 0.
   * The kerning value gets added to the advance width when calculating the spacing
   * between glyphs.
   * For GPOS kerning, this method uses the default script and language, which covers
   * most use cases. To have greater control, use font.position.getKerningValue .
   * @param  {opentype.Glyph} leftGlyph
   * @param  {opentype.Glyph} rightGlyph
   * @return {Number}
   */
  Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
      leftGlyph = leftGlyph.index || leftGlyph;
      rightGlyph = rightGlyph.index || rightGlyph;
      const gposKerning = this.position.defaultKerningTables;
      if (gposKerning) {
          return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);
      }
      // "kern" table
      return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;
  };

  /**
   * @typedef GlyphRenderOptions
   * @type Object
   * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.
   *                               See https://www.microsoft.com/typography/otspec/scripttags.htm
   * @property {string} [language='dflt'] - language system used to determine which features to apply.
   *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx
   * @property {boolean} [kerning=true] - whether to include kerning values
   * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.
   *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm
   */
  Font.prototype.defaultRenderOptions = {
      kerning: true,
      features: {
          liga: true,
          rlig: true
      }
  };

  /**
   * Helper function that invokes the given callback for each glyph in the given text.
   * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text
   * @param {string} text - The text to apply.
   * @param  {number} [x=0] - Horizontal position of the beginning of the text.
   * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param  {GlyphRenderOptions=} options
   * @param  {Function} callback
   */
  Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
      x = x !== undefined ? x : 0;
      y = y !== undefined ? y : 0;
      fontSize = fontSize !== undefined ? fontSize : 72;
      options = options || this.defaultRenderOptions;
      const fontScale = 1 / this.unitsPerEm * fontSize;
      const glyphs = this.stringToGlyphs(text, options);
      let kerningLookups;
      if (options.kerning) {
          const script = options.script || this.position.getDefaultScriptName();
          kerningLookups = this.position.getKerningTables(script, options.language);
      }
      for (let i = 0; i < glyphs.length; i += 1) {
          const glyph = glyphs[i];
          callback.call(this, glyph, x, y, fontSize, options);
          if (glyph.advanceWidth) {
              x += glyph.advanceWidth * fontScale;
          }

          if (options.kerning && i < glyphs.length - 1) {
              // We should apply position adjustment lookups in a more generic way.
              // Here we only use the xAdvance value.
              const kerningValue = kerningLookups ?
                    this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :
                    this.getKerningValue(glyph, glyphs[i + 1]);
              x += kerningValue * fontScale;
          }

          if (options.letterSpacing) {
              x += options.letterSpacing * fontSize;
          } else if (options.tracking) {
              x += (options.tracking / 1000) * fontSize;
          }
      }
      return x;
  };

  /**
   * Create a Path object that represents the given text.
   * @param  {string} text - The text to create.
   * @param  {number} [x=0] - Horizontal position of the beginning of the text.
   * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param  {GlyphRenderOptions=} options
   * @return {opentype.Path}
   */
  Font.prototype.getPath = function(text, x, y, fontSize, options) {
      const fullPath = new Path();
      this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
          const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
          fullPath.extend(glyphPath);
      });
      return fullPath;
  };

  /**
   * Create an array of Path objects that represent the glyphs of a given text.
   * @param  {string} text - The text to create.
   * @param  {number} [x=0] - Horizontal position of the beginning of the text.
   * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param  {GlyphRenderOptions=} options
   * @return {opentype.Path[]}
   */
  Font.prototype.getPaths = function(text, x, y, fontSize, options) {
      const glyphPaths = [];
      this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
          const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
          glyphPaths.push(glyphPath);
      });

      return glyphPaths;
  };

  /**
   * Returns the advance width of a text.
   *
   * This is something different than Path.getBoundingBox() as for example a
   * suffixed whitespace increases the advanceWidth but not the bounding box
   * or an overhanging letter like a calligraphic 'f' might have a quite larger
   * bounding box than its advance width.
   *
   * This corresponds to canvas2dContext.measureText(text).width
   *
   * @param  {string} text - The text to create.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param  {GlyphRenderOptions=} options
   * @return advance width
   */
  Font.prototype.getAdvanceWidth = function(text, fontSize, options) {
      return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});
  };

  /**
   * Draw the text on the given drawing context.
   * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
   * @param  {string} text - The text to create.
   * @param  {number} [x=0] - Horizontal position of the beginning of the text.
   * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param  {GlyphRenderOptions=} options
   */
  Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
      this.getPath(text, x, y, fontSize, options).draw(ctx);
  };

  /**
   * Draw the points of all glyphs in the text.
   * On-curve points will be drawn in blue, off-curve points will be drawn in red.
   * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
   * @param {string} text - The text to create.
   * @param {number} [x=0] - Horizontal position of the beginning of the text.
   * @param {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param {GlyphRenderOptions=} options
   */
  Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
      this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
          glyph.drawPoints(ctx, gX, gY, gFontSize);
      });
  };

  /**
   * Draw lines indicating important font measurements for all glyphs in the text.
   * Black lines indicate the origin of the coordinate system (point 0,0).
   * Blue lines indicate the glyph bounding box.
   * Green line indicates the advance width of the glyph.
   * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
   * @param {string} text - The text to create.
   * @param {number} [x=0] - Horizontal position of the beginning of the text.
   * @param {number} [y=0] - Vertical position of the *baseline* of the text.
   * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
   * @param {GlyphRenderOptions=} options
   */
  Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
      this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
          glyph.drawMetrics(ctx, gX, gY, gFontSize);
      });
  };

  /**
   * @param  {string}
   * @return {string}
   */
  Font.prototype.getEnglishName = function(name) {
      const translations = this.names[name];
      if (translations) {
          return translations.en;
      }
  };

  /**
   * Validate
   */
  Font.prototype.validate = function() {
      const _this = this;

      function assert(predicate, message) {
      }

      function assertNamePresent(name) {
          const englishName = _this.getEnglishName(name);
          assert(englishName && englishName.trim().length > 0,
                 'No English ' + name + ' specified.');
      }

      // Identification information
      assertNamePresent('fontFamily');
      assertNamePresent('weightName');
      assertNamePresent('manufacturer');
      assertNamePresent('copyright');
      assertNamePresent('version');

      // Dimension information
      assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');
  };

  /**
   * Convert the font object to a SFNT data structure.
   * This structure contains all the necessary tables and metadata to create a binary OTF file.
   * @return {opentype.Table}
   */
  Font.prototype.toTables = function() {
      return sfnt.fontToTable(this);
  };
  /**
   * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.
   */
  Font.prototype.toBuffer = function() {
      console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');
      return this.toArrayBuffer();
  };
  /**
   * Converts a `opentype.Font` into an `ArrayBuffer`
   * @return {ArrayBuffer}
   */
  Font.prototype.toArrayBuffer = function() {
      const sfntTable = this.toTables();
      const bytes = sfntTable.encode();
      const buffer = new ArrayBuffer(bytes.length);
      const intArray = new Uint8Array(buffer);
      for (let i = 0; i < bytes.length; i++) {
          intArray[i] = bytes[i];
      }

      return buffer;
  };

  /**
   * Initiate a download of the OpenType font.
   */
  Font.prototype.download = function(fileName) {
      const familyName = this.getEnglishName('fontFamily');
      const styleName = this.getEnglishName('fontSubfamily');
      fileName = fileName || familyName.replace(/\s/g, '') + '-' + styleName + '.otf';
      const arrayBuffer = this.toArrayBuffer();

      if (isBrowser()) {
          window.URL = window.URL || window.webkitURL;

          if (window.URL) {
              const dataView = new DataView(arrayBuffer);
              const blob = new Blob([dataView], {type: 'font/opentype'});

              let link = document.createElement('a');
              link.href = window.URL.createObjectURL(blob);
              link.download = fileName;

              let event = document.createEvent('MouseEvents');
              event.initEvent('click', true, false);
              link.dispatchEvent(event);
          } else {
              console.warn('Font file could not be downloaded. Try using a different browser.');
          }
      } else {
          const fs = require('fs');
          const buffer = arrayBufferToNodeBuffer(arrayBuffer);
          fs.writeFileSync(fileName, buffer);
      }
  };
  /**
   * @private
   */
  Font.prototype.fsSelectionValues = {
      ITALIC:              0x001, //1
      UNDERSCORE:          0x002, //2
      NEGATIVE:            0x004, //4
      OUTLINED:            0x008, //8
      STRIKEOUT:           0x010, //16
      BOLD:                0x020, //32
      REGULAR:             0x040, //64
      USER_TYPO_METRICS:   0x080, //128
      WWS:                 0x100, //256
      OBLIQUE:             0x200  //512
  };

  /**
   * @private
   */
  Font.prototype.usWidthClasses = {
      ULTRA_CONDENSED: 1,
      EXTRA_CONDENSED: 2,
      CONDENSED: 3,
      SEMI_CONDENSED: 4,
      MEDIUM: 5,
      SEMI_EXPANDED: 6,
      EXPANDED: 7,
      EXTRA_EXPANDED: 8,
      ULTRA_EXPANDED: 9
  };

  /**
   * @private
   */
  Font.prototype.usWeightClasses = {
      THIN: 100,
      EXTRA_LIGHT: 200,
      LIGHT: 300,
      NORMAL: 400,
      MEDIUM: 500,
      SEMI_BOLD: 600,
      BOLD: 700,
      EXTRA_BOLD: 800,
      BLACK:    900
  };

  // The `fvar` table stores font variation axes and instances.

  function addName(name, names) {
      const nameString = JSON.stringify(name);
      let nameID = 256;
      for (let nameKey in names) {
          let n = parseInt(nameKey);
          if (!n || n < 256) {
              continue;
          }

          if (JSON.stringify(names[nameKey]) === nameString) {
              return n;
          }

          if (nameID <= n) {
              nameID = n + 1;
          }
      }

      names[nameID] = name;
      return nameID;
  }

  function makeFvarAxis(n, axis, names) {
      const nameID = addName(axis.name, names);
      return [
          {name: 'tag_' + n, type: 'TAG', value: axis.tag},
          {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},
          {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},
          {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},
          {name: 'flags_' + n, type: 'USHORT', value: 0},
          {name: 'nameID_' + n, type: 'USHORT', value: nameID}
      ];
  }

  function parseFvarAxis(data, start, names) {
      const axis = {};
      const p = new parse$3.Parser(data, start);
      axis.tag = p.parseTag();
      axis.minValue = p.parseFixed();
      axis.defaultValue = p.parseFixed();
      axis.maxValue = p.parseFixed();
      p.skip('uShort', 1);  // reserved for flags; no values defined
      axis.name = names[p.parseUShort()] || {};
      return axis;
  }

  function makeFvarInstance(n, inst, axes, names) {
      const nameID = addName(inst.name, names);
      const fields = [
          {name: 'nameID_' + n, type: 'USHORT', value: nameID},
          {name: 'flags_' + n, type: 'USHORT', value: 0}
      ];

      for (let i = 0; i < axes.length; ++i) {
          const axisTag = axes[i].tag;
          fields.push({
              name: 'axis_' + n + ' ' + axisTag,
              type: 'FIXED',
              value: inst.coordinates[axisTag] << 16
          });
      }

      return fields;
  }

  function parseFvarInstance(data, start, axes, names) {
      const inst = {};
      const p = new parse$3.Parser(data, start);
      inst.name = names[p.parseUShort()] || {};
      p.skip('uShort', 1);  // reserved for flags; no values defined

      inst.coordinates = {};
      for (let i = 0; i < axes.length; ++i) {
          inst.coordinates[axes[i].tag] = p.parseFixed();
      }

      return inst;
  }

  function makeFvarTable(fvar, names) {
      const result = new table.Table('fvar', [
          {name: 'version', type: 'ULONG', value: 0x10000},
          {name: 'offsetToData', type: 'USHORT', value: 0},
          {name: 'countSizePairs', type: 'USHORT', value: 2},
          {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},
          {name: 'axisSize', type: 'USHORT', value: 20},
          {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},
          {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}
      ]);
      result.offsetToData = result.sizeOf();

      for (let i = 0; i < fvar.axes.length; i++) {
          result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));
      }

      for (let j = 0; j < fvar.instances.length; j++) {
          result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));
      }

      return result;
  }

  function parseFvarTable(data, start, names) {
      const p = new parse$3.Parser(data, start);
      const tableVersion = p.parseULong();
      check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');
      const offsetToData = p.parseOffset16();
      // Skip countSizePairs.
      p.skip('uShort', 1);
      const axisCount = p.parseUShort();
      const axisSize = p.parseUShort();
      const instanceCount = p.parseUShort();
      const instanceSize = p.parseUShort();

      const axes = [];
      for (let i = 0; i < axisCount; i++) {
          axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));
      }

      const instances = [];
      const instanceStart = start + offsetToData + axisCount * axisSize;
      for (let j = 0; j < instanceCount; j++) {
          instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
      }

      return {axes: axes, instances: instances};
  }

  var fvar = { make: makeFvarTable, parse: parseFvarTable };

  // The `GPOS` table contains kerning pairs, among other things.

  const subtableParsers$1 = new Array(10);         // subtableParsers[0] is unused

  // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable
  // this = Parser instance
  subtableParsers$1[1] = function parseLookup1() {
      const start = this.offset + this.relativeOffset;
      const posformat = this.parseUShort();
      if (posformat === 1) {
          return {
              posFormat: 1,
              coverage: this.parsePointer(Parser.coverage),
              value: this.parseValueRecord()
          };
      } else if (posformat === 2) {
          return {
              posFormat: 2,
              coverage: this.parsePointer(Parser.coverage),
              values: this.parseValueRecordList()
          };
      }
      check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');
  };

  // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable
  subtableParsers$1[2] = function parseLookup2() {
      const start = this.offset + this.relativeOffset;
      const posFormat = this.parseUShort();
      check.assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');
      const coverage = this.parsePointer(Parser.coverage);
      const valueFormat1 = this.parseUShort();
      const valueFormat2 = this.parseUShort();
      if (posFormat === 1) {
          // Adjustments for Glyph Pairs
          return {
              posFormat: posFormat,
              coverage: coverage,
              valueFormat1: valueFormat1,
              valueFormat2: valueFormat2,
              pairSets: this.parseList(Parser.pointer(Parser.list(function() {
                  return {        // pairValueRecord
                      secondGlyph: this.parseUShort(),
                      value1: this.parseValueRecord(valueFormat1),
                      value2: this.parseValueRecord(valueFormat2)
                  };
              })))
          };
      } else if (posFormat === 2) {
          const classDef1 = this.parsePointer(Parser.classDef);
          const classDef2 = this.parsePointer(Parser.classDef);
          const class1Count = this.parseUShort();
          const class2Count = this.parseUShort();
          return {
              // Class Pair Adjustment
              posFormat: posFormat,
              coverage: coverage,
              valueFormat1: valueFormat1,
              valueFormat2: valueFormat2,
              classDef1: classDef1,
              classDef2: classDef2,
              class1Count: class1Count,
              class2Count: class2Count,
              classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {
                  return {
                      value1: this.parseValueRecord(valueFormat1),
                      value2: this.parseValueRecord(valueFormat2)
                  };
              }))
          };
      }
  };

  subtableParsers$1[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };
  subtableParsers$1[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };
  subtableParsers$1[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };
  subtableParsers$1[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };
  subtableParsers$1[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };
  subtableParsers$1[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };
  subtableParsers$1[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };

  // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos
  function parseGposTable(data, start) {
      start = start || 0;
      const p = new Parser(data, start);
      const tableVersion = p.parseVersion(1);
      check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);

      if (tableVersion === 1) {
          return {
              version: tableVersion,
              scripts: p.parseScriptList(),
              features: p.parseFeatureList(),
              lookups: p.parseLookupList(subtableParsers$1)
          };
      } else {
          return {
              version: tableVersion,
              scripts: p.parseScriptList(),
              features: p.parseFeatureList(),
              lookups: p.parseLookupList(subtableParsers$1),
              variations: p.parseFeatureVariationsList()
          };
      }

  }

  // GPOS Writing //////////////////////////////////////////////
  // NOT SUPPORTED
  const subtableMakers$1 = new Array(10);

  function makeGposTable(gpos) {
      return new table.Table('GPOS', [
          {name: 'version', type: 'ULONG', value: 0x10000},
          {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gpos.scripts)},
          {name: 'features', type: 'TABLE', value: new table.FeatureList(gpos.features)},
          {name: 'lookups', type: 'TABLE', value: new table.LookupList(gpos.lookups, subtableMakers$1)}
      ]);
  }

  var gpos = { parse: parseGposTable, make: makeGposTable };

  // The `kern` table contains kerning pairs.

  function parseWindowsKernTable(p) {
      const pairs = {};
      // Skip nTables.
      p.skip('uShort');
      const subtableVersion = p.parseUShort();
      check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');
      // Skip subtableLength, subtableCoverage
      p.skip('uShort', 2);
      const nPairs = p.parseUShort();
      // Skip searchRange, entrySelector, rangeShift.
      p.skip('uShort', 3);
      for (let i = 0; i < nPairs; i += 1) {
          const leftIndex = p.parseUShort();
          const rightIndex = p.parseUShort();
          const value = p.parseShort();
          pairs[leftIndex + ',' + rightIndex] = value;
      }
      return pairs;
  }

  function parseMacKernTable(p) {
      const pairs = {};
      // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.
      // Skip the rest.
      p.skip('uShort');
      const nTables = p.parseULong();
      //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');
      if (nTables > 1) {
          console.warn('Only the first kern subtable is supported.');
      }
      p.skip('uLong');
      const coverage = p.parseUShort();
      const subtableVersion = coverage & 0xFF;
      p.skip('uShort');
      if (subtableVersion === 0) {
          const nPairs = p.parseUShort();
          // Skip searchRange, entrySelector, rangeShift.
          p.skip('uShort', 3);
          for (let i = 0; i < nPairs; i += 1) {
              const leftIndex = p.parseUShort();
              const rightIndex = p.parseUShort();
              const value = p.parseShort();
              pairs[leftIndex + ',' + rightIndex] = value;
          }
      }
      return pairs;
  }

  // Parse the `kern` table which contains kerning pairs.
  function parseKernTable(data, start) {
      const p = new parse$3.Parser(data, start);
      const tableVersion = p.parseUShort();
      if (tableVersion === 0) {
          return parseWindowsKernTable(p);
      } else if (tableVersion === 1) {
          return parseMacKernTable(p);
      } else {
          throw new Error('Unsupported kern table version (' + tableVersion + ').');
      }
  }

  var kern = { parse: parseKernTable };

  // The `loca` table stores the offsets to the locations of the glyphs in the font.

  // Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
  // relative to the beginning of the glyphData table.
  // The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
  // The loca table has two versions: a short version where offsets are stored as uShorts, and a long
  // version where offsets are stored as uLongs. The `head` table specifies which version to use
  // (under indexToLocFormat).
  function parseLocaTable(data, start, numGlyphs, shortVersion) {
      const p = new parse$3.Parser(data, start);
      const parseFn = shortVersion ? p.parseUShort : p.parseULong;
      // There is an extra entry after the last index element to compute the length of the last glyph.
      // That's why we use numGlyphs + 1.
      const glyphOffsets = [];
      for (let i = 0; i < numGlyphs + 1; i += 1) {
          let glyphOffset = parseFn.call(p);
          if (shortVersion) {
              // The short table version stores the actual offset divided by 2.
              glyphOffset *= 2;
          }

          glyphOffsets.push(glyphOffset);
      }

      return glyphOffsets;
  }

  var loca = { parse: parseLocaTable };

  // opentype.js

  // Table Directory Entries //////////////////////////////////////////////
  /**
   * Parses OpenType table entries.
   * @param  {DataView}
   * @param  {Number}
   * @return {Object[]}
   */
  function parseOpenTypeTableEntries(data, numTables) {
      const tableEntries = [];
      let p = 12;
      for (let i = 0; i < numTables; i += 1) {
          const tag = parse$3.getTag(data, p);
          const checksum = parse$3.getULong(data, p + 4);
          const offset = parse$3.getULong(data, p + 8);
          const length = parse$3.getULong(data, p + 12);
          tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});
          p += 16;
      }

      return tableEntries;
  }

  /**
   * Parses WOFF table entries.
   * @param  {DataView}
   * @param  {Number}
   * @return {Object[]}
   */
  function parseWOFFTableEntries(data, numTables) {
      const tableEntries = [];
      let p = 44; // offset to the first table directory entry.
      for (let i = 0; i < numTables; i += 1) {
          const tag = parse$3.getTag(data, p);
          const offset = parse$3.getULong(data, p + 4);
          const compLength = parse$3.getULong(data, p + 8);
          const origLength = parse$3.getULong(data, p + 12);
          let compression;
          if (compLength < origLength) {
              compression = 'WOFF';
          } else {
              compression = false;
          }

          tableEntries.push({tag: tag, offset: offset, compression: compression,
              compressedLength: compLength, length: origLength});
          p += 20;
      }

      return tableEntries;
  }

  /**
   * @typedef TableData
   * @type Object
   * @property {DataView} data - The DataView
   * @property {number} offset - The data offset.
   */

  /**
   * @param  {DataView}
   * @param  {Object}
   * @return {TableData}
   */
  function uncompressTable(data, tableEntry) {
      if (tableEntry.compression === 'WOFF') {
          const inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);
          const outBuffer = new Uint8Array(tableEntry.length);
          tinyInflate(inBuffer, outBuffer);
          if (outBuffer.byteLength !== tableEntry.length) {
              throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\'t match recorded length');
          }

          const view = new DataView(outBuffer.buffer, 0);
          return {data: view, offset: 0};
      } else {
          return {data: data, offset: tableEntry.offset};
      }
  }

  // Public API ///////////////////////////////////////////////////////////

  /**
   * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
   * Throws an error if the font could not be parsed.
   * @param  {ArrayBuffer}
   * @return {opentype.Font}
   */
  function parseBuffer(buffer) {
      let indexToLocFormat;
      let ltagTable;

      // Since the constructor can also be called to create new fonts from scratch, we indicate this
      // should be an empty font that we'll fill with our own data.
      const font = new Font({empty: true});

      // OpenType fonts use big endian byte ordering.
      // We can't rely on typed array view types, because they operate with the endianness of the host computer.
      // Instead we use DataViews where we can specify endianness.
      const data = new DataView(buffer, 0);
      let numTables;
      let tableEntries = [];
      const signature = parse$3.getTag(data, 0);
      if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {
          font.outlinesFormat = 'truetype';
          numTables = parse$3.getUShort(data, 4);
          tableEntries = parseOpenTypeTableEntries(data, numTables);
      } else if (signature === 'OTTO') {
          font.outlinesFormat = 'cff';
          numTables = parse$3.getUShort(data, 4);
          tableEntries = parseOpenTypeTableEntries(data, numTables);
      } else if (signature === 'wOFF') {
          const flavor = parse$3.getTag(data, 4);
          if (flavor === String.fromCharCode(0, 1, 0, 0)) {
              font.outlinesFormat = 'truetype';
          } else if (flavor === 'OTTO') {
              font.outlinesFormat = 'cff';
          } else {
              throw new Error('Unsupported OpenType flavor ' + signature);
          }

          numTables = parse$3.getUShort(data, 12);
          tableEntries = parseWOFFTableEntries(data, numTables);
      } else {
          throw new Error('Unsupported OpenType signature ' + signature);
      }

      let cffTableEntry;
      let fvarTableEntry;
      let glyfTableEntry;
      let gposTableEntry;
      let gsubTableEntry;
      let hmtxTableEntry;
      let kernTableEntry;
      let locaTableEntry;
      let nameTableEntry;
      let metaTableEntry;
      let p;

      for (let i = 0; i < numTables; i += 1) {
          const tableEntry = tableEntries[i];
          let table;
          switch (tableEntry.tag) {
              case 'cmap':
                  table = uncompressTable(data, tableEntry);
                  font.tables.cmap = cmap.parse(table.data, table.offset);
                  font.encoding = new CmapEncoding(font.tables.cmap);
                  break;
              case 'cvt ' :
                  table = uncompressTable(data, tableEntry);
                  p = new parse$3.Parser(table.data, table.offset);
                  font.tables.cvt = p.parseShortList(tableEntry.length / 2);
                  break;
              case 'fvar':
                  fvarTableEntry = tableEntry;
                  break;
              case 'fpgm' :
                  table = uncompressTable(data, tableEntry);
                  p = new parse$3.Parser(table.data, table.offset);
                  font.tables.fpgm = p.parseByteList(tableEntry.length);
                  break;
              case 'head':
                  table = uncompressTable(data, tableEntry);
                  font.tables.head = head.parse(table.data, table.offset);
                  font.unitsPerEm = font.tables.head.unitsPerEm;
                  indexToLocFormat = font.tables.head.indexToLocFormat;
                  break;
              case 'hhea':
                  table = uncompressTable(data, tableEntry);
                  font.tables.hhea = hhea.parse(table.data, table.offset);
                  font.ascender = font.tables.hhea.ascender;
                  font.descender = font.tables.hhea.descender;
                  font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
                  break;
              case 'hmtx':
                  hmtxTableEntry = tableEntry;
                  break;
              case 'ltag':
                  table = uncompressTable(data, tableEntry);
                  ltagTable = ltag.parse(table.data, table.offset);
                  break;
              case 'maxp':
                  table = uncompressTable(data, tableEntry);
                  font.tables.maxp = maxp.parse(table.data, table.offset);
                  font.numGlyphs = font.tables.maxp.numGlyphs;
                  break;
              case 'name':
                  nameTableEntry = tableEntry;
                  break;
              case 'OS/2':
                  table = uncompressTable(data, tableEntry);
                  font.tables.os2 = os2.parse(table.data, table.offset);
                  break;
              case 'post':
                  table = uncompressTable(data, tableEntry);
                  font.tables.post = post.parse(table.data, table.offset);
                  font.glyphNames = new GlyphNames(font.tables.post);
                  break;
              case 'prep' :
                  table = uncompressTable(data, tableEntry);
                  p = new parse$3.Parser(table.data, table.offset);
                  font.tables.prep = p.parseByteList(tableEntry.length);
                  break;
              case 'glyf':
                  glyfTableEntry = tableEntry;
                  break;
              case 'loca':
                  locaTableEntry = tableEntry;
                  break;
              case 'CFF ':
                  cffTableEntry = tableEntry;
                  break;
              case 'kern':
                  kernTableEntry = tableEntry;
                  break;
              case 'GPOS':
                  gposTableEntry = tableEntry;
                  break;
              case 'GSUB':
                  gsubTableEntry = tableEntry;
                  break;
              case 'meta':
                  metaTableEntry = tableEntry;
                  break;
          }
      }

      const nameTable = uncompressTable(data, nameTableEntry);
      font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);
      font.names = font.tables.name;

      if (glyfTableEntry && locaTableEntry) {
          const shortVersion = indexToLocFormat === 0;
          const locaTable = uncompressTable(data, locaTableEntry);
          const locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);
          const glyfTable = uncompressTable(data, glyfTableEntry);
          font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font);
      } else if (cffTableEntry) {
          const cffTable = uncompressTable(data, cffTableEntry);
          cff.parse(cffTable.data, cffTable.offset, font);
      } else {
          throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
      }

      const hmtxTable = uncompressTable(data, hmtxTableEntry);
      hmtx.parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);
      addGlyphNames(font);

      if (kernTableEntry) {
          const kernTable = uncompressTable(data, kernTableEntry);
          font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);
      } else {
          font.kerningPairs = {};
      }

      if (gposTableEntry) {
          const gposTable = uncompressTable(data, gposTableEntry);
          font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);
          font.position.init();
      }

      if (gsubTableEntry) {
          const gsubTable = uncompressTable(data, gsubTableEntry);
          font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);
      }

      if (fvarTableEntry) {
          const fvarTable = uncompressTable(data, fvarTableEntry);
          font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);
      }

      if (metaTableEntry) {
          const metaTable = uncompressTable(data, metaTableEntry);
          font.tables.meta = meta.parse(metaTable.data, metaTable.offset);
          font.metas = font.tables.meta;
      }

      return font;
  }

  /**
   * Synchronously load the font from a URL or file.
   * When done, returns the font object or throws an error.
   * @alias opentype.loadSync
   * @param  {string} url - The URL of the font to load.
   * @return {opentype.Font}
   */
  function loadSync(url) {
      const fs = require('fs');
      const buffer = fs.readFileSync(url);
      return parseBuffer(nodeBufferToArrayBuffer(buffer));
  }

  const pathnameToFont = (pathname) => loadSync(pathname);

  const textToSurfaces = ({ curveSegments, font, size, kerning = true, features = undefined, hinting = false },
                                 text) => {
    const options = { kerning: kerning, features: features, hinting: hinting };
    const svgPaths = [];
    font.forEachGlyph(text, 0, 0, size, options,
                      (glyph, x, y, fontSize) => {
                        svgPaths.push(glyph.getPath(x, y, fontSize, options).toPathData());
                      });
    const pathsets = [];
    for (let { paths } of svgPaths.map(svgPath => fromSvgPath({ curveSegments: curveSegments }, svgPath))) {
      pathsets.push(paths);
    }
    return { z0Surface: union$2(...pathsets) };
  };

  // FIX: Make it clear this should be lazy.
  class Assembly {
    constructor (geometry = { assembly: [] }) {
      this.geometry = geometry;
      if (geometry instanceof Array) throw Error('die');
      if (geometry.geometry) throw Error('die');
    }

    addTag (tag) {
      return fromGeometry(addTag(tag, toGeometry(this)));
    }

    assemble (...geometries) {
      const assembled = assemble(toGeometry(this), ...geometries.map(toGeometry));
      return fromGeometry(assembled);
    }

    difference (...geometries) {
      return fromGeometry(difference$4(toGeometry(this), ...geometries.map(toGeometry)));
    }

    flip () {
      return fromGeometry(flip$8(toGeometry(this)));
    }

    getTags () {
      const tags = this.geometry.tags;
      if (tags === undefined) {
        return [];
      } else {
        return tags;
      }
    }

    intersection (...geometries) {
      return fromGeometry(intersection$4(toGeometry(this), ...geometries.map(toGeometry)));
    }

    eachPoint (options = {}, operation) {
      return eachPoint$4(options, operation, toGeometry(this));
    }

    toGeometry (options = {}) {
      return this.geometry;
    }

    toPaths (options = {}) {
      return fromGeometry(toPaths$1(options, toGeometry(this)));
    }

    toSolid (options = {}) {
      return fromGeometry(toSolid(options, toGeometry(this)));
    }

    toZ0Surface (options = {}) {
      return fromGeometry(toZ0Surface(options, toGeometry(this)));
    }

    toDisjointGeometry () {
      return toDisjointGeometry(toGeometry(this));
    }

    toComponents (options) {
      return toComponents(toGeometry(this));
    }

    transform (matrix) {
      return fromGeometry(transform$7(matrix, toGeometry(this)));
    }

    union (...geometries) {
      return fromGeometry(union$4(toGeometry(this), ...geometries.map(toGeometry)));
    }
  }

  const fromGeometry = (geometry) => {
    if (geometry instanceof Array) throw Error('die');
    return new Assembly(geometry);
  };

  const toGeometry = (assembly) => assembly.toGeometry();

  class Shape {
    as (tag) {
      return this.fromLazyGeometry(toLazyGeometry(this).addTag(tag));
    }

    assemble (...shapes) {
      return this.fromLazyGeometry(toLazyGeometry(this).assemble(...shapes.map(toLazyGeometry)));
    }

    close () {
      const geometry = this.toPaths().toDisjointGeometry();
      if (!isSingleOpenPath(geometry)) {
        throw Error('Close requires a single open path.');
      }
      return Shape.fromClosedPath(close(geometry.paths[0]));
    }

    concat (...shapes) {
      const paths = [];
      for (const shape of [this, ...shapes]) {
        const geometry = shape.toPaths().toDisjointGeometry();
        if (!isSingleOpenPath(geometry)) {
          throw Error('Concatenation requires single open paths.');
        }
        paths.push(geometry.paths[0]);
      }
      return Shape.fromOpenPath(concatenate(...paths));
    }

    constructor (lazyGeometry = fromGeometry({ assembly: [] })) {
      this.lazyGeometry = lazyGeometry;
    }

    difference (...shapes) {
      return this.fromLazyGeometry(toLazyGeometry(this).difference(...shapes.map(toLazyGeometry)));
    }

    eachPoint (options = {}, operation) {
      toLazyGeometry(this).eachPoint(options, operation);
    }

    fromLazyGeometry (geometry) {
      return Shape.fromLazyGeometry(geometry);
    }

    intersection (...shapes) {
      return this.fromLazyGeometry(toLazyGeometry(this).intersection(...shapes.map(toLazyGeometry)));
    }

    toLazyGeometry () {
      return this.lazyGeometry;
    }

    toComponents (options = {}) {
      return toLazyGeometry(this).toComponents(options);
    }

    toDisjointGeometry (options = {}) {
      return toLazyGeometry(this).toDisjointGeometry(options);
    }

    toGeometry (options = {}) {
      return toLazyGeometry(this).toGeometry(options);
    }

    toPaths (options = {}) {
      return this.fromLazyGeometry(toLazyGeometry(this).toPaths(options));
    }

    toPoints (options = {}) {
      return this.fromLazyGeometry(toLazyGeometry(this).toPoints(options));
    }

    toSolid (options = {}) {
      return this.fromLazyGeometry(toLazyGeometry(this).toSolid(options));
    }

    toZ0Surface (options = {}) {
      return this.fromLazyGeometry(toLazyGeometry(this).toZ0Surface(options));
    }

    transform (matrix) {
      return this.fromLazyGeometry(toLazyGeometry(this).transform(matrix));
    }

    union (...shapes) {
      return this.fromLazyGeometry(toLazyGeometry(this).union(...shapes.map(toLazyGeometry)));
    }
  }
  const isSingleOpenPath = ({ paths }) => (paths !== undefined) && (paths.length === 1) && (paths[0][0] === null);

  const toLazyGeometry = (shape) => shape.toLazyGeometry();

  const assembleLazily = (shape, ...shapes) =>
    Shape.fromLazyGeometry(toLazyGeometry(shape).assemble(...shapes.map(toLazyGeometry)));

  const unionLazily = (shape, ...shapes) =>
    Shape.fromLazyGeometry(toLazyGeometry(shape).union(...shapes.map(toLazyGeometry)));

  const differenceLazily = (shape, ...shapes) =>
    Shape.fromLazyGeometry(toLazyGeometry(shape).difference(...shapes.map(toLazyGeometry)));

  const intersectionLazily = (shape, ...shapes) =>
    Shape.fromLazyGeometry(toLazyGeometry(shape).intersection(...shapes.map(toLazyGeometry())));

  Shape.fromClosedPath = (path) => new Shape(fromGeometry({ paths: [close(path)] }));
  Shape.fromGeometry = (geometry) => new Shape(fromGeometry(geometry));
  Shape.fromLazyGeometry = (lazyGeometry) => new Shape(lazyGeometry);
  Shape.fromOpenPath = (path) => new Shape(fromGeometry({ paths: [open(path)] }));
  Shape.fromPaths = (paths) => new Shape(fromGeometry({ paths: paths }));
  Shape.fromPathToZ0Surface = (path) => new Shape(fromGeometry({ z0Surface: [path] }));
  Shape.fromPathsToZ0Surface = (paths) => new Shape(fromGeometry({ z0Surface: paths }));
  Shape.fromPolygonsToSolid = (polygons) => new Shape(fromGeometry({ solid: fromPolygons({}, polygons) }));
  Shape.fromPolygonsToZ0Surface = (polygons) => new Shape(fromGeometry({ z0Surface: polygons }));
  Shape.fromSurfaces = (surfaces) => new Shape(fromGeometry({ solid: surfaces }));

  const loadFont = ({ path }) => pathnameToFont(path);

  // We do an early union to handle overlapping text.

  const text = ({ font, curveSegments }, text) =>
    Shape.fromGeometry(textToSurfaces({ font: font, curveSegments }, text));

  const acos$1 = (a) => Math.acos(a) / (Math.PI * 2) * 360;

  const assemble$1 = (...params) => {
    switch (params.length) {
      case 0: {
        return Shape.fromGeometry({ assembly: [] });
      }
      case 1: {
        return params[0];
      }
      default: {
        return assembleLazily(...params);
      }
    }
  };

  const method = function (...shapes) { return assemble$1(this, ...shapes); };

  Shape.prototype.assemble = method;

  const measureBoundingBox$3 = (shape) => {
    let minPoint = [Infinity, Infinity, Infinity];
    let maxPoint = [-Infinity, -Infinity, -Infinity];
    shape.eachPoint({},
                    (point) => {
                      minPoint = min(minPoint, point);
                      maxPoint = max(maxPoint, point);
                    });
    return [minPoint, maxPoint];
  };

  const method$1 = function () { return measureBoundingBox$3(this); };

  Shape.prototype.measureBoundingBox = method$1;

  const translate$3 = ([x = 0, y = 0, z = 0], shape) => {
    return shape.transform(fromTranslation([x, y, z]));
  };

  const method$2 = function (vector) {
    return translate$3(vector, this);
  };

  Shape.prototype.translate = method$2;

  const center = (shape) => {
    const [minPoint, maxPoint] = measureBoundingBox$3(shape);
    let center = scale(0.5, add(minPoint, maxPoint));
    return translate$3(negate(center), shape);
  };

  const method$3 = function () { return center(this); };

  Shape.prototype.center = method$3;

  const assert$1 = (value, message, pass) => {
    if (pass !== true) {
      throw Error(`${message}: ${value}`);
    }
    return true;
  };

  const assertBoolean = (value) => {
    if (typeof value !== 'boolean') {
      throw Error(`Not a boolean: ${value}`);
    }
    return true;
  };

  const assertEmpty = (value) => {
    if (value.length === undefined) {
      throw Error(`Has no length: ${value}`);
    }
    if (value.length !== 0) {
      throw Error(`Is not empty: ${value}`);
    }
    return true;
  };

  const assertSingle = (value) => {
    if (value.length === undefined) {
      throw Error(`Has no length: ${value}`);
    }
    if (value.length !== 1) {
      throw Error(`Is not single: ${value}`);
    }
    return true;
  };

  const assertPoint = (value) => {
    if (value.length === undefined) {
      throw Error(`Has no length: ${value}`);
    }
    const [x, y, z = 0] = value;
    assertNumber(x);
    assertNumber(y);
    assertNumber(z);
    return true;
  };

  const assertPoints = (value) => {
    if (value.length === undefined) {
      throw Error(`Has no length: ${value}`);
    }
    value.forEach(assertPoint);
    return true;
  };

  const assertNumber = (...values) => {
    for (const value of values) {
      if (typeof value !== 'number') {
        throw Error(`Not a number: ${value}`);
      }
    }
    return true;
  };

  const assertNumberTriple = (value) => {
    if (value.length === undefined) {
      throw Error(`Has no length: ${value}`);
    }
    if (value.length !== 3) {
      throw Error(`Is not a triple: ${value}`);
    }
    for (const v of value) {
      assertNumber(v);
    }
    return true;
  };

  const dispatch = (name, ...dispatches) => {
    return (...params) => {
      for (const dispatch of dispatches) {
        // For each signature
        let operation;
        try {
          // Try to decode it into an operation.
          operation = dispatch(...params);
        } catch (e) {
          continue;
        }
        return operation();
      }
      throw Error(`Unsupported interface for ${name}: ${JSON.stringify(params)}`);
    };
  };

  // FIX: This uses the circumradius rather than apothem, so that the produced polygon will fit into the specified circle.
  // Is this the most useful measure?
  const unitCircle = ({ resolution = 32 }) =>
    Shape.fromPathToZ0Surface(buildRegularPolygon({ edges: resolution }));

  const fromRadius = ({ radius, resolution }) => unitCircle({ resolution }).scale(radius);
  const fromDiameter = ({ diameter, resolution }) => unitCircle({ resolution }).scale(diameter / 2);

  const circle = dispatch(
    'circle',
    // circle()
    (...rest) => {
      assertEmpty(rest);
      return () => unitCircle();
    },
    // circle(2)
    (radius) => {
      assertNumber(radius);
      return () => fromRadius({ radius });
    },
    // circle({ r: 2, fn: 32 })
    ({ r, fn }) => {
      assertNumber(r);
      return () => fromRadius({ radius: r, resolution: fn });
    },
    // circle({ radius: 2, resolution: 32 })
    ({ radius, resolution }) => {
      assertNumber(radius);
      return () => fromRadius({ radius, resolution });
    },
    // circle({ diameter: 2, resolution: 32 })
    ({ diameter, resolution }) => {
      assertNumber(diameter);
      return () => fromDiameter({ diameter, resolution });
    });

  const cos$1 = (a) => Math.cos(a / 360 * Math.PI * 2);

  const crossSection = ({ allowOpenPaths = false, z = 0 } = {}, shape) => {
    const geometry = shape.toSolid().toDisjointGeometry();
    const polygons = toPolygons({}, geometry.solid);
    const triangles = toTriangles({}, polygons);
    const paths = cutTrianglesByPlane({ allowOpenPaths }, fromPoints$1([0, 0, z], [1, 0, z], [0, 1, z]), triangles);
    return Shape.fromPathsToZ0Surface(paths);
  };

  const method$4 = function (options) { return crossSection(options, this); };

  Shape.prototype.crossSection = method$4;

  // TODO: Generalize for more operands?
  const minkowski = (a, b) => {
    const aPoints = [];
    const bPoints = [];
    a.eachPoint({}, point => aPoints.push(point));
    b.eachPoint({}, point => bPoints.push(point));
    return Shape.fromPolygonsToSolid(buildConvexHull({}, buildConvexMinkowskiSum({}, aPoints, bPoints)));
  };

  // Dispatch mechanism.
  // TODO: Move this somewhere else.

  const chain = (name, ...dispatches) => {
    return (...params) => {
      for (const dispatch of dispatches) {
        // For each signature
        let operation;
        try {
          // Try to decode it into an operation.
          operation = dispatch(...params);
        } catch (e) {
          continue;
        }
        return operation();
      }
      throw Error(`Unsupported interface for ${name}: ${JSON.stringify(params)}`);
    };
  };

  // Geometry construction.

  const edgeScale = regularPolygonEdgeLengthToRadius(1, 4);

  // Note: We can't call this while bootstrapping, but we could memoize the result afterward.
  const unitCube = () => Shape.fromPolygonsToSolid(buildRegularPrism({ edges: 4 }))
      .rotateZ(45)
      .scale([edgeScale, edgeScale, 1]);

  const centerMaybe = ({ size, center }, shape) => {
    if (center) {
      return shape;
    } else {
      if (typeof size === 'number') {
        return shape.translate([size / 2, size / 2, size / 2]);
      } else {
        return shape.translate([size[0] / 2, size[1] / 2, size[2] / 2]);
      }
    }
  };

  // Cube Interfaces.

  // cube()
  const cubeDefault = (...rest) => {
    assertEmpty(rest);
    return () => unitCube().translate([0.5, 0.5, 0.5]);
  };

  // cube(10)
  const cubeSide = (size, ...rest) => {
    assertEmpty(rest);
    assertNumber(size);
    return () => unitCube().scale(size).translate([size / 2, size / 2, size / 2]);
  };

  // cube({ radius, roundRadius, resolution })
  const cubeRoundRadiusResolution = ({ radius = 1, roundRadius, resolution = 5 }, ...rest) => {
    assertEmpty(rest);
    assertNumber(roundRadius);
    assertNumber(resolution);
    return () => minkowski(unitCube().scale(radius - roundRadius * 2),
                           Shape.fromPolygonsToSolid(buildRingSphere({ resolution })).scale(roundRadius));
  };

  // cube({ center: [0, 0, 0], radius: 1 })
  const cubeCenterRadius = ({ center, radius }, ...rest) => {
    assertEmpty(rest);
    assertNumberTriple(center);
    // PROVE: That radius makes sense when used like this.
    assertNumber(radius);
    return () => unitCube().scale(radius).translate(center);
  };

  // cube({ radius: 1 })
  const cubeRadius = ({ radius }, ...rest) => {
    assertEmpty(rest);
    // PROVE: That radius makes sense when used like this.
    assertNumber(radius);
    return () => unitCube().scale(radius).translate([radius / 2, radius / 2, radius / 2]);
  };

  // cube({ corner1: [4, 4, 4], corner2: [5, 4, 2] });
  const cubeCorner = ({ corner1, corner2 }, ...rest) => {
    assertEmpty(rest);
    assertNumberTriple(corner1);
    assertNumberTriple(corner2);
    const [c1x, c1y, c1z] = corner1;
    const [c2x, c2y, c2z] = corner2;
    const length = c2x - c1x;
    const width = c2y - c1y;
    const height = c2z - c1z;
    const center = [(c1x + c2x) / 2, (c1y + c2y) / 2, (c1z + c2z) / 2];
    return () => unitCube().scale([length, width, height]).translate(center);
  };

  // cube({size: [1,2,3], center: false });
  const cubeSizesCenter = ({ size, center = false }, ...rest) => {
    assertEmpty(rest);
    const [length, width, height] = size;
    assertNumber(length);
    assertNumber(width);
    assertNumber(height);
    return () => centerMaybe({ size, center }, unitCube().scale([length, width, height]));
  };

  // cube({ size: 1, center: false });
  const cubeSizeCenter = ({ size, center = false }, ...rest) => {
    assertEmpty(rest);
    assertNumber(size);
    return () => centerMaybe({ size, center }, unitCube().scale(size));
  };

  // Cube Operation

  const cube = chain('cube',
                            cubeDefault,
                            cubeSide,
                            cubeRoundRadiusResolution,
                            cubeCenterRadius,
                            cubeRadius,
                            cubeCorner,
                            cubeSizesCenter,
                            cubeSizeCenter);

  const buildCylinder = ({ r1 = 1, r2 = 1, h = 1, edges = 32 }) => {
    return Shape.fromPolygonsToSolid(buildRegularPrism({ edges: edges })).scale([r1, r1, h]);
  };

  /**
   *
   * cylinder();              // unit cylinder
   * cylinder({r: 1, h: 10});                 // openscad like
   * cylinder({d: 1, h: 10});
   * cylinder({r: 1, h: 10, center: true});   // default: center:false
   * cylinder({r: 1, h: 10, center: [true, true, false]});  // individual x,y,z center flags
   * cylinder({r: 1, h: 10, round: true});
   * cylinder({r1: 3, r2: 0, h: 10});
   * cylinder({d1: 1, d2: 0.5, h: 10});
   * cylinder({start: [0,0,0], end: [0,0,10], r1: 1, r2: 2, fn: 50});
   *
   */
  const cylinder = (...params) => {
    // cylinder()
    try {
      assertEmpty(params);
      return buildCylinder({});
    } catch (e) {}

    // cylinder({r: 1, h: 10, center: true});
    try {
      const { h, r, fn = 32 } = params[0];
      assertNumber(h);
      assertNumber(r);
      return buildCylinder({ r1: r, r2: r, h: h, edges: fn });
    } catch (e) {}

    // cylinder({ r1: 1, r2: 2, h: 10, center: true});
    try {
      const { h, r1, r2, fn = 32 } = params[0];
      assertNumber(h);
      assertNumber(r1);
      assertNumber(r2);
      return buildCylinder({ r1: r1, r2: r2, h: h, edges: fn });
    } catch (e) {}

    // cylinder({ faces: 32, diameter: 1, height: 10 });
    try {
      const { diameter, height, faces } = params[0];
      assertNumber(diameter);
      assertNumber(faces);
      assertNumber(height);
      return buildCylinder({ r1: diameter / 2, r2: diameter / 2, h: height, center: true, edges: faces });
    } catch (e) {}

    throw Error(`Unsupported interface for cylinder: ${JSON.stringify(params)}`);
  };

  const difference$5 = (...params) => differenceLazily(...params);

  const method$5 = function (...shapes) { return difference$5(this, ...shapes); };

  Shape.prototype.difference = method$5;

  const fromHeight = ({ height }, shape) => {
    const geometry = shape.toZ0Surface();
    const extrusion = extrudeLinear({ height: height }, geometry.lazyGeometry.geometry.z0Surface);
    const extrudedShape = Shape.fromPolygonsToSolid(extrusion).translate([0, 0, height / 2]);
    return extrudedShape;
  };

  const extrude = dispatch(
    'extrude',
    ({ height }, shape) => {
      assertNumber(height);
      return () => fromHeight({ height }, shape);
    }
  );

  const method$6 = function (options) { return extrude(options, this); };

  Shape.prototype.extrude = method$6;

  const hull = (...geometries) => {
    // FIX: Support z0Surface hulling.
    const points = [];
    geometries.forEach(geometry => geometry.eachPoint({}, point => points.push(point)));
    return Shape.fromPolygonsToSolid(buildConvexHull({}, points));
  };

  const intersection$5 = (...params) => intersectionLazily(...params);

  const method$7 = function (...shapes) { return intersection$5(this, ...shapes); };

  Shape.prototype.intersection = method$7;

  const conversation = ({ agent, say }) => {
    let id = 0;
    const openQuestions = {};
    const ask = (question) => {
      const promise = new Promise((resolve, reject) => { openQuestions[id] = { resolve, reject }; });
      say({ id, question });
      id += 1;
      return promise;
    };
    const hear = async (message) => {
      const { id, question, answer, error } = message;
      // Check hasOwnProperty to detect undefined values.
      if (message.hasOwnProperty('answer')) {
        const { resolve, reject } = openQuestions[id];
        if (error) {
          reject(error);
        } else {
          resolve(answer);
        }
        delete openQuestions[id];
      } else if (message.hasOwnProperty('question')) {
        const answer = await agent({ ask, question });
        say({ id, answer });
      } else {
        throw Error('die');
      }
    };
    return { ask, hear };
  };

  // Inlined browser-or-node@1.2.1 due to es6 importing issue.

  const _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj; };

  /* global window self */

  const isBrowser$1 = typeof window !== 'undefined' && typeof window.document !== 'undefined';

  /* eslint-disable no-restricted-globals */
  const isWebWorker = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope';
  /* eslint-enable no-restricted-globals */

  const isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;

  /* global Worker */

  // Sets up a worker with conversational interface.
  const createService = async ({ nodeWorker, webWorker, agent }) => {
    if (isNode) {
      // const { Worker } = await import('worker_threads');
      const { Worker } = require('worker_threads');
      const worker = new Worker(nodeWorker);
      const say = (message) => worker.postMessage(message);
      const { ask, hear } = conversation({ agent, say });
      const stop = async () => {
        return new Promise((resolve, reject) => {
          worker.terminate((err, exitCode) => {
            if (err) {
              reject(err);
            } else {
              resolve(exitCode);
            }
          });
        });
      };
      worker.on('message', hear);
      return { ask, stop };
    } else if (isBrowser$1) {
      const worker = new Worker(webWorker);
      const say = (message) => worker.postMessage(message);
      const { ask, hear } = conversation({ agent, say });
      worker.onmessage = ({ data }) => hear(data);
      return { ask };
    } else {
      throw Error('die');
    }
  };

  const promises = {};

  const files = {};
  const fileCreationWatchers = [];

  const getFile = (options, path) => {
    let file = files[path];
    if (file === undefined) {
      file = { path: path, watchers: [] };
      files[path] = file;
      for (const watcher of fileCreationWatchers) {
        watcher(options, file);
      }
    }
    return file;
  };

  const watchFileCreation = (thunk) => fileCreationWatchers.push(thunk);

  /* global self */

  const writeFile = async (options, path, data) => {
    if (isWebWorker) {
      return self.ask({ writeFile: { options, path, data: await data } });
    }
    const { ephemeral } = options;

    data = await data;
    const file = getFile(options, path);
    file.data = data;

    for (const watcher of file.watchers) {
      watcher(options, file);
    }

    if (!ephemeral) {
      if (isNode) {
        return promises.writeFile(path, data);
      }
    }
  };

  const log = (text) => writeFile({ ephemeral: true }, 'console/out', text);



  var nodeFetch = /*#__PURE__*/Object.freeze({

  });

  /* global self */

  const getUrlFetcher = async () => {
    if (typeof window !== 'undefined') {
      return window.fetch;
    } else {
      return nodeFetch;
    }
  };

  const getFileFetcher = async () => {
    if (isNode) {
      // FIX: Put this through getFile, also.
      return promises.readFile;
    } else if (isBrowser$1) {
      // This will always fail, but maybe it should use local storage.
      return () => {};
    } else {
      throw Error('die');
    }
  };

  // Fetch from internal store.
  // FIX: Support browser local storage.
  const fetchPersistent = async (path) => {
    try {
      const fetchFile = await getFileFetcher();
      const data = await fetchFile(path);
      return data;
    } catch (e) {
    }
  };

  // Fetch from external sources.
  const fetchSources = async (sources) => {
    const fetchUrl = await getUrlFetcher();
    const fetchFile = await getFileFetcher();
    // Try to load the data from a source.
    for (const source of sources) {
      if (source.url !== undefined) {
        log(`# Fetching ${source.url}`);
        const response = await fetchUrl(source.url);
        if (response.ok) {
          const data = await response.text();
          return data;
        }
      } else if (source.file !== undefined) {
        try {
          const data = await fetchFile(source.file);
          return data;
        } catch (e) {}
      } else {
        throw Error('die');
      }
    }
  };

  const readFile = async (options, path) => {
    if (isWebWorker) {
      return self.ask({ readFile: { options, path } });
    }
    const { sources = [] } = options;
    const file = getFile(options, path);
    if (file.data === undefined) {
      file.data = await fetchPersistent(path);
    }
    if (file.data === undefined) {
      file.data = await fetchSources(sources);
    }
    if (file.data !== undefined) {
      if (file.data.then) {
        // Resolve any outstanding promises.
        file.data = await file.data;
      }
    }
    return file.data;
  };

  const watchFile = (path, thunk) => getFile({}, path).watchers.push(thunk);



  var sys = /*#__PURE__*/Object.freeze({
    createService: createService,
    conversation: conversation,
    log: log,
    readFile: readFile,
    watchFile: watchFile,
    watchFileCreation: watchFileCreation,
    writeFile: writeFile
  });

  const log$1 = (text) => log(text);

  const max$2 = Math.max;

  const fromPath = ({ points }) => Shape.fromPathToZ0Surface(points);

  const polygon = dispatch(
    'polygon',
    // polygon([[0,0],[3,0],[3,3]])
    (points) => {
      assertPoints(points);
      assert$1(points, 'Not at least three points', points.length >= 3);
      return () => fromPath({ path: points });
    },
    // polygon({ points: [[0, 0], [3, 0], [3, 3]] })
    ({ points }) => {
      assertPoints(points);
      assert$1(points, 'Not at least three points', points.length >= 3);
      return () => fromPath({ path: points });
    });

  /**
   * polyhedron({      // openscad-like (e.g. pyramid)
   *   points: [ [10,10,0],[10,-10,0],[-10,-10,0],[-10,10,0], // the four points at base
   *             [0,0,10] ],                                  // the apex point
   *   triangles: [ [0,1,4],[1,2,4],[2,3,4],[3,0,4],          // each triangle side
   *                [1,0,3],[2,1,3] ]                         // two triangles for square base
   * });
   *
   */

  const polyhedron = ({ points = [], triangles = [] }) => {
    const polygons = [];

    for (const triangle of triangles) {
      polygons.push(triangle.map(point => points[point]));
    }

    return Shape.fromPolygons(polygons);
  };

  const Y_ADD_1 = 1 << 23;
  const Y_SUB_1 = 1 << 22;
  const Y_ADD_9 = 1 << 21;
  const Y_SUB_9 = 1 << 20;
  const X_SUB_9 = 1 << 19;
  const X_ADD_9 = 1 << 18;
  const X_SUB_1 = 1 << 17;
  const X_ADD_1 = 1 << 16;
  const Y_ADD_3 = 1 << 15;
  const Y_SUB_3 = 1 << 14;
  const Y_ADD_27 = 1 << 13;
  const Y_SUB_27 = 1 << 12;
  const X_SUB_27 = 1 << 11;
  const X_ADD_27 = 1 << 10;
  const X_SUB_3 = 1 << 9;
  const X_ADD_3 = 1 << 8;
  const JUMP_STITCH = 1 << 7;
  const PAUSE = 1 << 6;
  const Y_ADD_81 = 1 << 5;
  const Y_SUB_81 = 1 << 4;
  const X_SUB_81 = 1 << 3;
  const X_ADD_81 = 1 << 2;
  const END$1 = (Y_ADD_81 | Y_SUB_81);

  const createByteFetcher = (bytes) => {
    let bytesRead = 0;
    const byteFetcher = (length) => {
      const fetched = bytes.slice(bytesRead, bytesRead += length);
      return fetched;
    };
    return byteFetcher;
  };

  const fetchHeader = (options = {}, fetchBytes) => {
    function readBytes (prefix, field, converter, start, length, flag) {
      let bytes = fetchBytes(length);
      if (field !== '') {
        options[field] = converter(prefix, bytes);
      }
    }

    function asString (prefix, bytes) {
      return Buffer.from(bytes).toString().slice(prefix.length).trim();
    }

    const asNumber = (prefix, bytes) => {
      const number = parseInt(asString(prefix, bytes));
      if (isNaN(number)) {
        return undefined;
      } else {
        return number;
      }
    };

    readBytes('LA:', 'label', asString, 0, 20); // Label
    readBytes('ST:', 'stitchCount', asNumber, 20, 11);
    readBytes('CO:', 'colorCount', asNumber, 31, 7);
    readBytes('+X:', 'positiveX', asNumber, 38, 9);
    readBytes('-X:', 'negativeX', asNumber, 47, 9);
    readBytes('+Y:', 'positiveY', asNumber, 56, 9);
    readBytes('-Y:', 'negativeY', asNumber, 65, 9);
    readBytes('AX:', 'deltaX', asNumber, 74, 10, 'sign');
    readBytes('AY:', 'deltaY', asNumber, 84, 10, 'sign');
    readBytes('MX:', 'previousX', asNumber, 94, 10, 'sign');
    readBytes('MY:', 'previousY', asNumber, 104, 10, 'sign');
    readBytes('PD:', 'previousFile', asNumber, 114, 10);
    readBytes('\x1a   ', '', '', 124, 4); // end of header
    readBytes('', '', '', 128, 384); // block padding

    return options;
  };

  const fetchStitch = (fetchBytes) => {
    let bytes = fetchBytes(3);
    let r = (bytes[0] << 16) | (bytes[1] << 8) | (bytes[2] << 0);

    let x = 0;
    if (r & X_ADD_81) x += 81;
    if (r & X_SUB_81) x -= 81;
    if (r & X_ADD_27) x += 27;
    if (r & X_SUB_27) x -= 27;
    if (r & X_ADD_9) x += 9;
    if (r & X_SUB_9) x -= 9;
    if (r & X_ADD_3) x += 3;
    if (r & X_SUB_3) x -= 3;
    if (r & X_ADD_1) x += 1;
    if (r & X_SUB_1) x -= 1;

    let y = 0;
    if (r & Y_ADD_81) y += 81;
    if (r & Y_SUB_81) y -= 81;
    if (r & Y_ADD_27) y += 27;
    if (r & Y_SUB_27) y -= 27;
    if (r & Y_ADD_9) y += 9;
    if (r & Y_SUB_9) y -= 9;
    if (r & Y_ADD_3) y += 3;
    if (r & Y_SUB_3) y -= 3;
    if (r & Y_ADD_1) y += 1;
    if (r & Y_SUB_1) y -= 1;

    let flag;
    if ((r & (END$1 | JUMP_STITCH | PAUSE)) === (END$1 | JUMP_STITCH | PAUSE)) {
      flag = 'end';
    } else if ((r & (JUMP_STITCH | PAUSE)) === (JUMP_STITCH | PAUSE)) {
      flag = 'color_change';
    } else if (r & JUMP_STITCH) {
      flag = 'jump';
    } else {
      flag = 'stitch';
    }
    return [x, y, flag];
  };

  const fetchStitches = ({ previousX = 0, previousY = 0 }, fetchBytes) => {
    let x = previousX;
    let y = previousY;

    const paths = [];
    let path = [null, [previousX, previousY]];

    const finishPath = () => {
      if (path.length > 2) {
        paths.push(path);
      }
      path = [null];
    };

    for (;;) {
      const [dx, dy, flag] = fetchStitch(fetchBytes);

      x += dx;
      y += dy;

      switch (flag) {
        default:
        case 'end': {
          finishPath();
          return paths;
        }
        case 'color_change': {
          finishPath();
          path.push([x, y]);
          break;
        }
        case 'jump': {
          finishPath();
          break;
        }
        case 'stitch': {
          path.push([x, y]);
        }
      }
    }
  };

  const fromDst = async (options = {}, data) => {
    const fetcher = createByteFetcher(data);
    const header = fetchHeader({}, fetcher);
    return { paths: scale$3([0.1, 0.1, 0.1], fetchStitches(header, fetcher)) };
  };

  const readDst = async (options) => {
    const { path } = options;
    return Shape.fromGeometry(await fromDst(options, await readFile(options, path)));
  };

  const RESOLUTION = 10000;

  // const URL_PREFIX = 'https://github.com/ctiller/ldraw/blob/master/';
  const URL_PREFIX = 'https://jsxcad.js.org/ldraw/ldraw';

  const readPart = async (part) => {
    part = part.toLowerCase().replace(/\\/, '/');
    return readFile({ sources: [{ url: `${URL_PREFIX}/parts/${part}` },
                                { url: `${URL_PREFIX}/p/48/${part}` },
                                { url: `${URL_PREFIX}/p/${part}` }] },
                    `tmp/ldraw-part-${part}`);
  };

  const loadPart = async (part) => {
    let code = [];
    let source = await readPart(part);
    for (let line of source.split('\r\n')) {
      let args = line.replace(/^\s+/, '').split(/\s+/);
      code.push(args);
    }
    return { type: source.type, code: code, name: source.name };
  };

  const flt = (text) => parseFloat(text);
  const ldu = (text) => Math.round(flt(text) * RESOLUTION) / RESOLUTION;

  const fromPartToPolygons = async ({ part, invert = false, stack = [] }) => {
    let code = await loadPart(part);
    let polygons = [];
    let direction = 'CCW';
    let invertNext = 0;

    function Direction () {
      if (invert) {
        return { CCW: 'CW', CW: 'CCW' }[direction];
      } else {
        return direction;
      }
    }

    for (let args of code.code) {
      switch (parseInt(args[0])) {
        case 0: { // meta
          switch (args[1]) {
            case 'BFC':
              switch (args[2]) {
                case 'CERTIFY': {
                  switch (args[3]) {
                    case 'CW': {
                      direction = 'CW';
                      break;
                    }
                    case 'CCW': {
                      direction = 'CCW';
                      break;
                    }
                  }
                  break;
                }
                case 'INVERTNEXT': {
                  invertNext = 2;
                  break;
                }
              }
              break;
          }
          break;
        }
        case 1: { // sub-part
          let [, , x, y, z, a, b, c, d, e, f, g, h, i, subPart] = args;
          let subInvert = invert;
          if (invertNext > 0) {
            subInvert = !subInvert;
          }
          stack.push(subPart);
          let matrix = fromValues(flt(a), flt(d), flt(g), 0.0,
                                          flt(b), flt(e), flt(h), 0.0,
                                          flt(c), flt(f), flt(i), 0.0,
                                          ldu(x), ldu(y), ldu(z), 1.0);
          polygons.push(...transform$3(matrix, await fromPartToPolygons({ part: subPart, invert: subInvert, stack })));
          stack.pop();
          break;
        }
        case 2: { // display line
          break;
        }
        case 3: { // triangle
          let [, , x1, y1, z1, x2, y2, z2, x3, y3, z3] = args;
          let polygon = [[ldu(x1), ldu(y1), ldu(z1)],
                         [ldu(x2), ldu(y2), ldu(z2)],
                         [ldu(x3), ldu(y3), ldu(z3)]];
          if (!isStrictlyCoplanar(polygon)) throw Error('die');
          if (Direction() === 'CW') {
            polygons.push(flip(polygon));
          } else {
            polygons.push(polygon);
          }
          break;
        }
        case 4: { // quad
          let [, , x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4] = args;
          let p = [[ldu(x1), ldu(y1), ldu(z1)],
                   [ldu(x2), ldu(y2), ldu(z2)],
                   [ldu(x3), ldu(y3), ldu(z3)],
                   [ldu(x4), ldu(y4), ldu(z4)]];
          if (Direction() === 'CW') {
            if (isStrictlyCoplanar(p)) {
              polygons.push(flip(p));
            } else {
              polygons.push(flip([p[0], p[1], p[3]]));
              polygons.push(flip([p[2], p[3], p[1]]));
            }
          } else {
            if (isStrictlyCoplanar(p)) {
              polygons.push(p);
            } else {
              polygons.push([p[0], p[1], p[3]]);
              polygons.push([p[2], p[3], p[1]]);
            }
          }
          break;
        }
        case 5: { // optional line
          break;
        }
      }
      if (invertNext > 0) {
        invertNext -= 1;
      }
    }
    return polygons;
  };

  const fromLDraw = async ({ part }) =>
    ({
      solid: rotateX(-90 * Math.PI / 180,
                     scale$4([0.4, 0.4, 0.4],
                           fromPolygons({}, await fromPartToPolygons({ part }))))
    });

  const readLDraw = async (options) => {
    return Shape.fromGeometry(await fromLDraw(options));
  };

  function parse$4(str) {
    if(typeof str !== 'string') {
      str = str.toString();
    }

    var positions = [];
    var cells = [];
    var faceNormals = [];
    var name = null;

    var lines = str.split('\n');
    var cell = [];

    for(var i=0; i<lines.length; i++) {

      var parts = lines[i]
        .trim()
        .split(' ')
        .filter(function(part) {
          return part !== '';
        });

      switch(parts[0]) {
        case 'solid':
          name = parts.slice(1).join(' ');
          break;
        case 'facet':
          var normal = parts.slice(2).map(Number);
          faceNormals.push(normal);
          break;
        case 'vertex':
          var position = parts.slice(1).map(Number);
          cell.push(positions.length);
          positions.push(position);
          break;
        case 'endfacet':
          cells.push(cell);
          cell = [];
        default:
          // skip
      }
    }

    return {
      positions: positions,
      cells: cells,
      faceNormals: faceNormals,
      name: name
    };
  }

  var parseStlAscii = parse$4;

  function readVector(buf, off) {
    return [
      buf.readFloatLE(off + 0),
      buf.readFloatLE(off + 4),
      buf.readFloatLE(off + 8)
    ];
  }

  function parse$5(buf) {
    var off = 80; // skip header

    var triangleCount = buf.readUInt32LE(off); 
    off += 4;

    var cells = [];
    var positions = [];
    var faceNormals = [];

    for(var i=0; i<triangleCount; i++) {
      var cell = [];
      var normal = readVector(buf, off);
      off += 12; // 3 floats

      faceNormals.push(normal);

      for(var j=0; j<3; j++) {
        var position = readVector(buf, off);
        off += 12;
        cell.push(positions.length);
        positions.push(position);
      }

      cells.push(cell);
      off += 2; // skip attribute byte count
    }

    return {
      positions: positions,
      cells: cells,
      faceNormals: faceNormals
    };
  }

  var parseStlBinary = parse$5;

  const toParser = (format) => {
    switch (format) {
      case 'ascii': return parseStlAscii;
      case 'binary': return parseStlBinary;
      default: throw Error('die');
    }
  };

  const fromStl = async ({ format = 'ascii' }, stl) => {
    const parse = toParser(format);
    const { positions, cells } = parse(stl);
    const polygons = [];
    for (const [a, b, c] of cells) {
      polygons.push([positions[a], positions[b], positions[c]]);
    }
    return { solid: fromPolygons({}, polygons) };
  };

  const ensureMapElement = (map, key, ensurer = (_ => [])) => {
    if (!map.has(key)) {
      map.set(key, ensurer());
    }
    return map.get(key);
  };

  /**
   * Return the direction of the given line.
   *
   * @return {vec3} the relative vector in the direction of the line
   */

  /**
   * Create a line in 3D space from the given data.
   *
   * The point can be any random point on the line.
   * The direction must be a vector with positive or negative distance from the point.
   * See the logic of fromPoints for appropriate values.
   *
   * @param {vec3} point start point of the line segment
   * @param {vec3} direction direction of the line segment
   * @returns {line3} a new unbounded 3D line
   */
  const fromPointAndDirection = (point, direction) => [point, unit(direction)];

  /**
   * Creates a new 3D line that passes through the given points.
   *
   * @param {vec3} p1 start point of the line segment
   * @param {vec3} p2 end point of the line segment
   * @returns {line3} a new unbounded 3D line
   */
  const fromPoints$2 = (p1, p2) => {
    const direction = subtract(p2, p1);
    return fromPointAndDirection(p1, direction);
  };

  /**
   * Return the origin of the given line.
   *
   * @param {line3} line the 3D line of reference
   * @return {vec3} the origin of the line
   */

  const toIdentity = JSON.stringify;

  /**
   * findVertexViolations determines that the vertex's edges are closed.
   *
   * For a watertight vertex, it will consist of unique lines with an even count.
   *
   * @params {start} start - the vertex.
   * @params {Array<point>} ends - the sorted other end of each edge.
   * @returns {Array} violations.
   *
   * Note that checking for pairs of edges isn't sufficient.
   *
   *    A-----B
   *    |     |
   *    |     E--F
   *    |     |  |
   *    C-----D--G
   *
   * A situation with B~D, D~B, E~D, D~E would lead such an algorithm to believe
   * the vertex was watertight when it is only partially watertight.
   *
   * So, we need to detect any distinct colinear edges.
   */
  const findVertexViolations = (start, ...ends) => {
    const lines = new Map();
    ends.forEach(end => {
      // These are not actually lines, but they all start at the same position, so we can pretend.
      const ray = fromPoints$2(start, end);
      ensureMapElement(lines, toIdentity(ray)).push(end);
    });

    const distance = (end) => length(subtract(end, start));

    let violations = [];
    lines.forEach(ends => {
      ends.sort((a, b) => distance(a) - distance(b));
      for (let nth = 1; nth < ends.length; nth++) {
        if (!equals(ends[nth], ends[nth - 1])) {
          violations.push(['unequal', [start, ...ends]]);
          violations.push(['unequal', [start, ...ends].reverse()]);
          break;
        }
      }
      if (ends.length % 2 !== 0) ;
    });

    // If no violations, it is Watertight.
    return violations;
  };

  const toIdentity$1 = JSON.stringify;

  const findPolygonsViolations = polygons => {
    // A map from vertex value to connected edges represented as an array in
    // the form [start, ...end].
    const edges = new Map();
    const addEdge = (start, end) => ensureMapElement(edges, toIdentity$1(start), () => [start]).push(end);
    const addEdges = (start, end) => { addEdge(start, end); addEdge(end, start); };
    polygons.forEach(polygon => eachEdge({}, addEdges, polygon));

    // Edges are assembled, check for matches
    let violations = [];
    edges.forEach(vertex => {
      violations = [].concat(violations, findVertexViolations(...vertex));
    });

    return violations;
  };

  const isWatertightPolygons = polygons => findPolygonsViolations(polygons).length === 0;

  const EPS = 1e-5;
  const W$3 = 3;

  const tag = vertex => JSON.stringify([...vertex]);

  function addSide (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {
    let starttag = tag(vertex0);
    let endtag = tag(vertex1);
    if (starttag === endtag) throw new Error('Assertion failed');
    let newsidetag = starttag + '/' + endtag;
    let reversesidetag = endtag + '/' + starttag;
    if (reversesidetag in sidemap) {
      // we have a matching reverse oriented side.
      // Instead of adding the new side, cancel out the reverse side:
      // console.log("addSide("+newsidetag+") has reverse side:");
      deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex1, vertex0, null);
      return null;
    }
    //  console.log("addSide("+newsidetag+")");
    let newsideobj = {
      vertex0: vertex0,
      vertex1: vertex1,
      polygonindex: polygonindex
    };
    if (!(newsidetag in sidemap)) {
      sidemap[newsidetag] = [newsideobj];
    } else {
      sidemap[newsidetag].push(newsideobj);
    }
    if (starttag in vertextag2sidestart) {
      vertextag2sidestart[starttag].push(newsidetag);
    } else {
      vertextag2sidestart[starttag] = [newsidetag];
    }
    if (endtag in vertextag2sideend) {
      vertextag2sideend[endtag].push(newsidetag);
    } else {
      vertextag2sideend[endtag] = [newsidetag];
    }
    return newsidetag;
  }

  function deleteSide (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {
    let starttag = tag(vertex0);
    let endtag = tag(vertex1);
    let sidetag = starttag + '/' + endtag;
    // console.log("deleteSide("+sidetag+")");
    if (!(sidetag in sidemap)) throw new Error('Assertion failed');
    let idx = -1;
    let sideobjs = sidemap[sidetag];
    for (let i = 0; i < sideobjs.length; i++) {
      let sideobj = sideobjs[i];
      if (!equals(sideobj.vertex0, vertex0)) continue;
      if (!equals(sideobj.vertex1, vertex1)) continue;
      if (polygonindex !== null) {
        if (sideobj.polygonindex !== polygonindex) continue;
      }
      idx = i;
      break;
    }
    if (idx < 0) throw new Error('Assertion failed');
    sideobjs.splice(idx, 1);
    if (sideobjs.length === 0) {
      delete sidemap[sidetag];
    }
    idx = vertextag2sidestart[starttag].indexOf(sidetag);
    if (idx < 0) throw new Error('Assertion failed');
    vertextag2sidestart[starttag].splice(idx, 1);
    if (vertextag2sidestart[starttag].length === 0) {
      delete vertextag2sidestart[starttag];
    }

    idx = vertextag2sideend[endtag].indexOf(sidetag);
    if (idx < 0) throw new Error('Assertion failed');
    vertextag2sideend[endtag].splice(idx, 1);
    if (vertextag2sideend[endtag].length === 0) {
      delete vertextag2sideend[endtag];
    }
  }

  /*
       fixTJunctions:

       Suppose we have two polygons ACDB and EDGF:

        A-----B
        |     |
        |     E--F
        |     |  |
        C-----D--G

       Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain
       that the solid is not watertight. This is because the watertightness check is done by checking if
       each side DE is matched by another side ED.

       This function will return a new solid with ACDB replaced by ACDEB

       Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result
       should not be used for further Geom3 operations!
  */
  const fixTJunctions = function (polygons) {
    let sidemap = {};

    // STEP 1
    for (let polygonindex = 0; polygonindex < polygons.length; polygonindex++) {
      let polygon = polygons[polygonindex];
      let numvertices = polygon.length;
      // should be true
      if (numvertices >= 3) {
        let vertex = polygon[0];
        let vertextag = tag(vertex);
        for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {
          let nextvertexindex = vertexindex + 1;
          if (nextvertexindex === numvertices) nextvertexindex = 0;
          let nextvertex = polygon[nextvertexindex];
          let nextvertextag = tag(nextvertex);
          let sidetag = vertextag + '/' + nextvertextag;
          let reversesidetag = nextvertextag + '/' + vertextag;
          if (reversesidetag in sidemap) {
            // this side matches the same side in another polygon. Remove from sidemap:
            let ar = sidemap[reversesidetag];
            ar.splice(-1, 1);
            if (ar.length === 0) {
              delete sidemap[reversesidetag];
            }
          } else {
            let sideobj = {
              vertex0: vertex,
              vertex1: nextvertex,
              polygonindex: polygonindex
            };
            if (!(sidetag in sidemap)) {
              sidemap[sidetag] = [sideobj];
            } else {
              sidemap[sidetag].push(sideobj);
            }
          }
          vertex = nextvertex;
          vertextag = nextvertextag;
        }
      }
    }
    // STEP 2
    // now sidemap contains 'unmatched' sides
    // i.e. side AB in one polygon does not have a matching side BA in another polygon
    let vertextag2sidestart = {};
    let vertextag2sideend = {};
    let sidestocheck = {};
    let sidemapisempty = true;
    for (let sidetag in sidemap) {
      sidemapisempty = false;
      sidestocheck[sidetag] = true;
      sidemap[sidetag].map(function (sideobj) {
        let starttag = tag(sideobj.vertex0);
        let endtag = tag(sideobj.vertex1);
        if (starttag in vertextag2sidestart) {
          vertextag2sidestart[starttag].push(sidetag);
        } else {
          vertextag2sidestart[starttag] = [sidetag];
        }
        if (endtag in vertextag2sideend) {
          vertextag2sideend[endtag].push(sidetag);
        } else {
          vertextag2sideend[endtag] = [sidetag];
        }
      });
    }

    // STEP 3 : if sidemap is not empty
    if (!sidemapisempty) {
      // make a copy of the polygons array, since we are going to modify it:
      polygons = polygons.slice(0);
      while (true) {
        let sidemapisempty = true;
        for (let sidetag in sidemap) {
          sidemapisempty = false;
          sidestocheck[sidetag] = true;
        }
        if (sidemapisempty) break;
        let donesomething = false;
        while (true) {
          let sidetagtocheck = null;
          for (let sidetag in sidestocheck) {
            sidetagtocheck = sidetag;
            break; // FIXME  : say what now ?
          }
          if (sidetagtocheck === null) break; // sidestocheck is empty, we're done!
          let donewithside = true;
          if (sidetagtocheck in sidemap) {
            let sideobjs = sidemap[sidetagtocheck];
            if (sideobjs.length === 0) throw new Error('Assertion failed');
            let sideobj = sideobjs[0];
            for (let directionindex = 0; directionindex < 2; directionindex++) {
              let startvertex = (directionindex === 0) ? sideobj.vertex0 : sideobj.vertex1;
              let endvertex = (directionindex === 0) ? sideobj.vertex1 : sideobj.vertex0;
              let startvertextag = tag(startvertex);
              let endvertextag = tag(endvertex);
              let matchingsides = [];
              if (directionindex === 0) {
                if (startvertextag in vertextag2sideend) {
                  matchingsides = vertextag2sideend[startvertextag];
                }
              } else {
                if (startvertextag in vertextag2sidestart) {
                  matchingsides = vertextag2sidestart[startvertextag];
                }
              }
              for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {
                let matchingsidetag = matchingsides[matchingsideindex];
                let matchingside = sidemap[matchingsidetag][0];
                let matchingsidestartvertex = (directionindex === 0) ? matchingside.vertex0 : matchingside.vertex1;
                let matchingsideendvertex = (directionindex === 0) ? matchingside.vertex1 : matchingside.vertex0;
                let matchingsidestartvertextag = tag(matchingsidestartvertex);
                let matchingsideendvertextag = tag(matchingsideendvertex);
                if (matchingsideendvertextag !== startvertextag) throw new Error('Assertion failed');
                if (matchingsidestartvertextag === endvertextag) {
                  // matchingside cancels sidetagtocheck
                  deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, startvertex, endvertex, null);
                  deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, startvertex, null);
                  donewithside = false;
                  directionindex = 2; // skip reverse direction check
                  donesomething = true;
                  break;
                } else {
                  let startpos = startvertex;
                  let endpos = endvertex;
                  let checkpos = matchingsidestartvertex;
                  // let direction = checkpos.minus(startpos)
                  let direction = subtract(checkpos, startpos);
                  // Now we need to check if endpos is on the line startpos-checkpos:
                  // let t = endpos.minus(startpos).dot(direction) / direction.dot(direction)
                  let t = dot(subtract(endpos, startpos), direction) / dot(direction, direction);
                  if ((t > 0) && (t < 1)) {
                    let closestpoint = add(startpos, multiply(direction, fromScalar(t)));
                    let distancesquared = squaredDistance(closestpoint, endpos);
                    if (distancesquared < (EPS * EPS)) {
                      // Yes it's a t-junction! We need to split matchingside in two:
                      let polygonindex = matchingside.polygonindex;
                      let polygon = polygons[polygonindex];
                      // find the index of startvertextag in polygon:
                      let insertionvertextag = tag(matchingside.vertex1);
                      let insertionvertextagindex = -1;
                      for (let i = 0; i < polygon.length; i++) {
                        if (tag(polygon[i]) === insertionvertextag) {
                          insertionvertextagindex = i;
                          break;
                        }
                      }
                      if (insertionvertextagindex < 0) throw new Error('Assertion failed');
                      // split the side by inserting the vertex:
                      let newvertices = polygon.slice(0);
                      newvertices.splice(insertionvertextagindex, 0, endvertex);
                      let newpolygon = fromPoints(newvertices);

                      // calculate plane with differents point
                      if (isNaN(toPlane(newpolygon)[W$3])) {
                        let found = false;
                        let loop = function (callback) {
                          newpolygon.forEach(function (item) {
                            if (found) return;
                            callback(item);
                          });
                        };

                        loop(function (a) {
                          loop(function (b) {
                            loop(function (c) {
                              newpolygon.plane = fromPoints$1(a, b, c);
                              if (!isNaN(toPlane(newpolygon)[W$3])) {
                                found = true;
                              }
                            });
                          });
                        });
                      }
                      polygons[polygonindex] = newpolygon;
                      // remove the original sides from our maps
                      // deleteSide(sideobj.vertex0, sideobj.vertex1, null)
                      deleteSide(sidemap, vertextag2sidestart, vertextag2sideend,
                                 matchingside.vertex0, matchingside.vertex1, polygonindex);
                      let newsidetag1 = addSide(sidemap, vertextag2sidestart, vertextag2sideend,
                                                matchingside.vertex0, endvertex, polygonindex);
                      let newsidetag2 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex,
                                                matchingside.vertex1, polygonindex);
                      if (newsidetag1 !== null) sidestocheck[newsidetag1] = true;
                      if (newsidetag2 !== null) sidestocheck[newsidetag2] = true;
                      donewithside = false;
                      directionindex = 2; // skip reverse direction check
                      donesomething = true;
                      break;
                    } // if(distancesquared < 1e-10)
                  } // if( (t > 0) && (t < 1) )
                } // if(endingstidestartvertextag === endvertextag)
              } // for matchingsideindex
            } // for directionindex
          } // if(sidetagtocheck in sidemap)
          if (donewithside) {
            delete sidestocheck[sidetagtocheck];
          }
        }
        if (!donesomething) break;
      }
    }

    return polygons;
  };

  const makeWatertight = polygons => fixTJunctions(polygons);

  /**
   * Translates a polygon array [[[x, y, z], [x, y, z], ...]] to ascii STL.
   * The exterior side of a polygon is determined by a CCW point ordering.
   *
   * @param {Object} options.
   * @param {Polygon Array} polygons - An array of arrays of points.
   * @returns {String} - the ascii STL output.
   */

  const geometryToTriangles = (geometry) => {
    const triangleSets = [];
    eachItem(geometry,
             item => {
               if (item.solid) {
                 triangleSets.push(toTriangles({}, toPolygons({}, item.solid)));
               }
             });
    return [].concat(...triangleSets);
  };

  const toStl = async (options = {}, geometry) => {
    let polygons = geometryToTriangles(geometry);
    if (!isWatertightPolygons(polygons)) {
      console.log(`polygonsToStla: Polygon is not watertight`);
      if (options.doMakeWatertight) {
        polygons = makeWatertight(polygons);
      }
    }
    return `solid JSxCAD\n${convertToFacets(options, canonicalize$2(toTriangles({}, polygons)))}\nendsolid JSxCAD\n`;
  };

  const convertToFacets = (options, polygons) =>
    polygons.map(convertToFacet).join('\n');

  const toStlVector = vector =>
    `${vector[0]} ${vector[1]} ${vector[2]}`;

  const toStlVertex = vertex =>
    `vertex ${toStlVector(vertex)}`;

  const convertToFacet = polygon =>
    `facet normal ${toStlVector(toPlane(polygon))}\n` +
    `outer loop\n` +
    `${toStlVertex(polygon[0])}\n` +
    `${toStlVertex(polygon[1])}\n` +
    `${toStlVertex(polygon[2])}\n` +
    `endloop\n` +
    `endfacet`;

  const readStl = async (options) => {
    const { path } = options;
    return Shape.fromGeometry(await fromStl(options, await readFile(options, path)));
  };

  const a2r = (angle) => angle * 0.017453292519943295;

  const rotate = ([x = 0, y = 0, z = 0], shape) =>
    shape.transform(multiply$1(fromZRotation(a2r(z)), multiply$1(fromYRotation(a2r(y)), fromXRotation(a2r(x)))));

  const method$8 = function (angles) { return rotate(angles, this); };

  Shape.prototype.rotate = method$8;

  const rotateX$1 = (angle, shape) => shape.transform(fromXRotation(angle * 0.017453292519943295));

  const method$9 = function (angle) { return rotateX$1(angle, this); };

  Shape.prototype.rotateX = method$9;

  const rotateY = (angle, shape) => shape.transform(fromYRotation(angle * 0.017453292519943295));

  const method$a = function (angle) { return rotateY(angle, this); };

  Shape.prototype.rotateY = method$a;

  const rotateZ = (angle, shape) => shape.transform(fromZRotation(angle * 0.017453292519943295));

  const method$b = function (angle) { return rotateZ(angle, this); };

  Shape.prototype.rotateZ = method$b;

  const scale$5 = (factor, shape) => {
    if (factor.length) {
      const [x = 1, y = 1, z = 1] = factor;
      return shape.transform(fromScaling([x, y, z]));
    } else {
      // scale(4)
      return shape.transform(fromScaling([factor, factor, factor]));
    }
  };

  const method$c = function (factor) { return scale$5(factor, this); };

  Shape.prototype.scale = method$c;

  const sin$2 = (a) => Math.sin(a / 360 * Math.PI * 2);

  const buildSphere = ({ r = 1, fn = 32 }) => Shape.fromPolygonsToSolid(buildRingSphere({ resolution: fn })).scale([r, r, r]);

  const decode$1 = (params) => {
    // sphere();
    try {
      assertEmpty(params);
      return {};
    } catch (e) {}

    // sphere(2);
    try {
      assertSingle(params);
      const [radius] = params;
      assertNumber(radius);
      return { r: radius };
    } catch (e) {}

    // sphere({ r: 10, fn: 100 });  // geodesic approach (icosahedron further triangulated)
    try {
      assertSingle(params);
      const { r = 1, fn = 32, center = false } = params[0];
      assertNumber(r);
      assertNumber(fn);
      assertBoolean(center);
      return { fn: fn, r: r };
    } catch (e) {}

    throw Error(`Unsupported interface for sphere: ${JSON.stringify(params)}`);
  };

  /**
   *
   * sphere();                          // openscad like
   * sphere(1);
   * sphere({r: 2});                    // Note: center:true is default (unlike other primitives, as OpenSCAD)
   * sphere({r: 2, center: true});     // Note: OpenSCAD doesn't support center for sphere but we do
   * sphere({r: 2, center: [false, false, true]}); // individual axis center
   * sphere({r: 10, fn: 100 });
   * sphere({r: 10, fn: 100, type: 'geodesic'});  // geodesic approach (icosahedron further triangulated)
   */
  const sphere = (...params) => buildSphere(decode$1(params));

  const sqrt$1 = Math.sqrt;

  const edgeScale$1 = regularPolygonEdgeLengthToRadius(1, 4);
  const unitSquare = () => Shape.fromPathToZ0Surface(buildRegularPolygon({ edges: 4 })).rotateZ(45).scale(edgeScale$1);

  const fromSize = ({ size }) => unitSquare().scale(size);
  const fromDimensions = ({ width, length }) => unitSquare().scale([width, length, 1]);

  const square = dispatch(
    'square',
    // square()
    (...args) => {
      assertEmpty(args);
      return () => fromSize({ size: 1 });
    },
    // square(4)
    (size) => {
      assertNumber(size);
      return () => fromSize({ size });
    },
    // square({ size: 4 })
    ({ size }) => {
      assertNumber(size);
      return () => fromSize({ size });
    },
    // square({ size: [4, 5] })
    ({ size }) => {
      const [width, length, ...rest] = size;
      assertNumber(width, length);
      assertEmpty(rest);
      return () => fromDimensions({ width, length });
    });

  const svgPath = (options = {}, svgPath) =>
    Shape.fromGeometry(fromSvgPath(options, svgPath));

  const buildTetrahedron = ({ r = 1 }) => Shape.fromPolygons(buildRegularTetrahedron({})).scale([r, r, r]);

  const decode$2 = (params) => {
    // sphere();
    try {
      assertEmpty(params);
      return {};
    } catch (e) {}

    // sphere(2);
    try {
      assertSingle(params);
      const [radius] = params;
      assertNumber(radius);
      return { r: radius };
    } catch (e) {}

    // sphere({ r: 10, fn: 100 });  // geodesic approach (icosahedron further triangulated)
    try {
      assertSingle(params);
      const { r = 1, fn = 32, center = false } = params[0];
      assertNumber(r);
      assertNumber(fn);
      assertBoolean(center);
      return { fn: fn, r: r };
    } catch (e) {}

    throw Error(`Unsupported interface for sphere: ${JSON.stringify(params)}`);
  };

  /**
   *
   * sphere();                          // openscad like
   * sphere(1);
   * sphere({r: 2});                    // Note: center:true is default (unlike other primitives, as OpenSCAD)
   * sphere({r: 2, center: true});     // Note: OpenSCAD doesn't support center for sphere but we do
   * sphere({r: 2, center: [false, false, true]}); // individual axis center
   * sphere({r: 10, fn: 100 });
   * sphere({r: 10, fn: 100, type: 'geodesic'});  // geodesic approach (icosahedron further triangulated)
   */
  const tetrahedron = (...params) => buildTetrahedron(decode$2(params));

  const union$5 = (...params) => {
    switch (params.length) {
      case 0: {
        return Shape.fromGeometry({ assembly: [] });
      }
      case 1: {
        return params[0];
      }
      default: {
        return unionLazily(...params);
      }
    }
  };

  const method$d = function (...shapes) { return union$5(this, ...shapes); };

  Shape.prototype.union = method$d;

  const X$1 = 0;
  const Y$1 = 1;

  // Not entirely sure how conformant this is, but it seems to work for simple
  // cases.

  // Width are height are in post-script points.
  const header = ({ width = 595, height = 841, lineWidth = 0.096 }) =>
    [`%PDF-1.5`,
     `1 0 obj << /Pages 2 0 R /Type /Catalog >> endobj`,
     `2 0 obj << /Count 1 /Kids [ 3 0 R ] /Type /Pages >> endobj`,
     `3 0 obj <<`,
     `  /Contents 4 0 R`,
     `  /MediaBox [ 0 0 ${width.toFixed(9)} ${height.toFixed(9)} ]`,
     `  /Parent 2 0 R`,
     `  /Type /Page`,
     `>>`,
     `endobj`,
     `4 0 obj << >>`,
     `stream`,
     `${lineWidth.toFixed(9)} w`];

  const footer =
     [`endstream`,
      `endobj`,
      `trailer << /Root 1 0 R /Size 4 >>`,
      `%%EOF`];

  const geometryToPaths = (geometry) => {
    const pathsets = [];
    eachItem(geometry,
             item => {
               if (item.paths) {
                 pathsets.push(item.paths);
               }
               if (item.z0Surface) {
                 pathsets.push(item.z0Surface);
               }
             });
    return [].concat(...pathsets);
  };

  const toPdf = async ({ orientation = 'portrait', unit = 'mm', lineWidth = 0.096, size = [210, 297] }, geometry) => {
    const paths = geometryToPaths(await geometry);
    // This is the size of a post-script point in mm.
    const pointSize = 0.352777778;
    const scale = 1 / pointSize;
    const [width, height] = size;
    const lines = [];
    const [min, max] = measureBoundingBox$1(paths);
    // Currently the origin is at the bottom left.
    // Subtract the x min, and the y max, then add the page height to bring
    // it up to the top left. This positions the origin nicely for laser
    // cutting and printing.
    const offset = [-min[X$1] * scale, (height - max[Y$1]) * scale, 0];
    const matrix = multiply$1(fromTranslation(offset),
                            fromScaling([scale, scale, scale]));
    for (const path of transform$5(matrix, paths)) {
      let nth = (path[0] === null) ? 1 : 0;
      const [x1, y1] = path[nth];
      lines.push(`${x1.toFixed(9)} ${y1.toFixed(9)} m`); // move-to.
      for (nth++; nth < path.length; nth++) {
        const [x2, y2] = path[nth];
        lines.push(`${x2.toFixed(9)} ${y2.toFixed(9)} l`); // line-to.
      }
      if (path[0] !== null) {
        // A leading null indicates an open path.
        lines.push(`h`); // close path.
      }
      lines.push(`S`); // stroke.
    }

    return [].concat(header({ width: width * scale, height: height * scale, lineWidth: lineWidth }),
                     lines,
                     footer).join('\n');
  };

  const writePdf = async (options, shape) => {
    const { path } = options;
    const geometry = shape.toDisjointGeometry();
    return writeFile({ geometry }, path, toPdf({ preview: true, ...options }, geometry));
  };

  const toGeometry$1 = ({ disjoint = true }, shape) => {
    if (disjoint) {
      return shape.toDisjointGeometry();
    } else {
      return shape.toGeometry();
    }
  };

  const writeStl = async (options, shape) => {
    const { path } = options;
    const geometry = toGeometry$1(options, shape);
    return writeFile({ preview: true, geometry }, path, toStl(options, geometry));
  };

  const method$e = function (options = {}) { writeStl(options, this); return this; };

  Shape.prototype.writeStl = method$e;

  const writeSvg = async (options, shape) => {
    const { path } = options;
    const geometry = shape.toDisjointGeometry();
    return writeFile({ geometry, preview: true }, path, toSvg(options, geometry));
  };

  const method$f = function (options = {}) { writeSvg(options, this); return this; };

  Shape.prototype.writeSvg = method$f;

  // Polyfills

  if ( Number.EPSILON === undefined ) {

  	Number.EPSILON = Math.pow( 2, - 52 );

  }

  if ( Number.isInteger === undefined ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

  	Number.isInteger = function ( value ) {

  		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

  	};

  }

  //

  if ( Math.sign === undefined ) {

  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

  	Math.sign = function ( x ) {

  		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

  	};

  }

  if ( 'name' in Function.prototype === false ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

  	Object.defineProperty( Function.prototype, 'name', {

  		get: function () {

  			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

  		}

  	} );

  }

  if ( Object.assign === undefined ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

  	( function () {

  		Object.assign = function ( target ) {

  			if ( target === undefined || target === null ) {

  				throw new TypeError( 'Cannot convert undefined or null to object' );

  			}

  			var output = Object( target );

  			for ( var index = 1; index < arguments.length; index ++ ) {

  				var source = arguments[ index ];

  				if ( source !== undefined && source !== null ) {

  					for ( var nextKey in source ) {

  						if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

  							output[ nextKey ] = source[ nextKey ];

  						}

  					}

  				}

  			}

  			return output;

  		};

  	} )();

  }

  /**
   * https://github.com/mrdoob/eventdispatcher.js/
   */

  function EventDispatcher() {}

  Object.assign( EventDispatcher.prototype, {

  	addEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) this._listeners = {};

  		var listeners = this._listeners;

  		if ( listeners[ type ] === undefined ) {

  			listeners[ type ] = [];

  		}

  		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

  			listeners[ type ].push( listener );

  		}

  	},

  	hasEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) return false;

  		var listeners = this._listeners;

  		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

  	},

  	removeEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) return;

  		var listeners = this._listeners;
  		var listenerArray = listeners[ type ];

  		if ( listenerArray !== undefined ) {

  			var index = listenerArray.indexOf( listener );

  			if ( index !== - 1 ) {

  				listenerArray.splice( index, 1 );

  			}

  		}

  	},

  	dispatchEvent: function ( event ) {

  		if ( this._listeners === undefined ) return;

  		var listeners = this._listeners;
  		var listenerArray = listeners[ event.type ];

  		if ( listenerArray !== undefined ) {

  			event.target = this;

  			var array = listenerArray.slice( 0 );

  			for ( var i = 0, l = array.length; i < l; i ++ ) {

  				array[ i ].call( this, event );

  			}

  		}

  	}

  } );

  var REVISION = '104';
  var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var CullFaceFrontBack = 3;
  var FrontFaceDirectionCW = 0;
  var FrontFaceDirectionCCW = 1;
  var BasicShadowMap = 0;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var FlatShading = 1;
  var SmoothShading = 2;
  var NoColors = 0;
  var FaceColors = 1;
  var VertexColors = 2;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var Uncharted2ToneMapping = 3;
  var CineonToneMapping = 4;
  var ACESFilmicToneMapping = 5;

  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var SphericalReflectionMapping = 305;
  var CubeUVReflectionMapping = 306;
  var CubeUVRefractionMapping = 307;
  var RepeatWrapping = 1000;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipMapNearestFilter = 1004;
  var NearestMipMapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipMapNearestFilter = 1007;
  var LinearMipMapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedShort565Type = 1019;
  var UnsignedInt248Type = 1020;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var RGBEFormat = RGBAFormat;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var LoopOnce = 2200;
  var LoopRepeat = 2201;
  var LoopPingPong = 2202;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var TrianglesDrawMode = 0;
  var TriangleStripDrawMode = 1;
  var TriangleFanDrawMode = 2;
  var LinearEncoding = 3000;
  var sRGBEncoding = 3001;
  var GammaEncoding = 3007;
  var RGBEEncoding = 3002;
  var LogLuvEncoding = 3003;
  var RGBM7Encoding = 3004;
  var RGBM16Encoding = 3005;
  var RGBDEncoding = 3006;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  var _Math = {

  	DEG2RAD: Math.PI / 180,
  	RAD2DEG: 180 / Math.PI,

  	generateUUID: ( function () {

  		// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

  		var lut = [];

  		for ( var i = 0; i < 256; i ++ ) {

  			lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

  		}

  		return function generateUUID() {

  			var d0 = Math.random() * 0xffffffff | 0;
  			var d1 = Math.random() * 0xffffffff | 0;
  			var d2 = Math.random() * 0xffffffff | 0;
  			var d3 = Math.random() * 0xffffffff | 0;
  			var uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +
  				lut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +
  				lut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +
  				lut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];

  			// .toUpperCase() here flattens concatenated strings to save heap memory space.
  			return uuid.toUpperCase();

  		};

  	} )(),

  	clamp: function ( value, min, max ) {

  		return Math.max( min, Math.min( max, value ) );

  	},

  	// compute euclidian modulo of m % n
  	// https://en.wikipedia.org/wiki/Modulo_operation

  	euclideanModulo: function ( n, m ) {

  		return ( ( n % m ) + m ) % m;

  	},

  	// Linear mapping from range <a1, a2> to range <b1, b2>

  	mapLinear: function ( x, a1, a2, b1, b2 ) {

  		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

  	},

  	// https://en.wikipedia.org/wiki/Linear_interpolation

  	lerp: function ( x, y, t ) {

  		return ( 1 - t ) * x + t * y;

  	},

  	// http://en.wikipedia.org/wiki/Smoothstep

  	smoothstep: function ( x, min, max ) {

  		if ( x <= min ) return 0;
  		if ( x >= max ) return 1;

  		x = ( x - min ) / ( max - min );

  		return x * x * ( 3 - 2 * x );

  	},

  	smootherstep: function ( x, min, max ) {

  		if ( x <= min ) return 0;
  		if ( x >= max ) return 1;

  		x = ( x - min ) / ( max - min );

  		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

  	},

  	// Random integer from <low, high> interval

  	randInt: function ( low, high ) {

  		return low + Math.floor( Math.random() * ( high - low + 1 ) );

  	},

  	// Random float from <low, high> interval

  	randFloat: function ( low, high ) {

  		return low + Math.random() * ( high - low );

  	},

  	// Random float from <-range/2, range/2> interval

  	randFloatSpread: function ( range ) {

  		return range * ( 0.5 - Math.random() );

  	},

  	degToRad: function ( degrees ) {

  		return degrees * _Math.DEG2RAD;

  	},

  	radToDeg: function ( radians ) {

  		return radians * _Math.RAD2DEG;

  	},

  	isPowerOfTwo: function ( value ) {

  		return ( value & ( value - 1 ) ) === 0 && value !== 0;

  	},

  	ceilPowerOfTwo: function ( value ) {

  		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

  	},

  	floorPowerOfTwo: function ( value ) {

  		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author philogb / http://blog.thejit.org/
   * @author egraether / http://egraether.com/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   */

  function Vector2( x, y ) {

  	this.x = x || 0;
  	this.y = y || 0;

  }

  Object.defineProperties( Vector2.prototype, {

  	"width": {

  		get: function () {

  			return this.x;

  		},

  		set: function ( value ) {

  			this.x = value;

  		}

  	},

  	"height": {

  		get: function () {

  			return this.y;

  		},

  		set: function ( value ) {

  			this.y = value;

  		}

  	}

  } );

  Object.assign( Vector2.prototype, {

  	isVector2: true,

  	set: function ( x, y ) {

  		this.x = x;
  		this.y = y;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;

  		return this;

  	},

  	multiply: function ( v ) {

  		this.x *= v.x;
  		this.y *= v.y;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;

  		return this;

  	},

  	divide: function ( v ) {

  		this.x /= v.x;
  		this.y /= v.y;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	applyMatrix3: function ( m ) {

  		var x = this.x, y = this.y;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

  		return this;

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

  		return this;

  	},

  	clampScalar: function ( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

  		return this;

  	},

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y;

  	},

  	cross: function ( v ) {

  		return this.x * v.y - this.y * v.x;

  	},

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	angle: function () {

  		// computes the angle in radians with respect to the positive x-axis

  		var angle = Math.atan2( this.y, this.x );

  		if ( angle < 0 ) angle += 2 * Math.PI;

  		return angle;

  	},

  	distanceTo: function ( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	},

  	distanceToSquared: function ( v ) {

  		var dx = this.x - v.x, dy = this.y - v.y;
  		return dx * dx + dy * dy;

  	},

  	manhattanDistanceTo: function ( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );

  		return this;

  	},

  	rotateAround: function ( center, angle ) {

  		var c = Math.cos( angle ), s = Math.sin( angle );

  		var x = this.x - center.x;
  		var y = this.y - center.y;

  		this.x = x * c - y * s + center.x;
  		this.y = x * s + y * c + center.y;

  		return this;

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   */

  function Quaternion( x, y, z, w ) {

  	this._x = x || 0;
  	this._y = y || 0;
  	this._z = z || 0;
  	this._w = ( w !== undefined ) ? w : 1;

  }

  Object.assign( Quaternion, {

  	slerp: function ( qa, qb, qm, t ) {

  		return qm.copy( qa ).slerp( qb, t );

  	},

  	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

  		// fuzz-free, array-based Quaternion SLERP operation

  		var x0 = src0[ srcOffset0 + 0 ],
  			y0 = src0[ srcOffset0 + 1 ],
  			z0 = src0[ srcOffset0 + 2 ],
  			w0 = src0[ srcOffset0 + 3 ],

  			x1 = src1[ srcOffset1 + 0 ],
  			y1 = src1[ srcOffset1 + 1 ],
  			z1 = src1[ srcOffset1 + 2 ],
  			w1 = src1[ srcOffset1 + 3 ];

  		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

  			var s = 1 - t,

  				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

  				dir = ( cos >= 0 ? 1 : - 1 ),
  				sqrSin = 1 - cos * cos;

  			// Skip the Slerp for tiny steps to avoid numeric problems:
  			if ( sqrSin > Number.EPSILON ) {

  				var sin = Math.sqrt( sqrSin ),
  					len = Math.atan2( sin, cos * dir );

  				s = Math.sin( s * len ) / sin;
  				t = Math.sin( t * len ) / sin;

  			}

  			var tDir = t * dir;

  			x0 = x0 * s + x1 * tDir;
  			y0 = y0 * s + y1 * tDir;
  			z0 = z0 * s + z1 * tDir;
  			w0 = w0 * s + w1 * tDir;

  			// Normalize in case we just did a lerp:
  			if ( s === 1 - t ) {

  				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

  				x0 *= f;
  				y0 *= f;
  				z0 *= f;
  				w0 *= f;

  			}

  		}

  		dst[ dstOffset ] = x0;
  		dst[ dstOffset + 1 ] = y0;
  		dst[ dstOffset + 2 ] = z0;
  		dst[ dstOffset + 3 ] = w0;

  	}

  } );

  Object.defineProperties( Quaternion.prototype, {

  	x: {

  		get: function () {

  			return this._x;

  		},

  		set: function ( value ) {

  			this._x = value;
  			this.onChangeCallback();

  		}

  	},

  	y: {

  		get: function () {

  			return this._y;

  		},

  		set: function ( value ) {

  			this._y = value;
  			this.onChangeCallback();

  		}

  	},

  	z: {

  		get: function () {

  			return this._z;

  		},

  		set: function ( value ) {

  			this._z = value;
  			this.onChangeCallback();

  		}

  	},

  	w: {

  		get: function () {

  			return this._w;

  		},

  		set: function ( value ) {

  			this._w = value;
  			this.onChangeCallback();

  		}

  	}

  } );

  Object.assign( Quaternion.prototype, {

  	isQuaternion: true,

  	set: function ( x, y, z, w ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._w = w;

  		this.onChangeCallback();

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this._x, this._y, this._z, this._w );

  	},

  	copy: function ( quaternion ) {

  		this._x = quaternion.x;
  		this._y = quaternion.y;
  		this._z = quaternion.z;
  		this._w = quaternion.w;

  		this.onChangeCallback();

  		return this;

  	},

  	setFromEuler: function ( euler, update ) {

  		if ( ! ( euler && euler.isEuler ) ) {

  			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

  		}

  		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

  		// http://www.mathworks.com/matlabcentral/fileexchange/
  		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
  		//	content/SpinCalc.m

  		var cos = Math.cos;
  		var sin = Math.sin;

  		var c1 = cos( x / 2 );
  		var c2 = cos( y / 2 );
  		var c3 = cos( z / 2 );

  		var s1 = sin( x / 2 );
  		var s2 = sin( y / 2 );
  		var s3 = sin( z / 2 );

  		if ( order === 'XYZ' ) {

  			this._x = s1 * c2 * c3 + c1 * s2 * s3;
  			this._y = c1 * s2 * c3 - s1 * c2 * s3;
  			this._z = c1 * c2 * s3 + s1 * s2 * c3;
  			this._w = c1 * c2 * c3 - s1 * s2 * s3;

  		} else if ( order === 'YXZ' ) {

  			this._x = s1 * c2 * c3 + c1 * s2 * s3;
  			this._y = c1 * s2 * c3 - s1 * c2 * s3;
  			this._z = c1 * c2 * s3 - s1 * s2 * c3;
  			this._w = c1 * c2 * c3 + s1 * s2 * s3;

  		} else if ( order === 'ZXY' ) {

  			this._x = s1 * c2 * c3 - c1 * s2 * s3;
  			this._y = c1 * s2 * c3 + s1 * c2 * s3;
  			this._z = c1 * c2 * s3 + s1 * s2 * c3;
  			this._w = c1 * c2 * c3 - s1 * s2 * s3;

  		} else if ( order === 'ZYX' ) {

  			this._x = s1 * c2 * c3 - c1 * s2 * s3;
  			this._y = c1 * s2 * c3 + s1 * c2 * s3;
  			this._z = c1 * c2 * s3 - s1 * s2 * c3;
  			this._w = c1 * c2 * c3 + s1 * s2 * s3;

  		} else if ( order === 'YZX' ) {

  			this._x = s1 * c2 * c3 + c1 * s2 * s3;
  			this._y = c1 * s2 * c3 + s1 * c2 * s3;
  			this._z = c1 * c2 * s3 - s1 * s2 * c3;
  			this._w = c1 * c2 * c3 - s1 * s2 * s3;

  		} else if ( order === 'XZY' ) {

  			this._x = s1 * c2 * c3 - c1 * s2 * s3;
  			this._y = c1 * s2 * c3 - s1 * c2 * s3;
  			this._z = c1 * c2 * s3 + s1 * s2 * c3;
  			this._w = c1 * c2 * c3 + s1 * s2 * s3;

  		}

  		if ( update !== false ) this.onChangeCallback();

  		return this;

  	},

  	setFromAxisAngle: function ( axis, angle ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

  		// assumes axis is normalized

  		var halfAngle = angle / 2, s = Math.sin( halfAngle );

  		this._x = axis.x * s;
  		this._y = axis.y * s;
  		this._z = axis.z * s;
  		this._w = Math.cos( halfAngle );

  		this.onChangeCallback();

  		return this;

  	},

  	setFromRotationMatrix: function ( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

  			trace = m11 + m22 + m33,
  			s;

  		if ( trace > 0 ) {

  			s = 0.5 / Math.sqrt( trace + 1.0 );

  			this._w = 0.25 / s;
  			this._x = ( m32 - m23 ) * s;
  			this._y = ( m13 - m31 ) * s;
  			this._z = ( m21 - m12 ) * s;

  		} else if ( m11 > m22 && m11 > m33 ) {

  			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

  			this._w = ( m32 - m23 ) / s;
  			this._x = 0.25 * s;
  			this._y = ( m12 + m21 ) / s;
  			this._z = ( m13 + m31 ) / s;

  		} else if ( m22 > m33 ) {

  			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

  			this._w = ( m13 - m31 ) / s;
  			this._x = ( m12 + m21 ) / s;
  			this._y = 0.25 * s;
  			this._z = ( m23 + m32 ) / s;

  		} else {

  			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

  			this._w = ( m21 - m12 ) / s;
  			this._x = ( m13 + m31 ) / s;
  			this._y = ( m23 + m32 ) / s;
  			this._z = 0.25 * s;

  		}

  		this.onChangeCallback();

  		return this;

  	},

  	setFromUnitVectors: function ( vFrom, vTo ) {

  		// assumes direction vectors vFrom and vTo are normalized

  		var EPS = 0.000001;

  		var r = vFrom.dot( vTo ) + 1;

  		if ( r < EPS ) {

  			r = 0;

  			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

  				this._x = - vFrom.y;
  				this._y = vFrom.x;
  				this._z = 0;
  				this._w = r;

  			} else {

  				this._x = 0;
  				this._y = - vFrom.z;
  				this._z = vFrom.y;
  				this._w = r;

  			}

  		} else {

  			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

  			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
  			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
  			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
  			this._w = r;

  		}

  		return this.normalize();

  	},

  	angleTo: function ( q ) {

  		return 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );

  	},

  	rotateTowards: function ( q, step ) {

  		var angle = this.angleTo( q );

  		if ( angle === 0 ) return this;

  		var t = Math.min( 1, step / angle );

  		this.slerp( q, t );

  		return this;

  	},

  	inverse: function () {

  		// quaternion is assumed to have unit length

  		return this.conjugate();

  	},

  	conjugate: function () {

  		this._x *= - 1;
  		this._y *= - 1;
  		this._z *= - 1;

  		this.onChangeCallback();

  		return this;

  	},

  	dot: function ( v ) {

  		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

  	},

  	lengthSq: function () {

  		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

  	},

  	length: function () {

  		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

  	},

  	normalize: function () {

  		var l = this.length();

  		if ( l === 0 ) {

  			this._x = 0;
  			this._y = 0;
  			this._z = 0;
  			this._w = 1;

  		} else {

  			l = 1 / l;

  			this._x = this._x * l;
  			this._y = this._y * l;
  			this._z = this._z * l;
  			this._w = this._w * l;

  		}

  		this.onChangeCallback();

  		return this;

  	},

  	multiply: function ( q, p ) {

  		if ( p !== undefined ) {

  			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
  			return this.multiplyQuaternions( q, p );

  		}

  		return this.multiplyQuaternions( this, q );

  	},

  	premultiply: function ( q ) {

  		return this.multiplyQuaternions( q, this );

  	},

  	multiplyQuaternions: function ( a, b ) {

  		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

  		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
  		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

  		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
  		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
  		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
  		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

  		this.onChangeCallback();

  		return this;

  	},

  	slerp: function ( qb, t ) {

  		if ( t === 0 ) return this;
  		if ( t === 1 ) return this.copy( qb );

  		var x = this._x, y = this._y, z = this._z, w = this._w;

  		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

  		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

  		if ( cosHalfTheta < 0 ) {

  			this._w = - qb._w;
  			this._x = - qb._x;
  			this._y = - qb._y;
  			this._z = - qb._z;

  			cosHalfTheta = - cosHalfTheta;

  		} else {

  			this.copy( qb );

  		}

  		if ( cosHalfTheta >= 1.0 ) {

  			this._w = w;
  			this._x = x;
  			this._y = y;
  			this._z = z;

  			return this;

  		}

  		var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

  		if ( sqrSinHalfTheta <= Number.EPSILON ) {

  			var s = 1 - t;
  			this._w = s * w + t * this._w;
  			this._x = s * x + t * this._x;
  			this._y = s * y + t * this._y;
  			this._z = s * z + t * this._z;

  			return this.normalize();

  		}

  		var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
  		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
  		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
  			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

  		this._w = ( w * ratioA + this._w * ratioB );
  		this._x = ( x * ratioA + this._x * ratioB );
  		this._y = ( y * ratioA + this._y * ratioB );
  		this._z = ( z * ratioA + this._z * ratioB );

  		this.onChangeCallback();

  		return this;

  	},

  	equals: function ( quaternion ) {

  		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this._x = array[ offset ];
  		this._y = array[ offset + 1 ];
  		this._z = array[ offset + 2 ];
  		this._w = array[ offset + 3 ];

  		this.onChangeCallback();

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._w;

  		return array;

  	},

  	onChange: function ( callback ) {

  		this.onChangeCallback = callback;

  		return this;

  	},

  	onChangeCallback: function () {}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author kile / http://kile.stravaganza.org/
   * @author philogb / http://blog.thejit.org/
   * @author mikael emtinger / http://gomo.se/
   * @author egraether / http://egraether.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  function Vector3( x, y, z ) {

  	this.x = x || 0;
  	this.y = y || 0;
  	this.z = z || 0;

  }

  Object.assign( Vector3.prototype, {

  	isVector3: true,

  	set: function ( x, y, z ) {

  		this.x = x;
  		this.y = y;
  		this.z = z;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setZ: function ( z ) {

  		this.z = z;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y, this.z );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;

  		return this;

  	},

  	multiply: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
  			return this.multiplyVectors( v, w );

  		}

  		this.x *= v.x;
  		this.y *= v.y;
  		this.z *= v.z;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;

  		return this;

  	},

  	multiplyVectors: function ( a, b ) {

  		this.x = a.x * b.x;
  		this.y = a.y * b.y;
  		this.z = a.z * b.z;

  		return this;

  	},

  	applyEuler: function () {

  		var quaternion = new Quaternion();

  		return function applyEuler( euler ) {

  			if ( ! ( euler && euler.isEuler ) ) {

  				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

  			}

  			return this.applyQuaternion( quaternion.setFromEuler( euler ) );

  		};

  	}(),

  	applyAxisAngle: function () {

  		var quaternion = new Quaternion();

  		return function applyAxisAngle( axis, angle ) {

  			return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

  		};

  	}(),

  	applyMatrix3: function ( m ) {

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
  		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

  		return this;

  	},

  	applyMatrix4: function ( m ) {

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

  		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
  		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
  		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

  		return this;

  	},

  	applyQuaternion: function ( q ) {

  		var x = this.x, y = this.y, z = this.z;
  		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

  		// calculate quat * vector

  		var ix = qw * x + qy * z - qz * y;
  		var iy = qw * y + qz * x - qx * z;
  		var iz = qw * z + qx * y - qy * x;
  		var iw = - qx * x - qy * y - qz * z;

  		// calculate result * inverse quat

  		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
  		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
  		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

  		return this;

  	},

  	project: function ( camera ) {

  		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

  	},

  	unproject: function ( camera ) {

  		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

  	},

  	transformDirection: function ( m ) {

  		// input: THREE.Matrix4 affine matrix
  		// vector interpreted as a direction

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

  		return this.normalize();

  	},

  	divide: function ( v ) {

  		this.x /= v.x;
  		this.y /= v.y;
  		this.z /= v.z;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

  		return this;

  	},

  	clampScalar: function ( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

  		return this;

  	},

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
  		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z;

  	},

  	// TODO lengthSquared?

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y + this.z * this.z;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

  	},

  	cross: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
  			return this.crossVectors( v, w );

  		}

  		return this.crossVectors( this, v );

  	},

  	crossVectors: function ( a, b ) {

  		var ax = a.x, ay = a.y, az = a.z;
  		var bx = b.x, by = b.y, bz = b.z;

  		this.x = ay * bz - az * by;
  		this.y = az * bx - ax * bz;
  		this.z = ax * by - ay * bx;

  		return this;

  	},

  	projectOnVector: function ( vector ) {

  		var scalar = vector.dot( this ) / vector.lengthSq();

  		return this.copy( vector ).multiplyScalar( scalar );

  	},

  	projectOnPlane: function () {

  		var v1 = new Vector3();

  		return function projectOnPlane( planeNormal ) {

  			v1.copy( this ).projectOnVector( planeNormal );

  			return this.sub( v1 );

  		};

  	}(),

  	reflect: function () {

  		// reflect incident vector off plane orthogonal to normal
  		// normal is assumed to have unit length

  		var v1 = new Vector3();

  		return function reflect( normal ) {

  			return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

  		};

  	}(),

  	angleTo: function ( v ) {

  		var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

  		// clamp, to handle numerical problems

  		return Math.acos( _Math.clamp( theta, - 1, 1 ) );

  	},

  	distanceTo: function ( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	},

  	distanceToSquared: function ( v ) {

  		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

  		return dx * dx + dy * dy + dz * dz;

  	},

  	manhattanDistanceTo: function ( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

  	},

  	setFromSpherical: function ( s ) {

  		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

  	},

  	setFromSphericalCoords: function ( radius, phi, theta ) {

  		var sinPhiRadius = Math.sin( phi ) * radius;

  		this.x = sinPhiRadius * Math.sin( theta );
  		this.y = Math.cos( phi ) * radius;
  		this.z = sinPhiRadius * Math.cos( theta );

  		return this;

  	},

  	setFromCylindrical: function ( c ) {

  		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

  	},

  	setFromCylindricalCoords: function ( radius, theta, y ) {

  		this.x = radius * Math.sin( theta );
  		this.y = y;
  		this.z = radius * Math.cos( theta );

  		return this;

  	},

  	setFromMatrixPosition: function ( m ) {

  		var e = m.elements;

  		this.x = e[ 12 ];
  		this.y = e[ 13 ];
  		this.z = e[ 14 ];

  		return this;

  	},

  	setFromMatrixScale: function ( m ) {

  		var sx = this.setFromMatrixColumn( m, 0 ).length();
  		var sy = this.setFromMatrixColumn( m, 1 ).length();
  		var sz = this.setFromMatrixColumn( m, 2 ).length();

  		this.x = sx;
  		this.y = sy;
  		this.z = sz;

  		return this;

  	},

  	setFromMatrixColumn: function ( m, index ) {

  		return this.fromArray( m.elements, index * 4 );

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   * @author tschw
   */

  function Matrix3() {

  	this.elements = [

  		1, 0, 0,
  		0, 1, 0,
  		0, 0, 1

  	];

  	if ( arguments.length > 0 ) {

  		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

  	}

  }

  Object.assign( Matrix3.prototype, {

  	isMatrix3: true,

  	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

  		var te = this.elements;

  		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
  		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
  		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

  		return this;

  	},

  	identity: function () {

  		this.set(

  			1, 0, 0,
  			0, 1, 0,
  			0, 0, 1

  		);

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().fromArray( this.elements );

  	},

  	copy: function ( m ) {

  		var te = this.elements;
  		var me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
  		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
  		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

  		return this;

  	},

  	setFromMatrix4: function ( m ) {

  		var me = m.elements;

  		this.set(

  			me[ 0 ], me[ 4 ], me[ 8 ],
  			me[ 1 ], me[ 5 ], me[ 9 ],
  			me[ 2 ], me[ 6 ], me[ 10 ]

  		);

  		return this;

  	},

  	applyToBufferAttribute: function () {

  		var v1 = new Vector3();

  		return function applyToBufferAttribute( attribute ) {

  			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

  				v1.x = attribute.getX( i );
  				v1.y = attribute.getY( i );
  				v1.z = attribute.getZ( i );

  				v1.applyMatrix3( this );

  				attribute.setXYZ( i, v1.x, v1.y, v1.z );

  			}

  			return attribute;

  		};

  	}(),

  	multiply: function ( m ) {

  		return this.multiplyMatrices( this, m );

  	},

  	premultiply: function ( m ) {

  		return this.multiplyMatrices( m, this );

  	},

  	multiplyMatrices: function ( a, b ) {

  		var ae = a.elements;
  		var be = b.elements;
  		var te = this.elements;

  		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
  		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
  		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

  		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
  		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
  		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
  		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
  		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
  		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
  		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
  		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
  		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		var te = this.elements;

  		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
  		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
  		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

  		return this;

  	},

  	determinant: function () {

  		var te = this.elements;

  		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
  			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
  			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

  		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

  	},

  	getInverse: function ( matrix, throwOnDegenerate ) {

  		if ( matrix && matrix.isMatrix4 ) {

  			console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

  		}

  		var me = matrix.elements,
  			te = this.elements,

  			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
  			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
  			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

  			t11 = n33 * n22 - n32 * n23,
  			t12 = n32 * n13 - n33 * n12,
  			t13 = n23 * n12 - n22 * n13,

  			det = n11 * t11 + n21 * t12 + n31 * t13;

  		if ( det === 0 ) {

  			var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

  			if ( throwOnDegenerate === true ) {

  				throw new Error( msg );

  			} else {

  				console.warn( msg );

  			}

  			return this.identity();

  		}

  		var detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
  		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

  		te[ 3 ] = t12 * detInv;
  		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
  		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

  		te[ 6 ] = t13 * detInv;
  		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
  		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

  		return this;

  	},

  	transpose: function () {

  		var tmp, m = this.elements;

  		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
  		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
  		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

  		return this;

  	},

  	getNormalMatrix: function ( matrix4 ) {

  		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

  	},

  	transposeIntoArray: function ( r ) {

  		var m = this.elements;

  		r[ 0 ] = m[ 0 ];
  		r[ 1 ] = m[ 3 ];
  		r[ 2 ] = m[ 6 ];
  		r[ 3 ] = m[ 1 ];
  		r[ 4 ] = m[ 4 ];
  		r[ 5 ] = m[ 7 ];
  		r[ 6 ] = m[ 2 ];
  		r[ 7 ] = m[ 5 ];
  		r[ 8 ] = m[ 8 ];

  		return this;

  	},

  	setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

  		var c = Math.cos( rotation );
  		var s = Math.sin( rotation );

  		this.set(
  			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
  			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
  			0, 0, 1
  		);

  	},

  	scale: function ( sx, sy ) {

  		var te = this.elements;

  		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
  		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

  		return this;

  	},

  	rotate: function ( theta ) {

  		var c = Math.cos( theta );
  		var s = Math.sin( theta );

  		var te = this.elements;

  		var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
  		var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

  		te[ 0 ] = c * a11 + s * a21;
  		te[ 3 ] = c * a12 + s * a22;
  		te[ 6 ] = c * a13 + s * a23;

  		te[ 1 ] = - s * a11 + c * a21;
  		te[ 4 ] = - s * a12 + c * a22;
  		te[ 7 ] = - s * a13 + c * a23;

  		return this;

  	},

  	translate: function ( tx, ty ) {

  		var te = this.elements;

  		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
  		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

  		return this;

  	},

  	equals: function ( matrix ) {

  		var te = this.elements;
  		var me = matrix.elements;

  		for ( var i = 0; i < 9; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) return false;

  		}

  		return true;

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		for ( var i = 0; i < 9; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		var te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];

  		array[ offset + 3 ] = te[ 3 ];
  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];

  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];
  		array[ offset + 8 ] = te[ 8 ];

  		return array;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   */

  var _canvas;

  var ImageUtils = {

  	getDataURL: function ( image ) {

  		var canvas;

  		if ( typeof HTMLCanvasElement == 'undefined' ) {

  			return image.src;

  		} else if ( image instanceof HTMLCanvasElement ) {

  			canvas = image;

  		} else {

  			if ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

  			_canvas.width = image.width;
  			_canvas.height = image.height;

  			var context = _canvas.getContext( '2d' );

  			if ( image instanceof ImageData ) {

  				context.putImageData( image, 0, 0 );

  			} else {

  				context.drawImage( image, 0, 0, image.width, image.height );

  			}

  			canvas = _canvas;

  		}

  		if ( canvas.width > 2048 || canvas.height > 2048 ) {

  			return canvas.toDataURL( 'image/jpeg', 0.6 );

  		} else {

  			return canvas.toDataURL( 'image/png' );

  		}

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   */

  var textureId = 0;

  function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

  	Object.defineProperty( this, 'id', { value: textureId ++ } );

  	this.uuid = _Math.generateUUID();

  	this.name = '';

  	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
  	this.mipmaps = [];

  	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

  	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
  	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

  	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

  	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

  	this.format = format !== undefined ? format : RGBAFormat;
  	this.type = type !== undefined ? type : UnsignedByteType;

  	this.offset = new Vector2( 0, 0 );
  	this.repeat = new Vector2( 1, 1 );
  	this.center = new Vector2( 0, 0 );
  	this.rotation = 0;

  	this.matrixAutoUpdate = true;
  	this.matrix = new Matrix3();

  	this.generateMipmaps = true;
  	this.premultiplyAlpha = false;
  	this.flipY = true;
  	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

  	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
  	//
  	// Also changing the encoding after already used by a Material will not automatically make the Material
  	// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
  	this.encoding = encoding !== undefined ? encoding : LinearEncoding;

  	this.version = 0;
  	this.onUpdate = null;

  }

  Texture.DEFAULT_IMAGE = undefined;
  Texture.DEFAULT_MAPPING = UVMapping;

  Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Texture,

  	isTexture: true,

  	updateMatrix: function () {

  		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.name = source.name;

  		this.image = source.image;
  		this.mipmaps = source.mipmaps.slice( 0 );

  		this.mapping = source.mapping;

  		this.wrapS = source.wrapS;
  		this.wrapT = source.wrapT;

  		this.magFilter = source.magFilter;
  		this.minFilter = source.minFilter;

  		this.anisotropy = source.anisotropy;

  		this.format = source.format;
  		this.type = source.type;

  		this.offset.copy( source.offset );
  		this.repeat.copy( source.repeat );
  		this.center.copy( source.center );
  		this.rotation = source.rotation;

  		this.matrixAutoUpdate = source.matrixAutoUpdate;
  		this.matrix.copy( source.matrix );

  		this.generateMipmaps = source.generateMipmaps;
  		this.premultiplyAlpha = source.premultiplyAlpha;
  		this.flipY = source.flipY;
  		this.unpackAlignment = source.unpackAlignment;
  		this.encoding = source.encoding;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

  			return meta.textures[ this.uuid ];

  		}

  		var output = {

  			metadata: {
  				version: 4.5,
  				type: 'Texture',
  				generator: 'Texture.toJSON'
  			},

  			uuid: this.uuid,
  			name: this.name,

  			mapping: this.mapping,

  			repeat: [ this.repeat.x, this.repeat.y ],
  			offset: [ this.offset.x, this.offset.y ],
  			center: [ this.center.x, this.center.y ],
  			rotation: this.rotation,

  			wrap: [ this.wrapS, this.wrapT ],

  			format: this.format,
  			type: this.type,
  			encoding: this.encoding,

  			minFilter: this.minFilter,
  			magFilter: this.magFilter,
  			anisotropy: this.anisotropy,

  			flipY: this.flipY,

  			premultiplyAlpha: this.premultiplyAlpha,
  			unpackAlignment: this.unpackAlignment

  		};

  		if ( this.image !== undefined ) {

  			// TODO: Move to THREE.Image

  			var image = this.image;

  			if ( image.uuid === undefined ) {

  				image.uuid = _Math.generateUUID(); // UGH

  			}

  			if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

  				var url;

  				if ( Array.isArray( image ) ) {

  					// process array of images e.g. CubeTexture

  					url = [];

  					for ( var i = 0, l = image.length; i < l; i ++ ) {

  						url.push( ImageUtils.getDataURL( image[ i ] ) );

  					}

  				} else {

  					// process single image

  					url = ImageUtils.getDataURL( image );

  				}

  				meta.images[ image.uuid ] = {
  					uuid: image.uuid,
  					url: url
  				};

  			}

  			output.image = image.uuid;

  		}

  		if ( ! isRootObject ) {

  			meta.textures[ this.uuid ] = output;

  		}

  		return output;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	},

  	transformUv: function ( uv ) {

  		if ( this.mapping !== UVMapping ) return uv;

  		uv.applyMatrix3( this.matrix );

  		if ( uv.x < 0 || uv.x > 1 ) {

  			switch ( this.wrapS ) {

  				case RepeatWrapping:

  					uv.x = uv.x - Math.floor( uv.x );
  					break;

  				case ClampToEdgeWrapping:

  					uv.x = uv.x < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping:

  					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

  						uv.x = Math.ceil( uv.x ) - uv.x;

  					} else {

  						uv.x = uv.x - Math.floor( uv.x );

  					}
  					break;

  			}

  		}

  		if ( uv.y < 0 || uv.y > 1 ) {

  			switch ( this.wrapT ) {

  				case RepeatWrapping:

  					uv.y = uv.y - Math.floor( uv.y );
  					break;

  				case ClampToEdgeWrapping:

  					uv.y = uv.y < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping:

  					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

  						uv.y = Math.ceil( uv.y ) - uv.y;

  					} else {

  						uv.y = uv.y - Math.floor( uv.y );

  					}
  					break;

  			}

  		}

  		if ( this.flipY ) {

  			uv.y = 1 - uv.y;

  		}

  		return uv;

  	}

  } );

  Object.defineProperty( Texture.prototype, "needsUpdate", {

  	set: function ( value ) {

  		if ( value === true ) this.version ++;

  	}

  } );

  /**
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author philogb / http://blog.thejit.org/
   * @author mikael emtinger / http://gomo.se/
   * @author egraether / http://egraether.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  function Vector4( x, y, z, w ) {

  	this.x = x || 0;
  	this.y = y || 0;
  	this.z = z || 0;
  	this.w = ( w !== undefined ) ? w : 1;

  }

  Object.assign( Vector4.prototype, {

  	isVector4: true,

  	set: function ( x, y, z, w ) {

  		this.x = x;
  		this.y = y;
  		this.z = z;
  		this.w = w;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;
  		this.w = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setZ: function ( z ) {

  		this.z = z;

  		return this;

  	},

  	setW: function ( w ) {

  		this.w = w;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			case 3: this.w = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			case 3: return this.w;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y, this.z, this.w );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;
  		this.w = ( v.w !== undefined ) ? v.w : 1;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;
  		this.w += v.w;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;
  		this.w += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;
  		this.w = a.w + b.w;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;
  		this.w += v.w * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;
  		this.w -= v.w;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;
  		this.w -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;
  		this.w = a.w - b.w;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;
  		this.w *= scalar;

  		return this;

  	},

  	applyMatrix4: function ( m ) {

  		var x = this.x, y = this.y, z = this.z, w = this.w;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
  		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	setAxisAngleFromQuaternion: function ( q ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

  		// q is assumed to be normalized

  		this.w = 2 * Math.acos( q.w );

  		var s = Math.sqrt( 1 - q.w * q.w );

  		if ( s < 0.0001 ) {

  			this.x = 1;
  			this.y = 0;
  			this.z = 0;

  		} else {

  			this.x = q.x / s;
  			this.y = q.y / s;
  			this.z = q.z / s;

  		}

  		return this;

  	},

  	setAxisAngleFromRotationMatrix: function ( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var angle, x, y, z,		// variables for result
  			epsilon = 0.01,		// margin to allow for rounding errors
  			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

  			te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
  		     ( Math.abs( m13 - m31 ) < epsilon ) &&
  		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

  			// singularity found
  			// first check for identity matrix which must have +1 for all terms
  			// in leading diagonal and zero in other terms

  			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
  			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
  			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
  			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

  				// this singularity is identity matrix so angle = 0

  				this.set( 1, 0, 0, 0 );

  				return this; // zero angle, arbitrary axis

  			}

  			// otherwise this singularity is angle = 180

  			angle = Math.PI;

  			var xx = ( m11 + 1 ) / 2;
  			var yy = ( m22 + 1 ) / 2;
  			var zz = ( m33 + 1 ) / 2;
  			var xy = ( m12 + m21 ) / 4;
  			var xz = ( m13 + m31 ) / 4;
  			var yz = ( m23 + m32 ) / 4;

  			if ( ( xx > yy ) && ( xx > zz ) ) {

  				// m11 is the largest diagonal term

  				if ( xx < epsilon ) {

  					x = 0;
  					y = 0.707106781;
  					z = 0.707106781;

  				} else {

  					x = Math.sqrt( xx );
  					y = xy / x;
  					z = xz / x;

  				}

  			} else if ( yy > zz ) {

  				// m22 is the largest diagonal term

  				if ( yy < epsilon ) {

  					x = 0.707106781;
  					y = 0;
  					z = 0.707106781;

  				} else {

  					y = Math.sqrt( yy );
  					x = xy / y;
  					z = yz / y;

  				}

  			} else {

  				// m33 is the largest diagonal term so base result on this

  				if ( zz < epsilon ) {

  					x = 0.707106781;
  					y = 0.707106781;
  					z = 0;

  				} else {

  					z = Math.sqrt( zz );
  					x = xz / z;
  					y = yz / z;

  				}

  			}

  			this.set( x, y, z, angle );

  			return this; // return 180 deg rotation

  		}

  		// as we have reached here there are no singularities so we can handle normally

  		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
  		                   ( m13 - m31 ) * ( m13 - m31 ) +
  		                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

  		if ( Math.abs( s ) < 0.001 ) s = 1;

  		// prevent divide by zero, should not happen if matrix is orthogonal and should be
  		// caught by singularity test above, but I've left it in just in case

  		this.x = ( m32 - m23 ) / s;
  		this.y = ( m13 - m31 ) / s;
  		this.z = ( m21 - m12 ) / s;
  		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

  		return this;

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );
  		this.w = Math.min( this.w, v.w );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );
  		this.w = Math.max( this.w, v.w );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
  		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

  		return this;

  	},

  	clampScalar: function () {

  		var min, max;

  		return function clampScalar( minVal, maxVal ) {

  			if ( min === undefined ) {

  				min = new Vector4();
  				max = new Vector4();

  			}

  			min.set( minVal, minVal, minVal, minVal );
  			max.set( maxVal, maxVal, maxVal, maxVal );

  			return this.clamp( min, max );

  		};

  	}(),

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );
  		this.w = Math.floor( this.w );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );
  		this.w = Math.ceil( this.w );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );
  		this.w = Math.round( this.w );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
  		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
  		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;
  		this.w = - this.w;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

  	},

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;
  		this.w += ( v.w - this.w ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];
  		this.w = array[ offset + 3 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;
  		array[ offset + 3 ] = this.w;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );
  		this.w = attribute.getW( index );

  		return this;

  	}

  } );

  /**
   * @author szimek / https://github.com/szimek/
   * @author alteredq / http://alteredqualia.com/
   * @author Marius Kintel / https://github.com/kintel
   */

  /*
   In options, we can specify:
   * Texture parameters for an auto-generated target texture
   * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
  */
  function WebGLRenderTarget( width, height, options ) {

  	this.width = width;
  	this.height = height;

  	this.scissor = new Vector4( 0, 0, width, height );
  	this.scissorTest = false;

  	this.viewport = new Vector4( 0, 0, width, height );

  	options = options || {};

  	this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

  	this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
  	this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

  	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
  	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
  	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

  }

  WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: WebGLRenderTarget,

  	isWebGLRenderTarget: true,

  	setSize: function ( width, height ) {

  		if ( this.width !== width || this.height !== height ) {

  			this.width = width;
  			this.height = height;

  			this.dispose();

  		}

  		this.viewport.set( 0, 0, width, height );
  		this.scissor.set( 0, 0, width, height );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.width = source.width;
  		this.height = source.height;

  		this.viewport.copy( source.viewport );

  		this.texture = source.texture.clone();

  		this.depthBuffer = source.depthBuffer;
  		this.stencilBuffer = source.stencilBuffer;
  		this.depthTexture = source.depthTexture;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author Mugen87 / https://github.com/Mugen87
   * @author Matt DesLauriers / @mattdesl
   */

  function WebGLMultisampleRenderTarget( width, height, options ) {

  	WebGLRenderTarget.call( this, width, height, options );

  	this.samples = 4;

  }

  WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {

  	constructor: WebGLMultisampleRenderTarget,

  	isWebGLMultisampleRenderTarget: true,

  	copy: function ( source ) {

  		WebGLRenderTarget.prototype.copy.call( this, source );

  		this.samples = source.samples;

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com
   */

  function WebGLRenderTargetCube( width, height, options ) {

  	WebGLRenderTarget.call( this, width, height, options );

  }

  WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
  WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

  WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.image = { data: data, width: width, height: height };

  	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

  	this.generateMipmaps = false;
  	this.flipY = false;
  	this.unpackAlignment = 1;

  }

  DataTexture.prototype = Object.create( Texture.prototype );
  DataTexture.prototype.constructor = DataTexture;

  DataTexture.prototype.isDataTexture = true;

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   */

  function Box3( min, max ) {

  	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
  	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

  }

  Object.assign( Box3.prototype, {

  	isBox3: true,

  	set: function ( min, max ) {

  		this.min.copy( min );
  		this.max.copy( max );

  		return this;

  	},

  	setFromArray: function ( array ) {

  		var minX = + Infinity;
  		var minY = + Infinity;
  		var minZ = + Infinity;

  		var maxX = - Infinity;
  		var maxY = - Infinity;
  		var maxZ = - Infinity;

  		for ( var i = 0, l = array.length; i < l; i += 3 ) {

  			var x = array[ i ];
  			var y = array[ i + 1 ];
  			var z = array[ i + 2 ];

  			if ( x < minX ) minX = x;
  			if ( y < minY ) minY = y;
  			if ( z < minZ ) minZ = z;

  			if ( x > maxX ) maxX = x;
  			if ( y > maxY ) maxY = y;
  			if ( z > maxZ ) maxZ = z;

  		}

  		this.min.set( minX, minY, minZ );
  		this.max.set( maxX, maxY, maxZ );

  		return this;

  	},

  	setFromBufferAttribute: function ( attribute ) {

  		var minX = + Infinity;
  		var minY = + Infinity;
  		var minZ = + Infinity;

  		var maxX = - Infinity;
  		var maxY = - Infinity;
  		var maxZ = - Infinity;

  		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

  			var x = attribute.getX( i );
  			var y = attribute.getY( i );
  			var z = attribute.getZ( i );

  			if ( x < minX ) minX = x;
  			if ( y < minY ) minY = y;
  			if ( z < minZ ) minZ = z;

  			if ( x > maxX ) maxX = x;
  			if ( y > maxY ) maxY = y;
  			if ( z > maxZ ) maxZ = z;

  		}

  		this.min.set( minX, minY, minZ );
  		this.max.set( maxX, maxY, maxZ );

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		this.makeEmpty();

  		for ( var i = 0, il = points.length; i < il; i ++ ) {

  			this.expandByPoint( points[ i ] );

  		}

  		return this;

  	},

  	setFromCenterAndSize: function () {

  		var v1 = new Vector3();

  		return function setFromCenterAndSize( center, size ) {

  			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

  			this.min.copy( center ).sub( halfSize );
  			this.max.copy( center ).add( halfSize );

  			return this;

  		};

  	}(),

  	setFromObject: function ( object ) {

  		this.makeEmpty();

  		return this.expandByObject( object );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( box ) {

  		this.min.copy( box.min );
  		this.max.copy( box.max );

  		return this;

  	},

  	makeEmpty: function () {

  		this.min.x = this.min.y = this.min.z = + Infinity;
  		this.max.x = this.max.y = this.max.z = - Infinity;

  		return this;

  	},

  	isEmpty: function () {

  		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

  		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getCenter() target is now required' );
  			target = new Vector3();

  		}

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  	},

  	getSize: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getSize() target is now required' );
  			target = new Vector3();

  		}

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

  	},

  	expandByPoint: function ( point ) {

  		this.min.min( point );
  		this.max.max( point );

  		return this;

  	},

  	expandByVector: function ( vector ) {

  		this.min.sub( vector );
  		this.max.add( vector );

  		return this;

  	},

  	expandByScalar: function ( scalar ) {

  		this.min.addScalar( - scalar );
  		this.max.addScalar( scalar );

  		return this;

  	},

  	expandByObject: function () {

  		// Computes the world-axis-aligned bounding box of an object (including its children),
  		// accounting for both the object's, and children's, world transforms

  		var scope, i, l;

  		var v1 = new Vector3();

  		function traverse( node ) {

  			var geometry = node.geometry;

  			if ( geometry !== undefined ) {

  				if ( geometry.isGeometry ) {

  					var vertices = geometry.vertices;

  					for ( i = 0, l = vertices.length; i < l; i ++ ) {

  						v1.copy( vertices[ i ] );
  						v1.applyMatrix4( node.matrixWorld );

  						scope.expandByPoint( v1 );

  					}

  				} else if ( geometry.isBufferGeometry ) {

  					var attribute = geometry.attributes.position;

  					if ( attribute !== undefined ) {

  						for ( i = 0, l = attribute.count; i < l; i ++ ) {

  							v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

  							scope.expandByPoint( v1 );

  						}

  					}

  				}

  			}

  		}

  		return function expandByObject( object ) {

  			scope = this;

  			object.updateMatrixWorld( true );

  			object.traverse( traverse );

  			return this;

  		};

  	}(),

  	containsPoint: function ( point ) {

  		return point.x < this.min.x || point.x > this.max.x ||
  			point.y < this.min.y || point.y > this.max.y ||
  			point.z < this.min.z || point.z > this.max.z ? false : true;

  	},

  	containsBox: function ( box ) {

  		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
  			this.min.y <= box.min.y && box.max.y <= this.max.y &&
  			this.min.z <= box.min.z && box.max.z <= this.max.z;

  	},

  	getParameter: function ( point, target ) {

  		// This can potentially have a divide by zero if the box
  		// has a size dimension of 0.

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getParameter() target is now required' );
  			target = new Vector3();

  		}

  		return target.set(
  			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
  			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
  			( point.z - this.min.z ) / ( this.max.z - this.min.z )
  		);

  	},

  	intersectsBox: function ( box ) {

  		// using 6 splitting planes to rule out intersections.
  		return box.max.x < this.min.x || box.min.x > this.max.x ||
  			box.max.y < this.min.y || box.min.y > this.max.y ||
  			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

  	},

  	intersectsSphere: ( function () {

  		var closestPoint = new Vector3();

  		return function intersectsSphere( sphere ) {

  			// Find the point on the AABB closest to the sphere center.
  			this.clampPoint( sphere.center, closestPoint );

  			// If that point is inside the sphere, the AABB and sphere intersect.
  			return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

  		};

  	} )(),

  	intersectsPlane: function ( plane ) {

  		// We compute the minimum and maximum dot product values. If those values
  		// are on the same side (back or front) of the plane, then there is no intersection.

  		var min, max;

  		if ( plane.normal.x > 0 ) {

  			min = plane.normal.x * this.min.x;
  			max = plane.normal.x * this.max.x;

  		} else {

  			min = plane.normal.x * this.max.x;
  			max = plane.normal.x * this.min.x;

  		}

  		if ( plane.normal.y > 0 ) {

  			min += plane.normal.y * this.min.y;
  			max += plane.normal.y * this.max.y;

  		} else {

  			min += plane.normal.y * this.max.y;
  			max += plane.normal.y * this.min.y;

  		}

  		if ( plane.normal.z > 0 ) {

  			min += plane.normal.z * this.min.z;
  			max += plane.normal.z * this.max.z;

  		} else {

  			min += plane.normal.z * this.max.z;
  			max += plane.normal.z * this.min.z;

  		}

  		return ( min <= - plane.constant && max >= - plane.constant );

  	},

  	intersectsTriangle: ( function () {

  		// triangle centered vertices
  		var v0 = new Vector3();
  		var v1 = new Vector3();
  		var v2 = new Vector3();

  		// triangle edge vectors
  		var f0 = new Vector3();
  		var f1 = new Vector3();
  		var f2 = new Vector3();

  		var testAxis = new Vector3();

  		var center = new Vector3();
  		var extents = new Vector3();

  		var triangleNormal = new Vector3();

  		function satForAxes( axes ) {

  			var i, j;

  			for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {

  				testAxis.fromArray( axes, i );
  				// project the aabb onto the seperating axis
  				var r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );
  				// project all 3 vertices of the triangle onto the seperating axis
  				var p0 = v0.dot( testAxis );
  				var p1 = v1.dot( testAxis );
  				var p2 = v2.dot( testAxis );
  				// actual test, basically see if either of the most extreme of the triangle points intersects r
  				if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

  					// points of the projected triangle are outside the projected half-length of the aabb
  					// the axis is seperating and we can exit
  					return false;

  				}

  			}

  			return true;

  		}

  		return function intersectsTriangle( triangle ) {

  			if ( this.isEmpty() ) {

  				return false;

  			}

  			// compute box center and extents
  			this.getCenter( center );
  			extents.subVectors( this.max, center );

  			// translate triangle to aabb origin
  			v0.subVectors( triangle.a, center );
  			v1.subVectors( triangle.b, center );
  			v2.subVectors( triangle.c, center );

  			// compute edge vectors for triangle
  			f0.subVectors( v1, v0 );
  			f1.subVectors( v2, v1 );
  			f2.subVectors( v0, v2 );

  			// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
  			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
  			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
  			var axes = [
  				0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,
  				f0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,
  				- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0
  			];
  			if ( ! satForAxes( axes ) ) {

  				return false;

  			}

  			// test 3 face normals from the aabb
  			axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
  			if ( ! satForAxes( axes ) ) {

  				return false;

  			}

  			// finally testing the face normal of the triangle
  			// use already existing triangle edge vectors here
  			triangleNormal.crossVectors( f0, f1 );
  			axes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];
  			return satForAxes( axes );

  		};

  	} )(),

  	clampPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .clampPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( point ).clamp( this.min, this.max );

  	},

  	distanceToPoint: function () {

  		var v1 = new Vector3();

  		return function distanceToPoint( point ) {

  			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
  			return clampedPoint.sub( point ).length();

  		};

  	}(),

  	getBoundingSphere: function () {

  		var v1 = new Vector3();

  		return function getBoundingSphere( target ) {

  			if ( target === undefined ) {

  				console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
  				//target = new Sphere(); // removed to avoid cyclic dependency

  			}

  			this.getCenter( target.center );

  			target.radius = this.getSize( v1 ).length() * 0.5;

  			return target;

  		};

  	}(),

  	intersect: function ( box ) {

  		this.min.max( box.min );
  		this.max.min( box.max );

  		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
  		if ( this.isEmpty() ) this.makeEmpty();

  		return this;

  	},

  	union: function ( box ) {

  		this.min.min( box.min );
  		this.max.max( box.max );

  		return this;

  	},

  	applyMatrix4: function () {

  		var points = [
  			new Vector3(),
  			new Vector3(),
  			new Vector3(),
  			new Vector3(),
  			new Vector3(),
  			new Vector3(),
  			new Vector3(),
  			new Vector3()
  		];

  		return function applyMatrix4( matrix ) {

  			// transform of empty box is an empty box.
  			if ( this.isEmpty() ) return this;

  			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
  			points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
  			points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
  			points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
  			points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
  			points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
  			points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
  			points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
  			points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

  			this.setFromPoints( points );

  			return this;

  		};

  	}(),

  	translate: function ( offset ) {

  		this.min.add( offset );
  		this.max.add( offset );

  		return this;

  	},

  	equals: function ( box ) {

  		return box.min.equals( this.min ) && box.max.equals( this.max );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author mrdoob / http://mrdoob.com/
   */

  function Sphere( center, radius ) {

  	this.center = ( center !== undefined ) ? center : new Vector3();
  	this.radius = ( radius !== undefined ) ? radius : 0;

  }

  Object.assign( Sphere.prototype, {

  	set: function ( center, radius ) {

  		this.center.copy( center );
  		this.radius = radius;

  		return this;

  	},

  	setFromPoints: function () {

  		var box = new Box3();

  		return function setFromPoints( points, optionalCenter ) {

  			var center = this.center;

  			if ( optionalCenter !== undefined ) {

  				center.copy( optionalCenter );

  			} else {

  				box.setFromPoints( points ).getCenter( center );

  			}

  			var maxRadiusSq = 0;

  			for ( var i = 0, il = points.length; i < il; i ++ ) {

  				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

  			}

  			this.radius = Math.sqrt( maxRadiusSq );

  			return this;

  		};

  	}(),

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( sphere ) {

  		this.center.copy( sphere.center );
  		this.radius = sphere.radius;

  		return this;

  	},

  	empty: function () {

  		return ( this.radius <= 0 );

  	},

  	containsPoint: function ( point ) {

  		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

  	},

  	distanceToPoint: function ( point ) {

  		return ( point.distanceTo( this.center ) - this.radius );

  	},

  	intersectsSphere: function ( sphere ) {

  		var radiusSum = this.radius + sphere.radius;

  		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsSphere( this );

  	},

  	intersectsPlane: function ( plane ) {

  		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

  	},

  	clampPoint: function ( point, target ) {

  		var deltaLengthSq = this.center.distanceToSquared( point );

  		if ( target === undefined ) {

  			console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
  			target = new Vector3();

  		}

  		target.copy( point );

  		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

  			target.sub( this.center ).normalize();
  			target.multiplyScalar( this.radius ).add( this.center );

  		}

  		return target;

  	},

  	getBoundingBox: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
  			target = new Box3();

  		}

  		target.set( this.center, this.center );
  		target.expandByScalar( this.radius );

  		return target;

  	},

  	applyMatrix4: function ( matrix ) {

  		this.center.applyMatrix4( matrix );
  		this.radius = this.radius * matrix.getMaxScaleOnAxis();

  		return this;

  	},

  	translate: function ( offset ) {

  		this.center.add( offset );

  		return this;

  	},

  	equals: function ( sphere ) {

  		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  function Plane( normal, constant ) {

  	// normal is assumed to be normalized

  	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
  	this.constant = ( constant !== undefined ) ? constant : 0;

  }

  Object.assign( Plane.prototype, {

  	set: function ( normal, constant ) {

  		this.normal.copy( normal );
  		this.constant = constant;

  		return this;

  	},

  	setComponents: function ( x, y, z, w ) {

  		this.normal.set( x, y, z );
  		this.constant = w;

  		return this;

  	},

  	setFromNormalAndCoplanarPoint: function ( normal, point ) {

  		this.normal.copy( normal );
  		this.constant = - point.dot( this.normal );

  		return this;

  	},

  	setFromCoplanarPoints: function () {

  		var v1 = new Vector3();
  		var v2 = new Vector3();

  		return function setFromCoplanarPoints( a, b, c ) {

  			var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

  			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

  			this.setFromNormalAndCoplanarPoint( normal, a );

  			return this;

  		};

  	}(),

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( plane ) {

  		this.normal.copy( plane.normal );
  		this.constant = plane.constant;

  		return this;

  	},

  	normalize: function () {

  		// Note: will lead to a divide by zero if the plane is invalid.

  		var inverseNormalLength = 1.0 / this.normal.length();
  		this.normal.multiplyScalar( inverseNormalLength );
  		this.constant *= inverseNormalLength;

  		return this;

  	},

  	negate: function () {

  		this.constant *= - 1;
  		this.normal.negate();

  		return this;

  	},

  	distanceToPoint: function ( point ) {

  		return this.normal.dot( point ) + this.constant;

  	},

  	distanceToSphere: function ( sphere ) {

  		return this.distanceToPoint( sphere.center ) - sphere.radius;

  	},

  	projectPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Plane: .projectPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

  	},

  	intersectLine: function () {

  		var v1 = new Vector3();

  		return function intersectLine( line, target ) {

  			if ( target === undefined ) {

  				console.warn( 'THREE.Plane: .intersectLine() target is now required' );
  				target = new Vector3();

  			}

  			var direction = line.delta( v1 );

  			var denominator = this.normal.dot( direction );

  			if ( denominator === 0 ) {

  				// line is coplanar, return origin
  				if ( this.distanceToPoint( line.start ) === 0 ) {

  					return target.copy( line.start );

  				}

  				// Unsure if this is the correct method to handle this case.
  				return undefined;

  			}

  			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

  			if ( t < 0 || t > 1 ) {

  				return undefined;

  			}

  			return target.copy( direction ).multiplyScalar( t ).add( line.start );

  		};

  	}(),

  	intersectsLine: function ( line ) {

  		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

  		var startSign = this.distanceToPoint( line.start );
  		var endSign = this.distanceToPoint( line.end );

  		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsPlane( this );

  	},

  	intersectsSphere: function ( sphere ) {

  		return sphere.intersectsPlane( this );

  	},

  	coplanarPoint: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.normal ).multiplyScalar( - this.constant );

  	},

  	applyMatrix4: function () {

  		var v1 = new Vector3();
  		var m1 = new Matrix3();

  		return function applyMatrix4( matrix, optionalNormalMatrix ) {

  			var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );

  			var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

  			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

  			this.constant = - referencePoint.dot( normal );

  			return this;

  		};

  	}(),

  	translate: function ( offset ) {

  		this.constant -= offset.dot( this.normal );

  		return this;

  	},

  	equals: function ( plane ) {

  		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author bhouston / http://clara.io
   */

  function Frustum( p0, p1, p2, p3, p4, p5 ) {

  	this.planes = [

  		( p0 !== undefined ) ? p0 : new Plane(),
  		( p1 !== undefined ) ? p1 : new Plane(),
  		( p2 !== undefined ) ? p2 : new Plane(),
  		( p3 !== undefined ) ? p3 : new Plane(),
  		( p4 !== undefined ) ? p4 : new Plane(),
  		( p5 !== undefined ) ? p5 : new Plane()

  	];

  }

  Object.assign( Frustum.prototype, {

  	set: function ( p0, p1, p2, p3, p4, p5 ) {

  		var planes = this.planes;

  		planes[ 0 ].copy( p0 );
  		planes[ 1 ].copy( p1 );
  		planes[ 2 ].copy( p2 );
  		planes[ 3 ].copy( p3 );
  		planes[ 4 ].copy( p4 );
  		planes[ 5 ].copy( p5 );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( frustum ) {

  		var planes = this.planes;

  		for ( var i = 0; i < 6; i ++ ) {

  			planes[ i ].copy( frustum.planes[ i ] );

  		}

  		return this;

  	},

  	setFromMatrix: function ( m ) {

  		var planes = this.planes;
  		var me = m.elements;
  		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
  		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
  		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
  		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

  		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
  		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
  		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
  		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
  		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
  		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

  		return this;

  	},

  	intersectsObject: function () {

  		var sphere = new Sphere();

  		return function intersectsObject( object ) {

  			var geometry = object.geometry;

  			if ( geometry.boundingSphere === null )
  				geometry.computeBoundingSphere();

  			sphere.copy( geometry.boundingSphere )
  				.applyMatrix4( object.matrixWorld );

  			return this.intersectsSphere( sphere );

  		};

  	}(),

  	intersectsSprite: function () {

  		var sphere = new Sphere();

  		return function intersectsSprite( sprite ) {

  			sphere.center.set( 0, 0, 0 );
  			sphere.radius = 0.7071067811865476;
  			sphere.applyMatrix4( sprite.matrixWorld );

  			return this.intersectsSphere( sphere );

  		};

  	}(),

  	intersectsSphere: function ( sphere ) {

  		var planes = this.planes;
  		var center = sphere.center;
  		var negRadius = - sphere.radius;

  		for ( var i = 0; i < 6; i ++ ) {

  			var distance = planes[ i ].distanceToPoint( center );

  			if ( distance < negRadius ) {

  				return false;

  			}

  		}

  		return true;

  	},

  	intersectsBox: function () {

  		var p = new Vector3();

  		return function intersectsBox( box ) {

  			var planes = this.planes;

  			for ( var i = 0; i < 6; i ++ ) {

  				var plane = planes[ i ];

  				// corner at max distance

  				p.x = plane.normal.x > 0 ? box.max.x : box.min.x;
  				p.y = plane.normal.y > 0 ? box.max.y : box.min.y;
  				p.z = plane.normal.z > 0 ? box.max.z : box.min.z;

  				if ( plane.distanceToPoint( p ) < 0 ) {

  					return false;

  				}

  			}

  			return true;

  		};

  	}(),

  	containsPoint: function ( point ) {

  		var planes = this.planes;

  		for ( var i = 0; i < 6; i ++ ) {

  			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author philogb / http://blog.thejit.org/
   * @author jordi_ros / http://plattsoft.com
   * @author D1plo1d / http://github.com/D1plo1d
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author timknip / http://www.floorplanner.com/
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   */

  function Matrix4() {

  	this.elements = [

  		1, 0, 0, 0,
  		0, 1, 0, 0,
  		0, 0, 1, 0,
  		0, 0, 0, 1

  	];

  	if ( arguments.length > 0 ) {

  		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

  	}

  }

  Object.assign( Matrix4.prototype, {

  	isMatrix4: true,

  	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

  		var te = this.elements;

  		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
  		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
  		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
  		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

  		return this;

  	},

  	identity: function () {

  		this.set(

  			1, 0, 0, 0,
  			0, 1, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	clone: function () {

  		return new Matrix4().fromArray( this.elements );

  	},

  	copy: function ( m ) {

  		var te = this.elements;
  		var me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
  		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
  		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
  		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

  		return this;

  	},

  	copyPosition: function ( m ) {

  		var te = this.elements, me = m.elements;

  		te[ 12 ] = me[ 12 ];
  		te[ 13 ] = me[ 13 ];
  		te[ 14 ] = me[ 14 ];

  		return this;

  	},

  	extractBasis: function ( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrixColumn( this, 0 );
  		yAxis.setFromMatrixColumn( this, 1 );
  		zAxis.setFromMatrixColumn( this, 2 );

  		return this;

  	},

  	makeBasis: function ( xAxis, yAxis, zAxis ) {

  		this.set(
  			xAxis.x, yAxis.x, zAxis.x, 0,
  			xAxis.y, yAxis.y, zAxis.y, 0,
  			xAxis.z, yAxis.z, zAxis.z, 0,
  			0, 0, 0, 1
  		);

  		return this;

  	},

  	extractRotation: function () {

  		var v1 = new Vector3();

  		return function extractRotation( m ) {

  			// this method does not support reflection matrices

  			var te = this.elements;
  			var me = m.elements;

  			var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
  			var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
  			var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

  			te[ 0 ] = me[ 0 ] * scaleX;
  			te[ 1 ] = me[ 1 ] * scaleX;
  			te[ 2 ] = me[ 2 ] * scaleX;
  			te[ 3 ] = 0;

  			te[ 4 ] = me[ 4 ] * scaleY;
  			te[ 5 ] = me[ 5 ] * scaleY;
  			te[ 6 ] = me[ 6 ] * scaleY;
  			te[ 7 ] = 0;

  			te[ 8 ] = me[ 8 ] * scaleZ;
  			te[ 9 ] = me[ 9 ] * scaleZ;
  			te[ 10 ] = me[ 10 ] * scaleZ;
  			te[ 11 ] = 0;

  			te[ 12 ] = 0;
  			te[ 13 ] = 0;
  			te[ 14 ] = 0;
  			te[ 15 ] = 1;

  			return this;

  		};

  	}(),

  	makeRotationFromEuler: function ( euler ) {

  		if ( ! ( euler && euler.isEuler ) ) {

  			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

  		}

  		var te = this.elements;

  		var x = euler.x, y = euler.y, z = euler.z;
  		var a = Math.cos( x ), b = Math.sin( x );
  		var c = Math.cos( y ), d = Math.sin( y );
  		var e = Math.cos( z ), f = Math.sin( z );

  		if ( euler.order === 'XYZ' ) {

  			var ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - c * f;
  			te[ 8 ] = d;

  			te[ 1 ] = af + be * d;
  			te[ 5 ] = ae - bf * d;
  			te[ 9 ] = - b * c;

  			te[ 2 ] = bf - ae * d;
  			te[ 6 ] = be + af * d;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YXZ' ) {

  			var ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce + df * b;
  			te[ 4 ] = de * b - cf;
  			te[ 8 ] = a * d;

  			te[ 1 ] = a * f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b;

  			te[ 2 ] = cf * b - de;
  			te[ 6 ] = df + ce * b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZXY' ) {

  			var ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce - df * b;
  			te[ 4 ] = - a * f;
  			te[ 8 ] = de + cf * b;

  			te[ 1 ] = cf + de * b;
  			te[ 5 ] = a * e;
  			te[ 9 ] = df - ce * b;

  			te[ 2 ] = - a * d;
  			te[ 6 ] = b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZYX' ) {

  			var ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = be * d - af;
  			te[ 8 ] = ae * d + bf;

  			te[ 1 ] = c * f;
  			te[ 5 ] = bf * d + ae;
  			te[ 9 ] = af * d - be;

  			te[ 2 ] = - d;
  			te[ 6 ] = b * c;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YZX' ) {

  			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = bd - ac * f;
  			te[ 8 ] = bc * f + ad;

  			te[ 1 ] = f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b * e;

  			te[ 2 ] = - d * e;
  			te[ 6 ] = ad * f + bc;
  			te[ 10 ] = ac - bd * f;

  		} else if ( euler.order === 'XZY' ) {

  			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - f;
  			te[ 8 ] = d * e;

  			te[ 1 ] = ac * f + bd;
  			te[ 5 ] = a * e;
  			te[ 9 ] = ad * f - bc;

  			te[ 2 ] = bc * f - ad;
  			te[ 6 ] = b * e;
  			te[ 10 ] = bd * f + ac;

  		}

  		// bottom row
  		te[ 3 ] = 0;
  		te[ 7 ] = 0;
  		te[ 11 ] = 0;

  		// last column
  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	},

  	makeRotationFromQuaternion: function () {

  		var zero = new Vector3( 0, 0, 0 );
  		var one = new Vector3( 1, 1, 1 );

  		return function makeRotationFromQuaternion( q ) {

  			return this.compose( zero, q, one );

  		};

  	}(),

  	lookAt: function () {

  		var x = new Vector3();
  		var y = new Vector3();
  		var z = new Vector3();

  		return function lookAt( eye, target, up ) {

  			var te = this.elements;

  			z.subVectors( eye, target );

  			if ( z.lengthSq() === 0 ) {

  				// eye and target are in the same position

  				z.z = 1;

  			}

  			z.normalize();
  			x.crossVectors( up, z );

  			if ( x.lengthSq() === 0 ) {

  				// up and z are parallel

  				if ( Math.abs( up.z ) === 1 ) {

  					z.x += 0.0001;

  				} else {

  					z.z += 0.0001;

  				}

  				z.normalize();
  				x.crossVectors( up, z );

  			}

  			x.normalize();
  			y.crossVectors( z, x );

  			te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
  			te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
  			te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

  			return this;

  		};

  	}(),

  	multiply: function ( m, n ) {

  		if ( n !== undefined ) {

  			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
  			return this.multiplyMatrices( m, n );

  		}

  		return this.multiplyMatrices( this, m );

  	},

  	premultiply: function ( m ) {

  		return this.multiplyMatrices( m, this );

  	},

  	multiplyMatrices: function ( a, b ) {

  		var ae = a.elements;
  		var be = b.elements;
  		var te = this.elements;

  		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
  		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
  		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
  		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

  		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
  		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
  		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
  		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
  		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
  		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
  		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
  		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
  		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
  		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
  		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
  		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
  		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

  		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
  		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
  		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
  		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		var te = this.elements;

  		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
  		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
  		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
  		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

  		return this;

  	},

  	applyToBufferAttribute: function () {

  		var v1 = new Vector3();

  		return function applyToBufferAttribute( attribute ) {

  			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

  				v1.x = attribute.getX( i );
  				v1.y = attribute.getY( i );
  				v1.z = attribute.getZ( i );

  				v1.applyMatrix4( this );

  				attribute.setXYZ( i, v1.x, v1.y, v1.z );

  			}

  			return attribute;

  		};

  	}(),

  	determinant: function () {

  		var te = this.elements;

  		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
  		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
  		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
  		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

  		//TODO: make this more efficient
  		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

  		return (
  			n41 * (
  				+ n14 * n23 * n32
  				 - n13 * n24 * n32
  				 - n14 * n22 * n33
  				 + n12 * n24 * n33
  				 + n13 * n22 * n34
  				 - n12 * n23 * n34
  			) +
  			n42 * (
  				+ n11 * n23 * n34
  				 - n11 * n24 * n33
  				 + n14 * n21 * n33
  				 - n13 * n21 * n34
  				 + n13 * n24 * n31
  				 - n14 * n23 * n31
  			) +
  			n43 * (
  				+ n11 * n24 * n32
  				 - n11 * n22 * n34
  				 - n14 * n21 * n32
  				 + n12 * n21 * n34
  				 + n14 * n22 * n31
  				 - n12 * n24 * n31
  			) +
  			n44 * (
  				- n13 * n22 * n31
  				 - n11 * n23 * n32
  				 + n11 * n22 * n33
  				 + n13 * n21 * n32
  				 - n12 * n21 * n33
  				 + n12 * n23 * n31
  			)

  		);

  	},

  	transpose: function () {

  		var te = this.elements;
  		var tmp;

  		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
  		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
  		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

  		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
  		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
  		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

  		return this;

  	},

  	setPosition: function ( v ) {

  		var te = this.elements;

  		te[ 12 ] = v.x;
  		te[ 13 ] = v.y;
  		te[ 14 ] = v.z;

  		return this;

  	},

  	getInverse: function ( m, throwOnDegenerate ) {

  		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
  		var te = this.elements,
  			me = m.elements,

  			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
  			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
  			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
  			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

  			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
  			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
  			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
  			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

  		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

  		if ( det === 0 ) {

  			var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

  			if ( throwOnDegenerate === true ) {

  				throw new Error( msg );

  			} else {

  				console.warn( msg );

  			}

  			return this.identity();

  		}

  		var detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
  		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
  		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

  		te[ 4 ] = t12 * detInv;
  		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
  		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
  		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

  		te[ 8 ] = t13 * detInv;
  		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
  		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
  		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

  		te[ 12 ] = t14 * detInv;
  		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
  		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
  		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

  		return this;

  	},

  	scale: function ( v ) {

  		var te = this.elements;
  		var x = v.x, y = v.y, z = v.z;

  		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
  		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
  		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
  		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

  		return this;

  	},

  	getMaxScaleOnAxis: function () {

  		var te = this.elements;

  		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
  		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
  		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

  		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

  	},

  	makeTranslation: function ( x, y, z ) {

  		this.set(

  			1, 0, 0, x,
  			0, 1, 0, y,
  			0, 0, 1, z,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationX: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			1, 0, 0, 0,
  			0, c, - s, 0,
  			0, s, c, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationY: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			 c, 0, s, 0,
  			 0, 1, 0, 0,
  			- s, 0, c, 0,
  			 0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationZ: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			c, - s, 0, 0,
  			s, c, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationAxis: function ( axis, angle ) {

  		// Based on http://www.gamedev.net/reference/articles/article1199.asp

  		var c = Math.cos( angle );
  		var s = Math.sin( angle );
  		var t = 1 - c;
  		var x = axis.x, y = axis.y, z = axis.z;
  		var tx = t * x, ty = t * y;

  		this.set(

  			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
  			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
  			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
  			0, 0, 0, 1

  		);

  		 return this;

  	},

  	makeScale: function ( x, y, z ) {

  		this.set(

  			x, 0, 0, 0,
  			0, y, 0, 0,
  			0, 0, z, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeShear: function ( x, y, z ) {

  		this.set(

  			1, y, z, 0,
  			x, 1, z, 0,
  			x, y, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	compose: function ( position, quaternion, scale ) {

  		var te = this.elements;

  		var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
  		var x2 = x + x,	y2 = y + y, z2 = z + z;
  		var xx = x * x2, xy = x * y2, xz = x * z2;
  		var yy = y * y2, yz = y * z2, zz = z * z2;
  		var wx = w * x2, wy = w * y2, wz = w * z2;

  		var sx = scale.x, sy = scale.y, sz = scale.z;

  		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
  		te[ 1 ] = ( xy + wz ) * sx;
  		te[ 2 ] = ( xz - wy ) * sx;
  		te[ 3 ] = 0;

  		te[ 4 ] = ( xy - wz ) * sy;
  		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
  		te[ 6 ] = ( yz + wx ) * sy;
  		te[ 7 ] = 0;

  		te[ 8 ] = ( xz + wy ) * sz;
  		te[ 9 ] = ( yz - wx ) * sz;
  		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
  		te[ 11 ] = 0;

  		te[ 12 ] = position.x;
  		te[ 13 ] = position.y;
  		te[ 14 ] = position.z;
  		te[ 15 ] = 1;

  		return this;

  	},

  	decompose: function () {

  		var vector = new Vector3();
  		var matrix = new Matrix4();

  		return function decompose( position, quaternion, scale ) {

  			var te = this.elements;

  			var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
  			var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
  			var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

  			// if determine is negative, we need to invert one scale
  			var det = this.determinant();
  			if ( det < 0 ) sx = - sx;

  			position.x = te[ 12 ];
  			position.y = te[ 13 ];
  			position.z = te[ 14 ];

  			// scale the rotation part
  			matrix.copy( this );

  			var invSX = 1 / sx;
  			var invSY = 1 / sy;
  			var invSZ = 1 / sz;

  			matrix.elements[ 0 ] *= invSX;
  			matrix.elements[ 1 ] *= invSX;
  			matrix.elements[ 2 ] *= invSX;

  			matrix.elements[ 4 ] *= invSY;
  			matrix.elements[ 5 ] *= invSY;
  			matrix.elements[ 6 ] *= invSY;

  			matrix.elements[ 8 ] *= invSZ;
  			matrix.elements[ 9 ] *= invSZ;
  			matrix.elements[ 10 ] *= invSZ;

  			quaternion.setFromRotationMatrix( matrix );

  			scale.x = sx;
  			scale.y = sy;
  			scale.z = sz;

  			return this;

  		};

  	}(),

  	makePerspective: function ( left, right, top, bottom, near, far ) {

  		if ( far === undefined ) {

  			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

  		}

  		var te = this.elements;
  		var x = 2 * near / ( right - left );
  		var y = 2 * near / ( top - bottom );

  		var a = ( right + left ) / ( right - left );
  		var b = ( top + bottom ) / ( top - bottom );
  		var c = - ( far + near ) / ( far - near );
  		var d = - 2 * far * near / ( far - near );

  		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
  		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
  		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
  		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

  		return this;

  	},

  	makeOrthographic: function ( left, right, top, bottom, near, far ) {

  		var te = this.elements;
  		var w = 1.0 / ( right - left );
  		var h = 1.0 / ( top - bottom );
  		var p = 1.0 / ( far - near );

  		var x = ( right + left ) * w;
  		var y = ( top + bottom ) * h;
  		var z = ( far + near ) * p;

  		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
  		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
  		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
  		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

  		return this;

  	},

  	equals: function ( matrix ) {

  		var te = this.elements;
  		var me = matrix.elements;

  		for ( var i = 0; i < 16; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) return false;

  		}

  		return true;

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		for ( var i = 0; i < 16; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		var te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];
  		array[ offset + 3 ] = te[ 3 ];

  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];
  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];

  		array[ offset + 8 ] = te[ 8 ];
  		array[ offset + 9 ] = te[ 9 ];
  		array[ offset + 10 ] = te[ 10 ];
  		array[ offset + 11 ] = te[ 11 ];

  		array[ offset + 12 ] = te[ 12 ];
  		array[ offset + 13 ] = te[ 13 ];
  		array[ offset + 14 ] = te[ 14 ];
  		array[ offset + 15 ] = te[ 15 ];

  		return array;

  	}

  } );

  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

  var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";

  var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";

  var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

  var begin_vertex = "vec3 transformed = vec3( position );";

  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

  var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick( specularColor, dotNV );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}";

  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif";

  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif";

  var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

  var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

  var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

  var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

  var common$1 = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}";

  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif";

  var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif";

  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

  var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

  var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";

  var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

  var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

  var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

  var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";

  var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";

  var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

  var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

  var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif";

  var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif";

  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

  var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif";

  var lights_pars_begin = "uniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";

  var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";

  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif";

  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor;\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

  var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif";

  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif";

  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif";

  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif";

  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif";

  var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";

  var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

  var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif";

  var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif";

  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif";

  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";

  var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif";

  var normal_fragment_maps = "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\t#ifdef USE_TANGENT\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\t\t#else\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t\t#endif\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";

  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif";

  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

  var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;";

  var dithering_fragment = "#if defined( DITHERING )\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

  var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

  var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

  var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif";

  var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif";

  var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}";

  var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

  var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";

  var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

  var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

  var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";

  var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

  var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif";

  var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

  var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

  var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

  var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif";

  var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

  var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

  var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}";

  var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}";

  var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

  var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

  var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

  var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

  var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

  var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";

  var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

  var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

  var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}";

  var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

  var ShaderChunk = {
  	alphamap_fragment: alphamap_fragment,
  	alphamap_pars_fragment: alphamap_pars_fragment,
  	alphatest_fragment: alphatest_fragment,
  	aomap_fragment: aomap_fragment,
  	aomap_pars_fragment: aomap_pars_fragment,
  	begin_vertex: begin_vertex,
  	beginnormal_vertex: beginnormal_vertex,
  	bsdfs: bsdfs,
  	bumpmap_pars_fragment: bumpmap_pars_fragment,
  	clipping_planes_fragment: clipping_planes_fragment,
  	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
  	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
  	clipping_planes_vertex: clipping_planes_vertex,
  	color_fragment: color_fragment,
  	color_pars_fragment: color_pars_fragment,
  	color_pars_vertex: color_pars_vertex,
  	color_vertex: color_vertex,
  	common: common$1,
  	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
  	defaultnormal_vertex: defaultnormal_vertex,
  	displacementmap_pars_vertex: displacementmap_pars_vertex,
  	displacementmap_vertex: displacementmap_vertex,
  	emissivemap_fragment: emissivemap_fragment,
  	emissivemap_pars_fragment: emissivemap_pars_fragment,
  	encodings_fragment: encodings_fragment,
  	encodings_pars_fragment: encodings_pars_fragment,
  	envmap_fragment: envmap_fragment,
  	envmap_pars_fragment: envmap_pars_fragment,
  	envmap_pars_vertex: envmap_pars_vertex,
  	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
  	envmap_vertex: envmap_vertex,
  	fog_vertex: fog_vertex,
  	fog_pars_vertex: fog_pars_vertex,
  	fog_fragment: fog_fragment,
  	fog_pars_fragment: fog_pars_fragment,
  	gradientmap_pars_fragment: gradientmap_pars_fragment,
  	lightmap_fragment: lightmap_fragment,
  	lightmap_pars_fragment: lightmap_pars_fragment,
  	lights_lambert_vertex: lights_lambert_vertex,
  	lights_pars_begin: lights_pars_begin,
  	lights_phong_fragment: lights_phong_fragment,
  	lights_phong_pars_fragment: lights_phong_pars_fragment,
  	lights_physical_fragment: lights_physical_fragment,
  	lights_physical_pars_fragment: lights_physical_pars_fragment,
  	lights_fragment_begin: lights_fragment_begin,
  	lights_fragment_maps: lights_fragment_maps,
  	lights_fragment_end: lights_fragment_end,
  	logdepthbuf_fragment: logdepthbuf_fragment,
  	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
  	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
  	logdepthbuf_vertex: logdepthbuf_vertex,
  	map_fragment: map_fragment,
  	map_pars_fragment: map_pars_fragment,
  	map_particle_fragment: map_particle_fragment,
  	map_particle_pars_fragment: map_particle_pars_fragment,
  	metalnessmap_fragment: metalnessmap_fragment,
  	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
  	morphnormal_vertex: morphnormal_vertex,
  	morphtarget_pars_vertex: morphtarget_pars_vertex,
  	morphtarget_vertex: morphtarget_vertex,
  	normal_fragment_begin: normal_fragment_begin,
  	normal_fragment_maps: normal_fragment_maps,
  	normalmap_pars_fragment: normalmap_pars_fragment,
  	packing: packing,
  	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
  	project_vertex: project_vertex,
  	dithering_fragment: dithering_fragment,
  	dithering_pars_fragment: dithering_pars_fragment,
  	roughnessmap_fragment: roughnessmap_fragment,
  	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
  	shadowmap_pars_fragment: shadowmap_pars_fragment,
  	shadowmap_pars_vertex: shadowmap_pars_vertex,
  	shadowmap_vertex: shadowmap_vertex,
  	shadowmask_pars_fragment: shadowmask_pars_fragment,
  	skinbase_vertex: skinbase_vertex,
  	skinning_pars_vertex: skinning_pars_vertex,
  	skinning_vertex: skinning_vertex,
  	skinnormal_vertex: skinnormal_vertex,
  	specularmap_fragment: specularmap_fragment,
  	specularmap_pars_fragment: specularmap_pars_fragment,
  	tonemapping_fragment: tonemapping_fragment,
  	tonemapping_pars_fragment: tonemapping_pars_fragment,
  	uv_pars_fragment: uv_pars_fragment,
  	uv_pars_vertex: uv_pars_vertex,
  	uv_vertex: uv_vertex,
  	uv2_pars_fragment: uv2_pars_fragment,
  	uv2_pars_vertex: uv2_pars_vertex,
  	uv2_vertex: uv2_vertex,
  	worldpos_vertex: worldpos_vertex,

  	background_frag: background_frag,
  	background_vert: background_vert,
  	cube_frag: cube_frag,
  	cube_vert: cube_vert,
  	depth_frag: depth_frag,
  	depth_vert: depth_vert,
  	distanceRGBA_frag: distanceRGBA_frag,
  	distanceRGBA_vert: distanceRGBA_vert,
  	equirect_frag: equirect_frag,
  	equirect_vert: equirect_vert,
  	linedashed_frag: linedashed_frag,
  	linedashed_vert: linedashed_vert,
  	meshbasic_frag: meshbasic_frag,
  	meshbasic_vert: meshbasic_vert,
  	meshlambert_frag: meshlambert_frag,
  	meshlambert_vert: meshlambert_vert,
  	meshmatcap_frag: meshmatcap_frag,
  	meshmatcap_vert: meshmatcap_vert,
  	meshphong_frag: meshphong_frag,
  	meshphong_vert: meshphong_vert,
  	meshphysical_frag: meshphysical_frag,
  	meshphysical_vert: meshphysical_vert,
  	normal_frag: normal_frag,
  	normal_vert: normal_vert,
  	points_frag: points_frag,
  	points_vert: points_vert,
  	shadow_frag: shadow_frag,
  	shadow_vert: shadow_vert,
  	sprite_frag: sprite_frag,
  	sprite_vert: sprite_vert
  };

  /**
   * Uniform Utilities
   */

  function cloneUniforms( src ) {

  	var dst = {};

  	for ( var u in src ) {

  		dst[ u ] = {};

  		for ( var p in src[ u ] ) {

  			var property = src[ u ][ p ];

  			if ( property && ( property.isColor ||
  				property.isMatrix3 || property.isMatrix4 ||
  				property.isVector2 || property.isVector3 || property.isVector4 ||
  				property.isTexture ) ) {

  				dst[ u ][ p ] = property.clone();

  			} else if ( Array.isArray( property ) ) {

  				dst[ u ][ p ] = property.slice();

  			} else {

  				dst[ u ][ p ] = property;

  			}

  		}

  	}

  	return dst;

  }

  function mergeUniforms( uniforms ) {

  	var merged = {};

  	for ( var u = 0; u < uniforms.length; u ++ ) {

  		var tmp = cloneUniforms( uniforms[ u ] );

  		for ( var p in tmp ) {

  			merged[ p ] = tmp[ p ];

  		}

  	}

  	return merged;

  }

  // Legacy

  var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
  	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
  	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
  	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
  	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
  	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
  	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
  	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
  	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
  	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
  	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
  	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
  	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
  	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
  	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
  	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
  	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
  	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
  	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
  	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
  	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
  	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
  	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
  	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

  function Color( r, g, b ) {

  	if ( g === undefined && b === undefined ) {

  		// r is THREE.Color, hex or string
  		return this.set( r );

  	}

  	return this.setRGB( r, g, b );

  }

  Object.assign( Color.prototype, {

  	isColor: true,

  	r: 1, g: 1, b: 1,

  	set: function ( value ) {

  		if ( value && value.isColor ) {

  			this.copy( value );

  		} else if ( typeof value === 'number' ) {

  			this.setHex( value );

  		} else if ( typeof value === 'string' ) {

  			this.setStyle( value );

  		}

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.r = scalar;
  		this.g = scalar;
  		this.b = scalar;

  		return this;

  	},

  	setHex: function ( hex ) {

  		hex = Math.floor( hex );

  		this.r = ( hex >> 16 & 255 ) / 255;
  		this.g = ( hex >> 8 & 255 ) / 255;
  		this.b = ( hex & 255 ) / 255;

  		return this;

  	},

  	setRGB: function ( r, g, b ) {

  		this.r = r;
  		this.g = g;
  		this.b = b;

  		return this;

  	},

  	setHSL: function () {

  		function hue2rgb( p, q, t ) {

  			if ( t < 0 ) t += 1;
  			if ( t > 1 ) t -= 1;
  			if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
  			if ( t < 1 / 2 ) return q;
  			if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
  			return p;

  		}

  		return function setHSL( h, s, l ) {

  			// h,s,l ranges are in 0.0 - 1.0
  			h = _Math.euclideanModulo( h, 1 );
  			s = _Math.clamp( s, 0, 1 );
  			l = _Math.clamp( l, 0, 1 );

  			if ( s === 0 ) {

  				this.r = this.g = this.b = l;

  			} else {

  				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
  				var q = ( 2 * l ) - p;

  				this.r = hue2rgb( q, p, h + 1 / 3 );
  				this.g = hue2rgb( q, p, h );
  				this.b = hue2rgb( q, p, h - 1 / 3 );

  			}

  			return this;

  		};

  	}(),

  	setStyle: function ( style ) {

  		function handleAlpha( string ) {

  			if ( string === undefined ) return;

  			if ( parseFloat( string ) < 1 ) {

  				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

  			}

  		}


  		var m;

  		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

  			// rgb / hsl

  			var color;
  			var name = m[ 1 ];
  			var components = m[ 2 ];

  			switch ( name ) {

  				case 'rgb':
  				case 'rgba':

  					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// rgb(255,0,0) rgba(255,0,0,0.5)
  						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
  						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
  						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

  						handleAlpha( color[ 5 ] );

  						return this;

  					}

  					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
  						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
  						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
  						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

  						handleAlpha( color[ 5 ] );

  						return this;

  					}

  					break;

  				case 'hsl':
  				case 'hsla':

  					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
  						var h = parseFloat( color[ 1 ] ) / 360;
  						var s = parseInt( color[ 2 ], 10 ) / 100;
  						var l = parseInt( color[ 3 ], 10 ) / 100;

  						handleAlpha( color[ 5 ] );

  						return this.setHSL( h, s, l );

  					}

  					break;

  			}

  		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

  			// hex color

  			var hex = m[ 1 ];
  			var size = hex.length;

  			if ( size === 3 ) {

  				// #ff0
  				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
  				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
  				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

  				return this;

  			} else if ( size === 6 ) {

  				// #ff0000
  				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
  				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
  				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

  				return this;

  			}

  		}

  		if ( style && style.length > 0 ) {

  			// color keywords
  			var hex = ColorKeywords[ style ];

  			if ( hex !== undefined ) {

  				// red
  				this.setHex( hex );

  			} else {

  				// unknown color
  				console.warn( 'THREE.Color: Unknown color ' + style );

  			}

  		}

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this.r, this.g, this.b );

  	},

  	copy: function ( color ) {

  		this.r = color.r;
  		this.g = color.g;
  		this.b = color.b;

  		return this;

  	},

  	copyGammaToLinear: function ( color, gammaFactor ) {

  		if ( gammaFactor === undefined ) gammaFactor = 2.0;

  		this.r = Math.pow( color.r, gammaFactor );
  		this.g = Math.pow( color.g, gammaFactor );
  		this.b = Math.pow( color.b, gammaFactor );

  		return this;

  	},

  	copyLinearToGamma: function ( color, gammaFactor ) {

  		if ( gammaFactor === undefined ) gammaFactor = 2.0;

  		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

  		this.r = Math.pow( color.r, safeInverse );
  		this.g = Math.pow( color.g, safeInverse );
  		this.b = Math.pow( color.b, safeInverse );

  		return this;

  	},

  	convertGammaToLinear: function ( gammaFactor ) {

  		this.copyGammaToLinear( this, gammaFactor );

  		return this;

  	},

  	convertLinearToGamma: function ( gammaFactor ) {

  		this.copyLinearToGamma( this, gammaFactor );

  		return this;

  	},

  	copySRGBToLinear: function () {

  		function SRGBToLinear( c ) {

  			return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

  		}

  		return function copySRGBToLinear( color ) {

  			this.r = SRGBToLinear( color.r );
  			this.g = SRGBToLinear( color.g );
  			this.b = SRGBToLinear( color.b );

  			return this;

  		};

  	}(),

  	copyLinearToSRGB: function () {

  		function LinearToSRGB( c ) {

  			return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

  		}

  		return function copyLinearToSRGB( color ) {

  			this.r = LinearToSRGB( color.r );
  			this.g = LinearToSRGB( color.g );
  			this.b = LinearToSRGB( color.b );

  			return this;

  		};

  	}(),

  	convertSRGBToLinear: function () {

  		this.copySRGBToLinear( this );

  		return this;

  	},

  	convertLinearToSRGB: function () {

  		this.copyLinearToSRGB( this );

  		return this;

  	},

  	getHex: function () {

  		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

  	},

  	getHexString: function () {

  		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

  	},

  	getHSL: function ( target ) {

  		// h,s,l ranges are in 0.0 - 1.0

  		if ( target === undefined ) {

  			console.warn( 'THREE.Color: .getHSL() target is now required' );
  			target = { h: 0, s: 0, l: 0 };

  		}

  		var r = this.r, g = this.g, b = this.b;

  		var max = Math.max( r, g, b );
  		var min = Math.min( r, g, b );

  		var hue, saturation;
  		var lightness = ( min + max ) / 2.0;

  		if ( min === max ) {

  			hue = 0;
  			saturation = 0;

  		} else {

  			var delta = max - min;

  			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

  			switch ( max ) {

  				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
  				case g: hue = ( b - r ) / delta + 2; break;
  				case b: hue = ( r - g ) / delta + 4; break;

  			}

  			hue /= 6;

  		}

  		target.h = hue;
  		target.s = saturation;
  		target.l = lightness;

  		return target;

  	},

  	getStyle: function () {

  		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

  	},

  	offsetHSL: function () {

  		var hsl = {};

  		return function ( h, s, l ) {

  			this.getHSL( hsl );

  			hsl.h += h; hsl.s += s; hsl.l += l;

  			this.setHSL( hsl.h, hsl.s, hsl.l );

  			return this;

  		};

  	}(),

  	add: function ( color ) {

  		this.r += color.r;
  		this.g += color.g;
  		this.b += color.b;

  		return this;

  	},

  	addColors: function ( color1, color2 ) {

  		this.r = color1.r + color2.r;
  		this.g = color1.g + color2.g;
  		this.b = color1.b + color2.b;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.r += s;
  		this.g += s;
  		this.b += s;

  		return this;

  	},

  	sub: function ( color ) {

  		this.r = Math.max( 0, this.r - color.r );
  		this.g = Math.max( 0, this.g - color.g );
  		this.b = Math.max( 0, this.b - color.b );

  		return this;

  	},

  	multiply: function ( color ) {

  		this.r *= color.r;
  		this.g *= color.g;
  		this.b *= color.b;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		this.r *= s;
  		this.g *= s;
  		this.b *= s;

  		return this;

  	},

  	lerp: function ( color, alpha ) {

  		this.r += ( color.r - this.r ) * alpha;
  		this.g += ( color.g - this.g ) * alpha;
  		this.b += ( color.b - this.b ) * alpha;

  		return this;

  	},

  	lerpHSL: function () {

  		var hslA = { h: 0, s: 0, l: 0 };
  		var hslB = { h: 0, s: 0, l: 0 };

  		return function lerpHSL( color, alpha ) {

  			this.getHSL( hslA );
  			color.getHSL( hslB );

  			var h = _Math.lerp( hslA.h, hslB.h, alpha );
  			var s = _Math.lerp( hslA.s, hslB.s, alpha );
  			var l = _Math.lerp( hslA.l, hslB.l, alpha );

  			this.setHSL( h, s, l );

  			return this;

  		};

  	}(),

  	equals: function ( c ) {

  		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.r = array[ offset ];
  		this.g = array[ offset + 1 ];
  		this.b = array[ offset + 2 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this.r;
  		array[ offset + 1 ] = this.g;
  		array[ offset + 2 ] = this.b;

  		return array;

  	},

  	toJSON: function () {

  		return this.getHex();

  	}

  } );

  /**
   * Uniforms library for shared webgl shaders
   */

  var UniformsLib = {

  	common: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },

  		map: { value: null },
  		uvTransform: { value: new Matrix3() },

  		alphaMap: { value: null },

  	},

  	specularmap: {

  		specularMap: { value: null },

  	},

  	envmap: {

  		envMap: { value: null },
  		flipEnvMap: { value: - 1 },
  		reflectivity: { value: 1.0 },
  		refractionRatio: { value: 0.98 },
  		maxMipLevel: { value: 0 }

  	},

  	aomap: {

  		aoMap: { value: null },
  		aoMapIntensity: { value: 1 }

  	},

  	lightmap: {

  		lightMap: { value: null },
  		lightMapIntensity: { value: 1 }

  	},

  	emissivemap: {

  		emissiveMap: { value: null }

  	},

  	bumpmap: {

  		bumpMap: { value: null },
  		bumpScale: { value: 1 }

  	},

  	normalmap: {

  		normalMap: { value: null },
  		normalScale: { value: new Vector2( 1, 1 ) }

  	},

  	displacementmap: {

  		displacementMap: { value: null },
  		displacementScale: { value: 1 },
  		displacementBias: { value: 0 }

  	},

  	roughnessmap: {

  		roughnessMap: { value: null }

  	},

  	metalnessmap: {

  		metalnessMap: { value: null }

  	},

  	gradientmap: {

  		gradientMap: { value: null }

  	},

  	fog: {

  		fogDensity: { value: 0.00025 },
  		fogNear: { value: 1 },
  		fogFar: { value: 2000 },
  		fogColor: { value: new Color( 0xffffff ) }

  	},

  	lights: {

  		ambientLightColor: { value: [] },

  		lightProbe: { value: [] },

  		directionalLights: { value: [], properties: {
  			direction: {},
  			color: {},

  			shadow: {},
  			shadowBias: {},
  			shadowRadius: {},
  			shadowMapSize: {}
  		} },

  		directionalShadowMap: { value: [] },
  		directionalShadowMatrix: { value: [] },

  		spotLights: { value: [], properties: {
  			color: {},
  			position: {},
  			direction: {},
  			distance: {},
  			coneCos: {},
  			penumbraCos: {},
  			decay: {},

  			shadow: {},
  			shadowBias: {},
  			shadowRadius: {},
  			shadowMapSize: {}
  		} },

  		spotShadowMap: { value: [] },
  		spotShadowMatrix: { value: [] },

  		pointLights: { value: [], properties: {
  			color: {},
  			position: {},
  			decay: {},
  			distance: {},

  			shadow: {},
  			shadowBias: {},
  			shadowRadius: {},
  			shadowMapSize: {},
  			shadowCameraNear: {},
  			shadowCameraFar: {}
  		} },

  		pointShadowMap: { value: [] },
  		pointShadowMatrix: { value: [] },

  		hemisphereLights: { value: [], properties: {
  			direction: {},
  			skyColor: {},
  			groundColor: {}
  		} },

  		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
  		rectAreaLights: { value: [], properties: {
  			color: {},
  			position: {},
  			width: {},
  			height: {}
  		} }

  	},

  	points: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },
  		size: { value: 1.0 },
  		scale: { value: 1.0 },
  		map: { value: null },
  		uvTransform: { value: new Matrix3() }

  	},

  	sprite: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },
  		center: { value: new Vector2( 0.5, 0.5 ) },
  		rotation: { value: 0.0 },
  		map: { value: null },
  		uvTransform: { value: new Matrix3() }

  	}

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   */

  var ShaderLib = {

  	basic: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.meshbasic_vert,
  		fragmentShader: ShaderChunk.meshbasic_frag

  	},

  	lambert: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshlambert_vert,
  		fragmentShader: ShaderChunk.meshlambert_frag

  	},

  	phong: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.gradientmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) },
  				specular: { value: new Color( 0x111111 ) },
  				shininess: { value: 30 }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshphong_vert,
  		fragmentShader: ShaderChunk.meshphong_frag

  	},

  	standard: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.roughnessmap,
  			UniformsLib.metalnessmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) },
  				roughness: { value: 0.5 },
  				metalness: { value: 0.5 },
  				envMapIntensity: { value: 1 } // temporary
  			}
  		] ),

  		vertexShader: ShaderChunk.meshphysical_vert,
  		fragmentShader: ShaderChunk.meshphysical_frag

  	},

  	matcap: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.fog,
  			{
  				matcap: { value: null }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshmatcap_vert,
  		fragmentShader: ShaderChunk.meshmatcap_frag

  	},

  	points: {

  		uniforms: mergeUniforms( [
  			UniformsLib.points,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.points_vert,
  		fragmentShader: ShaderChunk.points_frag

  	},

  	dashed: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.fog,
  			{
  				scale: { value: 1 },
  				dashSize: { value: 1 },
  				totalSize: { value: 2 }
  			}
  		] ),

  		vertexShader: ShaderChunk.linedashed_vert,
  		fragmentShader: ShaderChunk.linedashed_frag

  	},

  	depth: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.displacementmap
  		] ),

  		vertexShader: ShaderChunk.depth_vert,
  		fragmentShader: ShaderChunk.depth_frag

  	},

  	normal: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			{
  				opacity: { value: 1.0 }
  			}
  		] ),

  		vertexShader: ShaderChunk.normal_vert,
  		fragmentShader: ShaderChunk.normal_frag

  	},

  	sprite: {

  		uniforms: mergeUniforms( [
  			UniformsLib.sprite,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.sprite_vert,
  		fragmentShader: ShaderChunk.sprite_frag

  	},

  	background: {

  		uniforms: {
  			uvTransform: { value: new Matrix3() },
  			t2D: { value: null },
  		},

  		vertexShader: ShaderChunk.background_vert,
  		fragmentShader: ShaderChunk.background_frag

  	},
  	/* -------------------------------------------------------------------------
  	//	Cube map shader
  	 ------------------------------------------------------------------------- */

  	cube: {

  		uniforms: {
  			tCube: { value: null },
  			tFlip: { value: - 1 },
  			opacity: { value: 1.0 }
  		},

  		vertexShader: ShaderChunk.cube_vert,
  		fragmentShader: ShaderChunk.cube_frag

  	},

  	equirect: {

  		uniforms: {
  			tEquirect: { value: null },
  		},

  		vertexShader: ShaderChunk.equirect_vert,
  		fragmentShader: ShaderChunk.equirect_frag

  	},

  	distanceRGBA: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.displacementmap,
  			{
  				referencePosition: { value: new Vector3() },
  				nearDistance: { value: 1 },
  				farDistance: { value: 1000 }
  			}
  		] ),

  		vertexShader: ShaderChunk.distanceRGBA_vert,
  		fragmentShader: ShaderChunk.distanceRGBA_frag

  	},

  	shadow: {

  		uniforms: mergeUniforms( [
  			UniformsLib.lights,
  			UniformsLib.fog,
  			{
  				color: { value: new Color( 0x00000 ) },
  				opacity: { value: 1.0 }
  			},
  		] ),

  		vertexShader: ShaderChunk.shadow_vert,
  		fragmentShader: ShaderChunk.shadow_frag

  	}

  };

  ShaderLib.physical = {

  	uniforms: mergeUniforms( [
  		ShaderLib.standard.uniforms,
  		{
  			clearCoat: { value: 0 },
  			clearCoatRoughness: { value: 0 }
  		}
  	] ),

  	vertexShader: ShaderChunk.meshphysical_vert,
  	fragmentShader: ShaderChunk.meshphysical_frag

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLAnimation() {

  	var context = null;
  	var isAnimating = false;
  	var animationLoop = null;

  	function onAnimationFrame( time, frame ) {

  		if ( isAnimating === false ) return;

  		animationLoop( time, frame );

  		context.requestAnimationFrame( onAnimationFrame );

  	}

  	return {

  		start: function () {

  			if ( isAnimating === true ) return;
  			if ( animationLoop === null ) return;

  			context.requestAnimationFrame( onAnimationFrame );

  			isAnimating = true;

  		},

  		stop: function () {

  			isAnimating = false;

  		},

  		setAnimationLoop: function ( callback ) {

  			animationLoop = callback;

  		},

  		setContext: function ( value ) {

  			context = value;

  		}

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLAttributes( gl ) {

  	var buffers = new WeakMap();

  	function createBuffer( attribute, bufferType ) {

  		var array = attribute.array;
  		var usage = attribute.dynamic ? 35048 : 35044;

  		var buffer = gl.createBuffer();

  		gl.bindBuffer( bufferType, buffer );
  		gl.bufferData( bufferType, array, usage );

  		attribute.onUploadCallback();

  		var type = 5126;

  		if ( array instanceof Float32Array ) {

  			type = 5126;

  		} else if ( array instanceof Float64Array ) {

  			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

  		} else if ( array instanceof Uint16Array ) {

  			type = 5123;

  		} else if ( array instanceof Int16Array ) {

  			type = 5122;

  		} else if ( array instanceof Uint32Array ) {

  			type = 5125;

  		} else if ( array instanceof Int32Array ) {

  			type = 5124;

  		} else if ( array instanceof Int8Array ) {

  			type = 5120;

  		} else if ( array instanceof Uint8Array ) {

  			type = 5121;

  		}

  		return {
  			buffer: buffer,
  			type: type,
  			bytesPerElement: array.BYTES_PER_ELEMENT,
  			version: attribute.version
  		};

  	}

  	function updateBuffer( buffer, attribute, bufferType ) {

  		var array = attribute.array;
  		var updateRange = attribute.updateRange;

  		gl.bindBuffer( bufferType, buffer );

  		if ( attribute.dynamic === false ) {

  			gl.bufferData( bufferType, array, 35044 );

  		} else if ( updateRange.count === - 1 ) {

  			// Not using update ranges

  			gl.bufferSubData( bufferType, 0, array );

  		} else if ( updateRange.count === 0 ) {

  			console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

  		} else {

  			gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
  				array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

  			updateRange.count = - 1; // reset range

  		}

  	}

  	//

  	function get( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		return buffers.get( attribute );

  	}

  	function remove( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		var data = buffers.get( attribute );

  		if ( data ) {

  			gl.deleteBuffer( data.buffer );

  			buffers.delete( attribute );

  		}

  	}

  	function update( attribute, bufferType ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		var data = buffers.get( attribute );

  		if ( data === undefined ) {

  			buffers.set( attribute, createBuffer( attribute, bufferType ) );

  		} else if ( data.version < attribute.version ) {

  			updateBuffer( data.buffer, attribute, bufferType );

  			data.version = attribute.version;

  		}

  	}

  	return {

  		get: get,
  		remove: remove,
  		update: update

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Face3( a, b, c, normal, color, materialIndex ) {

  	this.a = a;
  	this.b = b;
  	this.c = c;

  	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
  	this.vertexNormals = Array.isArray( normal ) ? normal : [];

  	this.color = ( color && color.isColor ) ? color : new Color();
  	this.vertexColors = Array.isArray( color ) ? color : [];

  	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

  }

  Object.assign( Face3.prototype, {

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.a = source.a;
  		this.b = source.b;
  		this.c = source.c;

  		this.normal.copy( source.normal );
  		this.color.copy( source.color );

  		this.materialIndex = source.materialIndex;

  		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

  			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

  		}

  		for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

  			this.vertexColors[ i ] = source.vertexColors[ i ].clone();

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   */

  function Euler( x, y, z, order ) {

  	this._x = x || 0;
  	this._y = y || 0;
  	this._z = z || 0;
  	this._order = order || Euler.DefaultOrder;

  }

  Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

  Euler.DefaultOrder = 'XYZ';

  Object.defineProperties( Euler.prototype, {

  	x: {

  		get: function () {

  			return this._x;

  		},

  		set: function ( value ) {

  			this._x = value;
  			this.onChangeCallback();

  		}

  	},

  	y: {

  		get: function () {

  			return this._y;

  		},

  		set: function ( value ) {

  			this._y = value;
  			this.onChangeCallback();

  		}

  	},

  	z: {

  		get: function () {

  			return this._z;

  		},

  		set: function ( value ) {

  			this._z = value;
  			this.onChangeCallback();

  		}

  	},

  	order: {

  		get: function () {

  			return this._order;

  		},

  		set: function ( value ) {

  			this._order = value;
  			this.onChangeCallback();

  		}

  	}

  } );

  Object.assign( Euler.prototype, {

  	isEuler: true,

  	set: function ( x, y, z, order ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._order = order || this._order;

  		this.onChangeCallback();

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this._x, this._y, this._z, this._order );

  	},

  	copy: function ( euler ) {

  		this._x = euler._x;
  		this._y = euler._y;
  		this._z = euler._z;
  		this._order = euler._order;

  		this.onChangeCallback();

  		return this;

  	},

  	setFromRotationMatrix: function ( m, order, update ) {

  		var clamp = _Math.clamp;

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var te = m.elements;
  		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
  		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
  		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		order = order || this._order;

  		if ( order === 'XYZ' ) {

  			this._y = Math.asin( clamp( m13, - 1, 1 ) );

  			if ( Math.abs( m13 ) < 0.99999 ) {

  				this._x = Math.atan2( - m23, m33 );
  				this._z = Math.atan2( - m12, m11 );

  			} else {

  				this._x = Math.atan2( m32, m22 );
  				this._z = 0;

  			}

  		} else if ( order === 'YXZ' ) {

  			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

  			if ( Math.abs( m23 ) < 0.99999 ) {

  				this._y = Math.atan2( m13, m33 );
  				this._z = Math.atan2( m21, m22 );

  			} else {

  				this._y = Math.atan2( - m31, m11 );
  				this._z = 0;

  			}

  		} else if ( order === 'ZXY' ) {

  			this._x = Math.asin( clamp( m32, - 1, 1 ) );

  			if ( Math.abs( m32 ) < 0.99999 ) {

  				this._y = Math.atan2( - m31, m33 );
  				this._z = Math.atan2( - m12, m22 );

  			} else {

  				this._y = 0;
  				this._z = Math.atan2( m21, m11 );

  			}

  		} else if ( order === 'ZYX' ) {

  			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

  			if ( Math.abs( m31 ) < 0.99999 ) {

  				this._x = Math.atan2( m32, m33 );
  				this._z = Math.atan2( m21, m11 );

  			} else {

  				this._x = 0;
  				this._z = Math.atan2( - m12, m22 );

  			}

  		} else if ( order === 'YZX' ) {

  			this._z = Math.asin( clamp( m21, - 1, 1 ) );

  			if ( Math.abs( m21 ) < 0.99999 ) {

  				this._x = Math.atan2( - m23, m22 );
  				this._y = Math.atan2( - m31, m11 );

  			} else {

  				this._x = 0;
  				this._y = Math.atan2( m13, m33 );

  			}

  		} else if ( order === 'XZY' ) {

  			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

  			if ( Math.abs( m12 ) < 0.99999 ) {

  				this._x = Math.atan2( m32, m22 );
  				this._y = Math.atan2( m13, m11 );

  			} else {

  				this._x = Math.atan2( - m23, m33 );
  				this._y = 0;

  			}

  		} else {

  			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

  		}

  		this._order = order;

  		if ( update !== false ) this.onChangeCallback();

  		return this;

  	},

  	setFromQuaternion: function () {

  		var matrix = new Matrix4();

  		return function setFromQuaternion( q, order, update ) {

  			matrix.makeRotationFromQuaternion( q );

  			return this.setFromRotationMatrix( matrix, order, update );

  		};

  	}(),

  	setFromVector3: function ( v, order ) {

  		return this.set( v.x, v.y, v.z, order || this._order );

  	},

  	reorder: function () {

  		// WARNING: this discards revolution information -bhouston

  		var q = new Quaternion();

  		return function reorder( newOrder ) {

  			q.setFromEuler( this );

  			return this.setFromQuaternion( q, newOrder );

  		};

  	}(),

  	equals: function ( euler ) {

  		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

  	},

  	fromArray: function ( array ) {

  		this._x = array[ 0 ];
  		this._y = array[ 1 ];
  		this._z = array[ 2 ];
  		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

  		this.onChangeCallback();

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._order;

  		return array;

  	},

  	toVector3: function ( optionalResult ) {

  		if ( optionalResult ) {

  			return optionalResult.set( this._x, this._y, this._z );

  		} else {

  			return new Vector3( this._x, this._y, this._z );

  		}

  	},

  	onChange: function ( callback ) {

  		this.onChangeCallback = callback;

  		return this;

  	},

  	onChangeCallback: function () {}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Layers() {

  	this.mask = 1 | 0;

  }

  Object.assign( Layers.prototype, {

  	set: function ( channel ) {

  		this.mask = 1 << channel | 0;

  	},

  	enable: function ( channel ) {

  		this.mask |= 1 << channel | 0;

  	},

  	toggle: function ( channel ) {

  		this.mask ^= 1 << channel | 0;

  	},

  	disable: function ( channel ) {

  		this.mask &= ~ ( 1 << channel | 0 );

  	},

  	test: function ( layers ) {

  		return ( this.mask & layers.mask ) !== 0;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author elephantatwork / www.elephantatwork.ch
   */

  var object3DId = 0;

  function Object3D() {

  	Object.defineProperty( this, 'id', { value: object3DId ++ } );

  	this.uuid = _Math.generateUUID();

  	this.name = '';
  	this.type = 'Object3D';

  	this.parent = null;
  	this.children = [];

  	this.up = Object3D.DefaultUp.clone();

  	var position = new Vector3();
  	var rotation = new Euler();
  	var quaternion = new Quaternion();
  	var scale = new Vector3( 1, 1, 1 );

  	function onRotationChange() {

  		quaternion.setFromEuler( rotation, false );

  	}

  	function onQuaternionChange() {

  		rotation.setFromQuaternion( quaternion, undefined, false );

  	}

  	rotation.onChange( onRotationChange );
  	quaternion.onChange( onQuaternionChange );

  	Object.defineProperties( this, {
  		position: {
  			configurable: true,
  			enumerable: true,
  			value: position
  		},
  		rotation: {
  			configurable: true,
  			enumerable: true,
  			value: rotation
  		},
  		quaternion: {
  			configurable: true,
  			enumerable: true,
  			value: quaternion
  		},
  		scale: {
  			configurable: true,
  			enumerable: true,
  			value: scale
  		},
  		modelViewMatrix: {
  			value: new Matrix4()
  		},
  		normalMatrix: {
  			value: new Matrix3()
  		}
  	} );

  	this.matrix = new Matrix4();
  	this.matrixWorld = new Matrix4();

  	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
  	this.matrixWorldNeedsUpdate = false;

  	this.layers = new Layers();
  	this.visible = true;

  	this.castShadow = false;
  	this.receiveShadow = false;

  	this.frustumCulled = true;
  	this.renderOrder = 0;

  	this.userData = {};

  }

  Object3D.DefaultUp = new Vector3( 0, 1, 0 );
  Object3D.DefaultMatrixAutoUpdate = true;

  Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Object3D,

  	isObject3D: true,

  	onBeforeRender: function () {},
  	onAfterRender: function () {},

  	applyMatrix: function ( matrix ) {

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		this.matrix.premultiply( matrix );

  		this.matrix.decompose( this.position, this.quaternion, this.scale );

  	},

  	applyQuaternion: function ( q ) {

  		this.quaternion.premultiply( q );

  		return this;

  	},

  	setRotationFromAxisAngle: function ( axis, angle ) {

  		// assumes axis is normalized

  		this.quaternion.setFromAxisAngle( axis, angle );

  	},

  	setRotationFromEuler: function ( euler ) {

  		this.quaternion.setFromEuler( euler, true );

  	},

  	setRotationFromMatrix: function ( m ) {

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		this.quaternion.setFromRotationMatrix( m );

  	},

  	setRotationFromQuaternion: function ( q ) {

  		// assumes q is normalized

  		this.quaternion.copy( q );

  	},

  	rotateOnAxis: function () {

  		// rotate object on axis in object space
  		// axis is assumed to be normalized

  		var q1 = new Quaternion();

  		return function rotateOnAxis( axis, angle ) {

  			q1.setFromAxisAngle( axis, angle );

  			this.quaternion.multiply( q1 );

  			return this;

  		};

  	}(),

  	rotateOnWorldAxis: function () {

  		// rotate object on axis in world space
  		// axis is assumed to be normalized
  		// method assumes no rotated parent

  		var q1 = new Quaternion();

  		return function rotateOnWorldAxis( axis, angle ) {

  			q1.setFromAxisAngle( axis, angle );

  			this.quaternion.premultiply( q1 );

  			return this;

  		};

  	}(),

  	rotateX: function () {

  		var v1 = new Vector3( 1, 0, 0 );

  		return function rotateX( angle ) {

  			return this.rotateOnAxis( v1, angle );

  		};

  	}(),

  	rotateY: function () {

  		var v1 = new Vector3( 0, 1, 0 );

  		return function rotateY( angle ) {

  			return this.rotateOnAxis( v1, angle );

  		};

  	}(),

  	rotateZ: function () {

  		var v1 = new Vector3( 0, 0, 1 );

  		return function rotateZ( angle ) {

  			return this.rotateOnAxis( v1, angle );

  		};

  	}(),

  	translateOnAxis: function () {

  		// translate object by distance along axis in object space
  		// axis is assumed to be normalized

  		var v1 = new Vector3();

  		return function translateOnAxis( axis, distance ) {

  			v1.copy( axis ).applyQuaternion( this.quaternion );

  			this.position.add( v1.multiplyScalar( distance ) );

  			return this;

  		};

  	}(),

  	translateX: function () {

  		var v1 = new Vector3( 1, 0, 0 );

  		return function translateX( distance ) {

  			return this.translateOnAxis( v1, distance );

  		};

  	}(),

  	translateY: function () {

  		var v1 = new Vector3( 0, 1, 0 );

  		return function translateY( distance ) {

  			return this.translateOnAxis( v1, distance );

  		};

  	}(),

  	translateZ: function () {

  		var v1 = new Vector3( 0, 0, 1 );

  		return function translateZ( distance ) {

  			return this.translateOnAxis( v1, distance );

  		};

  	}(),

  	localToWorld: function ( vector ) {

  		return vector.applyMatrix4( this.matrixWorld );

  	},

  	worldToLocal: function () {

  		var m1 = new Matrix4();

  		return function worldToLocal( vector ) {

  			return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

  		};

  	}(),

  	lookAt: function () {

  		// This method does not support objects having non-uniformly-scaled parent(s)

  		var q1 = new Quaternion();
  		var m1 = new Matrix4();
  		var target = new Vector3();
  		var position = new Vector3();

  		return function lookAt( x, y, z ) {

  			if ( x.isVector3 ) {

  				target.copy( x );

  			} else {

  				target.set( x, y, z );

  			}

  			var parent = this.parent;

  			this.updateWorldMatrix( true, false );

  			position.setFromMatrixPosition( this.matrixWorld );

  			if ( this.isCamera || this.isLight ) {

  				m1.lookAt( position, target, this.up );

  			} else {

  				m1.lookAt( target, position, this.up );

  			}

  			this.quaternion.setFromRotationMatrix( m1 );

  			if ( parent ) {

  				m1.extractRotation( parent.matrixWorld );
  				q1.setFromRotationMatrix( m1 );
  				this.quaternion.premultiply( q1.inverse() );

  			}

  		};

  	}(),

  	add: function ( object ) {

  		if ( arguments.length > 1 ) {

  			for ( var i = 0; i < arguments.length; i ++ ) {

  				this.add( arguments[ i ] );

  			}

  			return this;

  		}

  		if ( object === this ) {

  			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
  			return this;

  		}

  		if ( ( object && object.isObject3D ) ) {

  			if ( object.parent !== null ) {

  				object.parent.remove( object );

  			}

  			object.parent = this;
  			object.dispatchEvent( { type: 'added' } );

  			this.children.push( object );

  		} else {

  			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

  		}

  		return this;

  	},

  	remove: function ( object ) {

  		if ( arguments.length > 1 ) {

  			for ( var i = 0; i < arguments.length; i ++ ) {

  				this.remove( arguments[ i ] );

  			}

  			return this;

  		}

  		var index = this.children.indexOf( object );

  		if ( index !== - 1 ) {

  			object.parent = null;

  			object.dispatchEvent( { type: 'removed' } );

  			this.children.splice( index, 1 );

  		}

  		return this;

  	},

  	getObjectById: function ( id ) {

  		return this.getObjectByProperty( 'id', id );

  	},

  	getObjectByName: function ( name ) {

  		return this.getObjectByProperty( 'name', name );

  	},

  	getObjectByProperty: function ( name, value ) {

  		if ( this[ name ] === value ) return this;

  		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

  			var child = this.children[ i ];
  			var object = child.getObjectByProperty( name, value );

  			if ( object !== undefined ) {

  				return object;

  			}

  		}

  		return undefined;

  	},

  	getWorldPosition: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		return target.setFromMatrixPosition( this.matrixWorld );

  	},

  	getWorldQuaternion: function () {

  		var position = new Vector3();
  		var scale = new Vector3();

  		return function getWorldQuaternion( target ) {

  			if ( target === undefined ) {

  				console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
  				target = new Quaternion();

  			}

  			this.updateMatrixWorld( true );

  			this.matrixWorld.decompose( position, target, scale );

  			return target;

  		};

  	}(),

  	getWorldScale: function () {

  		var position = new Vector3();
  		var quaternion = new Quaternion();

  		return function getWorldScale( target ) {

  			if ( target === undefined ) {

  				console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
  				target = new Vector3();

  			}

  			this.updateMatrixWorld( true );

  			this.matrixWorld.decompose( position, quaternion, target );

  			return target;

  		};

  	}(),

  	getWorldDirection: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		var e = this.matrixWorld.elements;

  		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

  	},

  	raycast: function () {},

  	traverse: function ( callback ) {

  		callback( this );

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverse( callback );

  		}

  	},

  	traverseVisible: function ( callback ) {

  		if ( this.visible === false ) return;

  		callback( this );

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverseVisible( callback );

  		}

  	},

  	traverseAncestors: function ( callback ) {

  		var parent = this.parent;

  		if ( parent !== null ) {

  			callback( parent );

  			parent.traverseAncestors( callback );

  		}

  	},

  	updateMatrix: function () {

  		this.matrix.compose( this.position, this.quaternion, this.scale );

  		this.matrixWorldNeedsUpdate = true;

  	},

  	updateMatrixWorld: function ( force ) {

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		if ( this.matrixWorldNeedsUpdate || force ) {

  			if ( this.parent === null ) {

  				this.matrixWorld.copy( this.matrix );

  			} else {

  				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  			}

  			this.matrixWorldNeedsUpdate = false;

  			force = true;

  		}

  		// update children

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].updateMatrixWorld( force );

  		}

  	},

  	updateWorldMatrix: function ( updateParents, updateChildren ) {

  		var parent = this.parent;

  		if ( updateParents === true && parent !== null ) {

  			parent.updateWorldMatrix( true, false );

  		}

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		if ( this.parent === null ) {

  			this.matrixWorld.copy( this.matrix );

  		} else {

  			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  		}

  		// update children

  		if ( updateChildren === true ) {

  			var children = this.children;

  			for ( var i = 0, l = children.length; i < l; i ++ ) {

  				children[ i ].updateWorldMatrix( false, true );

  			}

  		}

  	},

  	toJSON: function ( meta ) {

  		// meta is a string when called from JSON.stringify
  		var isRootObject = ( meta === undefined || typeof meta === 'string' );

  		var output = {};

  		// meta is a hash used to collect geometries, materials.
  		// not providing it implies that this is the root object
  		// being serialized.
  		if ( isRootObject ) {

  			// initialize meta obj
  			meta = {
  				geometries: {},
  				materials: {},
  				textures: {},
  				images: {},
  				shapes: {}
  			};

  			output.metadata = {
  				version: 4.5,
  				type: 'Object',
  				generator: 'Object3D.toJSON'
  			};

  		}

  		// standard Object3D serialization

  		var object = {};

  		object.uuid = this.uuid;
  		object.type = this.type;

  		if ( this.name !== '' ) object.name = this.name;
  		if ( this.castShadow === true ) object.castShadow = true;
  		if ( this.receiveShadow === true ) object.receiveShadow = true;
  		if ( this.visible === false ) object.visible = false;
  		if ( this.frustumCulled === false ) object.frustumCulled = false;
  		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
  		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

  		object.layers = this.layers.mask;
  		object.matrix = this.matrix.toArray();

  		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

  		// object specific properties

  		if ( this.isMesh && this.drawMode !== TrianglesDrawMode ) object.drawMode = this.drawMode;

  		//

  		function serialize( library, element ) {

  			if ( library[ element.uuid ] === undefined ) {

  				library[ element.uuid ] = element.toJSON( meta );

  			}

  			return element.uuid;

  		}

  		if ( this.isMesh || this.isLine || this.isPoints ) {

  			object.geometry = serialize( meta.geometries, this.geometry );

  			var parameters = this.geometry.parameters;

  			if ( parameters !== undefined && parameters.shapes !== undefined ) {

  				var shapes = parameters.shapes;

  				if ( Array.isArray( shapes ) ) {

  					for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  						var shape = shapes[ i ];

  						serialize( meta.shapes, shape );

  					}

  				} else {

  					serialize( meta.shapes, shapes );

  				}

  			}

  		}

  		if ( this.material !== undefined ) {

  			if ( Array.isArray( this.material ) ) {

  				var uuids = [];

  				for ( var i = 0, l = this.material.length; i < l; i ++ ) {

  					uuids.push( serialize( meta.materials, this.material[ i ] ) );

  				}

  				object.material = uuids;

  			} else {

  				object.material = serialize( meta.materials, this.material );

  			}

  		}

  		//

  		if ( this.children.length > 0 ) {

  			object.children = [];

  			for ( var i = 0; i < this.children.length; i ++ ) {

  				object.children.push( this.children[ i ].toJSON( meta ).object );

  			}

  		}

  		if ( isRootObject ) {

  			var geometries = extractFromCache( meta.geometries );
  			var materials = extractFromCache( meta.materials );
  			var textures = extractFromCache( meta.textures );
  			var images = extractFromCache( meta.images );
  			var shapes = extractFromCache( meta.shapes );

  			if ( geometries.length > 0 ) output.geometries = geometries;
  			if ( materials.length > 0 ) output.materials = materials;
  			if ( textures.length > 0 ) output.textures = textures;
  			if ( images.length > 0 ) output.images = images;
  			if ( shapes.length > 0 ) output.shapes = shapes;

  		}

  		output.object = object;

  		return output;

  		// extract data from the cache hash
  		// remove metadata on each item
  		// and return as array
  		function extractFromCache( cache ) {

  			var values = [];
  			for ( var key in cache ) {

  				var data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}
  			return values;

  		}

  	},

  	clone: function ( recursive ) {

  		return new this.constructor().copy( this, recursive );

  	},

  	copy: function ( source, recursive ) {

  		if ( recursive === undefined ) recursive = true;

  		this.name = source.name;

  		this.up.copy( source.up );

  		this.position.copy( source.position );
  		this.quaternion.copy( source.quaternion );
  		this.scale.copy( source.scale );

  		this.matrix.copy( source.matrix );
  		this.matrixWorld.copy( source.matrixWorld );

  		this.matrixAutoUpdate = source.matrixAutoUpdate;
  		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

  		this.layers.mask = source.layers.mask;
  		this.visible = source.visible;

  		this.castShadow = source.castShadow;
  		this.receiveShadow = source.receiveShadow;

  		this.frustumCulled = source.frustumCulled;
  		this.renderOrder = source.renderOrder;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		if ( recursive === true ) {

  			for ( var i = 0; i < source.children.length; i ++ ) {

  				var child = source.children[ i ];
  				this.add( child.clone() );

  			}

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author kile / http://kile.stravaganza.org/
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author bhouston / http://clara.io
   */

  var geometryId = 0; // Geometry uses even numbers as Id

  function Geometry() {

  	Object.defineProperty( this, 'id', { value: geometryId += 2 } );

  	this.uuid = _Math.generateUUID();

  	this.name = '';
  	this.type = 'Geometry';

  	this.vertices = [];
  	this.colors = [];
  	this.faces = [];
  	this.faceVertexUvs = [[]];

  	this.morphTargets = [];
  	this.morphNormals = [];

  	this.skinWeights = [];
  	this.skinIndices = [];

  	this.lineDistances = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	// update flags

  	this.elementsNeedUpdate = false;
  	this.verticesNeedUpdate = false;
  	this.uvsNeedUpdate = false;
  	this.normalsNeedUpdate = false;
  	this.colorsNeedUpdate = false;
  	this.lineDistancesNeedUpdate = false;
  	this.groupsNeedUpdate = false;

  }

  Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Geometry,

  	isGeometry: true,

  	applyMatrix: function ( matrix ) {

  		var normalMatrix = new Matrix3().getNormalMatrix( matrix );

  		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

  			var vertex = this.vertices[ i ];
  			vertex.applyMatrix4( matrix );

  		}

  		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

  			var face = this.faces[ i ];
  			face.normal.applyMatrix3( normalMatrix ).normalize();

  			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

  				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

  			}

  		}

  		if ( this.boundingBox !== null ) {

  			this.computeBoundingBox();

  		}

  		if ( this.boundingSphere !== null ) {

  			this.computeBoundingSphere();

  		}

  		this.verticesNeedUpdate = true;
  		this.normalsNeedUpdate = true;

  		return this;

  	},

  	rotateX: function () {

  		// rotate geometry around world x-axis

  		var m1 = new Matrix4();

  		return function rotateX( angle ) {

  			m1.makeRotationX( angle );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	rotateY: function () {

  		// rotate geometry around world y-axis

  		var m1 = new Matrix4();

  		return function rotateY( angle ) {

  			m1.makeRotationY( angle );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	rotateZ: function () {

  		// rotate geometry around world z-axis

  		var m1 = new Matrix4();

  		return function rotateZ( angle ) {

  			m1.makeRotationZ( angle );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	translate: function () {

  		// translate geometry

  		var m1 = new Matrix4();

  		return function translate( x, y, z ) {

  			m1.makeTranslation( x, y, z );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	scale: function () {

  		// scale geometry

  		var m1 = new Matrix4();

  		return function scale( x, y, z ) {

  			m1.makeScale( x, y, z );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	lookAt: function () {

  		var obj = new Object3D();

  		return function lookAt( vector ) {

  			obj.lookAt( vector );

  			obj.updateMatrix();

  			this.applyMatrix( obj.matrix );

  		};

  	}(),

  	fromBufferGeometry: function ( geometry ) {

  		var scope = this;

  		var indices = geometry.index !== null ? geometry.index.array : undefined;
  		var attributes = geometry.attributes;

  		var positions = attributes.position.array;
  		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
  		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
  		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
  		var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

  		if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

  		for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

  			scope.vertices.push( new Vector3().fromArray( positions, i ) );

  			if ( colors !== undefined ) {

  				scope.colors.push( new Color().fromArray( colors, i ) );

  			}

  		}

  		function addFace( a, b, c, materialIndex ) {

  			var vertexColors = ( colors === undefined ) ? [] : [
  				scope.colors[ a ].clone(),
  				scope.colors[ b ].clone(),
  				scope.colors[ c ].clone() ];

  			var vertexNormals = ( normals === undefined ) ? [] : [
  				new Vector3().fromArray( normals, a * 3 ),
  				new Vector3().fromArray( normals, b * 3 ),
  				new Vector3().fromArray( normals, c * 3 )
  			];

  			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

  			scope.faces.push( face );

  			if ( uvs !== undefined ) {

  				scope.faceVertexUvs[ 0 ].push( [
  					new Vector2().fromArray( uvs, a * 2 ),
  					new Vector2().fromArray( uvs, b * 2 ),
  					new Vector2().fromArray( uvs, c * 2 )
  				] );

  			}

  			if ( uvs2 !== undefined ) {

  				scope.faceVertexUvs[ 1 ].push( [
  					new Vector2().fromArray( uvs2, a * 2 ),
  					new Vector2().fromArray( uvs2, b * 2 ),
  					new Vector2().fromArray( uvs2, c * 2 )
  				] );

  			}

  		}

  		var groups = geometry.groups;

  		if ( groups.length > 0 ) {

  			for ( var i = 0; i < groups.length; i ++ ) {

  				var group = groups[ i ];

  				var start = group.start;
  				var count = group.count;

  				for ( var j = start, jl = start + count; j < jl; j += 3 ) {

  					if ( indices !== undefined ) {

  						addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

  					} else {

  						addFace( j, j + 1, j + 2, group.materialIndex );

  					}

  				}

  			}

  		} else {

  			if ( indices !== undefined ) {

  				for ( var i = 0; i < indices.length; i += 3 ) {

  					addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

  				}

  			} else {

  				for ( var i = 0; i < positions.length / 3; i += 3 ) {

  					addFace( i, i + 1, i + 2 );

  				}

  			}

  		}

  		this.computeFaceNormals();

  		if ( geometry.boundingBox !== null ) {

  			this.boundingBox = geometry.boundingBox.clone();

  		}

  		if ( geometry.boundingSphere !== null ) {

  			this.boundingSphere = geometry.boundingSphere.clone();

  		}

  		return this;

  	},

  	center: function () {

  		var offset = new Vector3();

  		return function center() {

  			this.computeBoundingBox();

  			this.boundingBox.getCenter( offset ).negate();

  			this.translate( offset.x, offset.y, offset.z );

  			return this;

  		};

  	}(),

  	normalize: function () {

  		this.computeBoundingSphere();

  		var center = this.boundingSphere.center;
  		var radius = this.boundingSphere.radius;

  		var s = radius === 0 ? 1 : 1.0 / radius;

  		var matrix = new Matrix4();
  		matrix.set(
  			s, 0, 0, - s * center.x,
  			0, s, 0, - s * center.y,
  			0, 0, s, - s * center.z,
  			0, 0, 0, 1
  		);

  		this.applyMatrix( matrix );

  		return this;

  	},

  	computeFaceNormals: function () {

  		var cb = new Vector3(), ab = new Vector3();

  		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			var face = this.faces[ f ];

  			var vA = this.vertices[ face.a ];
  			var vB = this.vertices[ face.b ];
  			var vC = this.vertices[ face.c ];

  			cb.subVectors( vC, vB );
  			ab.subVectors( vA, vB );
  			cb.cross( ab );

  			cb.normalize();

  			face.normal.copy( cb );

  		}

  	},

  	computeVertexNormals: function ( areaWeighted ) {

  		if ( areaWeighted === undefined ) areaWeighted = true;

  		var v, vl, f, fl, face, vertices;

  		vertices = new Array( this.vertices.length );

  		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

  			vertices[ v ] = new Vector3();

  		}

  		if ( areaWeighted ) {

  			// vertex normals weighted by triangle areas
  			// http://www.iquilezles.org/www/articles/normals/normals.htm

  			var vA, vB, vC;
  			var cb = new Vector3(), ab = new Vector3();

  			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  				face = this.faces[ f ];

  				vA = this.vertices[ face.a ];
  				vB = this.vertices[ face.b ];
  				vC = this.vertices[ face.c ];

  				cb.subVectors( vC, vB );
  				ab.subVectors( vA, vB );
  				cb.cross( ab );

  				vertices[ face.a ].add( cb );
  				vertices[ face.b ].add( cb );
  				vertices[ face.c ].add( cb );

  			}

  		} else {

  			this.computeFaceNormals();

  			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  				face = this.faces[ f ];

  				vertices[ face.a ].add( face.normal );
  				vertices[ face.b ].add( face.normal );
  				vertices[ face.c ].add( face.normal );

  			}

  		}

  		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

  			vertices[ v ].normalize();

  		}

  		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			face = this.faces[ f ];

  			var vertexNormals = face.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				vertexNormals[ 0 ].copy( vertices[ face.a ] );
  				vertexNormals[ 1 ].copy( vertices[ face.b ] );
  				vertexNormals[ 2 ].copy( vertices[ face.c ] );

  			} else {

  				vertexNormals[ 0 ] = vertices[ face.a ].clone();
  				vertexNormals[ 1 ] = vertices[ face.b ].clone();
  				vertexNormals[ 2 ] = vertices[ face.c ].clone();

  			}

  		}

  		if ( this.faces.length > 0 ) {

  			this.normalsNeedUpdate = true;

  		}

  	},

  	computeFlatVertexNormals: function () {

  		var f, fl, face;

  		this.computeFaceNormals();

  		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			face = this.faces[ f ];

  			var vertexNormals = face.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				vertexNormals[ 0 ].copy( face.normal );
  				vertexNormals[ 1 ].copy( face.normal );
  				vertexNormals[ 2 ].copy( face.normal );

  			} else {

  				vertexNormals[ 0 ] = face.normal.clone();
  				vertexNormals[ 1 ] = face.normal.clone();
  				vertexNormals[ 2 ] = face.normal.clone();

  			}

  		}

  		if ( this.faces.length > 0 ) {

  			this.normalsNeedUpdate = true;

  		}

  	},

  	computeMorphNormals: function () {

  		var i, il, f, fl, face;

  		// save original normals
  		// - create temp variables on first access
  		//   otherwise just copy (for faster repeated calls)

  		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			face = this.faces[ f ];

  			if ( ! face.__originalFaceNormal ) {

  				face.__originalFaceNormal = face.normal.clone();

  			} else {

  				face.__originalFaceNormal.copy( face.normal );

  			}

  			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

  			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

  				if ( ! face.__originalVertexNormals[ i ] ) {

  					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

  				} else {

  					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

  				}

  			}

  		}

  		// use temp geometry to compute face and vertex normals for each morph

  		var tmpGeo = new Geometry();
  		tmpGeo.faces = this.faces;

  		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

  			// create on first access

  			if ( ! this.morphNormals[ i ] ) {

  				this.morphNormals[ i ] = {};
  				this.morphNormals[ i ].faceNormals = [];
  				this.morphNormals[ i ].vertexNormals = [];

  				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
  				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

  				var faceNormal, vertexNormals;

  				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  					faceNormal = new Vector3();
  					vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

  					dstNormalsFace.push( faceNormal );
  					dstNormalsVertex.push( vertexNormals );

  				}

  			}

  			var morphNormals = this.morphNormals[ i ];

  			// set vertices to morph target

  			tmpGeo.vertices = this.morphTargets[ i ].vertices;

  			// compute morph normals

  			tmpGeo.computeFaceNormals();
  			tmpGeo.computeVertexNormals();

  			// store morph normals

  			var faceNormal, vertexNormals;

  			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  				face = this.faces[ f ];

  				faceNormal = morphNormals.faceNormals[ f ];
  				vertexNormals = morphNormals.vertexNormals[ f ];

  				faceNormal.copy( face.normal );

  				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
  				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
  				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

  			}

  		}

  		// restore original normals

  		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			face = this.faces[ f ];

  			face.normal = face.__originalFaceNormal;
  			face.vertexNormals = face.__originalVertexNormals;

  		}

  	},

  	computeBoundingBox: function () {

  		if ( this.boundingBox === null ) {

  			this.boundingBox = new Box3();

  		}

  		this.boundingBox.setFromPoints( this.vertices );

  	},

  	computeBoundingSphere: function () {

  		if ( this.boundingSphere === null ) {

  			this.boundingSphere = new Sphere();

  		}

  		this.boundingSphere.setFromPoints( this.vertices );

  	},

  	merge: function ( geometry, matrix, materialIndexOffset ) {

  		if ( ! ( geometry && geometry.isGeometry ) ) {

  			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
  			return;

  		}

  		var normalMatrix,
  			vertexOffset = this.vertices.length,
  			vertices1 = this.vertices,
  			vertices2 = geometry.vertices,
  			faces1 = this.faces,
  			faces2 = geometry.faces,
  			uvs1 = this.faceVertexUvs[ 0 ],
  			uvs2 = geometry.faceVertexUvs[ 0 ],
  			colors1 = this.colors,
  			colors2 = geometry.colors;

  		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

  		if ( matrix !== undefined ) {

  			normalMatrix = new Matrix3().getNormalMatrix( matrix );

  		}

  		// vertices

  		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

  			var vertex = vertices2[ i ];

  			var vertexCopy = vertex.clone();

  			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

  			vertices1.push( vertexCopy );

  		}

  		// colors

  		for ( var i = 0, il = colors2.length; i < il; i ++ ) {

  			colors1.push( colors2[ i ].clone() );

  		}

  		// faces

  		for ( i = 0, il = faces2.length; i < il; i ++ ) {

  			var face = faces2[ i ], faceCopy, normal, color,
  				faceVertexNormals = face.vertexNormals,
  				faceVertexColors = face.vertexColors;

  			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
  			faceCopy.normal.copy( face.normal );

  			if ( normalMatrix !== undefined ) {

  				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

  			}

  			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

  				normal = faceVertexNormals[ j ].clone();

  				if ( normalMatrix !== undefined ) {

  					normal.applyMatrix3( normalMatrix ).normalize();

  				}

  				faceCopy.vertexNormals.push( normal );

  			}

  			faceCopy.color.copy( face.color );

  			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

  				color = faceVertexColors[ j ];
  				faceCopy.vertexColors.push( color.clone() );

  			}

  			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

  			faces1.push( faceCopy );

  		}

  		// uvs

  		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

  			var uv = uvs2[ i ], uvCopy = [];

  			if ( uv === undefined ) {

  				continue;

  			}

  			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

  				uvCopy.push( uv[ j ].clone() );

  			}

  			uvs1.push( uvCopy );

  		}

  	},

  	mergeMesh: function ( mesh ) {

  		if ( ! ( mesh && mesh.isMesh ) ) {

  			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
  			return;

  		}

  		if ( mesh.matrixAutoUpdate ) mesh.updateMatrix();

  		this.merge( mesh.geometry, mesh.matrix );

  	},

  	/*
  	 * Checks for duplicate vertices with hashmap.
  	 * Duplicated vertices are removed
  	 * and faces' vertices are updated.
  	 */

  	mergeVertices: function () {

  		var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
  		var unique = [], changes = [];

  		var v, key;
  		var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
  		var precision = Math.pow( 10, precisionPoints );
  		var i, il, face;
  		var indices, j, jl;

  		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

  			v = this.vertices[ i ];
  			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

  			if ( verticesMap[ key ] === undefined ) {

  				verticesMap[ key ] = i;
  				unique.push( this.vertices[ i ] );
  				changes[ i ] = unique.length - 1;

  			} else {

  				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
  				changes[ i ] = changes[ verticesMap[ key ] ];

  			}

  		}


  		// if faces are completely degenerate after merging vertices, we
  		// have to remove them from the geometry.
  		var faceIndicesToRemove = [];

  		for ( i = 0, il = this.faces.length; i < il; i ++ ) {

  			face = this.faces[ i ];

  			face.a = changes[ face.a ];
  			face.b = changes[ face.b ];
  			face.c = changes[ face.c ];

  			indices = [ face.a, face.b, face.c ];

  			// if any duplicate vertices are found in a Face3
  			// we have to remove the face as nothing can be saved
  			for ( var n = 0; n < 3; n ++ ) {

  				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

  					faceIndicesToRemove.push( i );
  					break;

  				}

  			}

  		}

  		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

  			var idx = faceIndicesToRemove[ i ];

  			this.faces.splice( idx, 1 );

  			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

  				this.faceVertexUvs[ j ].splice( idx, 1 );

  			}

  		}

  		// Use unique set of vertices

  		var diff = this.vertices.length - unique.length;
  		this.vertices = unique;
  		return diff;

  	},

  	setFromPoints: function ( points ) {

  		this.vertices = [];

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

  		}

  		return this;

  	},

  	sortFacesByMaterialIndex: function () {

  		var faces = this.faces;
  		var length = faces.length;

  		// tag faces

  		for ( var i = 0; i < length; i ++ ) {

  			faces[ i ]._id = i;

  		}

  		// sort faces

  		function materialIndexSort( a, b ) {

  			return a.materialIndex - b.materialIndex;

  		}

  		faces.sort( materialIndexSort );

  		// sort uvs

  		var uvs1 = this.faceVertexUvs[ 0 ];
  		var uvs2 = this.faceVertexUvs[ 1 ];

  		var newUvs1, newUvs2;

  		if ( uvs1 && uvs1.length === length ) newUvs1 = [];
  		if ( uvs2 && uvs2.length === length ) newUvs2 = [];

  		for ( var i = 0; i < length; i ++ ) {

  			var id = faces[ i ]._id;

  			if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
  			if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

  		}

  		if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
  		if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Geometry',
  				generator: 'Geometry.toJSON'
  			}
  		};

  		// standard Geometry serialization

  		data.uuid = this.uuid;
  		data.type = this.type;
  		if ( this.name !== '' ) data.name = this.name;

  		if ( this.parameters !== undefined ) {

  			var parameters = this.parameters;

  			for ( var key in parameters ) {

  				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

  			}

  			return data;

  		}

  		var vertices = [];

  		for ( var i = 0; i < this.vertices.length; i ++ ) {

  			var vertex = this.vertices[ i ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  		var faces = [];
  		var normals = [];
  		var normalsHash = {};
  		var colors = [];
  		var colorsHash = {};
  		var uvs = [];
  		var uvsHash = {};

  		for ( var i = 0; i < this.faces.length; i ++ ) {

  			var face = this.faces[ i ];

  			var hasMaterial = true;
  			var hasFaceUv = false; // deprecated
  			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
  			var hasFaceNormal = face.normal.length() > 0;
  			var hasFaceVertexNormal = face.vertexNormals.length > 0;
  			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
  			var hasFaceVertexColor = face.vertexColors.length > 0;

  			var faceType = 0;

  			faceType = setBit( faceType, 0, 0 ); // isQuad
  			faceType = setBit( faceType, 1, hasMaterial );
  			faceType = setBit( faceType, 2, hasFaceUv );
  			faceType = setBit( faceType, 3, hasFaceVertexUv );
  			faceType = setBit( faceType, 4, hasFaceNormal );
  			faceType = setBit( faceType, 5, hasFaceVertexNormal );
  			faceType = setBit( faceType, 6, hasFaceColor );
  			faceType = setBit( faceType, 7, hasFaceVertexColor );

  			faces.push( faceType );
  			faces.push( face.a, face.b, face.c );
  			faces.push( face.materialIndex );

  			if ( hasFaceVertexUv ) {

  				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

  				faces.push(
  					getUvIndex( faceVertexUvs[ 0 ] ),
  					getUvIndex( faceVertexUvs[ 1 ] ),
  					getUvIndex( faceVertexUvs[ 2 ] )
  				);

  			}

  			if ( hasFaceNormal ) {

  				faces.push( getNormalIndex( face.normal ) );

  			}

  			if ( hasFaceVertexNormal ) {

  				var vertexNormals = face.vertexNormals;

  				faces.push(
  					getNormalIndex( vertexNormals[ 0 ] ),
  					getNormalIndex( vertexNormals[ 1 ] ),
  					getNormalIndex( vertexNormals[ 2 ] )
  				);

  			}

  			if ( hasFaceColor ) {

  				faces.push( getColorIndex( face.color ) );

  			}

  			if ( hasFaceVertexColor ) {

  				var vertexColors = face.vertexColors;

  				faces.push(
  					getColorIndex( vertexColors[ 0 ] ),
  					getColorIndex( vertexColors[ 1 ] ),
  					getColorIndex( vertexColors[ 2 ] )
  				);

  			}

  		}

  		function setBit( value, position, enabled ) {

  			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

  		}

  		function getNormalIndex( normal ) {

  			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

  			if ( normalsHash[ hash ] !== undefined ) {

  				return normalsHash[ hash ];

  			}

  			normalsHash[ hash ] = normals.length / 3;
  			normals.push( normal.x, normal.y, normal.z );

  			return normalsHash[ hash ];

  		}

  		function getColorIndex( color ) {

  			var hash = color.r.toString() + color.g.toString() + color.b.toString();

  			if ( colorsHash[ hash ] !== undefined ) {

  				return colorsHash[ hash ];

  			}

  			colorsHash[ hash ] = colors.length;
  			colors.push( color.getHex() );

  			return colorsHash[ hash ];

  		}

  		function getUvIndex( uv ) {

  			var hash = uv.x.toString() + uv.y.toString();

  			if ( uvsHash[ hash ] !== undefined ) {

  				return uvsHash[ hash ];

  			}

  			uvsHash[ hash ] = uvs.length / 2;
  			uvs.push( uv.x, uv.y );

  			return uvsHash[ hash ];

  		}

  		data.data = {};

  		data.data.vertices = vertices;
  		data.data.normals = normals;
  		if ( colors.length > 0 ) data.data.colors = colors;
  		if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
  		data.data.faces = faces;

  		return data;

  	},

  	clone: function () {

  		/*
  		 // Handle primitives

  		 var parameters = this.parameters;

  		 if ( parameters !== undefined ) {

  		 var values = [];

  		 for ( var key in parameters ) {

  		 values.push( parameters[ key ] );

  		 }

  		 var geometry = Object.create( this.constructor.prototype );
  		 this.constructor.apply( geometry, values );
  		 return geometry;

  		 }

  		 return new this.constructor().copy( this );
  		 */

  		return new Geometry().copy( this );

  	},

  	copy: function ( source ) {

  		var i, il, j, jl, k, kl;

  		// reset

  		this.vertices = [];
  		this.colors = [];
  		this.faces = [];
  		this.faceVertexUvs = [[]];
  		this.morphTargets = [];
  		this.morphNormals = [];
  		this.skinWeights = [];
  		this.skinIndices = [];
  		this.lineDistances = [];
  		this.boundingBox = null;
  		this.boundingSphere = null;

  		// name

  		this.name = source.name;

  		// vertices

  		var vertices = source.vertices;

  		for ( i = 0, il = vertices.length; i < il; i ++ ) {

  			this.vertices.push( vertices[ i ].clone() );

  		}

  		// colors

  		var colors = source.colors;

  		for ( i = 0, il = colors.length; i < il; i ++ ) {

  			this.colors.push( colors[ i ].clone() );

  		}

  		// faces

  		var faces = source.faces;

  		for ( i = 0, il = faces.length; i < il; i ++ ) {

  			this.faces.push( faces[ i ].clone() );

  		}

  		// face vertex uvs

  		for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

  			var faceVertexUvs = source.faceVertexUvs[ i ];

  			if ( this.faceVertexUvs[ i ] === undefined ) {

  				this.faceVertexUvs[ i ] = [];

  			}

  			for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

  				var uvs = faceVertexUvs[ j ], uvsCopy = [];

  				for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

  					var uv = uvs[ k ];

  					uvsCopy.push( uv.clone() );

  				}

  				this.faceVertexUvs[ i ].push( uvsCopy );

  			}

  		}

  		// morph targets

  		var morphTargets = source.morphTargets;

  		for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

  			var morphTarget = {};
  			morphTarget.name = morphTargets[ i ].name;

  			// vertices

  			if ( morphTargets[ i ].vertices !== undefined ) {

  				morphTarget.vertices = [];

  				for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

  					morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

  				}

  			}

  			// normals

  			if ( morphTargets[ i ].normals !== undefined ) {

  				morphTarget.normals = [];

  				for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

  					morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

  				}

  			}

  			this.morphTargets.push( morphTarget );

  		}

  		// morph normals

  		var morphNormals = source.morphNormals;

  		for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

  			var morphNormal = {};

  			// vertex normals

  			if ( morphNormals[ i ].vertexNormals !== undefined ) {

  				morphNormal.vertexNormals = [];

  				for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

  					var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
  					var destVertexNormal = {};

  					destVertexNormal.a = srcVertexNormal.a.clone();
  					destVertexNormal.b = srcVertexNormal.b.clone();
  					destVertexNormal.c = srcVertexNormal.c.clone();

  					morphNormal.vertexNormals.push( destVertexNormal );

  				}

  			}

  			// face normals

  			if ( morphNormals[ i ].faceNormals !== undefined ) {

  				morphNormal.faceNormals = [];

  				for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

  					morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

  				}

  			}

  			this.morphNormals.push( morphNormal );

  		}

  		// skin weights

  		var skinWeights = source.skinWeights;

  		for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

  			this.skinWeights.push( skinWeights[ i ].clone() );

  		}

  		// skin indices

  		var skinIndices = source.skinIndices;

  		for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

  			this.skinIndices.push( skinIndices[ i ].clone() );

  		}

  		// line distances

  		var lineDistances = source.lineDistances;

  		for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

  			this.lineDistances.push( lineDistances[ i ] );

  		}

  		// bounding box

  		var boundingBox = source.boundingBox;

  		if ( boundingBox !== null ) {

  			this.boundingBox = boundingBox.clone();

  		}

  		// bounding sphere

  		var boundingSphere = source.boundingSphere;

  		if ( boundingSphere !== null ) {

  			this.boundingSphere = boundingSphere.clone();

  		}

  		// update flags

  		this.elementsNeedUpdate = source.elementsNeedUpdate;
  		this.verticesNeedUpdate = source.verticesNeedUpdate;
  		this.uvsNeedUpdate = source.uvsNeedUpdate;
  		this.normalsNeedUpdate = source.normalsNeedUpdate;
  		this.colorsNeedUpdate = source.colorsNeedUpdate;
  		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
  		this.groupsNeedUpdate = source.groupsNeedUpdate;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function BufferAttribute( array, itemSize, normalized ) {

  	if ( Array.isArray( array ) ) {

  		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

  	}

  	this.name = '';

  	this.array = array;
  	this.itemSize = itemSize;
  	this.count = array !== undefined ? array.length / itemSize : 0;
  	this.normalized = normalized === true;

  	this.dynamic = false;
  	this.updateRange = { offset: 0, count: - 1 };

  	this.version = 0;

  }

  Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

  	set: function ( value ) {

  		if ( value === true ) this.version ++;

  	}

  } );

  Object.assign( BufferAttribute.prototype, {

  	isBufferAttribute: true,

  	onUploadCallback: function () {},

  	setArray: function ( array ) {

  		if ( Array.isArray( array ) ) {

  			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

  		}

  		this.count = array !== undefined ? array.length / this.itemSize : 0;
  		this.array = array;

  		return this;

  	},

  	setDynamic: function ( value ) {

  		this.dynamic = value;

  		return this;

  	},

  	copy: function ( source ) {

  		this.name = source.name;
  		this.array = new source.array.constructor( source.array );
  		this.itemSize = source.itemSize;
  		this.count = source.count;
  		this.normalized = source.normalized;

  		this.dynamic = source.dynamic;

  		return this;

  	},

  	copyAt: function ( index1, attribute, index2 ) {

  		index1 *= this.itemSize;
  		index2 *= attribute.itemSize;

  		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	},

  	copyArray: function ( array ) {

  		this.array.set( array );

  		return this;

  	},

  	copyColorsArray: function ( colors ) {

  		var array = this.array, offset = 0;

  		for ( var i = 0, l = colors.length; i < l; i ++ ) {

  			var color = colors[ i ];

  			if ( color === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
  				color = new Color();

  			}

  			array[ offset ++ ] = color.r;
  			array[ offset ++ ] = color.g;
  			array[ offset ++ ] = color.b;

  		}

  		return this;

  	},

  	copyVector2sArray: function ( vectors ) {

  		var array = this.array, offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
  				vector = new Vector2();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;

  		}

  		return this;

  	},

  	copyVector3sArray: function ( vectors ) {

  		var array = this.array, offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
  				vector = new Vector3();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;
  			array[ offset ++ ] = vector.z;

  		}

  		return this;

  	},

  	copyVector4sArray: function ( vectors ) {

  		var array = this.array, offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
  				vector = new Vector4();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;
  			array[ offset ++ ] = vector.z;
  			array[ offset ++ ] = vector.w;

  		}

  		return this;

  	},

  	set: function ( value, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.array.set( value, offset );

  		return this;

  	},

  	getX: function ( index ) {

  		return this.array[ index * this.itemSize ];

  	},

  	setX: function ( index, x ) {

  		this.array[ index * this.itemSize ] = x;

  		return this;

  	},

  	getY: function ( index ) {

  		return this.array[ index * this.itemSize + 1 ];

  	},

  	setY: function ( index, y ) {

  		this.array[ index * this.itemSize + 1 ] = y;

  		return this;

  	},

  	getZ: function ( index ) {

  		return this.array[ index * this.itemSize + 2 ];

  	},

  	setZ: function ( index, z ) {

  		this.array[ index * this.itemSize + 2 ] = z;

  		return this;

  	},

  	getW: function ( index ) {

  		return this.array[ index * this.itemSize + 3 ];

  	},

  	setW: function ( index, w ) {

  		this.array[ index * this.itemSize + 3 ] = w;

  		return this;

  	},

  	setXY: function ( index, x, y ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;

  		return this;

  	},

  	setXYZ: function ( index, x, y, z ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;

  		return this;

  	},

  	setXYZW: function ( index, x, y, z, w ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;
  		this.array[ index + 3 ] = w;

  		return this;

  	},

  	onUpload: function ( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this.array, this.itemSize ).copy( this );

  	}

  } );

  //

  function Int8BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

  }

  Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


  function Uint8BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

  }

  Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


  function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

  }

  Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


  function Int16BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

  }

  Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


  function Uint16BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

  }

  Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


  function Int32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

  }

  Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


  function Uint32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

  }

  Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


  function Float32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

  }

  Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


  function Float64BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

  }

  Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function DirectGeometry() {

  	this.vertices = [];
  	this.normals = [];
  	this.colors = [];
  	this.uvs = [];
  	this.uvs2 = [];

  	this.groups = [];

  	this.morphTargets = {};

  	this.skinWeights = [];
  	this.skinIndices = [];

  	// this.lineDistances = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	// update flags

  	this.verticesNeedUpdate = false;
  	this.normalsNeedUpdate = false;
  	this.colorsNeedUpdate = false;
  	this.uvsNeedUpdate = false;
  	this.groupsNeedUpdate = false;

  }

  Object.assign( DirectGeometry.prototype, {

  	computeGroups: function ( geometry ) {

  		var group;
  		var groups = [];
  		var materialIndex = undefined;

  		var faces = geometry.faces;

  		for ( var i = 0; i < faces.length; i ++ ) {

  			var face = faces[ i ];

  			// materials

  			if ( face.materialIndex !== materialIndex ) {

  				materialIndex = face.materialIndex;

  				if ( group !== undefined ) {

  					group.count = ( i * 3 ) - group.start;
  					groups.push( group );

  				}

  				group = {
  					start: i * 3,
  					materialIndex: materialIndex
  				};

  			}

  		}

  		if ( group !== undefined ) {

  			group.count = ( i * 3 ) - group.start;
  			groups.push( group );

  		}

  		this.groups = groups;

  	},

  	fromGeometry: function ( geometry ) {

  		var faces = geometry.faces;
  		var vertices = geometry.vertices;
  		var faceVertexUvs = geometry.faceVertexUvs;

  		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
  		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

  		// morphs

  		var morphTargets = geometry.morphTargets;
  		var morphTargetsLength = morphTargets.length;

  		var morphTargetsPosition;

  		if ( morphTargetsLength > 0 ) {

  			morphTargetsPosition = [];

  			for ( var i = 0; i < morphTargetsLength; i ++ ) {

  				morphTargetsPosition[ i ] = {
  					name: morphTargets[ i ].name,
  				 	data: []
  				};

  			}

  			this.morphTargets.position = morphTargetsPosition;

  		}

  		var morphNormals = geometry.morphNormals;
  		var morphNormalsLength = morphNormals.length;

  		var morphTargetsNormal;

  		if ( morphNormalsLength > 0 ) {

  			morphTargetsNormal = [];

  			for ( var i = 0; i < morphNormalsLength; i ++ ) {

  				morphTargetsNormal[ i ] = {
  					name: morphNormals[ i ].name,
  				 	data: []
  				};

  			}

  			this.morphTargets.normal = morphTargetsNormal;

  		}

  		// skins

  		var skinIndices = geometry.skinIndices;
  		var skinWeights = geometry.skinWeights;

  		var hasSkinIndices = skinIndices.length === vertices.length;
  		var hasSkinWeights = skinWeights.length === vertices.length;

  		//

  		if ( vertices.length > 0 && faces.length === 0 ) {

  			console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );

  		}

  		for ( var i = 0; i < faces.length; i ++ ) {

  			var face = faces[ i ];

  			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

  			var vertexNormals = face.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

  			} else {

  				var normal = face.normal;

  				this.normals.push( normal, normal, normal );

  			}

  			var vertexColors = face.vertexColors;

  			if ( vertexColors.length === 3 ) {

  				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

  			} else {

  				var color = face.color;

  				this.colors.push( color, color, color );

  			}

  			if ( hasFaceVertexUv === true ) {

  				var vertexUvs = faceVertexUvs[ 0 ][ i ];

  				if ( vertexUvs !== undefined ) {

  					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

  				} else {

  					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

  					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

  				}

  			}

  			if ( hasFaceVertexUv2 === true ) {

  				var vertexUvs = faceVertexUvs[ 1 ][ i ];

  				if ( vertexUvs !== undefined ) {

  					this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

  				} else {

  					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

  					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

  				}

  			}

  			// morphs

  			for ( var j = 0; j < morphTargetsLength; j ++ ) {

  				var morphTarget = morphTargets[ j ].vertices;

  				morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

  			}

  			for ( var j = 0; j < morphNormalsLength; j ++ ) {

  				var morphNormal = morphNormals[ j ].vertexNormals[ i ];

  				morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );

  			}

  			// skins

  			if ( hasSkinIndices ) {

  				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

  			}

  			if ( hasSkinWeights ) {

  				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

  			}

  		}

  		this.computeGroups( geometry );

  		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
  		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
  		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
  		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
  		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function arrayMax( array ) {

  	if ( array.length === 0 ) return - Infinity;

  	var max = array[ 0 ];

  	for ( var i = 1, l = array.length; i < l; ++ i ) {

  		if ( array[ i ] > max ) max = array[ i ];

  	}

  	return max;

  }

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

  function BufferGeometry() {

  	Object.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );

  	this.uuid = _Math.generateUUID();

  	this.name = '';
  	this.type = 'BufferGeometry';

  	this.index = null;
  	this.attributes = {};

  	this.morphAttributes = {};

  	this.groups = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	this.drawRange = { start: 0, count: Infinity };

  	this.userData = {};

  }

  BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: BufferGeometry,

  	isBufferGeometry: true,

  	getIndex: function () {

  		return this.index;

  	},

  	setIndex: function ( index ) {

  		if ( Array.isArray( index ) ) {

  			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

  		} else {

  			this.index = index;

  		}

  	},

  	addAttribute: function ( name, attribute ) {

  		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

  			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

  			return this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

  		}

  		if ( name === 'index' ) {

  			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
  			this.setIndex( attribute );

  			return this;

  		}

  		this.attributes[ name ] = attribute;

  		return this;

  	},

  	getAttribute: function ( name ) {

  		return this.attributes[ name ];

  	},

  	removeAttribute: function ( name ) {

  		delete this.attributes[ name ];

  		return this;

  	},

  	addGroup: function ( start, count, materialIndex ) {

  		this.groups.push( {

  			start: start,
  			count: count,
  			materialIndex: materialIndex !== undefined ? materialIndex : 0

  		} );

  	},

  	clearGroups: function () {

  		this.groups = [];

  	},

  	setDrawRange: function ( start, count ) {

  		this.drawRange.start = start;
  		this.drawRange.count = count;

  	},

  	applyMatrix: function ( matrix ) {

  		var position = this.attributes.position;

  		if ( position !== undefined ) {

  			matrix.applyToBufferAttribute( position );
  			position.needsUpdate = true;

  		}

  		var normal = this.attributes.normal;

  		if ( normal !== undefined ) {

  			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

  			normalMatrix.applyToBufferAttribute( normal );
  			normal.needsUpdate = true;

  		}

  		var tangent = this.attributes.tangent;

  		if ( tangent !== undefined ) {

  			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

  			// Tangent is vec4, but the '.w' component is a sign value (+1/-1).
  			normalMatrix.applyToBufferAttribute( tangent );
  			tangent.needsUpdate = true;

  		}

  		if ( this.boundingBox !== null ) {

  			this.computeBoundingBox();

  		}

  		if ( this.boundingSphere !== null ) {

  			this.computeBoundingSphere();

  		}

  		return this;

  	},

  	rotateX: function () {

  		// rotate geometry around world x-axis

  		var m1 = new Matrix4();

  		return function rotateX( angle ) {

  			m1.makeRotationX( angle );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	rotateY: function () {

  		// rotate geometry around world y-axis

  		var m1 = new Matrix4();

  		return function rotateY( angle ) {

  			m1.makeRotationY( angle );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	rotateZ: function () {

  		// rotate geometry around world z-axis

  		var m1 = new Matrix4();

  		return function rotateZ( angle ) {

  			m1.makeRotationZ( angle );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	translate: function () {

  		// translate geometry

  		var m1 = new Matrix4();

  		return function translate( x, y, z ) {

  			m1.makeTranslation( x, y, z );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	scale: function () {

  		// scale geometry

  		var m1 = new Matrix4();

  		return function scale( x, y, z ) {

  			m1.makeScale( x, y, z );

  			this.applyMatrix( m1 );

  			return this;

  		};

  	}(),

  	lookAt: function () {

  		var obj = new Object3D();

  		return function lookAt( vector ) {

  			obj.lookAt( vector );

  			obj.updateMatrix();

  			this.applyMatrix( obj.matrix );

  		};

  	}(),

  	center: function () {

  		var offset = new Vector3();

  		return function center() {

  			this.computeBoundingBox();

  			this.boundingBox.getCenter( offset ).negate();

  			this.translate( offset.x, offset.y, offset.z );

  			return this;

  		};

  	}(),

  	setFromObject: function ( object ) {

  		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

  		var geometry = object.geometry;

  		if ( object.isPoints || object.isLine ) {

  			var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
  			var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

  			this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
  			this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

  			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

  				var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

  				this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

  			}

  			if ( geometry.boundingSphere !== null ) {

  				this.boundingSphere = geometry.boundingSphere.clone();

  			}

  			if ( geometry.boundingBox !== null ) {

  				this.boundingBox = geometry.boundingBox.clone();

  			}

  		} else if ( object.isMesh ) {

  			if ( geometry && geometry.isGeometry ) {

  				this.fromGeometry( geometry );

  			}

  		}

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		var position = [];

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			position.push( point.x, point.y, point.z || 0 );

  		}

  		this.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

  		return this;

  	},

  	updateFromObject: function ( object ) {

  		var geometry = object.geometry;

  		if ( object.isMesh ) {

  			var direct = geometry.__directGeometry;

  			if ( geometry.elementsNeedUpdate === true ) {

  				direct = undefined;
  				geometry.elementsNeedUpdate = false;

  			}

  			if ( direct === undefined ) {

  				return this.fromGeometry( geometry );

  			}

  			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
  			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
  			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
  			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
  			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

  			geometry.verticesNeedUpdate = false;
  			geometry.normalsNeedUpdate = false;
  			geometry.colorsNeedUpdate = false;
  			geometry.uvsNeedUpdate = false;
  			geometry.groupsNeedUpdate = false;

  			geometry = direct;

  		}

  		var attribute;

  		if ( geometry.verticesNeedUpdate === true ) {

  			attribute = this.attributes.position;

  			if ( attribute !== undefined ) {

  				attribute.copyVector3sArray( geometry.vertices );
  				attribute.needsUpdate = true;

  			}

  			geometry.verticesNeedUpdate = false;

  		}

  		if ( geometry.normalsNeedUpdate === true ) {

  			attribute = this.attributes.normal;

  			if ( attribute !== undefined ) {

  				attribute.copyVector3sArray( geometry.normals );
  				attribute.needsUpdate = true;

  			}

  			geometry.normalsNeedUpdate = false;

  		}

  		if ( geometry.colorsNeedUpdate === true ) {

  			attribute = this.attributes.color;

  			if ( attribute !== undefined ) {

  				attribute.copyColorsArray( geometry.colors );
  				attribute.needsUpdate = true;

  			}

  			geometry.colorsNeedUpdate = false;

  		}

  		if ( geometry.uvsNeedUpdate ) {

  			attribute = this.attributes.uv;

  			if ( attribute !== undefined ) {

  				attribute.copyVector2sArray( geometry.uvs );
  				attribute.needsUpdate = true;

  			}

  			geometry.uvsNeedUpdate = false;

  		}

  		if ( geometry.lineDistancesNeedUpdate ) {

  			attribute = this.attributes.lineDistance;

  			if ( attribute !== undefined ) {

  				attribute.copyArray( geometry.lineDistances );
  				attribute.needsUpdate = true;

  			}

  			geometry.lineDistancesNeedUpdate = false;

  		}

  		if ( geometry.groupsNeedUpdate ) {

  			geometry.computeGroups( object.geometry );
  			this.groups = geometry.groups;

  			geometry.groupsNeedUpdate = false;

  		}

  		return this;

  	},

  	fromGeometry: function ( geometry ) {

  		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

  		return this.fromDirectGeometry( geometry.__directGeometry );

  	},

  	fromDirectGeometry: function ( geometry ) {

  		var positions = new Float32Array( geometry.vertices.length * 3 );
  		this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

  		if ( geometry.normals.length > 0 ) {

  			var normals = new Float32Array( geometry.normals.length * 3 );
  			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

  		}

  		if ( geometry.colors.length > 0 ) {

  			var colors = new Float32Array( geometry.colors.length * 3 );
  			this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

  		}

  		if ( geometry.uvs.length > 0 ) {

  			var uvs = new Float32Array( geometry.uvs.length * 2 );
  			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

  		}

  		if ( geometry.uvs2.length > 0 ) {

  			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
  			this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

  		}

  		// groups

  		this.groups = geometry.groups;

  		// morphs

  		for ( var name in geometry.morphTargets ) {

  			var array = [];
  			var morphTargets = geometry.morphTargets[ name ];

  			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

  				var morphTarget = morphTargets[ i ];

  				var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
  				attribute.name = morphTarget.name;

  				array.push( attribute.copyVector3sArray( morphTarget.data ) );

  			}

  			this.morphAttributes[ name ] = array;

  		}

  		// skinning

  		if ( geometry.skinIndices.length > 0 ) {

  			var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
  			this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

  		}

  		if ( geometry.skinWeights.length > 0 ) {

  			var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
  			this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

  		}

  		//

  		if ( geometry.boundingSphere !== null ) {

  			this.boundingSphere = geometry.boundingSphere.clone();

  		}

  		if ( geometry.boundingBox !== null ) {

  			this.boundingBox = geometry.boundingBox.clone();

  		}

  		return this;

  	},

  	computeBoundingBox: function () {

  		var box = new Box3();

  		return function computeBoundingBox() {

  			if ( this.boundingBox === null ) {

  				this.boundingBox = new Box3();

  			}

  			var position = this.attributes.position;
  			var morphAttributesPosition = this.morphAttributes.position;

  			if ( position !== undefined ) {

  				this.boundingBox.setFromBufferAttribute( position );

  				// process morph attributes if present

  				if ( morphAttributesPosition ) {

  					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  						var morphAttribute = morphAttributesPosition[ i ];
  						box.setFromBufferAttribute( morphAttribute );

  						this.boundingBox.expandByPoint( box.min );
  						this.boundingBox.expandByPoint( box.max );

  					}

  				}

  			} else {

  				this.boundingBox.makeEmpty();

  			}

  			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

  				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

  			}

  		};

  	}(),

  	computeBoundingSphere: function () {

  		var box = new Box3();
  		var boxMorphTargets = new Box3();
  		var vector = new Vector3();

  		return function computeBoundingSphere() {

  			if ( this.boundingSphere === null ) {

  				this.boundingSphere = new Sphere();

  			}

  			var position = this.attributes.position;
  			var morphAttributesPosition = this.morphAttributes.position;

  			if ( position ) {

  				// first, find the center of the bounding sphere

  				var center = this.boundingSphere.center;

  				box.setFromBufferAttribute( position );

  				// process morph attributes if present

  				if ( morphAttributesPosition ) {

  					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  						var morphAttribute = morphAttributesPosition[ i ];
  						boxMorphTargets.setFromBufferAttribute( morphAttribute );

  						box.expandByPoint( boxMorphTargets.min );
  						box.expandByPoint( boxMorphTargets.max );

  					}

  				}

  				box.getCenter( center );

  				// second, try to find a boundingSphere with a radius smaller than the
  				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

  				var maxRadiusSq = 0;

  				for ( var i = 0, il = position.count; i < il; i ++ ) {

  					vector.fromBufferAttribute( position, i );

  					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

  				}

  				// process morph attributes if present

  				if ( morphAttributesPosition ) {

  					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  						var morphAttribute = morphAttributesPosition[ i ];

  						for ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

  							vector.fromBufferAttribute( morphAttribute, j );

  							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

  						}

  					}

  				}

  				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

  				if ( isNaN( this.boundingSphere.radius ) ) {

  					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

  				}

  			}

  		};

  	}(),

  	computeFaceNormals: function () {

  		// backwards compatibility

  	},

  	computeVertexNormals: function () {

  		var index = this.index;
  		var attributes = this.attributes;

  		if ( attributes.position ) {

  			var positions = attributes.position.array;

  			if ( attributes.normal === undefined ) {

  				this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

  			} else {

  				// reset existing normals to zero

  				var array = attributes.normal.array;

  				for ( var i = 0, il = array.length; i < il; i ++ ) {

  					array[ i ] = 0;

  				}

  			}

  			var normals = attributes.normal.array;

  			var vA, vB, vC;
  			var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
  			var cb = new Vector3(), ab = new Vector3();

  			// indexed elements

  			if ( index ) {

  				var indices = index.array;

  				for ( var i = 0, il = index.count; i < il; i += 3 ) {

  					vA = indices[ i + 0 ] * 3;
  					vB = indices[ i + 1 ] * 3;
  					vC = indices[ i + 2 ] * 3;

  					pA.fromArray( positions, vA );
  					pB.fromArray( positions, vB );
  					pC.fromArray( positions, vC );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					normals[ vA ] += cb.x;
  					normals[ vA + 1 ] += cb.y;
  					normals[ vA + 2 ] += cb.z;

  					normals[ vB ] += cb.x;
  					normals[ vB + 1 ] += cb.y;
  					normals[ vB + 2 ] += cb.z;

  					normals[ vC ] += cb.x;
  					normals[ vC + 1 ] += cb.y;
  					normals[ vC + 2 ] += cb.z;

  				}

  			} else {

  				// non-indexed elements (unconnected triangle soup)

  				for ( var i = 0, il = positions.length; i < il; i += 9 ) {

  					pA.fromArray( positions, i );
  					pB.fromArray( positions, i + 3 );
  					pC.fromArray( positions, i + 6 );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					normals[ i ] = cb.x;
  					normals[ i + 1 ] = cb.y;
  					normals[ i + 2 ] = cb.z;

  					normals[ i + 3 ] = cb.x;
  					normals[ i + 4 ] = cb.y;
  					normals[ i + 5 ] = cb.z;

  					normals[ i + 6 ] = cb.x;
  					normals[ i + 7 ] = cb.y;
  					normals[ i + 8 ] = cb.z;

  				}

  			}

  			this.normalizeNormals();

  			attributes.normal.needsUpdate = true;

  		}

  	},

  	merge: function ( geometry, offset ) {

  		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

  			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
  			return;

  		}

  		if ( offset === undefined ) {

  			offset = 0;

  			console.warn(
  				'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
  				+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
  			);

  		}

  		var attributes = this.attributes;

  		for ( var key in attributes ) {

  			if ( geometry.attributes[ key ] === undefined ) continue;

  			var attribute1 = attributes[ key ];
  			var attributeArray1 = attribute1.array;

  			var attribute2 = geometry.attributes[ key ];
  			var attributeArray2 = attribute2.array;

  			var attributeOffset = attribute2.itemSize * offset;
  			var length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );

  			for ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {

  				attributeArray1[ j ] = attributeArray2[ i ];

  			}

  		}

  		return this;

  	},

  	normalizeNormals: function () {

  		var vector = new Vector3();

  		return function normalizeNormals() {

  			var normals = this.attributes.normal;

  			for ( var i = 0, il = normals.count; i < il; i ++ ) {

  				vector.x = normals.getX( i );
  				vector.y = normals.getY( i );
  				vector.z = normals.getZ( i );

  				vector.normalize();

  				normals.setXYZ( i, vector.x, vector.y, vector.z );

  			}

  		};

  	}(),

  	toNonIndexed: function () {

  		function convertBufferAttribute( attribute, indices ) {

  			var array = attribute.array;
  			var itemSize = attribute.itemSize;

  			var array2 = new array.constructor( indices.length * itemSize );

  			var index = 0, index2 = 0;

  			for ( var i = 0, l = indices.length; i < l; i ++ ) {

  				index = indices[ i ] * itemSize;

  				for ( var j = 0; j < itemSize; j ++ ) {

  					array2[ index2 ++ ] = array[ index ++ ];

  				}

  			}

  			return new BufferAttribute( array2, itemSize );

  		}

  		//

  		if ( this.index === null ) {

  			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
  			return this;

  		}

  		var geometry2 = new BufferGeometry();

  		var indices = this.index.array;
  		var attributes = this.attributes;

  		// attributes

  		for ( var name in attributes ) {

  			var attribute = attributes[ name ];

  			var newAttribute = convertBufferAttribute( attribute, indices );

  			geometry2.addAttribute( name, newAttribute );

  		}

  		// morph attributes

  		var morphAttributes = this.morphAttributes;

  		for ( name in morphAttributes ) {

  			var morphArray = [];
  			var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

  			for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {

  				var attribute = morphAttribute[ i ];

  				var newAttribute = convertBufferAttribute( attribute, indices );

  				morphArray.push( newAttribute );

  			}

  			geometry2.morphAttributes[ name ] = morphArray;

  		}

  		// groups

  		var groups = this.groups;

  		for ( var i = 0, l = groups.length; i < l; i ++ ) {

  			var group = groups[ i ];
  			geometry2.addGroup( group.start, group.count, group.materialIndex );

  		}

  		return geometry2;

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'BufferGeometry',
  				generator: 'BufferGeometry.toJSON'
  			}
  		};

  		// standard BufferGeometry serialization

  		data.uuid = this.uuid;
  		data.type = this.type;
  		if ( this.name !== '' ) data.name = this.name;
  		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

  		if ( this.parameters !== undefined ) {

  			var parameters = this.parameters;

  			for ( var key in parameters ) {

  				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

  			}

  			return data;

  		}

  		data.data = { attributes: {} };

  		var index = this.index;

  		if ( index !== null ) {

  			data.data.index = {
  				type: index.array.constructor.name,
  				array: Array.prototype.slice.call( index.array )
  			};

  		}

  		var attributes = this.attributes;

  		for ( var key in attributes ) {

  			var attribute = attributes[ key ];

  			var attributeData = {
  				itemSize: attribute.itemSize,
  				type: attribute.array.constructor.name,
  				array: Array.prototype.slice.call( attribute.array ),
  				normalized: attribute.normalized
  			};

  			if ( attribute.name !== '' ) attributeData.name = attribute.name;

  			data.data.attributes[ key ] = attributeData;

  		}

  		var morphAttributes = {};
  		var hasMorphAttributes = false;

  		for ( var key in this.morphAttributes ) {

  			var attributeArray = this.morphAttributes[ key ];

  			var array = [];

  			for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

  				var attribute = attributeArray[ i ];

  				var attributeData = {
  					itemSize: attribute.itemSize,
  					type: attribute.array.constructor.name,
  					array: Array.prototype.slice.call( attribute.array ),
  					normalized: attribute.normalized
  				};

  				if ( attribute.name !== '' ) attributeData.name = attribute.name;

  				array.push( attributeData );

  			}

  			if ( array.length > 0 ) {

  				morphAttributes[ key ] = array;

  				hasMorphAttributes = true;

  			}

  		}

  		if ( hasMorphAttributes ) data.data.morphAttributes = morphAttributes;

  		var groups = this.groups;

  		if ( groups.length > 0 ) {

  			data.data.groups = JSON.parse( JSON.stringify( groups ) );

  		}

  		var boundingSphere = this.boundingSphere;

  		if ( boundingSphere !== null ) {

  			data.data.boundingSphere = {
  				center: boundingSphere.center.toArray(),
  				radius: boundingSphere.radius
  			};

  		}

  		return data;

  	},

  	clone: function () {

  		/*
  		 // Handle primitives

  		 var parameters = this.parameters;

  		 if ( parameters !== undefined ) {

  		 var values = [];

  		 for ( var key in parameters ) {

  		 values.push( parameters[ key ] );

  		 }

  		 var geometry = Object.create( this.constructor.prototype );
  		 this.constructor.apply( geometry, values );
  		 return geometry;

  		 }

  		 return new this.constructor().copy( this );
  		 */

  		return new BufferGeometry().copy( this );

  	},

  	copy: function ( source ) {

  		var name, i, l;

  		// reset

  		this.index = null;
  		this.attributes = {};
  		this.morphAttributes = {};
  		this.groups = [];
  		this.boundingBox = null;
  		this.boundingSphere = null;

  		// name

  		this.name = source.name;

  		// index

  		var index = source.index;

  		if ( index !== null ) {

  			this.setIndex( index.clone() );

  		}

  		// attributes

  		var attributes = source.attributes;

  		for ( name in attributes ) {

  			var attribute = attributes[ name ];
  			this.addAttribute( name, attribute.clone() );

  		}

  		// morph attributes

  		var morphAttributes = source.morphAttributes;

  		for ( name in morphAttributes ) {

  			var array = [];
  			var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

  			for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

  				array.push( morphAttribute[ i ].clone() );

  			}

  			this.morphAttributes[ name ] = array;

  		}

  		// groups

  		var groups = source.groups;

  		for ( i = 0, l = groups.length; i < l; i ++ ) {

  			var group = groups[ i ];
  			this.addGroup( group.start, group.count, group.materialIndex );

  		}

  		// bounding box

  		var boundingBox = source.boundingBox;

  		if ( boundingBox !== null ) {

  			this.boundingBox = boundingBox.clone();

  		}

  		// bounding sphere

  		var boundingSphere = source.boundingSphere;

  		if ( boundingSphere !== null ) {

  			this.boundingSphere = boundingSphere.clone();

  		}

  		// draw range

  		this.drawRange.start = source.drawRange.start;
  		this.drawRange.count = source.drawRange.count;

  		// user data

  		this.userData = source.userData;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // BoxGeometry

  function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

  	Geometry.call( this );

  	this.type = 'BoxGeometry';

  	this.parameters = {
  		width: width,
  		height: height,
  		depth: depth,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments,
  		depthSegments: depthSegments
  	};

  	this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
  	this.mergeVertices();

  }

  BoxGeometry.prototype = Object.create( Geometry.prototype );
  BoxGeometry.prototype.constructor = BoxGeometry;

  // BoxBufferGeometry

  function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

  	BufferGeometry.call( this );

  	this.type = 'BoxBufferGeometry';

  	this.parameters = {
  		width: width,
  		height: height,
  		depth: depth,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments,
  		depthSegments: depthSegments
  	};

  	var scope = this;

  	width = width || 1;
  	height = height || 1;
  	depth = depth || 1;

  	// segments

  	widthSegments = Math.floor( widthSegments ) || 1;
  	heightSegments = Math.floor( heightSegments ) || 1;
  	depthSegments = Math.floor( depthSegments ) || 1;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var numberOfVertices = 0;
  	var groupStart = 0;

  	// build each side of the box geometry

  	buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
  	buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
  	buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
  	buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
  	buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
  	buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

  		var segmentWidth = width / gridX;
  		var segmentHeight = height / gridY;

  		var widthHalf = width / 2;
  		var heightHalf = height / 2;
  		var depthHalf = depth / 2;

  		var gridX1 = gridX + 1;
  		var gridY1 = gridY + 1;

  		var vertexCounter = 0;
  		var groupCount = 0;

  		var ix, iy;

  		var vector = new Vector3();

  		// generate vertices, normals and uvs

  		for ( iy = 0; iy < gridY1; iy ++ ) {

  			var y = iy * segmentHeight - heightHalf;

  			for ( ix = 0; ix < gridX1; ix ++ ) {

  				var x = ix * segmentWidth - widthHalf;

  				// set values to correct vector component

  				vector[ u ] = x * udir;
  				vector[ v ] = y * vdir;
  				vector[ w ] = depthHalf;

  				// now apply vector to vertex buffer

  				vertices.push( vector.x, vector.y, vector.z );

  				// set values to correct vector component

  				vector[ u ] = 0;
  				vector[ v ] = 0;
  				vector[ w ] = depth > 0 ? 1 : - 1;

  				// now apply vector to normal buffer

  				normals.push( vector.x, vector.y, vector.z );

  				// uvs

  				uvs.push( ix / gridX );
  				uvs.push( 1 - ( iy / gridY ) );

  				// counters

  				vertexCounter += 1;

  			}

  		}

  		// indices

  		// 1. you need three indices to draw a single face
  		// 2. a single segment consists of two faces
  		// 3. so we need to generate six (2*3) indices per segment

  		for ( iy = 0; iy < gridY; iy ++ ) {

  			for ( ix = 0; ix < gridX; ix ++ ) {

  				var a = numberOfVertices + ix + gridX1 * iy;
  				var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
  				var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
  				var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

  				// faces

  				indices.push( a, b, d );
  				indices.push( b, c, d );

  				// increase counter

  				groupCount += 6;

  			}

  		}

  		// add a group to the geometry. this will ensure multi material support

  		scope.addGroup( groupStart, groupCount, materialIndex );

  		// calculate new start value for groups

  		groupStart += groupCount;

  		// update total number of vertices

  		numberOfVertices += vertexCounter;

  	}

  }

  BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // PlaneGeometry

  function PlaneGeometry( width, height, widthSegments, heightSegments ) {

  	Geometry.call( this );

  	this.type = 'PlaneGeometry';

  	this.parameters = {
  		width: width,
  		height: height,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments
  	};

  	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
  	this.mergeVertices();

  }

  PlaneGeometry.prototype = Object.create( Geometry.prototype );
  PlaneGeometry.prototype.constructor = PlaneGeometry;

  // PlaneBufferGeometry

  function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

  	BufferGeometry.call( this );

  	this.type = 'PlaneBufferGeometry';

  	this.parameters = {
  		width: width,
  		height: height,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments
  	};

  	width = width || 1;
  	height = height || 1;

  	var width_half = width / 2;
  	var height_half = height / 2;

  	var gridX = Math.floor( widthSegments ) || 1;
  	var gridY = Math.floor( heightSegments ) || 1;

  	var gridX1 = gridX + 1;
  	var gridY1 = gridY + 1;

  	var segment_width = width / gridX;
  	var segment_height = height / gridY;

  	var ix, iy;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// generate vertices, normals and uvs

  	for ( iy = 0; iy < gridY1; iy ++ ) {

  		var y = iy * segment_height - height_half;

  		for ( ix = 0; ix < gridX1; ix ++ ) {

  			var x = ix * segment_width - width_half;

  			vertices.push( x, - y, 0 );

  			normals.push( 0, 0, 1 );

  			uvs.push( ix / gridX );
  			uvs.push( 1 - ( iy / gridY ) );

  		}

  	}

  	// indices

  	for ( iy = 0; iy < gridY; iy ++ ) {

  		for ( ix = 0; ix < gridX; ix ++ ) {

  			var a = ix + gridX1 * iy;
  			var b = ix + gridX1 * ( iy + 1 );
  			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
  			var d = ( ix + 1 ) + gridX1 * iy;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  var materialId = 0;

  function Material() {

  	Object.defineProperty( this, 'id', { value: materialId ++ } );

  	this.uuid = _Math.generateUUID();

  	this.name = '';
  	this.type = 'Material';

  	this.fog = true;
  	this.lights = true;

  	this.blending = NormalBlending;
  	this.side = FrontSide;
  	this.flatShading = false;
  	this.vertexTangents = false;
  	this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

  	this.opacity = 1;
  	this.transparent = false;

  	this.blendSrc = SrcAlphaFactor;
  	this.blendDst = OneMinusSrcAlphaFactor;
  	this.blendEquation = AddEquation;
  	this.blendSrcAlpha = null;
  	this.blendDstAlpha = null;
  	this.blendEquationAlpha = null;

  	this.depthFunc = LessEqualDepth;
  	this.depthTest = true;
  	this.depthWrite = true;

  	this.clippingPlanes = null;
  	this.clipIntersection = false;
  	this.clipShadows = false;

  	this.shadowSide = null;

  	this.colorWrite = true;

  	this.precision = null; // override the renderer's default precision for this material

  	this.polygonOffset = false;
  	this.polygonOffsetFactor = 0;
  	this.polygonOffsetUnits = 0;

  	this.dithering = false;

  	this.alphaTest = 0;
  	this.premultipliedAlpha = false;

  	this.visible = true;

  	this.userData = {};

  	this.needsUpdate = true;

  }

  Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Material,

  	isMaterial: true,

  	onBeforeCompile: function () {},

  	setValues: function ( values ) {

  		if ( values === undefined ) return;

  		for ( var key in values ) {

  			var newValue = values[ key ];

  			if ( newValue === undefined ) {

  				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
  				continue;

  			}

  			// for backward compatability if shading is set in the constructor
  			if ( key === 'shading' ) {

  				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
  				this.flatShading = ( newValue === FlatShading ) ? true : false;
  				continue;

  			}

  			var currentValue = this[ key ];

  			if ( currentValue === undefined ) {

  				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
  				continue;

  			}

  			if ( currentValue && currentValue.isColor ) {

  				currentValue.set( newValue );

  			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

  				currentValue.copy( newValue );

  			} else {

  				this[ key ] = newValue;

  			}

  		}

  	},

  	toJSON: function ( meta ) {

  		var isRoot = ( meta === undefined || typeof meta === 'string' );

  		if ( isRoot ) {

  			meta = {
  				textures: {},
  				images: {}
  			};

  		}

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Material',
  				generator: 'Material.toJSON'
  			}
  		};

  		// standard Material serialization
  		data.uuid = this.uuid;
  		data.type = this.type;

  		if ( this.name !== '' ) data.name = this.name;

  		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

  		if ( this.roughness !== undefined ) data.roughness = this.roughness;
  		if ( this.metalness !== undefined ) data.metalness = this.metalness;

  		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
  		if ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

  		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
  		if ( this.shininess !== undefined ) data.shininess = this.shininess;
  		if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
  		if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;

  		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
  		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
  		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
  		if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;

  		if ( this.aoMap && this.aoMap.isTexture ) {

  			data.aoMap = this.aoMap.toJSON( meta ).uuid;
  			data.aoMapIntensity = this.aoMapIntensity;

  		}

  		if ( this.bumpMap && this.bumpMap.isTexture ) {

  			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
  			data.bumpScale = this.bumpScale;

  		}

  		if ( this.normalMap && this.normalMap.isTexture ) {

  			data.normalMap = this.normalMap.toJSON( meta ).uuid;
  			data.normalMapType = this.normalMapType;
  			data.normalScale = this.normalScale.toArray();

  		}

  		if ( this.displacementMap && this.displacementMap.isTexture ) {

  			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
  			data.displacementScale = this.displacementScale;
  			data.displacementBias = this.displacementBias;

  		}

  		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
  		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

  		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
  		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

  		if ( this.envMap && this.envMap.isTexture ) {

  			data.envMap = this.envMap.toJSON( meta ).uuid;
  			data.reflectivity = this.reflectivity; // Scale behind envMap

  			if ( this.combine !== undefined ) data.combine = this.combine;
  			if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;

  		}

  		if ( this.gradientMap && this.gradientMap.isTexture ) {

  			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

  		}

  		if ( this.size !== undefined ) data.size = this.size;
  		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

  		if ( this.blending !== NormalBlending ) data.blending = this.blending;
  		if ( this.flatShading === true ) data.flatShading = this.flatShading;
  		if ( this.side !== FrontSide ) data.side = this.side;
  		if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

  		if ( this.opacity < 1 ) data.opacity = this.opacity;
  		if ( this.transparent === true ) data.transparent = this.transparent;

  		data.depthFunc = this.depthFunc;
  		data.depthTest = this.depthTest;
  		data.depthWrite = this.depthWrite;

  		// rotation (SpriteMaterial)
  		if ( this.rotation !== 0 ) data.rotation = this.rotation;

  		if ( this.polygonOffset === true ) data.polygonOffset = true;
  		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
  		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

  		if ( this.linewidth !== 1 ) data.linewidth = this.linewidth;
  		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
  		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
  		if ( this.scale !== undefined ) data.scale = this.scale;

  		if ( this.dithering === true ) data.dithering = true;

  		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
  		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

  		if ( this.wireframe === true ) data.wireframe = this.wireframe;
  		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
  		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
  		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

  		if ( this.morphTargets === true ) data.morphTargets = true;
  		if ( this.skinning === true ) data.skinning = true;

  		if ( this.visible === false ) data.visible = false;
  		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

  		// TODO: Copied from Object3D.toJSON

  		function extractFromCache( cache ) {

  			var values = [];

  			for ( var key in cache ) {

  				var data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  		if ( isRoot ) {

  			var textures = extractFromCache( meta.textures );
  			var images = extractFromCache( meta.images );

  			if ( textures.length > 0 ) data.textures = textures;
  			if ( images.length > 0 ) data.images = images;

  		}

  		return data;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.name = source.name;

  		this.fog = source.fog;
  		this.lights = source.lights;

  		this.blending = source.blending;
  		this.side = source.side;
  		this.flatShading = source.flatShading;
  		this.vertexColors = source.vertexColors;

  		this.opacity = source.opacity;
  		this.transparent = source.transparent;

  		this.blendSrc = source.blendSrc;
  		this.blendDst = source.blendDst;
  		this.blendEquation = source.blendEquation;
  		this.blendSrcAlpha = source.blendSrcAlpha;
  		this.blendDstAlpha = source.blendDstAlpha;
  		this.blendEquationAlpha = source.blendEquationAlpha;

  		this.depthFunc = source.depthFunc;
  		this.depthTest = source.depthTest;
  		this.depthWrite = source.depthWrite;

  		this.colorWrite = source.colorWrite;

  		this.precision = source.precision;

  		this.polygonOffset = source.polygonOffset;
  		this.polygonOffsetFactor = source.polygonOffsetFactor;
  		this.polygonOffsetUnits = source.polygonOffsetUnits;

  		this.dithering = source.dithering;

  		this.alphaTest = source.alphaTest;
  		this.premultipliedAlpha = source.premultipliedAlpha;

  		this.visible = source.visible;
  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		this.clipShadows = source.clipShadows;
  		this.clipIntersection = source.clipIntersection;

  		var srcPlanes = source.clippingPlanes,
  			dstPlanes = null;

  		if ( srcPlanes !== null ) {

  			var n = srcPlanes.length;
  			dstPlanes = new Array( n );

  			for ( var i = 0; i !== n; ++ i )
  				dstPlanes[ i ] = srcPlanes[ i ].clone();

  		}

  		this.clippingPlanes = dstPlanes;

  		this.shadowSide = source.shadowSide;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

  var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  defines: { "label" : "value" },
   *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
   *
   *  fragmentShader: <string>,
   *  vertexShader: <string>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  lights: <bool>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function ShaderMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'ShaderMaterial';

  	this.defines = {};
  	this.uniforms = {};

  	this.vertexShader = default_vertex;
  	this.fragmentShader = default_fragment;

  	this.linewidth = 1;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false; // set to use scene fog
  	this.lights = false; // set to use scene lights
  	this.clipping = false; // set to use user-defined clipping planes

  	this.skinning = false; // set to use skinning attribute streams
  	this.morphTargets = false; // set to use morph targets
  	this.morphNormals = false; // set to use morph normals

  	this.extensions = {
  		derivatives: false, // set to use derivatives
  		fragDepth: false, // set to use fragment depth values
  		drawBuffers: false, // set to use draw buffers
  		shaderTextureLOD: false // set to use shader texture LOD
  	};

  	// When rendered geometry doesn't include these attributes but the material does,
  	// use these default values in WebGL. This avoids errors when buffer data is missing.
  	this.defaultAttributeValues = {
  		'color': [ 1, 1, 1 ],
  		'uv': [ 0, 0 ],
  		'uv2': [ 0, 0 ]
  	};

  	this.index0AttributeName = undefined;
  	this.uniformsNeedUpdate = false;

  	if ( parameters !== undefined ) {

  		if ( parameters.attributes !== undefined ) {

  			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

  		}

  		this.setValues( parameters );

  	}

  }

  ShaderMaterial.prototype = Object.create( Material.prototype );
  ShaderMaterial.prototype.constructor = ShaderMaterial;

  ShaderMaterial.prototype.isShaderMaterial = true;

  ShaderMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.fragmentShader = source.fragmentShader;
  	this.vertexShader = source.vertexShader;

  	this.uniforms = cloneUniforms( source.uniforms );

  	this.defines = Object.assign( {}, source.defines );

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	this.lights = source.lights;
  	this.clipping = source.clipping;

  	this.skinning = source.skinning;

  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	this.extensions = source.extensions;

  	return this;

  };

  ShaderMaterial.prototype.toJSON = function ( meta ) {

  	var data = Material.prototype.toJSON.call( this, meta );

  	data.uniforms = {};

  	for ( var name in this.uniforms ) {

  		var uniform = this.uniforms[ name ];
  		var value = uniform.value;

  		if ( value && value.isTexture ) {

  			data.uniforms[ name ] = {
  				type: 't',
  				value: value.toJSON( meta ).uuid
  			};

  		} else if ( value && value.isColor ) {

  			data.uniforms[ name ] = {
  				type: 'c',
  				value: value.getHex()
  			};

  		} else if ( value && value.isVector2 ) {

  			data.uniforms[ name ] = {
  				type: 'v2',
  				value: value.toArray()
  			};

  		} else if ( value && value.isVector3 ) {

  			data.uniforms[ name ] = {
  				type: 'v3',
  				value: value.toArray()
  			};

  		} else if ( value && value.isVector4 ) {

  			data.uniforms[ name ] = {
  				type: 'v4',
  				value: value.toArray()
  			};

  		} else if ( value && value.isMatrix3 ) {

  			data.uniforms[ name ] = {
  				type: 'm3',
  				value: value.toArray()
  			};

  		} else if ( value && value.isMatrix4 ) {

  			data.uniforms[ name ] = {
  				type: 'm4',
  				value: value.toArray()
  			};

  		} else {

  			data.uniforms[ name ] = {
  				value: value
  			};

  			// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

  		}

  	}

  	if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

  	data.vertexShader = this.vertexShader;
  	data.fragmentShader = this.fragmentShader;

  	var extensions = {};

  	for ( var key in this.extensions ) {

  		if ( this.extensions[ key ] === true ) extensions[ key ] = true;

  	}

  	if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

  	return data;

  };

  /**
   * @author bhouston / http://clara.io
   */

  function Ray( origin, direction ) {

  	this.origin = ( origin !== undefined ) ? origin : new Vector3();
  	this.direction = ( direction !== undefined ) ? direction : new Vector3();

  }

  Object.assign( Ray.prototype, {

  	set: function ( origin, direction ) {

  		this.origin.copy( origin );
  		this.direction.copy( direction );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( ray ) {

  		this.origin.copy( ray.origin );
  		this.direction.copy( ray.direction );

  		return this;

  	},

  	at: function ( t, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Ray: .at() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

  	},

  	lookAt: function ( v ) {

  		this.direction.copy( v ).sub( this.origin ).normalize();

  		return this;

  	},

  	recast: function () {

  		var v1 = new Vector3();

  		return function recast( t ) {

  			this.origin.copy( this.at( t, v1 ) );

  			return this;

  		};

  	}(),

  	closestPointToPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
  			target = new Vector3();

  		}

  		target.subVectors( point, this.origin );

  		var directionDistance = target.dot( this.direction );

  		if ( directionDistance < 0 ) {

  			return target.copy( this.origin );

  		}

  		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

  	},

  	distanceToPoint: function ( point ) {

  		return Math.sqrt( this.distanceSqToPoint( point ) );

  	},

  	distanceSqToPoint: function () {

  		var v1 = new Vector3();

  		return function distanceSqToPoint( point ) {

  			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

  			// point behind the ray

  			if ( directionDistance < 0 ) {

  				return this.origin.distanceToSquared( point );

  			}

  			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

  			return v1.distanceToSquared( point );

  		};

  	}(),

  	distanceSqToSegment: function () {

  		var segCenter = new Vector3();
  		var segDir = new Vector3();
  		var diff = new Vector3();

  		return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

  			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
  			// It returns the min distance between the ray and the segment
  			// defined by v0 and v1
  			// It can also set two optional targets :
  			// - The closest point on the ray
  			// - The closest point on the segment

  			segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
  			segDir.copy( v1 ).sub( v0 ).normalize();
  			diff.copy( this.origin ).sub( segCenter );

  			var segExtent = v0.distanceTo( v1 ) * 0.5;
  			var a01 = - this.direction.dot( segDir );
  			var b0 = diff.dot( this.direction );
  			var b1 = - diff.dot( segDir );
  			var c = diff.lengthSq();
  			var det = Math.abs( 1 - a01 * a01 );
  			var s0, s1, sqrDist, extDet;

  			if ( det > 0 ) {

  				// The ray and segment are not parallel.

  				s0 = a01 * b1 - b0;
  				s1 = a01 * b0 - b1;
  				extDet = segExtent * det;

  				if ( s0 >= 0 ) {

  					if ( s1 >= - extDet ) {

  						if ( s1 <= extDet ) {

  							// region 0
  							// Minimum at interior points of ray and segment.

  							var invDet = 1 / det;
  							s0 *= invDet;
  							s1 *= invDet;
  							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

  						} else {

  							// region 1

  							s1 = segExtent;
  							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  						}

  					} else {

  						// region 5

  						s1 = - segExtent;
  						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  					}

  				} else {

  					if ( s1 <= - extDet ) {

  						// region 4

  						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
  						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  					} else if ( s1 <= extDet ) {

  						// region 3

  						s0 = 0;
  						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
  						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

  					} else {

  						// region 2

  						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
  						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  					}

  				}

  			} else {

  				// Ray and segment are parallel.

  				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
  				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  			}

  			if ( optionalPointOnRay ) {

  				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

  			}

  			if ( optionalPointOnSegment ) {

  				optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

  			}

  			return sqrDist;

  		};

  	}(),

  	intersectSphere: function () {

  		var v1 = new Vector3();

  		return function intersectSphere( sphere, target ) {

  			v1.subVectors( sphere.center, this.origin );
  			var tca = v1.dot( this.direction );
  			var d2 = v1.dot( v1 ) - tca * tca;
  			var radius2 = sphere.radius * sphere.radius;

  			if ( d2 > radius2 ) return null;

  			var thc = Math.sqrt( radius2 - d2 );

  			// t0 = first intersect point - entrance on front of sphere
  			var t0 = tca - thc;

  			// t1 = second intersect point - exit point on back of sphere
  			var t1 = tca + thc;

  			// test to see if both t0 and t1 are behind the ray - if so, return null
  			if ( t0 < 0 && t1 < 0 ) return null;

  			// test to see if t0 is behind the ray:
  			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
  			// in order to always return an intersect point that is in front of the ray.
  			if ( t0 < 0 ) return this.at( t1, target );

  			// else t0 is in front of the ray, so return the first collision point scaled by t0
  			return this.at( t0, target );

  		};

  	}(),

  	intersectsSphere: function ( sphere ) {

  		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

  	},

  	distanceToPlane: function ( plane ) {

  		var denominator = plane.normal.dot( this.direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( plane.distanceToPoint( this.origin ) === 0 ) {

  				return 0;

  			}

  			// Null is preferable to undefined since undefined means.... it is undefined

  			return null;

  		}

  		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

  		// Return if the ray never intersects the plane

  		return t >= 0 ? t : null;

  	},

  	intersectPlane: function ( plane, target ) {

  		var t = this.distanceToPlane( plane );

  		if ( t === null ) {

  			return null;

  		}

  		return this.at( t, target );

  	},

  	intersectsPlane: function ( plane ) {

  		// check if the ray lies on the plane first

  		var distToPoint = plane.distanceToPoint( this.origin );

  		if ( distToPoint === 0 ) {

  			return true;

  		}

  		var denominator = plane.normal.dot( this.direction );

  		if ( denominator * distToPoint < 0 ) {

  			return true;

  		}

  		// ray origin is behind the plane (and is pointing behind it)

  		return false;

  	},

  	intersectBox: function ( box, target ) {

  		var tmin, tmax, tymin, tymax, tzmin, tzmax;

  		var invdirx = 1 / this.direction.x,
  			invdiry = 1 / this.direction.y,
  			invdirz = 1 / this.direction.z;

  		var origin = this.origin;

  		if ( invdirx >= 0 ) {

  			tmin = ( box.min.x - origin.x ) * invdirx;
  			tmax = ( box.max.x - origin.x ) * invdirx;

  		} else {

  			tmin = ( box.max.x - origin.x ) * invdirx;
  			tmax = ( box.min.x - origin.x ) * invdirx;

  		}

  		if ( invdiry >= 0 ) {

  			tymin = ( box.min.y - origin.y ) * invdiry;
  			tymax = ( box.max.y - origin.y ) * invdiry;

  		} else {

  			tymin = ( box.max.y - origin.y ) * invdiry;
  			tymax = ( box.min.y - origin.y ) * invdiry;

  		}

  		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

  		// These lines also handle the case where tmin or tmax is NaN
  		// (result of 0 * Infinity). x !== x returns true if x is NaN

  		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

  		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

  		if ( invdirz >= 0 ) {

  			tzmin = ( box.min.z - origin.z ) * invdirz;
  			tzmax = ( box.max.z - origin.z ) * invdirz;

  		} else {

  			tzmin = ( box.max.z - origin.z ) * invdirz;
  			tzmax = ( box.min.z - origin.z ) * invdirz;

  		}

  		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

  		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

  		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

  		//return point closest to the ray (positive side)

  		if ( tmax < 0 ) return null;

  		return this.at( tmin >= 0 ? tmin : tmax, target );

  	},

  	intersectsBox: ( function () {

  		var v = new Vector3();

  		return function intersectsBox( box ) {

  			return this.intersectBox( box, v ) !== null;

  		};

  	} )(),

  	intersectTriangle: function () {

  		// Compute the offset origin, edges, and normal.
  		var diff = new Vector3();
  		var edge1 = new Vector3();
  		var edge2 = new Vector3();
  		var normal = new Vector3();

  		return function intersectTriangle( a, b, c, backfaceCulling, target ) {

  			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

  			edge1.subVectors( b, a );
  			edge2.subVectors( c, a );
  			normal.crossVectors( edge1, edge2 );

  			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
  			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
  			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
  			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
  			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
  			var DdN = this.direction.dot( normal );
  			var sign;

  			if ( DdN > 0 ) {

  				if ( backfaceCulling ) return null;
  				sign = 1;

  			} else if ( DdN < 0 ) {

  				sign = - 1;
  				DdN = - DdN;

  			} else {

  				return null;

  			}

  			diff.subVectors( this.origin, a );
  			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

  			// b1 < 0, no intersection
  			if ( DdQxE2 < 0 ) {

  				return null;

  			}

  			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

  			// b2 < 0, no intersection
  			if ( DdE1xQ < 0 ) {

  				return null;

  			}

  			// b1+b2 > 1, no intersection
  			if ( DdQxE2 + DdE1xQ > DdN ) {

  				return null;

  			}

  			// Line intersects triangle, check if ray does.
  			var QdN = - sign * diff.dot( normal );

  			// t < 0, no intersection
  			if ( QdN < 0 ) {

  				return null;

  			}

  			// Ray intersects triangle.
  			return this.at( QdN / DdN, target );

  		};

  	}(),

  	applyMatrix4: function ( matrix4 ) {

  		this.origin.applyMatrix4( matrix4 );
  		this.direction.transformDirection( matrix4 );

  		return this;

  	},

  	equals: function ( ray ) {

  		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author mrdoob / http://mrdoob.com/
   */

  function Triangle( a, b, c ) {

  	this.a = ( a !== undefined ) ? a : new Vector3();
  	this.b = ( b !== undefined ) ? b : new Vector3();
  	this.c = ( c !== undefined ) ? c : new Vector3();

  }

  Object.assign( Triangle, {

  	getNormal: function () {

  		var v0 = new Vector3();

  		return function getNormal( a, b, c, target ) {

  			if ( target === undefined ) {

  				console.warn( 'THREE.Triangle: .getNormal() target is now required' );
  				target = new Vector3();

  			}

  			target.subVectors( c, b );
  			v0.subVectors( a, b );
  			target.cross( v0 );

  			var targetLengthSq = target.lengthSq();
  			if ( targetLengthSq > 0 ) {

  				return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

  			}

  			return target.set( 0, 0, 0 );

  		};

  	}(),

  	// static/instance method to calculate barycentric coordinates
  	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  	getBarycoord: function () {

  		var v0 = new Vector3();
  		var v1 = new Vector3();
  		var v2 = new Vector3();

  		return function getBarycoord( point, a, b, c, target ) {

  			v0.subVectors( c, a );
  			v1.subVectors( b, a );
  			v2.subVectors( point, a );

  			var dot00 = v0.dot( v0 );
  			var dot01 = v0.dot( v1 );
  			var dot02 = v0.dot( v2 );
  			var dot11 = v1.dot( v1 );
  			var dot12 = v1.dot( v2 );

  			var denom = ( dot00 * dot11 - dot01 * dot01 );

  			if ( target === undefined ) {

  				console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
  				target = new Vector3();

  			}

  			// collinear or singular triangle
  			if ( denom === 0 ) {

  				// arbitrary location outside of triangle?
  				// not sure if this is the best idea, maybe should be returning undefined
  				return target.set( - 2, - 1, - 1 );

  			}

  			var invDenom = 1 / denom;
  			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
  			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

  			// barycentric coordinates must always sum to 1
  			return target.set( 1 - u - v, v, u );

  		};

  	}(),

  	containsPoint: function () {

  		var v1 = new Vector3();

  		return function containsPoint( point, a, b, c ) {

  			Triangle.getBarycoord( point, a, b, c, v1 );

  			return ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );

  		};

  	}(),

  	getUV: function () {

  		var barycoord = new Vector3();

  		return function getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {

  			this.getBarycoord( point, p1, p2, p3, barycoord );

  			target.set( 0, 0 );
  			target.addScaledVector( uv1, barycoord.x );
  			target.addScaledVector( uv2, barycoord.y );
  			target.addScaledVector( uv3, barycoord.z );

  			return target;

  		};

  	}()

  } );

  Object.assign( Triangle.prototype, {

  	set: function ( a, b, c ) {

  		this.a.copy( a );
  		this.b.copy( b );
  		this.c.copy( c );

  		return this;

  	},

  	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

  		this.a.copy( points[ i0 ] );
  		this.b.copy( points[ i1 ] );
  		this.c.copy( points[ i2 ] );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( triangle ) {

  		this.a.copy( triangle.a );
  		this.b.copy( triangle.b );
  		this.c.copy( triangle.c );

  		return this;

  	},

  	getArea: function () {

  		var v0 = new Vector3();
  		var v1 = new Vector3();

  		return function getArea() {

  			v0.subVectors( this.c, this.b );
  			v1.subVectors( this.a, this.b );

  			return v0.cross( v1 ).length() * 0.5;

  		};

  	}(),

  	getMidpoint: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

  	},

  	getNormal: function ( target ) {

  		return Triangle.getNormal( this.a, this.b, this.c, target );

  	},

  	getPlane: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getPlane() target is now required' );
  			target = new Vector3();

  		}

  		return target.setFromCoplanarPoints( this.a, this.b, this.c );

  	},

  	getBarycoord: function ( point, target ) {

  		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

  	},

  	containsPoint: function ( point ) {

  		return Triangle.containsPoint( point, this.a, this.b, this.c );

  	},

  	getUV: function ( point, uv1, uv2, uv3, result ) {

  		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, result );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsTriangle( this );

  	},

  	closestPointToPoint: function () {

  		var vab = new Vector3();
  		var vac = new Vector3();
  		var vbc = new Vector3();
  		var vap = new Vector3();
  		var vbp = new Vector3();
  		var vcp = new Vector3();

  		return function closestPointToPoint( p, target ) {

  			if ( target === undefined ) {

  				console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
  				target = new Vector3();

  			}

  			var a = this.a, b = this.b, c = this.c;
  			var v, w;

  			// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
  			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
  			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
  			// basically, we're distinguishing which of the voronoi regions of the triangle
  			// the point lies in with the minimum amount of redundant computation.

  			vab.subVectors( b, a );
  			vac.subVectors( c, a );
  			vap.subVectors( p, a );
  			var d1 = vab.dot( vap );
  			var d2 = vac.dot( vap );
  			if ( d1 <= 0 && d2 <= 0 ) {

  				// vertex region of A; barycentric coords (1, 0, 0)
  				return target.copy( a );

  			}

  			vbp.subVectors( p, b );
  			var d3 = vab.dot( vbp );
  			var d4 = vac.dot( vbp );
  			if ( d3 >= 0 && d4 <= d3 ) {

  				// vertex region of B; barycentric coords (0, 1, 0)
  				return target.copy( b );

  			}

  			var vc = d1 * d4 - d3 * d2;
  			if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

  				v = d1 / ( d1 - d3 );
  				// edge region of AB; barycentric coords (1-v, v, 0)
  				return target.copy( a ).addScaledVector( vab, v );

  			}

  			vcp.subVectors( p, c );
  			var d5 = vab.dot( vcp );
  			var d6 = vac.dot( vcp );
  			if ( d6 >= 0 && d5 <= d6 ) {

  				// vertex region of C; barycentric coords (0, 0, 1)
  				return target.copy( c );

  			}

  			var vb = d5 * d2 - d1 * d6;
  			if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

  				w = d2 / ( d2 - d6 );
  				// edge region of AC; barycentric coords (1-w, 0, w)
  				return target.copy( a ).addScaledVector( vac, w );

  			}

  			var va = d3 * d6 - d5 * d4;
  			if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

  				vbc.subVectors( c, b );
  				w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
  				// edge region of BC; barycentric coords (0, 1-w, w)
  				return target.copy( b ).addScaledVector( vbc, w ); // edge region of BC

  			}

  			// face region
  			var denom = 1 / ( va + vb + vc );
  			// u = va * denom
  			v = vb * denom;
  			w = vc * denom;
  			return target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );

  		};

  	}(),

  	equals: function ( triangle ) {

  		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.Multiply,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  depthTest: <bool>,
   *  depthWrite: <bool>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>
   * }
   */

  function MeshBasicMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshBasicMaterial';

  	this.color = new Color( 0xffffff ); // emissive

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;

  	this.lights = false;

  	this.setValues( parameters );

  }

  MeshBasicMaterial.prototype = Object.create( Material.prototype );
  MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

  MeshBasicMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author jonobr1 / http://jonobr1.com/
   */

  function Mesh( geometry, material ) {

  	Object3D.call( this );

  	this.type = 'Mesh';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

  	this.drawMode = TrianglesDrawMode;

  	this.updateMorphTargets();

  }

  Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Mesh,

  	isMesh: true,

  	setDrawMode: function ( value ) {

  		this.drawMode = value;

  	},

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		this.drawMode = source.drawMode;

  		if ( source.morphTargetInfluences !== undefined ) {

  			this.morphTargetInfluences = source.morphTargetInfluences.slice();

  		}

  		if ( source.morphTargetDictionary !== undefined ) {

  			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

  		}

  		return this;

  	},

  	updateMorphTargets: function () {

  		var geometry = this.geometry;
  		var m, ml, name;

  		if ( geometry.isBufferGeometry ) {

  			var morphAttributes = geometry.morphAttributes;
  			var keys = Object.keys( morphAttributes );

  			if ( keys.length > 0 ) {

  				var morphAttribute = morphAttributes[ keys[ 0 ] ];

  				if ( morphAttribute !== undefined ) {

  					this.morphTargetInfluences = [];
  					this.morphTargetDictionary = {};

  					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  						name = morphAttribute[ m ].name || String( m );

  						this.morphTargetInfluences.push( 0 );
  						this.morphTargetDictionary[ name ] = m;

  					}

  				}

  			}

  		} else {

  			var morphTargets = geometry.morphTargets;

  			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

  				console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

  			}

  		}

  	},

  	raycast: ( function () {

  		var inverseMatrix = new Matrix4();
  		var ray = new Ray();
  		var sphere = new Sphere();

  		var vA = new Vector3();
  		var vB = new Vector3();
  		var vC = new Vector3();

  		var tempA = new Vector3();
  		var tempB = new Vector3();
  		var tempC = new Vector3();

  		var morphA = new Vector3();
  		var morphB = new Vector3();
  		var morphC = new Vector3();

  		var uvA = new Vector2();
  		var uvB = new Vector2();
  		var uvC = new Vector2();

  		var intersectionPoint = new Vector3();
  		var intersectionPointWorld = new Vector3();

  		function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

  			var intersect;

  			if ( material.side === BackSide ) {

  				intersect = ray.intersectTriangle( pC, pB, pA, true, point );

  			} else {

  				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

  			}

  			if ( intersect === null ) return null;

  			intersectionPointWorld.copy( point );
  			intersectionPointWorld.applyMatrix4( object.matrixWorld );

  			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

  			if ( distance < raycaster.near || distance > raycaster.far ) return null;

  			return {
  				distance: distance,
  				point: intersectionPointWorld.clone(),
  				object: object
  			};

  		}

  		function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, uv, a, b, c ) {

  			vA.fromBufferAttribute( position, a );
  			vB.fromBufferAttribute( position, b );
  			vC.fromBufferAttribute( position, c );

  			var morphInfluences = object.morphTargetInfluences;

  			if ( material.morphTargets && morphPosition && morphInfluences ) {

  				morphA.set( 0, 0, 0 );
  				morphB.set( 0, 0, 0 );
  				morphC.set( 0, 0, 0 );

  				for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {

  					var influence = morphInfluences[ i ];
  					var morphAttribute = morphPosition[ i ];

  					if ( influence === 0 ) continue;

  					tempA.fromBufferAttribute( morphAttribute, a );
  					tempB.fromBufferAttribute( morphAttribute, b );
  					tempC.fromBufferAttribute( morphAttribute, c );

  					morphA.addScaledVector( tempA.sub( vA ), influence );
  					morphB.addScaledVector( tempB.sub( vB ), influence );
  					morphC.addScaledVector( tempC.sub( vC ), influence );

  				}

  				vA.add( morphA );
  				vB.add( morphB );
  				vC.add( morphC );

  			}

  			var intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );

  			if ( intersection ) {

  				if ( uv ) {

  					uvA.fromBufferAttribute( uv, a );
  					uvB.fromBufferAttribute( uv, b );
  					uvC.fromBufferAttribute( uv, c );

  					intersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() );

  				}

  				var face = new Face3( a, b, c );
  				Triangle.getNormal( vA, vB, vC, face.normal );

  				intersection.face = face;

  			}

  			return intersection;

  		}

  		return function raycast( raycaster, intersects ) {

  			var geometry = this.geometry;
  			var material = this.material;
  			var matrixWorld = this.matrixWorld;

  			if ( material === undefined ) return;

  			// Checking boundingSphere distance to ray

  			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  			sphere.copy( geometry.boundingSphere );
  			sphere.applyMatrix4( matrixWorld );

  			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

  			//

  			inverseMatrix.getInverse( matrixWorld );
  			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

  			// Check boundingBox before continuing

  			if ( geometry.boundingBox !== null ) {

  				if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

  			}

  			var intersection;

  			if ( geometry.isBufferGeometry ) {

  				var a, b, c;
  				var index = geometry.index;
  				var position = geometry.attributes.position;
  				var morphPosition = geometry.morphAttributes.position;
  				var uv = geometry.attributes.uv;
  				var groups = geometry.groups;
  				var drawRange = geometry.drawRange;
  				var i, j, il, jl;
  				var group, groupMaterial;
  				var start, end;

  				if ( index !== null ) {

  					// indexed buffer geometry

  					if ( Array.isArray( material ) ) {

  						for ( i = 0, il = groups.length; i < il; i ++ ) {

  							group = groups[ i ];
  							groupMaterial = material[ group.materialIndex ];

  							start = Math.max( group.start, drawRange.start );
  							end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

  							for ( j = start, jl = end; j < jl; j += 3 ) {

  								a = index.getX( j );
  								b = index.getX( j + 1 );
  								c = index.getX( j + 2 );

  								intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, morphPosition, uv, a, b, c );

  								if ( intersection ) {

  									intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
  									intersection.face.materialIndex = group.materialIndex;
  									intersects.push( intersection );

  								}

  							}

  						}

  					} else {

  						start = Math.max( 0, drawRange.start );
  						end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

  						for ( i = start, il = end; i < il; i += 3 ) {

  							a = index.getX( i );
  							b = index.getX( i + 1 );
  							c = index.getX( i + 2 );

  							intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, morphPosition, uv, a, b, c );

  							if ( intersection ) {

  								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
  								intersects.push( intersection );

  							}

  						}

  					}

  				} else if ( position !== undefined ) {

  					// non-indexed buffer geometry

  					if ( Array.isArray( material ) ) {

  						for ( i = 0, il = groups.length; i < il; i ++ ) {

  							group = groups[ i ];
  							groupMaterial = material[ group.materialIndex ];

  							start = Math.max( group.start, drawRange.start );
  							end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

  							for ( j = start, jl = end; j < jl; j += 3 ) {

  								a = j;
  								b = j + 1;
  								c = j + 2;

  								intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, morphPosition, uv, a, b, c );

  								if ( intersection ) {

  									intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
  									intersection.face.materialIndex = group.materialIndex;
  									intersects.push( intersection );

  								}

  							}

  						}

  					} else {

  						start = Math.max( 0, drawRange.start );
  						end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

  						for ( i = start, il = end; i < il; i += 3 ) {

  							a = i;
  							b = i + 1;
  							c = i + 2;

  							intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, morphPosition, uv, a, b, c );

  							if ( intersection ) {

  								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
  								intersects.push( intersection );

  							}

  						}

  					}

  				}

  			} else if ( geometry.isGeometry ) {

  				var fvA, fvB, fvC;
  				var isMultiMaterial = Array.isArray( material );

  				var vertices = geometry.vertices;
  				var faces = geometry.faces;
  				var uvs;

  				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
  				if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

  				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

  					var face = faces[ f ];
  					var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

  					if ( faceMaterial === undefined ) continue;

  					fvA = vertices[ face.a ];
  					fvB = vertices[ face.b ];
  					fvC = vertices[ face.c ];

  					intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

  					if ( intersection ) {

  						if ( uvs && uvs[ f ] ) {

  							var uvs_f = uvs[ f ];
  							uvA.copy( uvs_f[ 0 ] );
  							uvB.copy( uvs_f[ 1 ] );
  							uvC.copy( uvs_f[ 2 ] );

  							intersection.uv = Triangle.getUV( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC, new Vector2() );

  						}

  						intersection.face = face;
  						intersection.faceIndex = f;
  						intersects.push( intersection );

  					}

  				}

  			}

  		};

  	}() ),

  	clone: function () {

  		return new this.constructor( this.geometry, this.material ).copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

  	var clearColor = new Color( 0x000000 );
  	var clearAlpha = 0;

  	var planeMesh;
  	var boxMesh;
  	// Store the current background texture and its `version`
  	// so we can recompile the material accordingly.
  	var currentBackground = null;
  	var currentBackgroundVersion = 0;

  	function render( renderList, scene, camera, forceClear ) {

  		var background = scene.background;

  		// Ignore background in AR
  		// TODO: Reconsider this.

  		var vr = renderer.vr;
  		var session = vr.getSession && vr.getSession();

  		if ( session && session.environmentBlendMode === 'additive' ) {

  			background = null;

  		}

  		if ( background === null ) {

  			setClear( clearColor, clearAlpha );
  			currentBackground = null;
  			currentBackgroundVersion = 0;

  		} else if ( background && background.isColor ) {

  			setClear( background, 1 );
  			forceClear = true;
  			currentBackground = null;
  			currentBackgroundVersion = 0;

  		}

  		if ( renderer.autoClear || forceClear ) {

  			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

  		}

  		if ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {

  			if ( boxMesh === undefined ) {

  				boxMesh = new Mesh(
  					new BoxBufferGeometry( 1, 1, 1 ),
  					new ShaderMaterial( {
  						type: 'BackgroundCubeMaterial',
  						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
  						vertexShader: ShaderLib.cube.vertexShader,
  						fragmentShader: ShaderLib.cube.fragmentShader,
  						side: BackSide,
  						depthTest: false,
  						depthWrite: false,
  						fog: false
  					} )
  				);

  				boxMesh.geometry.removeAttribute( 'normal' );
  				boxMesh.geometry.removeAttribute( 'uv' );

  				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

  					this.matrixWorld.copyPosition( camera.matrixWorld );

  				};

  				// enable code injection for non-built-in material
  				Object.defineProperty( boxMesh.material, 'map', {

  					get: function () {

  						return this.uniforms.tCube.value;

  					}

  				} );

  				objects.update( boxMesh );

  			}

  			var texture = background.isWebGLRenderTargetCube ? background.texture : background;
  			boxMesh.material.uniforms.tCube.value = texture;
  			boxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;

  			if ( currentBackground !== background ||
  			     currentBackgroundVersion !== texture.version ) {

  				boxMesh.material.needsUpdate = true;

  				currentBackground = background;
  				currentBackgroundVersion = texture.version;

  			}

  			// push to the pre-sorted opaque render list
  			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

  		} else if ( background && background.isTexture ) {

  			if ( planeMesh === undefined ) {

  				planeMesh = new Mesh(
  					new PlaneBufferGeometry( 2, 2 ),
  					new ShaderMaterial( {
  						type: 'BackgroundMaterial',
  						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
  						vertexShader: ShaderLib.background.vertexShader,
  						fragmentShader: ShaderLib.background.fragmentShader,
  						side: FrontSide,
  						depthTest: false,
  						depthWrite: false,
  						fog: false
  					} )
  				);

  				planeMesh.geometry.removeAttribute( 'normal' );

  				// enable code injection for non-built-in material
  				Object.defineProperty( planeMesh.material, 'map', {

  					get: function () {

  						return this.uniforms.t2D.value;

  					}

  				} );

  				objects.update( planeMesh );

  			}

  			planeMesh.material.uniforms.t2D.value = background;

  			if ( background.matrixAutoUpdate === true ) {

  				background.updateMatrix();

  			}

  			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

  			if ( currentBackground !== background ||
  				   currentBackgroundVersion !== background.version ) {

  				planeMesh.material.needsUpdate = true;

  				currentBackground = background;
  				currentBackgroundVersion = background.version;

  			}


  			// push to the pre-sorted opaque render list
  			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

  		}

  	}

  	function setClear( color, alpha ) {

  		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

  	}

  	return {

  		getClearColor: function () {

  			return clearColor;

  		},
  		setClearColor: function ( color, alpha ) {

  			clearColor.set( color );
  			clearAlpha = alpha !== undefined ? alpha : 1;
  			setClear( clearColor, clearAlpha );

  		},
  		getClearAlpha: function () {

  			return clearAlpha;

  		},
  		setClearAlpha: function ( alpha ) {

  			clearAlpha = alpha;
  			setClear( clearColor, clearAlpha );

  		},
  		render: render

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

  	var mode;

  	function setMode( value ) {

  		mode = value;

  	}

  	function render( start, count ) {

  		gl.drawArrays( mode, start, count );

  		info.update( count, mode );

  	}

  	function renderInstances( geometry, start, count ) {

  		var extension;

  		if ( capabilities.isWebGL2 ) {

  			extension = gl;

  		} else {

  			extension = extensions.get( 'ANGLE_instanced_arrays' );

  			if ( extension === null ) {

  				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
  				return;

  			}

  		}

  		extension[ capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE' ]( mode, start, count, geometry.maxInstancedCount );

  		info.update( count, mode, geometry.maxInstancedCount );

  	}

  	//

  	this.setMode = setMode;
  	this.render = render;
  	this.renderInstances = renderInstances;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLCapabilities( gl, extensions, parameters ) {

  	var maxAnisotropy;

  	function getMaxAnisotropy() {

  		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

  		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

  		if ( extension !== null ) {

  			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

  		} else {

  			maxAnisotropy = 0;

  		}

  		return maxAnisotropy;

  	}

  	function getMaxPrecision( precision ) {

  		if ( precision === 'highp' ) {

  			if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
  			     gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {

  				return 'highp';

  			}

  			precision = 'mediump';

  		}

  		if ( precision === 'mediump' ) {

  			if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
  			     gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {

  				return 'mediump';

  			}

  		}

  		return 'lowp';

  	}

  	var isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;

  	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
  	var maxPrecision = getMaxPrecision( precision );

  	if ( maxPrecision !== precision ) {

  		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
  		precision = maxPrecision;

  	}

  	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

  	var maxTextures = gl.getParameter( 34930 );
  	var maxVertexTextures = gl.getParameter( 35660 );
  	var maxTextureSize = gl.getParameter( 3379 );
  	var maxCubemapSize = gl.getParameter( 34076 );

  	var maxAttributes = gl.getParameter( 34921 );
  	var maxVertexUniforms = gl.getParameter( 36347 );
  	var maxVaryings = gl.getParameter( 36348 );
  	var maxFragmentUniforms = gl.getParameter( 36349 );

  	var vertexTextures = maxVertexTextures > 0;
  	var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
  	var floatVertexTextures = vertexTextures && floatFragmentTextures;

  	var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;

  	return {

  		isWebGL2: isWebGL2,

  		getMaxAnisotropy: getMaxAnisotropy,
  		getMaxPrecision: getMaxPrecision,

  		precision: precision,
  		logarithmicDepthBuffer: logarithmicDepthBuffer,

  		maxTextures: maxTextures,
  		maxVertexTextures: maxVertexTextures,
  		maxTextureSize: maxTextureSize,
  		maxCubemapSize: maxCubemapSize,

  		maxAttributes: maxAttributes,
  		maxVertexUniforms: maxVertexUniforms,
  		maxVaryings: maxVaryings,
  		maxFragmentUniforms: maxFragmentUniforms,

  		vertexTextures: vertexTextures,
  		floatFragmentTextures: floatFragmentTextures,
  		floatVertexTextures: floatVertexTextures,

  		maxSamples: maxSamples

  	};

  }

  /**
   * @author tschw
   */

  function WebGLClipping() {

  	var scope = this,

  		globalState = null,
  		numGlobalPlanes = 0,
  		localClippingEnabled = false,
  		renderingShadows = false,

  		plane = new Plane(),
  		viewNormalMatrix = new Matrix3(),

  		uniform = { value: null, needsUpdate: false };

  	this.uniform = uniform;
  	this.numPlanes = 0;
  	this.numIntersection = 0;

  	this.init = function ( planes, enableLocalClipping, camera ) {

  		var enabled =
  			planes.length !== 0 ||
  			enableLocalClipping ||
  			// enable state of previous frame - the clipping code has to
  			// run another frame in order to reset the state:
  			numGlobalPlanes !== 0 ||
  			localClippingEnabled;

  		localClippingEnabled = enableLocalClipping;

  		globalState = projectPlanes( planes, camera, 0 );
  		numGlobalPlanes = planes.length;

  		return enabled;

  	};

  	this.beginShadows = function () {

  		renderingShadows = true;
  		projectPlanes( null );

  	};

  	this.endShadows = function () {

  		renderingShadows = false;
  		resetGlobalState();

  	};

  	this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

  		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

  			// there's no local clipping

  			if ( renderingShadows ) {

  				// there's no global clipping

  				projectPlanes( null );

  			} else {

  				resetGlobalState();

  			}

  		} else {

  			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
  				lGlobal = nGlobal * 4,

  				dstArray = cache.clippingState || null;

  			uniform.value = dstArray; // ensure unique state

  			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

  			for ( var i = 0; i !== lGlobal; ++ i ) {

  				dstArray[ i ] = globalState[ i ];

  			}

  			cache.clippingState = dstArray;
  			this.numIntersection = clipIntersection ? this.numPlanes : 0;
  			this.numPlanes += nGlobal;

  		}


  	};

  	function resetGlobalState() {

  		if ( uniform.value !== globalState ) {

  			uniform.value = globalState;
  			uniform.needsUpdate = numGlobalPlanes > 0;

  		}

  		scope.numPlanes = numGlobalPlanes;
  		scope.numIntersection = 0;

  	}

  	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

  		var nPlanes = planes !== null ? planes.length : 0,
  			dstArray = null;

  		if ( nPlanes !== 0 ) {

  			dstArray = uniform.value;

  			if ( skipTransform !== true || dstArray === null ) {

  				var flatSize = dstOffset + nPlanes * 4,
  					viewMatrix = camera.matrixWorldInverse;

  				viewNormalMatrix.getNormalMatrix( viewMatrix );

  				if ( dstArray === null || dstArray.length < flatSize ) {

  					dstArray = new Float32Array( flatSize );

  				}

  				for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

  					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

  					plane.normal.toArray( dstArray, i4 );
  					dstArray[ i4 + 3 ] = plane.constant;

  				}

  			}

  			uniform.value = dstArray;
  			uniform.needsUpdate = true;

  		}

  		scope.numPlanes = nPlanes;

  		return dstArray;

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLExtensions( gl ) {

  	var extensions = {};

  	return {

  		get: function ( name ) {

  			if ( extensions[ name ] !== undefined ) {

  				return extensions[ name ];

  			}

  			var extension;

  			switch ( name ) {

  				case 'WEBGL_depth_texture':
  					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
  					break;

  				case 'EXT_texture_filter_anisotropic':
  					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
  					break;

  				case 'WEBGL_compressed_texture_s3tc':
  					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
  					break;

  				case 'WEBGL_compressed_texture_pvrtc':
  					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
  					break;

  				default:
  					extension = gl.getExtension( name );

  			}

  			if ( extension === null ) {

  				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

  			}

  			extensions[ name ] = extension;

  			return extension;

  		}

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLGeometries( gl, attributes, info ) {

  	var geometries = {};
  	var wireframeAttributes = {};

  	function onGeometryDispose( event ) {

  		var geometry = event.target;
  		var buffergeometry = geometries[ geometry.id ];

  		if ( buffergeometry.index !== null ) {

  			attributes.remove( buffergeometry.index );

  		}

  		for ( var name in buffergeometry.attributes ) {

  			attributes.remove( buffergeometry.attributes[ name ] );

  		}

  		geometry.removeEventListener( 'dispose', onGeometryDispose );

  		delete geometries[ geometry.id ];

  		var attribute = wireframeAttributes[ buffergeometry.id ];

  		if ( attribute ) {

  			attributes.remove( attribute );
  			delete wireframeAttributes[ buffergeometry.id ];

  		}

  		//

  		info.memory.geometries --;

  	}

  	function get( object, geometry ) {

  		var buffergeometry = geometries[ geometry.id ];

  		if ( buffergeometry ) return buffergeometry;

  		geometry.addEventListener( 'dispose', onGeometryDispose );

  		if ( geometry.isBufferGeometry ) {

  			buffergeometry = geometry;

  		} else if ( geometry.isGeometry ) {

  			if ( geometry._bufferGeometry === undefined ) {

  				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

  			}

  			buffergeometry = geometry._bufferGeometry;

  		}

  		geometries[ geometry.id ] = buffergeometry;

  		info.memory.geometries ++;

  		return buffergeometry;

  	}

  	function update( geometry ) {

  		var index = geometry.index;
  		var geometryAttributes = geometry.attributes;

  		if ( index !== null ) {

  			attributes.update( index, 34963 );

  		}

  		for ( var name in geometryAttributes ) {

  			attributes.update( geometryAttributes[ name ], 34962 );

  		}

  		// morph targets

  		var morphAttributes = geometry.morphAttributes;

  		for ( var name in morphAttributes ) {

  			var array = morphAttributes[ name ];

  			for ( var i = 0, l = array.length; i < l; i ++ ) {

  				attributes.update( array[ i ], 34962 );

  			}

  		}

  	}

  	function getWireframeAttribute( geometry ) {

  		var attribute = wireframeAttributes[ geometry.id ];

  		if ( attribute ) return attribute;

  		var indices = [];

  		var geometryIndex = geometry.index;
  		var geometryAttributes = geometry.attributes;

  		// console.time( 'wireframe' );

  		if ( geometryIndex !== null ) {

  			var array = geometryIndex.array;

  			for ( var i = 0, l = array.length; i < l; i += 3 ) {

  				var a = array[ i + 0 ];
  				var b = array[ i + 1 ];
  				var c = array[ i + 2 ];

  				indices.push( a, b, b, c, c, a );

  			}

  		} else {

  			var array = geometryAttributes.position.array;

  			for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

  				var a = i + 0;
  				var b = i + 1;
  				var c = i + 2;

  				indices.push( a, b, b, c, c, a );

  			}

  		}

  		// console.timeEnd( 'wireframe' );

  		attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );

  		attributes.update( attribute, 34963 );

  		wireframeAttributes[ geometry.id ] = attribute;

  		return attribute;

  	}

  	return {

  		get: get,
  		update: update,

  		getWireframeAttribute: getWireframeAttribute

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

  	var mode;

  	function setMode( value ) {

  		mode = value;

  	}

  	var type, bytesPerElement;

  	function setIndex( value ) {

  		type = value.type;
  		bytesPerElement = value.bytesPerElement;

  	}

  	function render( start, count ) {

  		gl.drawElements( mode, count, type, start * bytesPerElement );

  		info.update( count, mode );

  	}

  	function renderInstances( geometry, start, count ) {

  		var extension;

  		if ( capabilities.isWebGL2 ) {

  			extension = gl;

  		} else {

  			var extension = extensions.get( 'ANGLE_instanced_arrays' );

  			if ( extension === null ) {

  				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
  				return;

  			}

  		}

  		extension[ capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE' ]( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );

  		info.update( count, mode, geometry.maxInstancedCount );

  	}

  	//

  	this.setMode = setMode;
  	this.setIndex = setIndex;
  	this.render = render;
  	this.renderInstances = renderInstances;

  }

  /**
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WebGLInfo( gl ) {

  	var memory = {
  		geometries: 0,
  		textures: 0
  	};

  	var render = {
  		frame: 0,
  		calls: 0,
  		triangles: 0,
  		points: 0,
  		lines: 0
  	};

  	function update( count, mode, instanceCount ) {

  		instanceCount = instanceCount || 1;

  		render.calls ++;

  		switch ( mode ) {

  			case 4:
  				render.triangles += instanceCount * ( count / 3 );
  				break;

  			case 5:
  			case 6:
  				render.triangles += instanceCount * ( count - 2 );
  				break;

  			case 1:
  				render.lines += instanceCount * ( count / 2 );
  				break;

  			case 3:
  				render.lines += instanceCount * ( count - 1 );
  				break;

  			case 2:
  				render.lines += instanceCount * count;
  				break;

  			case 0:
  				render.points += instanceCount * count;
  				break;

  			default:
  				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
  				break;

  		}

  	}

  	function reset() {

  		render.frame ++;
  		render.calls = 0;
  		render.triangles = 0;
  		render.points = 0;
  		render.lines = 0;

  	}

  	return {
  		memory: memory,
  		render: render,
  		programs: null,
  		autoReset: true,
  		reset: reset,
  		update: update
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function absNumericalSort( a, b ) {

  	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

  }

  function WebGLMorphtargets( gl ) {

  	var influencesList = {};
  	var morphInfluences = new Float32Array( 8 );

  	function update( object, geometry, material, program ) {

  		var objectInfluences = object.morphTargetInfluences;

  		var length = objectInfluences.length;

  		var influences = influencesList[ geometry.id ];

  		if ( influences === undefined ) {

  			// initialise list

  			influences = [];

  			for ( var i = 0; i < length; i ++ ) {

  				influences[ i ] = [ i, 0 ];

  			}

  			influencesList[ geometry.id ] = influences;

  		}

  		var morphTargets = material.morphTargets && geometry.morphAttributes.position;
  		var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

  		// Remove current morphAttributes

  		for ( var i = 0; i < length; i ++ ) {

  			var influence = influences[ i ];

  			if ( influence[ 1 ] !== 0 ) {

  				if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
  				if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );

  			}

  		}

  		// Collect influences

  		for ( var i = 0; i < length; i ++ ) {

  			var influence = influences[ i ];

  			influence[ 0 ] = i;
  			influence[ 1 ] = objectInfluences[ i ];

  		}

  		influences.sort( absNumericalSort );

  		// Add morphAttributes

  		for ( var i = 0; i < 8; i ++ ) {

  			var influence = influences[ i ];

  			if ( influence ) {

  				var index = influence[ 0 ];
  				var value = influence[ 1 ];

  				if ( value ) {

  					if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
  					if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );

  					morphInfluences[ i ] = value;
  					continue;

  				}

  			}

  			morphInfluences[ i ] = 0;

  		}

  		program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

  	}

  	return {

  		update: update

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLObjects( geometries, info ) {

  	var updateList = {};

  	function update( object ) {

  		var frame = info.render.frame;

  		var geometry = object.geometry;
  		var buffergeometry = geometries.get( object, geometry );

  		// Update once per frame

  		if ( updateList[ buffergeometry.id ] !== frame ) {

  			if ( geometry.isGeometry ) {

  				buffergeometry.updateFromObject( object );

  			}

  			geometries.update( buffergeometry );

  			updateList[ buffergeometry.id ] = frame;

  		}

  		return buffergeometry;

  	}

  	function dispose() {

  		updateList = {};

  	}

  	return {

  		update: update,
  		dispose: dispose

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

  	images = images !== undefined ? images : [];
  	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
  	format = format !== undefined ? format : RGBFormat;

  	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.flipY = false;

  }

  CubeTexture.prototype = Object.create( Texture.prototype );
  CubeTexture.prototype.constructor = CubeTexture;

  CubeTexture.prototype.isCubeTexture = true;

  Object.defineProperty( CubeTexture.prototype, 'images', {

  	get: function () {

  		return this.image;

  	},

  	set: function ( value ) {

  		this.image = value;

  	}

  } );

  /**
   * @author Takahiro https://github.com/takahirox
   */

  function DataTexture2DArray( data, width, height, depth ) {

  	Texture.call( this, null );

  	this.image = { data: data, width: width, height: height, depth: depth };

  	this.magFilter = NearestFilter;
  	this.minFilter = NearestFilter;

  	this.wrapR = ClampToEdgeWrapping;

  	this.generateMipmaps = false;
  	this.flipY = false;

  }

  DataTexture2DArray.prototype = Object.create( Texture.prototype );
  DataTexture2DArray.prototype.constructor = DataTexture2DArray;
  DataTexture2DArray.prototype.isDataTexture2DArray = true;

  /**
   * @author Artur Trzesiok
   */

  function DataTexture3D( data, width, height, depth ) {

  	// We're going to add .setXXX() methods for setting properties later.
  	// Users can still set in DataTexture3D directly.
  	//
  	//	var texture = new THREE.DataTexture3D( data, width, height, depth );
  	// 	texture.anisotropy = 16;
  	//
  	// See #14839

  	Texture.call( this, null );

  	this.image = { data: data, width: width, height: height, depth: depth };

  	this.magFilter = NearestFilter;
  	this.minFilter = NearestFilter;

  	this.wrapR = ClampToEdgeWrapping;

  	this.generateMipmaps = false;
  	this.flipY = false;

  }

  DataTexture3D.prototype = Object.create( Texture.prototype );
  DataTexture3D.prototype.constructor = DataTexture3D;
  DataTexture3D.prototype.isDataTexture3D = true;

  /**
   * @author tschw
   * @author Mugen87 / https://github.com/Mugen87
   * @author mrdoob / http://mrdoob.com/
   *
   * Uniforms of a program.
   * Those form a tree structure with a special top-level container for the root,
   * which you get by calling 'new WebGLUniforms( gl, program )'.
   *
   *
   * Properties of inner nodes including the top-level container:
   *
   * .seq - array of nested uniforms
   * .map - nested uniforms by name
   *
   *
   * Methods of all nodes except the top-level container:
   *
   * .setValue( gl, value, [textures] )
   *
   * 		uploads a uniform value(s)
   *  	the 'textures' parameter is needed for sampler uniforms
   *
   *
   * Static methods of the top-level container (textures factorizations):
   *
   * .upload( gl, seq, values, textures )
   *
   * 		sets uniforms in 'seq' to 'values[id].value'
   *
   * .seqWithValue( seq, values ) : filteredSeq
   *
   * 		filters 'seq' entries with corresponding entry in values
   *
   *
   * Methods of the top-level container (textures factorizations):
   *
   * .setValue( gl, name, value, textures )
   *
   * 		sets uniform with  name 'name' to 'value'
   *
   * .setOptional( gl, obj, prop )
   *
   * 		like .set for an optional property of the object
   *
   */

  var emptyTexture = new Texture();
  var emptyTexture2dArray = new DataTexture2DArray();
  var emptyTexture3d = new DataTexture3D();
  var emptyCubeTexture = new CubeTexture();

  // --- Utilities ---

  // Array Caches (provide typed arrays for temporary by size)

  var arrayCacheF32 = [];
  var arrayCacheI32 = [];

  // Float32Array caches used for uploading Matrix uniforms

  var mat4array = new Float32Array( 16 );
  var mat3array = new Float32Array( 9 );
  var mat2array = new Float32Array( 4 );

  // Flattening for arrays of vectors and matrices

  function flatten( array, nBlocks, blockSize ) {

  	var firstElem = array[ 0 ];

  	if ( firstElem <= 0 || firstElem > 0 ) return array;
  	// unoptimized: ! isNaN( firstElem )
  	// see http://jacksondunstan.com/articles/983

  	var n = nBlocks * blockSize,
  		r = arrayCacheF32[ n ];

  	if ( r === undefined ) {

  		r = new Float32Array( n );
  		arrayCacheF32[ n ] = r;

  	}

  	if ( nBlocks !== 0 ) {

  		firstElem.toArray( r, 0 );

  		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

  			offset += blockSize;
  			array[ i ].toArray( r, offset );

  		}

  	}

  	return r;

  }

  function arraysEqual$1( a, b ) {

  	if ( a.length !== b.length ) return false;

  	for ( var i = 0, l = a.length; i < l; i ++ ) {

  		if ( a[ i ] !== b[ i ] ) return false;

  	}

  	return true;

  }

  function copyArray( a, b ) {

  	for ( var i = 0, l = b.length; i < l; i ++ ) {

  		a[ i ] = b[ i ];

  	}

  }

  // Texture unit allocation

  function allocTexUnits( textures, n ) {

  	var r = arrayCacheI32[ n ];

  	if ( r === undefined ) {

  		r = new Int32Array( n );
  		arrayCacheI32[ n ] = r;

  	}

  	for ( var i = 0; i !== n; ++ i )
  		r[ i ] = textures.allocateTextureUnit();

  	return r;

  }

  // --- Setters ---

  // Note: Defining these methods externally, because they come in a bunch
  // and this way their names minify.

  // Single scalar

  function setValue1f( gl, v ) {

  	var cache = this.cache;

  	if ( cache[ 0 ] === v ) return;

  	gl.uniform1f( this.addr, v );

  	cache[ 0 ] = v;

  }

  function setValue1i( gl, v ) {

  	var cache = this.cache;

  	if ( cache[ 0 ] === v ) return;

  	gl.uniform1i( this.addr, v );

  	cache[ 0 ] = v;

  }

  // Single float vector (from flat array or THREE.VectorN)

  function setValue2fv( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

  			gl.uniform2f( this.addr, v.x, v.y );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform2fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValue3fv( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

  			gl.uniform3f( this.addr, v.x, v.y, v.z );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;

  		}

  	} else if ( v.r !== undefined ) {

  		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

  			gl.uniform3f( this.addr, v.r, v.g, v.b );

  			cache[ 0 ] = v.r;
  			cache[ 1 ] = v.g;
  			cache[ 2 ] = v.b;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform3fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValue4fv( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

  			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;
  			cache[ 3 ] = v.w;

  		}

  	} else {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniform4fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  // Single matrix (from flat array or MatrixN)

  function setValue2fm( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniformMatrix2fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual$1( cache, elements ) ) return;

  		mat2array.set( elements );

  		gl.uniformMatrix2fv( this.addr, false, mat2array );

  		copyArray( cache, elements );

  	}

  }

  function setValue3fm( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniformMatrix3fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual$1( cache, elements ) ) return;

  		mat3array.set( elements );

  		gl.uniformMatrix3fv( this.addr, false, mat3array );

  		copyArray( cache, elements );

  	}

  }

  function setValue4fm( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual$1( cache, v ) ) return;

  		gl.uniformMatrix4fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual$1( cache, elements ) ) return;

  		mat4array.set( elements );

  		gl.uniformMatrix4fv( this.addr, false, mat4array );

  		copyArray( cache, elements );

  	}

  }

  // Single texture (2D / Cube)

  function setValueT1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.safeSetTexture2D( v || emptyTexture, unit );

  }

  function setValueT2DArray1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTexture2DArray( v || emptyTexture2dArray, unit );

  }

  function setValueT3D1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTexture3D( v || emptyTexture3d, unit );

  }

  function setValueT6( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.safeSetTextureCube( v || emptyCubeTexture, unit );

  }

  // Integer / Boolean vectors or arrays thereof (always flat arrays)

  function setValue2iv( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual$1( cache, v ) ) return;

  	gl.uniform2iv( this.addr, v );

  	copyArray( cache, v );

  }

  function setValue3iv( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual$1( cache, v ) ) return;

  	gl.uniform3iv( this.addr, v );

  	copyArray( cache, v );

  }

  function setValue4iv( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual$1( cache, v ) ) return;

  	gl.uniform4iv( this.addr, v );

  	copyArray( cache, v );

  }

  // Helper to pick the right setter for the singular case

  function getSingularSetter( type ) {

  	switch ( type ) {

  		case 0x1406: return setValue1f; // FLOAT
  		case 0x8b50: return setValue2fv; // _VEC2
  		case 0x8b51: return setValue3fv; // _VEC3
  		case 0x8b52: return setValue4fv; // _VEC4

  		case 0x8b5a: return setValue2fm; // _MAT2
  		case 0x8b5b: return setValue3fm; // _MAT3
  		case 0x8b5c: return setValue4fm; // _MAT4

  		case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
  		case 0x8b5f: return setValueT3D1; // SAMPLER_3D
  		case 0x8b60: return setValueT6; // SAMPLER_CUBE
  		case 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY

  		case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
  		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
  		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
  		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

  	}

  }

  // Array of scalars

  function setValue1fv( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual$1( cache, v ) ) return;

  	gl.uniform1fv( this.addr, v );

  	copyArray( cache, v );

  }
  function setValue1iv( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual$1( cache, v ) ) return;

  	gl.uniform1iv( this.addr, v );

  	copyArray( cache, v );

  }

  // Array of vectors (flat or from THREE classes)

  function setValueV2a( gl, v ) {

  	var cache = this.cache;
  	var data = flatten( v, this.size, 2 );

  	if ( arraysEqual$1( cache, data ) ) return;

  	gl.uniform2fv( this.addr, data );

  	this.updateCache( data );

  }

  function setValueV3a( gl, v ) {

  	var cache = this.cache;
  	var data = flatten( v, this.size, 3 );

  	if ( arraysEqual$1( cache, data ) ) return;

  	gl.uniform3fv( this.addr, data );

  	this.updateCache( data );

  }

  function setValueV4a( gl, v ) {

  	var cache = this.cache;
  	var data = flatten( v, this.size, 4 );

  	if ( arraysEqual$1( cache, data ) ) return;

  	gl.uniform4fv( this.addr, data );

  	this.updateCache( data );

  }

  // Array of matrices (flat or from THREE clases)

  function setValueM2a( gl, v ) {

  	var cache = this.cache;
  	var data = flatten( v, this.size, 4 );

  	if ( arraysEqual$1( cache, data ) ) return;

  	gl.uniformMatrix2fv( this.addr, false, data );

  	this.updateCache( data );

  }

  function setValueM3a( gl, v ) {

  	var cache = this.cache;
  	var data = flatten( v, this.size, 9 );

  	if ( arraysEqual$1( cache, data ) ) return;

  	gl.uniformMatrix3fv( this.addr, false, data );

  	this.updateCache( data );

  }

  function setValueM4a( gl, v ) {

  	var cache = this.cache;
  	var data = flatten( v, this.size, 16 );

  	if ( arraysEqual$1( cache, data ) ) return;

  	gl.uniformMatrix4fv( this.addr, false, data );

  	this.updateCache( data );

  }

  // Array of textures (2D / Cube)

  function setValueT1a( gl, v, textures ) {

  	var cache = this.cache;
  	var n = v.length;

  	var units = allocTexUnits( textures, n );

  	if ( arraysEqual$1( cache, units ) === false ) {

  		gl.uniform1iv( this.addr, units );
  		copyArray( cache, units );

  	}

  	for ( var i = 0; i !== n; ++ i ) {

  		textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );

  	}

  }

  function setValueT6a( gl, v, textures ) {

  	var cache = this.cache;
  	var n = v.length;

  	var units = allocTexUnits( textures, n );

  	if ( arraysEqual$1( cache, units ) === false ) {

  		gl.uniform1iv( this.addr, units );
  		copyArray( cache, units );

  	}

  	for ( var i = 0; i !== n; ++ i ) {

  		textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

  	}

  }

  // Helper to pick the right setter for a pure (bottom-level) array

  function getPureArraySetter( type ) {

  	switch ( type ) {

  		case 0x1406: return setValue1fv; // FLOAT
  		case 0x8b50: return setValueV2a; // _VEC2
  		case 0x8b51: return setValueV3a; // _VEC3
  		case 0x8b52: return setValueV4a; // _VEC4

  		case 0x8b5a: return setValueM2a; // _MAT2
  		case 0x8b5b: return setValueM3a; // _MAT3
  		case 0x8b5c: return setValueM4a; // _MAT4

  		case 0x8b5e: return setValueT1a; // SAMPLER_2D
  		case 0x8b60: return setValueT6a; // SAMPLER_CUBE

  		case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
  		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
  		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
  		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

  	}

  }

  // --- Uniform Classes ---

  function SingleUniform( id, activeInfo, addr ) {

  	this.id = id;
  	this.addr = addr;
  	this.cache = [];
  	this.setValue = getSingularSetter( activeInfo.type );

  	// this.path = activeInfo.name; // DEBUG

  }

  function PureArrayUniform( id, activeInfo, addr ) {

  	this.id = id;
  	this.addr = addr;
  	this.cache = [];
  	this.size = activeInfo.size;
  	this.setValue = getPureArraySetter( activeInfo.type );

  	// this.path = activeInfo.name; // DEBUG

  }

  PureArrayUniform.prototype.updateCache = function ( data ) {

  	var cache = this.cache;

  	if ( data instanceof Float32Array && cache.length !== data.length ) {

  		this.cache = new Float32Array( data.length );

  	}

  	copyArray( cache, data );

  };

  function StructuredUniform( id ) {

  	this.id = id;

  	this.seq = [];
  	this.map = {};

  }

  StructuredUniform.prototype.setValue = function ( gl, value, textures ) {

  	var seq = this.seq;

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ];
  		u.setValue( gl, value[ u.id ], textures );

  	}

  };

  // --- Top-level ---

  // Parser - builds up the property tree from the path strings

  var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

  // extracts
  // 	- the identifier (member name or array index)
  //  - followed by an optional right bracket (found when array index)
  //  - followed by an optional left bracket or dot (type of subscript)
  //
  // Note: These portions can be read in a non-overlapping fashion and
  // allow straightforward parsing of the hierarchy that WebGL encodes
  // in the uniform names.

  function addUniform( container, uniformObject ) {

  	container.seq.push( uniformObject );
  	container.map[ uniformObject.id ] = uniformObject;

  }

  function parseUniform( activeInfo, addr, container ) {

  	var path = activeInfo.name,
  		pathLength = path.length;

  	// reset RegExp object, because of the early exit of a previous run
  	RePathPart.lastIndex = 0;

  	while ( true ) {

  		var match = RePathPart.exec( path ),
  			matchEnd = RePathPart.lastIndex,

  			id = match[ 1 ],
  			idIsIndex = match[ 2 ] === ']',
  			subscript = match[ 3 ];

  		if ( idIsIndex ) id = id | 0; // convert to integer

  		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

  			// bare name or "pure" bottom-level array "[0]" suffix

  			addUniform( container, subscript === undefined ?
  				new SingleUniform( id, activeInfo, addr ) :
  				new PureArrayUniform( id, activeInfo, addr ) );

  			break;

  		} else {

  			// step into inner node / create it in case it doesn't exist

  			var map = container.map, next = map[ id ];

  			if ( next === undefined ) {

  				next = new StructuredUniform( id );
  				addUniform( container, next );

  			}

  			container = next;

  		}

  	}

  }

  // Root Container

  function WebGLUniforms( gl, program ) {

  	this.seq = [];
  	this.map = {};

  	var n = gl.getProgramParameter( program, 35718 );

  	for ( var i = 0; i < n; ++ i ) {

  		var info = gl.getActiveUniform( program, i ),
  			addr = gl.getUniformLocation( program, info.name );

  		parseUniform( info, addr, this );

  	}

  }

  WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {

  	var u = this.map[ name ];

  	if ( u !== undefined ) u.setValue( gl, value, textures );

  };

  WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

  	var v = object[ name ];

  	if ( v !== undefined ) this.setValue( gl, name, v );

  };


  // Static interface

  WebGLUniforms.upload = function ( gl, seq, values, textures ) {

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ],
  			v = values[ u.id ];

  		if ( v.needsUpdate !== false ) {

  			// note: always updating when .needsUpdate is undefined
  			u.setValue( gl, v.value, textures );

  		}

  	}

  };

  WebGLUniforms.seqWithValue = function ( seq, values ) {

  	var r = [];

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ];
  		if ( u.id in values ) r.push( u );

  	}

  	return r;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function addLineNumbers( string ) {

  	var lines = string.split( '\n' );

  	for ( var i = 0; i < lines.length; i ++ ) {

  		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

  	}

  	return lines.join( '\n' );

  }

  function WebGLShader( gl, type, string, debug ) {

  	var shader = gl.createShader( type );

  	gl.shaderSource( shader, string );
  	gl.compileShader( shader );

  	if ( debug === true ) {

  		if ( gl.getShaderParameter( shader, 35713 ) === false ) {

  			console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

  		}

  		if ( gl.getShaderInfoLog( shader ) !== '' ) {

  			console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === 35633 ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

  		}

  	}

  	// --enable-privileged-webgl-extension
  	// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

  	return shader;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var programIdCount = 0;

  function getEncodingComponents( encoding ) {

  	switch ( encoding ) {

  		case LinearEncoding:
  			return [ 'Linear', '( value )' ];
  		case sRGBEncoding:
  			return [ 'sRGB', '( value )' ];
  		case RGBEEncoding:
  			return [ 'RGBE', '( value )' ];
  		case RGBM7Encoding:
  			return [ 'RGBM', '( value, 7.0 )' ];
  		case RGBM16Encoding:
  			return [ 'RGBM', '( value, 16.0 )' ];
  		case RGBDEncoding:
  			return [ 'RGBD', '( value, 256.0 )' ];
  		case GammaEncoding:
  			return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
  		default:
  			throw new Error( 'unsupported encoding: ' + encoding );

  	}

  }

  function getTexelDecodingFunction( functionName, encoding ) {

  	var components = getEncodingComponents( encoding );
  	return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

  }

  function getTexelEncodingFunction( functionName, encoding ) {

  	var components = getEncodingComponents( encoding );
  	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

  }

  function getToneMappingFunction( functionName, toneMapping ) {

  	var toneMappingName;

  	switch ( toneMapping ) {

  		case LinearToneMapping:
  			toneMappingName = 'Linear';
  			break;

  		case ReinhardToneMapping:
  			toneMappingName = 'Reinhard';
  			break;

  		case Uncharted2ToneMapping:
  			toneMappingName = 'Uncharted2';
  			break;

  		case CineonToneMapping:
  			toneMappingName = 'OptimizedCineon';
  			break;

  		case ACESFilmicToneMapping:
  			toneMappingName = 'ACESFilmic';
  			break;

  		default:
  			throw new Error( 'unsupported toneMapping: ' + toneMapping );

  	}

  	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

  }

  function generateExtensions( extensions, parameters, rendererExtensions ) {

  	extensions = extensions || {};

  	var chunks = [
  		( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || ( parameters.normalMap && ! parameters.objectSpaceNormalMap ) || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
  		( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
  		( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
  		( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
  	];

  	return chunks.filter( filterEmptyLine ).join( '\n' );

  }

  function generateDefines( defines ) {

  	var chunks = [];

  	for ( var name in defines ) {

  		var value = defines[ name ];

  		if ( value === false ) continue;

  		chunks.push( '#define ' + name + ' ' + value );

  	}

  	return chunks.join( '\n' );

  }

  function fetchAttributeLocations( gl, program ) {

  	var attributes = {};

  	var n = gl.getProgramParameter( program, 35721 );

  	for ( var i = 0; i < n; i ++ ) {

  		var info = gl.getActiveAttrib( program, i );
  		var name = info.name;

  		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

  		attributes[ name ] = gl.getAttribLocation( program, name );

  	}

  	return attributes;

  }

  function filterEmptyLine( string ) {

  	return string !== '';

  }

  function replaceLightNums( string, parameters ) {

  	return string
  		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
  		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
  		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
  		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
  		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

  }

  function replaceClippingPlaneNums( string, parameters ) {

  	return string
  		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
  		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

  }

  function parseIncludes( string ) {

  	var pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

  	function replace( match, include ) {

  		var replace = ShaderChunk[ include ];

  		if ( replace === undefined ) {

  			throw new Error( 'Can not resolve #include <' + include + '>' );

  		}

  		return parseIncludes( replace );

  	}

  	return string.replace( pattern, replace );

  }

  function unrollLoops( string ) {

  	var pattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

  	function replace( match, start, end, snippet ) {

  		var unroll = '';

  		for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

  			unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

  		}

  		return unroll;

  	}

  	return string.replace( pattern, replace );

  }

  function WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities, textures ) {

  	var gl = renderer.context;

  	var defines = material.defines;

  	var vertexShader = shader.vertexShader;
  	var fragmentShader = shader.fragmentShader;

  	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

  	if ( parameters.shadowMapType === PCFShadowMap ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

  	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

  	}

  	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
  	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
  	var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

  	if ( parameters.envMap ) {

  		switch ( material.envMap.mapping ) {

  			case CubeReflectionMapping:
  			case CubeRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
  				break;

  			case CubeUVReflectionMapping:
  			case CubeUVRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
  				break;

  			case EquirectangularReflectionMapping:
  			case EquirectangularRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
  				break;

  			case SphericalReflectionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
  				break;

  		}

  		switch ( material.envMap.mapping ) {

  			case CubeRefractionMapping:
  			case EquirectangularRefractionMapping:
  				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
  				break;

  		}

  		switch ( material.combine ) {

  			case MultiplyOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
  				break;

  			case MixOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
  				break;

  			case AddOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
  				break;

  		}

  	}

  	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

  	// console.log( 'building new program ' );

  	//

  	var customExtensions = capabilities.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );

  	var customDefines = generateDefines( defines );

  	//

  	var program = gl.createProgram();

  	var prefixVertex, prefixFragment;

  	if ( material.isRawShaderMaterial ) {

  		prefixVertex = [

  			customDefines

  		].filter( filterEmptyLine ).join( '\n' );

  		if ( prefixVertex.length > 0 ) {

  			prefixVertex += '\n';

  		}

  		prefixFragment = [

  			customExtensions,
  			customDefines

  		].filter( filterEmptyLine ).join( '\n' );

  		if ( prefixFragment.length > 0 ) {

  			prefixFragment += '\n';

  		}

  	} else {

  		prefixVertex = [

  			'precision ' + parameters.precision + ' float;',
  			'precision ' + parameters.precision + ' int;',

  			'#define SHADER_NAME ' + shader.name,

  			customDefines,

  			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

  			'#define GAMMA_FACTOR ' + gammaFactorDefine,

  			'#define MAX_BONES ' + parameters.maxBones,
  			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
  			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

  			parameters.map ? '#define USE_MAP' : '',
  			parameters.envMap ? '#define USE_ENVMAP' : '',
  			parameters.envMap ? '#define ' + envMapModeDefine : '',
  			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
  			parameters.aoMap ? '#define USE_AOMAP' : '',
  			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
  			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
  			parameters.normalMap ? '#define USE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
  			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
  			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
  			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
  			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
  			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

  			parameters.vertexTangents ? '#define USE_TANGENT' : '',
  			parameters.vertexColors ? '#define USE_COLOR' : '',

  			parameters.flatShading ? '#define FLAT_SHADED' : '',

  			parameters.skinning ? '#define USE_SKINNING' : '',
  			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

  			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
  			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
  			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
  			parameters.flipSided ? '#define FLIP_SIDED' : '',

  			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
  			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

  			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

  			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
  			parameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

  			'uniform mat4 modelMatrix;',
  			'uniform mat4 modelViewMatrix;',
  			'uniform mat4 projectionMatrix;',
  			'uniform mat4 viewMatrix;',
  			'uniform mat3 normalMatrix;',
  			'uniform vec3 cameraPosition;',

  			'attribute vec3 position;',
  			'attribute vec3 normal;',
  			'attribute vec2 uv;',

  			'#ifdef USE_TANGENT',

  			'	attribute vec4 tangent;',

  			'#endif',

  			'#ifdef USE_COLOR',

  			'	attribute vec3 color;',

  			'#endif',

  			'#ifdef USE_MORPHTARGETS',

  			'	attribute vec3 morphTarget0;',
  			'	attribute vec3 morphTarget1;',
  			'	attribute vec3 morphTarget2;',
  			'	attribute vec3 morphTarget3;',

  			'	#ifdef USE_MORPHNORMALS',

  			'		attribute vec3 morphNormal0;',
  			'		attribute vec3 morphNormal1;',
  			'		attribute vec3 morphNormal2;',
  			'		attribute vec3 morphNormal3;',

  			'	#else',

  			'		attribute vec3 morphTarget4;',
  			'		attribute vec3 morphTarget5;',
  			'		attribute vec3 morphTarget6;',
  			'		attribute vec3 morphTarget7;',

  			'	#endif',

  			'#endif',

  			'#ifdef USE_SKINNING',

  			'	attribute vec4 skinIndex;',
  			'	attribute vec4 skinWeight;',

  			'#endif',

  			'\n'

  		].filter( filterEmptyLine ).join( '\n' );

  		prefixFragment = [

  			customExtensions,

  			'precision ' + parameters.precision + ' float;',
  			'precision ' + parameters.precision + ' int;',

  			'#define SHADER_NAME ' + shader.name,

  			customDefines,

  			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer

  			'#define GAMMA_FACTOR ' + gammaFactorDefine,

  			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
  			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

  			parameters.map ? '#define USE_MAP' : '',
  			parameters.matcap ? '#define USE_MATCAP' : '',
  			parameters.envMap ? '#define USE_ENVMAP' : '',
  			parameters.envMap ? '#define ' + envMapTypeDefine : '',
  			parameters.envMap ? '#define ' + envMapModeDefine : '',
  			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
  			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
  			parameters.aoMap ? '#define USE_AOMAP' : '',
  			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
  			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
  			parameters.normalMap ? '#define USE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
  			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
  			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
  			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
  			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

  			parameters.vertexTangents ? '#define USE_TANGENT' : '',
  			parameters.vertexColors ? '#define USE_COLOR' : '',

  			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

  			parameters.flatShading ? '#define FLAT_SHADED' : '',

  			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
  			parameters.flipSided ? '#define FLIP_SIDED' : '',

  			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
  			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

  			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

  			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

  			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
  			parameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

  			parameters.envMap && ( capabilities.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',

  			'uniform mat4 viewMatrix;',
  			'uniform vec3 cameraPosition;',

  			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
  			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
  			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

  			parameters.dithering ? '#define DITHERING' : '',

  			( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?
  				ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
  			parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
  			parameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
  			parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
  			parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
  			parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',

  			parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',

  			'\n'

  		].filter( filterEmptyLine ).join( '\n' );

  	}

  	vertexShader = parseIncludes( vertexShader );
  	vertexShader = replaceLightNums( vertexShader, parameters );
  	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

  	fragmentShader = parseIncludes( fragmentShader );
  	fragmentShader = replaceLightNums( fragmentShader, parameters );
  	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

  	vertexShader = unrollLoops( vertexShader );
  	fragmentShader = unrollLoops( fragmentShader );

  	if ( capabilities.isWebGL2 && ! material.isRawShaderMaterial ) {

  		var isGLSL3ShaderMaterial = false;

  		var versionRegex = /^\s*#version\s+300\s+es\s*\n/;

  		if ( material.isShaderMaterial &&
  			vertexShader.match( versionRegex ) !== null &&
  			fragmentShader.match( versionRegex ) !== null ) {

  			isGLSL3ShaderMaterial = true;

  			vertexShader = vertexShader.replace( versionRegex, '' );
  			fragmentShader = fragmentShader.replace( versionRegex, '' );

  		}

  		// GLSL 3.0 conversion
  		prefixVertex = [
  			'#version 300 es\n',
  			'#define attribute in',
  			'#define varying out',
  			'#define texture2D texture'
  		].join( '\n' ) + '\n' + prefixVertex;

  		prefixFragment = [
  			'#version 300 es\n',
  			'#define varying in',
  			isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
  			isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
  			'#define gl_FragDepthEXT gl_FragDepth',
  			'#define texture2D texture',
  			'#define textureCube texture',
  			'#define texture2DProj textureProj',
  			'#define texture2DLodEXT textureLod',
  			'#define texture2DProjLodEXT textureProjLod',
  			'#define textureCubeLodEXT textureLod',
  			'#define texture2DGradEXT textureGrad',
  			'#define texture2DProjGradEXT textureProjGrad',
  			'#define textureCubeGradEXT textureGrad'
  		].join( '\n' ) + '\n' + prefixFragment;

  	}

  	var vertexGlsl = prefixVertex + vertexShader;
  	var fragmentGlsl = prefixFragment + fragmentShader;

  	// console.log( '*VERTEX*', vertexGlsl );
  	// console.log( '*FRAGMENT*', fragmentGlsl );

  	var glVertexShader = WebGLShader( gl, 35633, vertexGlsl, renderer.debug.checkShaderErrors );
  	var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl, renderer.debug.checkShaderErrors );

  	gl.attachShader( program, glVertexShader );
  	gl.attachShader( program, glFragmentShader );

  	// Force a particular attribute to index 0.

  	if ( material.index0AttributeName !== undefined ) {

  		gl.bindAttribLocation( program, 0, material.index0AttributeName );

  	} else if ( parameters.morphTargets === true ) {

  		// programs with morphTargets displace position out of attribute 0
  		gl.bindAttribLocation( program, 0, 'position' );

  	}

  	gl.linkProgram( program );

  	// check for link errors
  	if ( renderer.debug.checkShaderErrors ) {

  		var programLog = gl.getProgramInfoLog( program ).trim();
  		var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
  		var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

  		var runnable = true;
  		var haveDiagnostics = true;

  		// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
  		// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

  		if ( gl.getProgramParameter( program, 35714 ) === false ) {

  			runnable = false;

  			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

  		} else if ( programLog !== '' ) {

  			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

  		} else if ( vertexLog === '' || fragmentLog === '' ) {

  			haveDiagnostics = false;

  		}

  		if ( haveDiagnostics ) {

  			this.diagnostics = {

  				runnable: runnable,
  				material: material,

  				programLog: programLog,

  				vertexShader: {

  					log: vertexLog,
  					prefix: prefixVertex

  				},

  				fragmentShader: {

  					log: fragmentLog,
  					prefix: prefixFragment

  				}

  			};

  		}

  	}

  	// clean up

  	gl.deleteShader( glVertexShader );
  	gl.deleteShader( glFragmentShader );

  	// set up caching for uniform locations

  	var cachedUniforms;

  	this.getUniforms = function () {

  		if ( cachedUniforms === undefined ) {

  			cachedUniforms = new WebGLUniforms( gl, program, textures );

  		}

  		return cachedUniforms;

  	};

  	// set up caching for attribute locations

  	var cachedAttributes;

  	this.getAttributes = function () {

  		if ( cachedAttributes === undefined ) {

  			cachedAttributes = fetchAttributeLocations( gl, program );

  		}

  		return cachedAttributes;

  	};

  	// free resource

  	this.destroy = function () {

  		gl.deleteProgram( program );
  		this.program = undefined;

  	};

  	// DEPRECATED

  	Object.defineProperties( this, {

  		uniforms: {
  			get: function () {

  				console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
  				return this.getUniforms();

  			}
  		},

  		attributes: {
  			get: function () {

  				console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
  				return this.getAttributes();

  			}
  		}

  	} );


  	//

  	this.name = shader.name;
  	this.id = programIdCount ++;
  	this.code = code;
  	this.usedTimes = 1;
  	this.program = program;
  	this.vertexShader = glVertexShader;
  	this.fragmentShader = glFragmentShader;

  	return this;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLPrograms( renderer, extensions, capabilities, textures ) {

  	var programs = [];

  	var shaderIDs = {
  		MeshDepthMaterial: 'depth',
  		MeshDistanceMaterial: 'distanceRGBA',
  		MeshNormalMaterial: 'normal',
  		MeshBasicMaterial: 'basic',
  		MeshLambertMaterial: 'lambert',
  		MeshPhongMaterial: 'phong',
  		MeshToonMaterial: 'phong',
  		MeshStandardMaterial: 'physical',
  		MeshPhysicalMaterial: 'physical',
  		MeshMatcapMaterial: 'matcap',
  		LineBasicMaterial: 'basic',
  		LineDashedMaterial: 'dashed',
  		PointsMaterial: 'points',
  		ShadowMaterial: 'shadow',
  		SpriteMaterial: 'sprite'
  	};

  	var parameterNames = [
  		"precision", "supportsVertexTextures", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding",
  		"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap",
  		"roughnessMap", "metalnessMap", "gradientMap",
  		"alphaMap", "combine", "vertexColors", "vertexTangents", "fog", "useFog", "fogExp",
  		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
  		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
  		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
  		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
  		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
  		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
  	];


  	function allocateBones( object ) {

  		var skeleton = object.skeleton;
  		var bones = skeleton.bones;

  		if ( capabilities.floatVertexTextures ) {

  			return 1024;

  		} else {

  			// default for when object is not specified
  			// ( for example when prebuilding shader to be used with multiple objects )
  			//
  			//  - leave some extra space for other uniforms
  			//  - limit here is ANGLE's 254 max uniform vectors
  			//    (up to 54 should be safe)

  			var nVertexUniforms = capabilities.maxVertexUniforms;
  			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

  			var maxBones = Math.min( nVertexMatrices, bones.length );

  			if ( maxBones < bones.length ) {

  				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
  				return 0;

  			}

  			return maxBones;

  		}

  	}

  	function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

  		var encoding;

  		if ( ! map ) {

  			encoding = LinearEncoding;

  		} else if ( map.isTexture ) {

  			encoding = map.encoding;

  		} else if ( map.isWebGLRenderTarget ) {

  			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
  			encoding = map.texture.encoding;

  		}

  		// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
  		if ( encoding === LinearEncoding && gammaOverrideLinear ) {

  			encoding = GammaEncoding;

  		}

  		return encoding;

  	}

  	this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {

  		var shaderID = shaderIDs[ material.type ];

  		// heuristics to create shader parameters according to lights in the scene
  		// (not to blow over maxLights budget)

  		var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
  		var precision = capabilities.precision;

  		if ( material.precision !== null ) {

  			precision = capabilities.getMaxPrecision( material.precision );

  			if ( precision !== material.precision ) {

  				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

  			}

  		}

  		var currentRenderTarget = renderer.getRenderTarget();

  		var parameters = {

  			shaderID: shaderID,

  			precision: precision,
  			supportsVertexTextures: capabilities.vertexTextures,
  			outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
  			map: !! material.map,
  			mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
  			matcap: !! material.matcap,
  			matcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),
  			envMap: !! material.envMap,
  			envMapMode: material.envMap && material.envMap.mapping,
  			envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
  			envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
  			lightMap: !! material.lightMap,
  			aoMap: !! material.aoMap,
  			emissiveMap: !! material.emissiveMap,
  			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
  			bumpMap: !! material.bumpMap,
  			normalMap: !! material.normalMap,
  			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
  			displacementMap: !! material.displacementMap,
  			roughnessMap: !! material.roughnessMap,
  			metalnessMap: !! material.metalnessMap,
  			specularMap: !! material.specularMap,
  			alphaMap: !! material.alphaMap,

  			gradientMap: !! material.gradientMap,

  			combine: material.combine,

  			vertexTangents: ( material.normalMap && material.vertexTangents ),
  			vertexColors: material.vertexColors,

  			fog: !! fog,
  			useFog: material.fog,
  			fogExp: ( fog && fog.isFogExp2 ),

  			flatShading: material.flatShading,

  			sizeAttenuation: material.sizeAttenuation,
  			logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

  			skinning: material.skinning && maxBones > 0,
  			maxBones: maxBones,
  			useVertexTexture: capabilities.floatVertexTextures,

  			morphTargets: material.morphTargets,
  			morphNormals: material.morphNormals,
  			maxMorphTargets: renderer.maxMorphTargets,
  			maxMorphNormals: renderer.maxMorphNormals,

  			numDirLights: lights.directional.length,
  			numPointLights: lights.point.length,
  			numSpotLights: lights.spot.length,
  			numRectAreaLights: lights.rectArea.length,
  			numHemiLights: lights.hemi.length,

  			numClippingPlanes: nClipPlanes,
  			numClipIntersection: nClipIntersection,

  			dithering: material.dithering,

  			shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
  			shadowMapType: renderer.shadowMap.type,

  			toneMapping: renderer.toneMapping,
  			physicallyCorrectLights: renderer.physicallyCorrectLights,

  			premultipliedAlpha: material.premultipliedAlpha,

  			alphaTest: material.alphaTest,
  			doubleSided: material.side === DoubleSide,
  			flipSided: material.side === BackSide,

  			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

  		};

  		return parameters;

  	};

  	this.getProgramCode = function ( material, parameters ) {

  		var array = [];

  		if ( parameters.shaderID ) {

  			array.push( parameters.shaderID );

  		} else {

  			array.push( material.fragmentShader );
  			array.push( material.vertexShader );

  		}

  		if ( material.defines !== undefined ) {

  			for ( var name in material.defines ) {

  				array.push( name );
  				array.push( material.defines[ name ] );

  			}

  		}

  		for ( var i = 0; i < parameterNames.length; i ++ ) {

  			array.push( parameters[ parameterNames[ i ] ] );

  		}

  		array.push( material.onBeforeCompile.toString() );

  		array.push( renderer.gammaOutput );

  		array.push( renderer.gammaFactor );

  		return array.join();

  	};

  	this.acquireProgram = function ( material, shader, parameters, code ) {

  		var program;

  		// Check if code has been already compiled
  		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

  			var programInfo = programs[ p ];

  			if ( programInfo.code === code ) {

  				program = programInfo;
  				++ program.usedTimes;

  				break;

  			}

  		}

  		if ( program === undefined ) {

  			program = new WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities, textures );
  			programs.push( program );

  		}

  		return program;

  	};

  	this.releaseProgram = function ( program ) {

  		if ( -- program.usedTimes === 0 ) {

  			// Remove from unordered set
  			var i = programs.indexOf( program );
  			programs[ i ] = programs[ programs.length - 1 ];
  			programs.pop();

  			// Free WebGL resources
  			program.destroy();

  		}

  	};

  	// Exposed for resource monitoring & error feedback via renderer.info:
  	this.programs = programs;

  }

  /**
   * @author fordacious / fordacious.github.io
   */

  function WebGLProperties() {

  	var properties = new WeakMap();

  	function get( object ) {

  		var map = properties.get( object );

  		if ( map === undefined ) {

  			map = {};
  			properties.set( object, map );

  		}

  		return map;

  	}

  	function remove( object ) {

  		properties.delete( object );

  	}

  	function update( object, key, value ) {

  		properties.get( object )[ key ] = value;

  	}

  	function dispose() {

  		properties = new WeakMap();

  	}

  	return {
  		get: get,
  		remove: remove,
  		update: update,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function painterSortStable( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.program !== b.program ) {

  		return a.program.id - b.program.id;

  	} else if ( a.material.id !== b.material.id ) {

  		return a.material.id - b.material.id;

  	} else if ( a.z !== b.z ) {

  		return a.z - b.z;

  	} else {

  		return a.id - b.id;

  	}

  }

  function reversePainterSortStable( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.z !== b.z ) {

  		return b.z - a.z;

  	} else {

  		return a.id - b.id;

  	}

  }


  function WebGLRenderList() {

  	var renderItems = [];
  	var renderItemsIndex = 0;

  	var opaque = [];
  	var transparent = [];

  	var defaultProgram = { id: - 1 };

  	function init() {

  		renderItemsIndex = 0;

  		opaque.length = 0;
  		transparent.length = 0;

  	}

  	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = renderItems[ renderItemsIndex ];

  		if ( renderItem === undefined ) {

  			renderItem = {
  				id: object.id,
  				object: object,
  				geometry: geometry,
  				material: material,
  				program: material.program || defaultProgram,
  				groupOrder: groupOrder,
  				renderOrder: object.renderOrder,
  				z: z,
  				group: group
  			};

  			renderItems[ renderItemsIndex ] = renderItem;

  		} else {

  			renderItem.id = object.id;
  			renderItem.object = object;
  			renderItem.geometry = geometry;
  			renderItem.material = material;
  			renderItem.program = material.program || defaultProgram;
  			renderItem.groupOrder = groupOrder;
  			renderItem.renderOrder = object.renderOrder;
  			renderItem.z = z;
  			renderItem.group = group;

  		}

  		renderItemsIndex ++;

  		return renderItem;

  	}

  	function push( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		( material.transparent === true ? transparent : opaque ).push( renderItem );

  	}

  	function unshift( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		( material.transparent === true ? transparent : opaque ).unshift( renderItem );

  	}

  	function sort() {

  		if ( opaque.length > 1 ) opaque.sort( painterSortStable );
  		if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );

  	}

  	return {
  		opaque: opaque,
  		transparent: transparent,

  		init: init,
  		push: push,
  		unshift: unshift,

  		sort: sort
  	};

  }

  function WebGLRenderLists() {

  	var lists = {};

  	function onSceneDispose( event ) {

  		var scene = event.target;

  		scene.removeEventListener( 'dispose', onSceneDispose );

  		delete lists[ scene.id ];

  	}

  	function get( scene, camera ) {

  		var cameras = lists[ scene.id ];
  		var list;
  		if ( cameras === undefined ) {

  			list = new WebGLRenderList();
  			lists[ scene.id ] = {};
  			lists[ scene.id ][ camera.id ] = list;

  			scene.addEventListener( 'dispose', onSceneDispose );

  		} else {

  			list = cameras[ camera.id ];
  			if ( list === undefined ) {

  				list = new WebGLRenderList();
  				cameras[ camera.id ] = list;

  			}

  		}

  		return list;

  	}

  	function dispose() {

  		lists = {};

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function UniformsCache() {

  	var lights = {};

  	return {

  		get: function ( light ) {

  			if ( lights[ light.id ] !== undefined ) {

  				return lights[ light.id ];

  			}

  			var uniforms;

  			switch ( light.type ) {

  				case 'DirectionalLight':
  					uniforms = {
  						direction: new Vector3(),
  						color: new Color(),

  						shadow: false,
  						shadowBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2()
  					};
  					break;

  				case 'SpotLight':
  					uniforms = {
  						position: new Vector3(),
  						direction: new Vector3(),
  						color: new Color(),
  						distance: 0,
  						coneCos: 0,
  						penumbraCos: 0,
  						decay: 0,

  						shadow: false,
  						shadowBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2()
  					};
  					break;

  				case 'PointLight':
  					uniforms = {
  						position: new Vector3(),
  						color: new Color(),
  						distance: 0,
  						decay: 0,

  						shadow: false,
  						shadowBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2(),
  						shadowCameraNear: 1,
  						shadowCameraFar: 1000
  					};
  					break;

  				case 'HemisphereLight':
  					uniforms = {
  						direction: new Vector3(),
  						skyColor: new Color(),
  						groundColor: new Color()
  					};
  					break;

  				case 'RectAreaLight':
  					uniforms = {
  						color: new Color(),
  						position: new Vector3(),
  						halfWidth: new Vector3(),
  						halfHeight: new Vector3()
  						// TODO (abelnation): set RectAreaLight shadow uniforms
  					};
  					break;

  			}

  			lights[ light.id ] = uniforms;

  			return uniforms;

  		}

  	};

  }

  var count = 0;

  function WebGLLights() {

  	var cache = new UniformsCache();

  	var state = {

  		id: count ++,

  		hash: {
  			stateID: - 1,
  			directionalLength: - 1,
  			pointLength: - 1,
  			spotLength: - 1,
  			rectAreaLength: - 1,
  			hemiLength: - 1,
  			shadowsLength: - 1
  		},

  		ambient: [ 0, 0, 0 ],
  		probe: [],
  		directional: [],
  		directionalShadowMap: [],
  		directionalShadowMatrix: [],
  		spot: [],
  		spotShadowMap: [],
  		spotShadowMatrix: [],
  		rectArea: [],
  		point: [],
  		pointShadowMap: [],
  		pointShadowMatrix: [],
  		hemi: []

  	};

  	for ( var i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

  	var vector3 = new Vector3();
  	var matrix4 = new Matrix4();
  	var matrix42 = new Matrix4();

  	function setup( lights, shadows, camera ) {

  		var r = 0, g = 0, b = 0;

  		for ( var i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

  		var directionalLength = 0;
  		var pointLength = 0;
  		var spotLength = 0;
  		var rectAreaLength = 0;
  		var hemiLength = 0;

  		var viewMatrix = camera.matrixWorldInverse;

  		for ( var i = 0, l = lights.length; i < l; i ++ ) {

  			var light = lights[ i ];

  			var color = light.color;
  			var intensity = light.intensity;
  			var distance = light.distance;

  			var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

  			if ( light.isAmbientLight ) {

  				r += color.r * intensity;
  				g += color.g * intensity;
  				b += color.b * intensity;

  			} else if ( light.isLightProbe ) {

  				for ( var j = 0; j < 9; j ++ ) {

  					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

  				}

  			} else if ( light.isDirectionalLight ) {

  				var uniforms = cache.get( light );

  				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				vector3.setFromMatrixPosition( light.target.matrixWorld );
  				uniforms.direction.sub( vector3 );
  				uniforms.direction.transformDirection( viewMatrix );

  				uniforms.shadow = light.castShadow;

  				if ( light.castShadow ) {

  					var shadow = light.shadow;

  					uniforms.shadowBias = shadow.bias;
  					uniforms.shadowRadius = shadow.radius;
  					uniforms.shadowMapSize = shadow.mapSize;

  				}

  				state.directionalShadowMap[ directionalLength ] = shadowMap;
  				state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
  				state.directional[ directionalLength ] = uniforms;

  				directionalLength ++;

  			} else if ( light.isSpotLight ) {

  				var uniforms = cache.get( light );

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				uniforms.color.copy( color ).multiplyScalar( intensity );
  				uniforms.distance = distance;

  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				vector3.setFromMatrixPosition( light.target.matrixWorld );
  				uniforms.direction.sub( vector3 );
  				uniforms.direction.transformDirection( viewMatrix );

  				uniforms.coneCos = Math.cos( light.angle );
  				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
  				uniforms.decay = light.decay;

  				uniforms.shadow = light.castShadow;

  				if ( light.castShadow ) {

  					var shadow = light.shadow;

  					uniforms.shadowBias = shadow.bias;
  					uniforms.shadowRadius = shadow.radius;
  					uniforms.shadowMapSize = shadow.mapSize;

  				}

  				state.spotShadowMap[ spotLength ] = shadowMap;
  				state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
  				state.spot[ spotLength ] = uniforms;

  				spotLength ++;

  			} else if ( light.isRectAreaLight ) {

  				var uniforms = cache.get( light );

  				// (a) intensity is the total visible light emitted
  				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

  				// (b) intensity is the brightness of the light
  				uniforms.color.copy( color ).multiplyScalar( intensity );

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				// extract local rotation of light to derive width/height half vectors
  				matrix42.identity();
  				matrix4.copy( light.matrixWorld );
  				matrix4.premultiply( viewMatrix );
  				matrix42.extractRotation( matrix4 );

  				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
  				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

  				uniforms.halfWidth.applyMatrix4( matrix42 );
  				uniforms.halfHeight.applyMatrix4( matrix42 );

  				// TODO (abelnation): RectAreaLight distance?
  				// uniforms.distance = distance;

  				state.rectArea[ rectAreaLength ] = uniforms;

  				rectAreaLength ++;

  			} else if ( light.isPointLight ) {

  				var uniforms = cache.get( light );

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
  				uniforms.distance = light.distance;
  				uniforms.decay = light.decay;

  				uniforms.shadow = light.castShadow;

  				if ( light.castShadow ) {

  					var shadow = light.shadow;

  					uniforms.shadowBias = shadow.bias;
  					uniforms.shadowRadius = shadow.radius;
  					uniforms.shadowMapSize = shadow.mapSize;
  					uniforms.shadowCameraNear = shadow.camera.near;
  					uniforms.shadowCameraFar = shadow.camera.far;

  				}

  				state.pointShadowMap[ pointLength ] = shadowMap;
  				state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
  				state.point[ pointLength ] = uniforms;

  				pointLength ++;

  			} else if ( light.isHemisphereLight ) {

  				var uniforms = cache.get( light );

  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				uniforms.direction.transformDirection( viewMatrix );
  				uniforms.direction.normalize();

  				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
  				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

  				state.hemi[ hemiLength ] = uniforms;

  				hemiLength ++;

  			}

  		}

  		state.ambient[ 0 ] = r;
  		state.ambient[ 1 ] = g;
  		state.ambient[ 2 ] = b;

  		state.directional.length = directionalLength;
  		state.spot.length = spotLength;
  		state.rectArea.length = rectAreaLength;
  		state.point.length = pointLength;
  		state.hemi.length = hemiLength;

  		state.hash.stateID = state.id;
  		state.hash.directionalLength = directionalLength;
  		state.hash.pointLength = pointLength;
  		state.hash.spotLength = spotLength;
  		state.hash.rectAreaLength = rectAreaLength;
  		state.hash.hemiLength = hemiLength;
  		state.hash.shadowsLength = shadows.length;

  	}

  	return {
  		setup: setup,
  		state: state
  	};

  }

  /**
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WebGLRenderState() {

  	var lights = new WebGLLights();

  	var lightsArray = [];
  	var shadowsArray = [];

  	function init() {

  		lightsArray.length = 0;
  		shadowsArray.length = 0;

  	}

  	function pushLight( light ) {

  		lightsArray.push( light );

  	}

  	function pushShadow( shadowLight ) {

  		shadowsArray.push( shadowLight );

  	}

  	function setupLights( camera ) {

  		lights.setup( lightsArray, shadowsArray, camera );

  	}

  	var state = {
  		lightsArray: lightsArray,
  		shadowsArray: shadowsArray,

  		lights: lights
  	};

  	return {
  		init: init,
  		state: state,
  		setupLights: setupLights,

  		pushLight: pushLight,
  		pushShadow: pushShadow
  	};

  }

  function WebGLRenderStates() {

  	var renderStates = {};

  	function onSceneDispose( event ) {

  		var scene = event.target;

  		scene.removeEventListener( 'dispose', onSceneDispose );

  		delete renderStates[ scene.id ];

  	}

  	function get( scene, camera ) {

  		var renderState;

  		if ( renderStates[ scene.id ] === undefined ) {

  			renderState = new WebGLRenderState();
  			renderStates[ scene.id ] = {};
  			renderStates[ scene.id ][ camera.id ] = renderState;

  			scene.addEventListener( 'dispose', onSceneDispose );

  		} else {

  			if ( renderStates[ scene.id ][ camera.id ] === undefined ) {

  				renderState = new WebGLRenderState();
  				renderStates[ scene.id ][ camera.id ] = renderState;

  			} else {

  				renderState = renderStates[ scene.id ][ camera.id ];

  			}

  		}

  		return renderState;

  	}

  	function dispose() {

  		renderStates = {};

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author bhouston / https://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>
   * }
   */

  function MeshDepthMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshDepthMaterial';

  	this.depthPacking = BasicDepthPacking;

  	this.skinning = false;
  	this.morphTargets = false;

  	this.map = null;

  	this.alphaMap = null;

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false;
  	this.lights = false;

  	this.setValues( parameters );

  }

  MeshDepthMaterial.prototype = Object.create( Material.prototype );
  MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

  MeshDepthMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.depthPacking = source.depthPacking;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *
   *  referencePosition: <float>,
   *  nearDistance: <float>,
   *  farDistance: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>
   *
   * }
   */

  function MeshDistanceMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshDistanceMaterial';

  	this.referencePosition = new Vector3();
  	this.nearDistance = 1;
  	this.farDistance = 1000;

  	this.skinning = false;
  	this.morphTargets = false;

  	this.map = null;

  	this.alphaMap = null;

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.fog = false;
  	this.lights = false;

  	this.setValues( parameters );

  }

  MeshDistanceMaterial.prototype = Object.create( Material.prototype );
  MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

  MeshDistanceMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.referencePosition.copy( source.referencePosition );
  	this.nearDistance = source.nearDistance;
  	this.farDistance = source.farDistance;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

  	var _frustum = new Frustum(),
  		_projScreenMatrix = new Matrix4(),

  		_shadowMapSize = new Vector2(),
  		_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),

  		_lookTarget = new Vector3(),
  		_lightPositionWorld = new Vector3(),

  		_MorphingFlag = 1,
  		_SkinningFlag = 2,

  		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

  		_depthMaterials = new Array( _NumberOfMaterialVariants ),
  		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

  		_materialCache = {};

  	var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

  	var cubeDirections = [
  		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
  		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
  	];

  	var cubeUps = [
  		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
  		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
  	];

  	var cube2DViewPorts = [
  		new Vector4(), new Vector4(), new Vector4(),
  		new Vector4(), new Vector4(), new Vector4()
  	];

  	// init

  	for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

  		var useMorphing = ( i & _MorphingFlag ) !== 0;
  		var useSkinning = ( i & _SkinningFlag ) !== 0;

  		var depthMaterial = new MeshDepthMaterial( {

  			depthPacking: RGBADepthPacking,

  			morphTargets: useMorphing,
  			skinning: useSkinning

  		} );

  		_depthMaterials[ i ] = depthMaterial;

  		//

  		var distanceMaterial = new MeshDistanceMaterial( {

  			morphTargets: useMorphing,
  			skinning: useSkinning

  		} );

  		_distanceMaterials[ i ] = distanceMaterial;

  	}

  	//

  	var scope = this;

  	this.enabled = false;

  	this.autoUpdate = true;
  	this.needsUpdate = false;

  	this.type = PCFShadowMap;

  	this.render = function ( lights, scene, camera ) {

  		if ( scope.enabled === false ) return;
  		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

  		if ( lights.length === 0 ) return;

  		var currentRenderTarget = _renderer.getRenderTarget();

  		var _state = _renderer.state;

  		// Set GL state for depth map.
  		_state.setBlending( NoBlending );
  		_state.buffers.color.setClear( 1, 1, 1, 1 );
  		_state.buffers.depth.setTest( true );
  		_state.setScissorTest( false );

  		// render depth map

  		var faceCount;

  		for ( var i = 0, il = lights.length; i < il; i ++ ) {

  			var light = lights[ i ];
  			var shadow = light.shadow;
  			var isPointLight = light && light.isPointLight;

  			if ( shadow === undefined ) {

  				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
  				continue;

  			}

  			var shadowCamera = shadow.camera;

  			_shadowMapSize.copy( shadow.mapSize );
  			_shadowMapSize.min( _maxShadowMapSize );

  			if ( isPointLight ) {

  				var vpWidth = _shadowMapSize.x;
  				var vpHeight = _shadowMapSize.y;

  				// These viewports map a cube-map onto a 2D texture with the
  				// following orientation:
  				//
  				//  xzXZ
  				//   y Y
  				//
  				// X - Positive x direction
  				// x - Negative x direction
  				// Y - Positive y direction
  				// y - Negative y direction
  				// Z - Positive z direction
  				// z - Negative z direction

  				// positive X
  				cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
  				// negative X
  				cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
  				// positive Z
  				cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
  				// negative Z
  				cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
  				// positive Y
  				cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
  				// negative Y
  				cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

  				_shadowMapSize.x *= 4.0;
  				_shadowMapSize.y *= 2.0;

  			}

  			if ( shadow.map === null ) {

  				var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

  				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
  				shadow.map.texture.name = light.name + ".shadowMap";

  				shadowCamera.updateProjectionMatrix();

  			}

  			if ( shadow.isSpotLightShadow ) {

  				shadow.update( light );

  			}

  			var shadowMap = shadow.map;
  			var shadowMatrix = shadow.matrix;

  			_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
  			shadowCamera.position.copy( _lightPositionWorld );

  			if ( isPointLight ) {

  				faceCount = 6;

  				// for point lights we set the shadow matrix to be a translation-only matrix
  				// equal to inverse of the light's position

  				shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

  			} else {

  				faceCount = 1;

  				_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
  				shadowCamera.lookAt( _lookTarget );
  				shadowCamera.updateMatrixWorld();

  				// compute shadow matrix

  				shadowMatrix.set(
  					0.5, 0.0, 0.0, 0.5,
  					0.0, 0.5, 0.0, 0.5,
  					0.0, 0.0, 0.5, 0.5,
  					0.0, 0.0, 0.0, 1.0
  				);

  				shadowMatrix.multiply( shadowCamera.projectionMatrix );
  				shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

  			}

  			_renderer.setRenderTarget( shadowMap );
  			_renderer.clear();

  			// render shadow map for each cube face (if omni-directional) or
  			// run a single pass if not

  			for ( var face = 0; face < faceCount; face ++ ) {

  				if ( isPointLight ) {

  					_lookTarget.copy( shadowCamera.position );
  					_lookTarget.add( cubeDirections[ face ] );
  					shadowCamera.up.copy( cubeUps[ face ] );
  					shadowCamera.lookAt( _lookTarget );
  					shadowCamera.updateMatrixWorld();

  					var vpDimensions = cube2DViewPorts[ face ];
  					_state.viewport( vpDimensions );

  				}

  				// update camera matrices and frustum

  				_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
  				_frustum.setFromMatrix( _projScreenMatrix );

  				// set object matrices & frustum culling

  				renderObject( scene, camera, shadowCamera, isPointLight );

  			}

  		}

  		scope.needsUpdate = false;

  		_renderer.setRenderTarget( currentRenderTarget );

  	};

  	function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {

  		var geometry = object.geometry;

  		var result = null;

  		var materialVariants = _depthMaterials;
  		var customMaterial = object.customDepthMaterial;

  		if ( isPointLight ) {

  			materialVariants = _distanceMaterials;
  			customMaterial = object.customDistanceMaterial;

  		}

  		if ( ! customMaterial ) {

  			var useMorphing = false;

  			if ( material.morphTargets ) {

  				if ( geometry && geometry.isBufferGeometry ) {

  					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

  				} else if ( geometry && geometry.isGeometry ) {

  					useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

  				}

  			}

  			if ( object.isSkinnedMesh && material.skinning === false ) {

  				console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

  			}

  			var useSkinning = object.isSkinnedMesh && material.skinning;

  			var variantIndex = 0;

  			if ( useMorphing ) variantIndex |= _MorphingFlag;
  			if ( useSkinning ) variantIndex |= _SkinningFlag;

  			result = materialVariants[ variantIndex ];

  		} else {

  			result = customMaterial;

  		}

  		if ( _renderer.localClippingEnabled &&
  				material.clipShadows === true &&
  				material.clippingPlanes.length !== 0 ) {

  			// in this case we need a unique material instance reflecting the
  			// appropriate state

  			var keyA = result.uuid, keyB = material.uuid;

  			var materialsForVariant = _materialCache[ keyA ];

  			if ( materialsForVariant === undefined ) {

  				materialsForVariant = {};
  				_materialCache[ keyA ] = materialsForVariant;

  			}

  			var cachedMaterial = materialsForVariant[ keyB ];

  			if ( cachedMaterial === undefined ) {

  				cachedMaterial = result.clone();
  				materialsForVariant[ keyB ] = cachedMaterial;

  			}

  			result = cachedMaterial;

  		}

  		result.visible = material.visible;
  		result.wireframe = material.wireframe;

  		result.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];

  		result.clipShadows = material.clipShadows;
  		result.clippingPlanes = material.clippingPlanes;
  		result.clipIntersection = material.clipIntersection;

  		result.wireframeLinewidth = material.wireframeLinewidth;
  		result.linewidth = material.linewidth;

  		if ( isPointLight && result.isMeshDistanceMaterial ) {

  			result.referencePosition.copy( lightPositionWorld );
  			result.nearDistance = shadowCameraNear;
  			result.farDistance = shadowCameraFar;

  		}

  		return result;

  	}

  	function renderObject( object, camera, shadowCamera, isPointLight ) {

  		if ( object.visible === false ) return;

  		var visible = object.layers.test( camera.layers );

  		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

  			if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

  				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

  				var geometry = _objects.update( object );
  				var material = object.material;

  				if ( Array.isArray( material ) ) {

  					var groups = geometry.groups;

  					for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

  						var group = groups[ k ];
  						var groupMaterial = material[ group.materialIndex ];

  						if ( groupMaterial && groupMaterial.visible ) {

  							var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
  							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

  						}

  					}

  				} else if ( material.visible ) {

  					var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
  					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

  				}

  			}

  		}

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			renderObject( children[ i ], camera, shadowCamera, isPointLight );

  		}

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLState( gl, extensions, utils, capabilities ) {

  	function ColorBuffer() {

  		var locked = false;

  		var color = new Vector4();
  		var currentColorMask = null;
  		var currentColorClear = new Vector4( 0, 0, 0, 0 );

  		return {

  			setMask: function ( colorMask ) {

  				if ( currentColorMask !== colorMask && ! locked ) {

  					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
  					currentColorMask = colorMask;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( r, g, b, a, premultipliedAlpha ) {

  				if ( premultipliedAlpha === true ) {

  					r *= a; g *= a; b *= a;

  				}

  				color.set( r, g, b, a );

  				if ( currentColorClear.equals( color ) === false ) {

  					gl.clearColor( r, g, b, a );
  					currentColorClear.copy( color );

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentColorMask = null;
  				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

  			}

  		};

  	}

  	function DepthBuffer() {

  		var locked = false;

  		var currentDepthMask = null;
  		var currentDepthFunc = null;
  		var currentDepthClear = null;

  		return {

  			setTest: function ( depthTest ) {

  				if ( depthTest ) {

  					enable( 2929 );

  				} else {

  					disable( 2929 );

  				}

  			},

  			setMask: function ( depthMask ) {

  				if ( currentDepthMask !== depthMask && ! locked ) {

  					gl.depthMask( depthMask );
  					currentDepthMask = depthMask;

  				}

  			},

  			setFunc: function ( depthFunc ) {

  				if ( currentDepthFunc !== depthFunc ) {

  					if ( depthFunc ) {

  						switch ( depthFunc ) {

  							case NeverDepth:

  								gl.depthFunc( 512 );
  								break;

  							case AlwaysDepth:

  								gl.depthFunc( 519 );
  								break;

  							case LessDepth:

  								gl.depthFunc( 513 );
  								break;

  							case LessEqualDepth:

  								gl.depthFunc( 515 );
  								break;

  							case EqualDepth:

  								gl.depthFunc( 514 );
  								break;

  							case GreaterEqualDepth:

  								gl.depthFunc( 518 );
  								break;

  							case GreaterDepth:

  								gl.depthFunc( 516 );
  								break;

  							case NotEqualDepth:

  								gl.depthFunc( 517 );
  								break;

  							default:

  								gl.depthFunc( 515 );

  						}

  					} else {

  						gl.depthFunc( 515 );

  					}

  					currentDepthFunc = depthFunc;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( depth ) {

  				if ( currentDepthClear !== depth ) {

  					gl.clearDepth( depth );
  					currentDepthClear = depth;

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentDepthMask = null;
  				currentDepthFunc = null;
  				currentDepthClear = null;

  			}

  		};

  	}

  	function StencilBuffer() {

  		var locked = false;

  		var currentStencilMask = null;
  		var currentStencilFunc = null;
  		var currentStencilRef = null;
  		var currentStencilFuncMask = null;
  		var currentStencilFail = null;
  		var currentStencilZFail = null;
  		var currentStencilZPass = null;
  		var currentStencilClear = null;

  		return {

  			setTest: function ( stencilTest ) {

  				if ( stencilTest ) {

  					enable( 2960 );

  				} else {

  					disable( 2960 );

  				}

  			},

  			setMask: function ( stencilMask ) {

  				if ( currentStencilMask !== stencilMask && ! locked ) {

  					gl.stencilMask( stencilMask );
  					currentStencilMask = stencilMask;

  				}

  			},

  			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

  				if ( currentStencilFunc !== stencilFunc ||
  				     currentStencilRef 	!== stencilRef 	||
  				     currentStencilFuncMask !== stencilMask ) {

  					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

  					currentStencilFunc = stencilFunc;
  					currentStencilRef = stencilRef;
  					currentStencilFuncMask = stencilMask;

  				}

  			},

  			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

  				if ( currentStencilFail	 !== stencilFail 	||
  				     currentStencilZFail !== stencilZFail ||
  				     currentStencilZPass !== stencilZPass ) {

  					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

  					currentStencilFail = stencilFail;
  					currentStencilZFail = stencilZFail;
  					currentStencilZPass = stencilZPass;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( stencil ) {

  				if ( currentStencilClear !== stencil ) {

  					gl.clearStencil( stencil );
  					currentStencilClear = stencil;

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentStencilMask = null;
  				currentStencilFunc = null;
  				currentStencilRef = null;
  				currentStencilFuncMask = null;
  				currentStencilFail = null;
  				currentStencilZFail = null;
  				currentStencilZPass = null;
  				currentStencilClear = null;

  			}

  		};

  	}

  	//

  	var colorBuffer = new ColorBuffer();
  	var depthBuffer = new DepthBuffer();
  	var stencilBuffer = new StencilBuffer();

  	var maxVertexAttributes = gl.getParameter( 34921 );
  	var newAttributes = new Uint8Array( maxVertexAttributes );
  	var enabledAttributes = new Uint8Array( maxVertexAttributes );
  	var attributeDivisors = new Uint8Array( maxVertexAttributes );

  	var enabledCapabilities = {};

  	var compressedTextureFormats = null;

  	var currentProgram = null;

  	var currentBlendingEnabled = null;
  	var currentBlending = null;
  	var currentBlendEquation = null;
  	var currentBlendSrc = null;
  	var currentBlendDst = null;
  	var currentBlendEquationAlpha = null;
  	var currentBlendSrcAlpha = null;
  	var currentBlendDstAlpha = null;
  	var currentPremultipledAlpha = false;

  	var currentFlipSided = null;
  	var currentCullFace = null;

  	var currentLineWidth = null;

  	var currentPolygonOffsetFactor = null;
  	var currentPolygonOffsetUnits = null;

  	var maxTextures = gl.getParameter( 35661 );

  	var lineWidthAvailable = false;
  	var version = 0;
  	var glVersion = gl.getParameter( 7938 );

  	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

  		version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
  		lineWidthAvailable = ( version >= 1.0 );

  	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

  		version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
  		lineWidthAvailable = ( version >= 2.0 );

  	}

  	var currentTextureSlot = null;
  	var currentBoundTextures = {};

  	var currentScissor = new Vector4();
  	var currentViewport = new Vector4();

  	function createTexture( type, target, count ) {

  		var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
  		var texture = gl.createTexture();

  		gl.bindTexture( type, texture );
  		gl.texParameteri( type, 10241, 9728 );
  		gl.texParameteri( type, 10240, 9728 );

  		for ( var i = 0; i < count; i ++ ) {

  			gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );

  		}

  		return texture;

  	}

  	var emptyTextures = {};
  	emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
  	emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );

  	// init

  	colorBuffer.setClear( 0, 0, 0, 1 );
  	depthBuffer.setClear( 1 );
  	stencilBuffer.setClear( 0 );

  	enable( 2929 );
  	depthBuffer.setFunc( LessEqualDepth );

  	setFlipSided( false );
  	setCullFace( CullFaceBack );
  	enable( 2884 );

  	setBlending( NoBlending );

  	//

  	function initAttributes() {

  		for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

  			newAttributes[ i ] = 0;

  		}

  	}

  	function enableAttribute( attribute ) {

  		enableAttributeAndDivisor( attribute, 0 );

  	}

  	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

  		newAttributes[ attribute ] = 1;

  		if ( enabledAttributes[ attribute ] === 0 ) {

  			gl.enableVertexAttribArray( attribute );
  			enabledAttributes[ attribute ] = 1;

  		}

  		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

  			var extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

  			extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
  			attributeDivisors[ attribute ] = meshPerAttribute;

  		}

  	}

  	function disableUnusedAttributes() {

  		for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

  			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

  				gl.disableVertexAttribArray( i );
  				enabledAttributes[ i ] = 0;

  			}

  		}

  	}

  	function enable( id ) {

  		if ( enabledCapabilities[ id ] !== true ) {

  			gl.enable( id );
  			enabledCapabilities[ id ] = true;

  		}

  	}

  	function disable( id ) {

  		if ( enabledCapabilities[ id ] !== false ) {

  			gl.disable( id );
  			enabledCapabilities[ id ] = false;

  		}

  	}

  	function getCompressedTextureFormats() {

  		if ( compressedTextureFormats === null ) {

  			compressedTextureFormats = [];

  			if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
  			     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
  			     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||
  			     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {

  				var formats = gl.getParameter( 34467 );

  				for ( var i = 0; i < formats.length; i ++ ) {

  					compressedTextureFormats.push( formats[ i ] );

  				}

  			}

  		}

  		return compressedTextureFormats;

  	}

  	function useProgram( program ) {

  		if ( currentProgram !== program ) {

  			gl.useProgram( program );

  			currentProgram = program;

  			return true;

  		}

  		return false;

  	}

  	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

  		if ( blending === NoBlending ) {

  			if ( currentBlendingEnabled ) {

  				disable( 3042 );
  				currentBlendingEnabled = false;

  			}

  			return;

  		}

  		if ( ! currentBlendingEnabled ) {

  			enable( 3042 );
  			currentBlendingEnabled = true;

  		}

  		if ( blending !== CustomBlending ) {

  			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

  				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

  					gl.blendEquation( 32774 );

  					currentBlendEquation = AddEquation;
  					currentBlendEquationAlpha = AddEquation;

  				}

  				if ( premultipliedAlpha ) {

  					switch ( blending ) {

  						case NormalBlending:
  							gl.blendFuncSeparate( 1, 771, 1, 771 );
  							break;

  						case AdditiveBlending:
  							gl.blendFunc( 1, 1 );
  							break;

  						case SubtractiveBlending:
  							gl.blendFuncSeparate( 0, 0, 769, 771 );
  							break;

  						case MultiplyBlending:
  							gl.blendFuncSeparate( 0, 768, 0, 770 );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				} else {

  					switch ( blending ) {

  						case NormalBlending:
  							gl.blendFuncSeparate( 770, 771, 1, 771 );
  							break;

  						case AdditiveBlending:
  							gl.blendFunc( 770, 1 );
  							break;

  						case SubtractiveBlending:
  							gl.blendFunc( 0, 769 );
  							break;

  						case MultiplyBlending:
  							gl.blendFunc( 0, 768 );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				}

  				currentBlendSrc = null;
  				currentBlendDst = null;
  				currentBlendSrcAlpha = null;
  				currentBlendDstAlpha = null;

  				currentBlending = blending;
  				currentPremultipledAlpha = premultipliedAlpha;

  			}

  			return;

  		}

  		// custom blending

  		blendEquationAlpha = blendEquationAlpha || blendEquation;
  		blendSrcAlpha = blendSrcAlpha || blendSrc;
  		blendDstAlpha = blendDstAlpha || blendDst;

  		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

  			gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );

  			currentBlendEquation = blendEquation;
  			currentBlendEquationAlpha = blendEquationAlpha;

  		}

  		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

  			gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );

  			currentBlendSrc = blendSrc;
  			currentBlendDst = blendDst;
  			currentBlendSrcAlpha = blendSrcAlpha;
  			currentBlendDstAlpha = blendDstAlpha;

  		}

  		currentBlending = blending;
  		currentPremultipledAlpha = null;

  	}

  	function setMaterial( material, frontFaceCW ) {

  		material.side === DoubleSide
  			? disable( 2884 )
  			: enable( 2884 );

  		var flipSided = ( material.side === BackSide );
  		if ( frontFaceCW ) flipSided = ! flipSided;

  		setFlipSided( flipSided );

  		( material.blending === NormalBlending && material.transparent === false )
  			? setBlending( NoBlending )
  			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

  		depthBuffer.setFunc( material.depthFunc );
  		depthBuffer.setTest( material.depthTest );
  		depthBuffer.setMask( material.depthWrite );
  		colorBuffer.setMask( material.colorWrite );

  		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

  	}

  	//

  	function setFlipSided( flipSided ) {

  		if ( currentFlipSided !== flipSided ) {

  			if ( flipSided ) {

  				gl.frontFace( 2304 );

  			} else {

  				gl.frontFace( 2305 );

  			}

  			currentFlipSided = flipSided;

  		}

  	}

  	function setCullFace( cullFace ) {

  		if ( cullFace !== CullFaceNone ) {

  			enable( 2884 );

  			if ( cullFace !== currentCullFace ) {

  				if ( cullFace === CullFaceBack ) {

  					gl.cullFace( 1029 );

  				} else if ( cullFace === CullFaceFront ) {

  					gl.cullFace( 1028 );

  				} else {

  					gl.cullFace( 1032 );

  				}

  			}

  		} else {

  			disable( 2884 );

  		}

  		currentCullFace = cullFace;

  	}

  	function setLineWidth( width ) {

  		if ( width !== currentLineWidth ) {

  			if ( lineWidthAvailable ) gl.lineWidth( width );

  			currentLineWidth = width;

  		}

  	}

  	function setPolygonOffset( polygonOffset, factor, units ) {

  		if ( polygonOffset ) {

  			enable( 32823 );

  			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

  				gl.polygonOffset( factor, units );

  				currentPolygonOffsetFactor = factor;
  				currentPolygonOffsetUnits = units;

  			}

  		} else {

  			disable( 32823 );

  		}

  	}

  	function setScissorTest( scissorTest ) {

  		if ( scissorTest ) {

  			enable( 3089 );

  		} else {

  			disable( 3089 );

  		}

  	}

  	// texture

  	function activeTexture( webglSlot ) {

  		if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;

  		if ( currentTextureSlot !== webglSlot ) {

  			gl.activeTexture( webglSlot );
  			currentTextureSlot = webglSlot;

  		}

  	}

  	function bindTexture( webglType, webglTexture ) {

  		if ( currentTextureSlot === null ) {

  			activeTexture();

  		}

  		var boundTexture = currentBoundTextures[ currentTextureSlot ];

  		if ( boundTexture === undefined ) {

  			boundTexture = { type: undefined, texture: undefined };
  			currentBoundTextures[ currentTextureSlot ] = boundTexture;

  		}

  		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

  			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

  			boundTexture.type = webglType;
  			boundTexture.texture = webglTexture;

  		}

  	}

  	function compressedTexImage2D() {

  		try {

  			gl.compressedTexImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texImage2D() {

  		try {

  			gl.texImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texImage3D() {

  		try {

  			gl.texImage3D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	//

  	function scissor( scissor ) {

  		if ( currentScissor.equals( scissor ) === false ) {

  			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
  			currentScissor.copy( scissor );

  		}

  	}

  	function viewport( viewport ) {

  		if ( currentViewport.equals( viewport ) === false ) {

  			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
  			currentViewport.copy( viewport );

  		}

  	}

  	//

  	function reset() {

  		for ( var i = 0; i < enabledAttributes.length; i ++ ) {

  			if ( enabledAttributes[ i ] === 1 ) {

  				gl.disableVertexAttribArray( i );
  				enabledAttributes[ i ] = 0;

  			}

  		}

  		enabledCapabilities = {};

  		compressedTextureFormats = null;

  		currentTextureSlot = null;
  		currentBoundTextures = {};

  		currentProgram = null;

  		currentBlending = null;

  		currentFlipSided = null;
  		currentCullFace = null;

  		colorBuffer.reset();
  		depthBuffer.reset();
  		stencilBuffer.reset();

  	}

  	return {

  		buffers: {
  			color: colorBuffer,
  			depth: depthBuffer,
  			stencil: stencilBuffer
  		},

  		initAttributes: initAttributes,
  		enableAttribute: enableAttribute,
  		enableAttributeAndDivisor: enableAttributeAndDivisor,
  		disableUnusedAttributes: disableUnusedAttributes,
  		enable: enable,
  		disable: disable,
  		getCompressedTextureFormats: getCompressedTextureFormats,

  		useProgram: useProgram,

  		setBlending: setBlending,
  		setMaterial: setMaterial,

  		setFlipSided: setFlipSided,
  		setCullFace: setCullFace,

  		setLineWidth: setLineWidth,
  		setPolygonOffset: setPolygonOffset,

  		setScissorTest: setScissorTest,

  		activeTexture: activeTexture,
  		bindTexture: bindTexture,
  		compressedTexImage2D: compressedTexImage2D,
  		texImage2D: texImage2D,
  		texImage3D: texImage3D,

  		scissor: scissor,
  		viewport: viewport,

  		reset: reset

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

  	var _videoTextures = {};
  	var _canvas;

  	//

  	var useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';

  	function createCanvas( width, height ) {

  		// Use OffscreenCanvas when available. Specially needed in web workers

  		return useOffscreenCanvas ?
  			new OffscreenCanvas( width, height ) :
  			document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

  	}

  	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

  		var scale = 1;

  		// handle case if texture exceeds max size

  		if ( image.width > maxSize || image.height > maxSize ) {

  			scale = maxSize / Math.max( image.width, image.height );

  		}

  		// only perform resize if necessary

  		if ( scale < 1 || needsPowerOfTwo === true ) {

  			// only perform resize for certain image types

  			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
  				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
  				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

  				var floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;

  				var width = floor( scale * image.width );
  				var height = floor( scale * image.height );

  				if ( _canvas === undefined ) _canvas = createCanvas( width, height );

  				// cube textures can't reuse the same canvas

  				var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

  				canvas.width = width;
  				canvas.height = height;

  				var context = canvas.getContext( '2d' );
  				context.drawImage( image, 0, 0, width, height );

  				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

  				return canvas;

  			} else {

  				if ( 'data' in image ) {

  					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

  				}

  				return image;

  			}

  		}

  		return image;

  	}

  	function isPowerOfTwo( image ) {

  		return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

  	}

  	function textureNeedsPowerOfTwo( texture ) {

  		if ( capabilities.isWebGL2 ) return false;

  		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
  			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

  	}

  	function textureNeedsGenerateMipmaps( texture, supportsMips ) {

  		return texture.generateMipmaps && supportsMips &&
  			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

  	}

  	function generateMipmap( target, texture, width, height ) {

  		_gl.generateMipmap( target );

  		var textureProperties = properties.get( texture );

  		// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
  		textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;

  	}

  	function getInternalFormat( glFormat, glType ) {

  		if ( ! capabilities.isWebGL2 ) return glFormat;

  		var internalFormat = glFormat;

  		if ( glFormat === 6403 ) {

  			if ( glType === 5126 ) internalFormat = 33326;
  			if ( glType === 5131 ) internalFormat = 33325;
  			if ( glType === 5121 ) internalFormat = 33321;

  		}

  		if ( glFormat === 6407 ) {

  			if ( glType === 5126 ) internalFormat = 34837;
  			if ( glType === 5131 ) internalFormat = 34843;
  			if ( glType === 5121 ) internalFormat = 32849;

  		}

  		if ( glFormat === 6408 ) {

  			if ( glType === 5126 ) internalFormat = 34836;
  			if ( glType === 5131 ) internalFormat = 34842;
  			if ( glType === 5121 ) internalFormat = 32856;

  		}

  		if ( internalFormat === 33325 || internalFormat === 33326 ||
  			internalFormat === 34842 || internalFormat === 34836 ) {

  			extensions.get( 'EXT_color_buffer_float' );

  		} else if ( internalFormat === 34843 || internalFormat === 34837 ) {

  			console.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );

  		}

  		return internalFormat;

  	}

  	// Fallback filters for non-power-of-2 textures

  	function filterFallback( f ) {

  		if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

  			return 9728;

  		}

  		return 9729;

  	}

  	//

  	function onTextureDispose( event ) {

  		var texture = event.target;

  		texture.removeEventListener( 'dispose', onTextureDispose );

  		deallocateTexture( texture );

  		if ( texture.isVideoTexture ) {

  			delete _videoTextures[ texture.id ];

  		}

  		info.memory.textures --;

  	}

  	function onRenderTargetDispose( event ) {

  		var renderTarget = event.target;

  		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

  		deallocateRenderTarget( renderTarget );

  		info.memory.textures --;

  	}

  	//

  	function deallocateTexture( texture ) {

  		var textureProperties = properties.get( texture );

  		if ( textureProperties.__webglInit === undefined ) return;

  		_gl.deleteTexture( textureProperties.__webglTexture );

  		properties.remove( texture );

  	}

  	function deallocateRenderTarget( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );
  		var textureProperties = properties.get( renderTarget.texture );

  		if ( ! renderTarget ) return;

  		if ( textureProperties.__webglTexture !== undefined ) {

  			_gl.deleteTexture( textureProperties.__webglTexture );

  		}

  		if ( renderTarget.depthTexture ) {

  			renderTarget.depthTexture.dispose();

  		}

  		if ( renderTarget.isWebGLRenderTargetCube ) {

  			for ( var i = 0; i < 6; i ++ ) {

  				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
  				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

  			}

  		} else {

  			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
  			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

  		}

  		properties.remove( renderTarget.texture );
  		properties.remove( renderTarget );

  	}

  	//

  	var textureUnits = 0;

  	function resetTextureUnits() {

  		textureUnits = 0;

  	}

  	function allocateTextureUnit() {

  		var textureUnit = textureUnits;

  		if ( textureUnit >= capabilities.maxTextures ) {

  			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

  		}

  		textureUnits += 1;

  		return textureUnit;

  	}

  	//

  	function setTexture2D( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.isVideoTexture ) updateVideoTexture( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			var image = texture.image;

  			if ( image === undefined ) {

  				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );

  			} else if ( image.complete === false ) {

  				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

  			} else {

  				uploadTexture( textureProperties, texture, slot );
  				return;

  			}

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 3553, textureProperties.__webglTexture );

  	}

  	function setTexture2DArray( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 35866, textureProperties.__webglTexture );

  	}

  	function setTexture3D( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 32879, textureProperties.__webglTexture );

  	}

  	function setTextureCube( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.image.length === 6 ) {

  			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  				initTexture( textureProperties, texture );

  				state.activeTexture( 33984 + slot );
  				state.bindTexture( 34067, textureProperties.__webglTexture );

  				_gl.pixelStorei( 37440, texture.flipY );

  				var isCompressed = ( texture && texture.isCompressedTexture );
  				var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

  				var cubeImage = [];

  				for ( var i = 0; i < 6; i ++ ) {

  					if ( ! isCompressed && ! isDataTexture ) {

  						cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, capabilities.maxCubemapSize );

  					} else {

  						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

  					}

  				}

  				var image = cubeImage[ 0 ],
  					supportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,
  					glFormat = utils.convert( texture.format ),
  					glType = utils.convert( texture.type ),
  					glInternalFormat = getInternalFormat( glFormat, glType );

  				setTextureParameters( 34067, texture, supportsMips );

  				for ( var i = 0; i < 6; i ++ ) {

  					if ( ! isCompressed ) {

  						if ( isDataTexture ) {

  							state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

  						} else {

  							state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

  						}

  					} else {

  						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

  						for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

  							mipmap = mipmaps[ j ];

  							if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

  								if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

  									state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

  								} else {

  									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

  								}

  							} else {

  								state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  							}

  						}

  					}

  				}

  				if ( ! isCompressed ) {

  					textureProperties.__maxMipLevel = 0;

  				} else {

  					textureProperties.__maxMipLevel = mipmaps.length - 1;

  				}

  				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  					// We assume images for cube map have the same size.
  					generateMipmap( 34067, texture, image.width, image.height );

  				}

  				textureProperties.__version = texture.version;

  				if ( texture.onUpdate ) texture.onUpdate( texture );

  			} else {

  				state.activeTexture( 33984 + slot );
  				state.bindTexture( 34067, textureProperties.__webglTexture );

  			}

  		}

  	}

  	function setTextureCubeDynamic( texture, slot ) {

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 34067, properties.get( texture ).__webglTexture );

  	}

  	function setTextureParameters( textureType, texture, supportsMips ) {

  		var extension;

  		if ( supportsMips ) {

  			_gl.texParameteri( textureType, 10242, utils.convert( texture.wrapS ) );
  			_gl.texParameteri( textureType, 10243, utils.convert( texture.wrapT ) );

  			if ( textureType === 32879 || textureType === 35866 ) {

  				_gl.texParameteri( textureType, 32882, utils.convert( texture.wrapR ) );

  			}

  			_gl.texParameteri( textureType, 10240, utils.convert( texture.magFilter ) );
  			_gl.texParameteri( textureType, 10241, utils.convert( texture.minFilter ) );

  		} else {

  			_gl.texParameteri( textureType, 10242, 33071 );
  			_gl.texParameteri( textureType, 10243, 33071 );

  			if ( textureType === 32879 || textureType === 35866 ) {

  				_gl.texParameteri( textureType, 32882, 33071 );

  			}

  			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

  				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

  			}

  			_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
  			_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );

  			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

  				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

  			}

  		}

  		extension = extensions.get( 'EXT_texture_filter_anisotropic' );

  		if ( extension ) {

  			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
  			if ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;

  			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

  				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
  				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

  			}

  		}

  	}

  	function initTexture( textureProperties, texture ) {

  		if ( textureProperties.__webglInit === undefined ) {

  			textureProperties.__webglInit = true;

  			texture.addEventListener( 'dispose', onTextureDispose );

  			textureProperties.__webglTexture = _gl.createTexture();

  			info.memory.textures ++;

  		}

  	}

  	function uploadTexture( textureProperties, texture, slot ) {

  		var textureType = 3553;

  		if ( texture.isDataTexture2DArray ) textureType = 35866;
  		if ( texture.isDataTexture3D ) textureType = 32879;

  		initTexture( textureProperties, texture );

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( textureType, textureProperties.__webglTexture );

  		_gl.pixelStorei( 37440, texture.flipY );
  		_gl.pixelStorei( 37441, texture.premultiplyAlpha );
  		_gl.pixelStorei( 3317, texture.unpackAlignment );

  		var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
  		var image = resizeImage( texture.image, needsPowerOfTwo, false, capabilities.maxTextureSize );

  		var supportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,
  			glFormat = utils.convert( texture.format ),
  			glType = utils.convert( texture.type ),
  			glInternalFormat = getInternalFormat( glFormat, glType );

  		setTextureParameters( textureType, texture, supportsMips );

  		var mipmap, mipmaps = texture.mipmaps;

  		if ( texture.isDepthTexture ) {

  			// populate depth texture with dummy data

  			glInternalFormat = 6402;

  			if ( texture.type === FloatType ) {

  				if ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
  				glInternalFormat = 36012;

  			} else if ( capabilities.isWebGL2 ) {

  				// WebGL 2.0 requires signed internalformat for glTexImage2D
  				glInternalFormat = 33189;

  			}

  			if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {

  				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
  				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
  				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

  					console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

  					texture.type = UnsignedShortType;
  					glType = utils.convert( texture.type );

  				}

  			}

  			// Depth stencil textures need the DEPTH_STENCIL internal format
  			// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  			if ( texture.format === DepthStencilFormat ) {

  				glInternalFormat = 34041;

  				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
  				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
  				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  				if ( texture.type !== UnsignedInt248Type ) {

  					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

  					texture.type = UnsignedInt248Type;
  					glType = utils.convert( texture.type );

  				}

  			}

  			state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

  		} else if ( texture.isDataTexture ) {

  			// use manually created mipmaps if available
  			// if there are no manual mipmaps
  			// set 0 level mipmap and then use GL to generate other mipmap levels

  			if ( mipmaps.length > 0 && supportsMips ) {

  				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

  					mipmap = mipmaps[ i ];
  					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  				}

  				texture.generateMipmaps = false;
  				textureProperties.__maxMipLevel = mipmaps.length - 1;

  			} else {

  				state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
  				textureProperties.__maxMipLevel = 0;

  			}

  		} else if ( texture.isCompressedTexture ) {

  			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

  				mipmap = mipmaps[ i ];

  				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

  					if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

  						state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

  					} else {

  						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

  					}

  				} else {

  					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  				}

  			}

  			textureProperties.__maxMipLevel = mipmaps.length - 1;

  		} else if ( texture.isDataTexture2DArray ) {

  			state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
  			textureProperties.__maxMipLevel = 0;

  		} else if ( texture.isDataTexture3D ) {

  			state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
  			textureProperties.__maxMipLevel = 0;

  		} else {

  			// regular Texture (image, video, canvas)

  			// use manually created mipmaps if available
  			// if there are no manual mipmaps
  			// set 0 level mipmap and then use GL to generate other mipmap levels

  			if ( mipmaps.length > 0 && supportsMips ) {

  				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

  					mipmap = mipmaps[ i ];
  					state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );

  				}

  				texture.generateMipmaps = false;
  				textureProperties.__maxMipLevel = mipmaps.length - 1;

  			} else {

  				state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
  				textureProperties.__maxMipLevel = 0;

  			}

  		}

  		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  			generateMipmap( 3553, texture, image.width, image.height );

  		}

  		textureProperties.__version = texture.version;

  		if ( texture.onUpdate ) texture.onUpdate( texture );

  	}

  	// Render targets

  	// Setup storage for target texture and bind it to correct framebuffer
  	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

  		var glFormat = utils.convert( renderTarget.texture.format );
  		var glType = utils.convert( renderTarget.texture.type );
  		var glInternalFormat = getInternalFormat( glFormat, glType );
  		state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
  		_gl.bindFramebuffer( 36160, framebuffer );
  		_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
  		_gl.bindFramebuffer( 36160, null );

  	}

  	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
  	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

  		_gl.bindRenderbuffer( 36161, renderbuffer );

  		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

  			if ( isMultisample ) {

  				var samples = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );

  			}

  			_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );

  		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

  			if ( isMultisample ) {

  				var samples = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples, 34041, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );

  			}


  			_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );

  		} else {

  			var glFormat = utils.convert( renderTarget.texture.format );
  			var glType = utils.convert( renderTarget.texture.type );
  			var glInternalFormat = getInternalFormat( glFormat, glType );

  			if ( isMultisample ) {

  				var samples = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

  			}

  		}

  		_gl.bindRenderbuffer( 36161, null );

  	}

  	// Setup resources for a Depth Texture for a FBO (needs an extension)
  	function setupDepthTexture( framebuffer, renderTarget ) {

  		var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
  		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

  		_gl.bindFramebuffer( 36160, framebuffer );

  		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

  			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

  		}

  		// upload an empty depth texture with framebuffer size
  		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
  				renderTarget.depthTexture.image.width !== renderTarget.width ||
  				renderTarget.depthTexture.image.height !== renderTarget.height ) {

  			renderTarget.depthTexture.image.width = renderTarget.width;
  			renderTarget.depthTexture.image.height = renderTarget.height;
  			renderTarget.depthTexture.needsUpdate = true;

  		}

  		setTexture2D( renderTarget.depthTexture, 0 );

  		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

  		if ( renderTarget.depthTexture.format === DepthFormat ) {

  			_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );

  		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

  			_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );

  		} else {

  			throw new Error( 'Unknown depthTexture format' );

  		}

  	}

  	// Setup GL resources for a non-texture depth buffer
  	function setupDepthRenderbuffer( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );

  		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

  		if ( renderTarget.depthTexture ) {

  			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

  			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

  		} else {

  			if ( isCube ) {

  				renderTargetProperties.__webglDepthbuffer = [];

  				for ( var i = 0; i < 6; i ++ ) {

  					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
  					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
  					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

  				}

  			} else {

  				_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
  				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
  				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

  			}

  		}

  		_gl.bindFramebuffer( 36160, null );

  	}

  	// Set up GL resources for the render target
  	function setupRenderTarget( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );
  		var textureProperties = properties.get( renderTarget.texture );

  		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

  		textureProperties.__webglTexture = _gl.createTexture();

  		info.memory.textures ++;

  		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
  		var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
  		var supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;

  		// Setup framebuffer

  		if ( isCube ) {

  			renderTargetProperties.__webglFramebuffer = [];

  			for ( var i = 0; i < 6; i ++ ) {

  				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

  			}

  		} else {

  			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

  			if ( isMultisample ) {

  				if ( capabilities.isWebGL2 ) {

  					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
  					renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

  					_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );
  					var glFormat = utils.convert( renderTarget.texture.format );
  					var glType = utils.convert( renderTarget.texture.type );
  					var glInternalFormat = getInternalFormat( glFormat, glType );
  					var samples = getRenderTargetSamples( renderTarget );
  					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
  					_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
  					_gl.bindRenderbuffer( 36161, null );

  					if ( renderTarget.depthBuffer ) {

  						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
  						setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

  					}

  					_gl.bindFramebuffer( 36160, null );


  				} else {

  					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

  				}

  			}

  		}

  		// Setup color buffer

  		if ( isCube ) {

  			state.bindTexture( 34067, textureProperties.__webglTexture );
  			setTextureParameters( 34067, renderTarget.texture, supportsMips );

  			for ( var i = 0; i < 6; i ++ ) {

  				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );

  			}

  			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

  				generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );

  			}

  			state.bindTexture( 34067, null );

  		} else {

  			state.bindTexture( 3553, textureProperties.__webglTexture );
  			setTextureParameters( 3553, renderTarget.texture, supportsMips );
  			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );

  			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

  				generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );

  			}

  			state.bindTexture( 3553, null );

  		}

  		// Setup depth and stencil buffers

  		if ( renderTarget.depthBuffer ) {

  			setupDepthRenderbuffer( renderTarget );

  		}

  	}

  	function updateRenderTargetMipmap( renderTarget ) {

  		var texture = renderTarget.texture;
  		var supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;

  		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  			var target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;
  			var webglTexture = properties.get( texture ).__webglTexture;

  			state.bindTexture( target, webglTexture );
  			generateMipmap( target, texture, renderTarget.width, renderTarget.height );
  			state.bindTexture( target, null );

  		}

  	}

  	function updateMultisampleRenderTarget( renderTarget ) {

  		if ( renderTarget.isWebGLMultisampleRenderTarget ) {

  			if ( capabilities.isWebGL2 ) {

  				var renderTargetProperties = properties.get( renderTarget );

  				_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
  				_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );

  				var width = renderTarget.width;
  				var height = renderTarget.height;
  				var mask = 16384;

  				if ( renderTarget.depthBuffer ) mask |= 256;
  				if ( renderTarget.stencilBuffer ) mask |= 1024;

  				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );

  			} else {

  				console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

  			}

  		}

  	}

  	function getRenderTargetSamples( renderTarget ) {

  		return ( capabilities.isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
  			Math.min( capabilities.maxSamples, renderTarget.samples ) : 0;

  	}

  	function updateVideoTexture( texture ) {

  		var id = texture.id;
  		var frame = info.render.frame;

  		// Check the last frame we updated the VideoTexture

  		if ( _videoTextures[ id ] !== frame ) {

  			_videoTextures[ id ] = frame;
  			texture.update();

  		}

  	}

  	// backwards compatibility

  	var warnedTexture2D = false;
  	var warnedTextureCube = false;

  	function safeSetTexture2D( texture, slot ) {

  		if ( texture && texture.isWebGLRenderTarget ) {

  			if ( warnedTexture2D === false ) {

  				console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
  				warnedTexture2D = true;

  			}

  			texture = texture.texture;

  		}

  		setTexture2D( texture, slot );

  	}

  	function safeSetTextureCube( texture, slot ) {

  		if ( texture && texture.isWebGLRenderTargetCube ) {

  			if ( warnedTextureCube === false ) {

  				console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
  				warnedTextureCube = true;

  			}

  			texture = texture.texture;

  		}

  		// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
  		// TODO: unify these code paths
  		if ( ( texture && texture.isCubeTexture ) ||
  			( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

  			// CompressedTexture can have Array in image :/

  			// this function alone should take care of cube textures
  			setTextureCube( texture, slot );

  		} else {

  			// assumed: texture property of THREE.WebGLRenderTargetCube
  			setTextureCubeDynamic( texture, slot );

  		}

  	}

  	//

  	this.allocateTextureUnit = allocateTextureUnit;
  	this.resetTextureUnits = resetTextureUnits;

  	this.setTexture2D = setTexture2D;
  	this.setTexture2DArray = setTexture2DArray;
  	this.setTexture3D = setTexture3D;
  	this.setTextureCube = setTextureCube;
  	this.setTextureCubeDynamic = setTextureCubeDynamic;
  	this.setupRenderTarget = setupRenderTarget;
  	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;

  	this.safeSetTexture2D = safeSetTexture2D;
  	this.safeSetTextureCube = safeSetTextureCube;

  }

  /**
   * @author thespite / http://www.twitter.com/thespite
   */

  function WebGLUtils( gl, extensions, capabilities ) {

  	function convert( p ) {

  		var extension;

  		if ( p === RepeatWrapping ) return 10497;
  		if ( p === ClampToEdgeWrapping ) return 33071;
  		if ( p === MirroredRepeatWrapping ) return 33648;

  		if ( p === NearestFilter ) return 9728;
  		if ( p === NearestMipMapNearestFilter ) return 9984;
  		if ( p === NearestMipMapLinearFilter ) return 9986;

  		if ( p === LinearFilter ) return 9729;
  		if ( p === LinearMipMapNearestFilter ) return 9985;
  		if ( p === LinearMipMapLinearFilter ) return 9987;

  		if ( p === UnsignedByteType ) return 5121;
  		if ( p === UnsignedShort4444Type ) return 32819;
  		if ( p === UnsignedShort5551Type ) return 32820;
  		if ( p === UnsignedShort565Type ) return 33635;

  		if ( p === ByteType ) return 5120;
  		if ( p === ShortType ) return 5122;
  		if ( p === UnsignedShortType ) return 5123;
  		if ( p === IntType ) return 5124;
  		if ( p === UnsignedIntType ) return 5125;
  		if ( p === FloatType ) return 5126;

  		if ( p === HalfFloatType ) {

  			if ( capabilities.isWebGL2 ) return 5131;

  			extension = extensions.get( 'OES_texture_half_float' );

  			if ( extension !== null ) return extension.HALF_FLOAT_OES;

  		}

  		if ( p === AlphaFormat ) return 6406;
  		if ( p === RGBFormat ) return 6407;
  		if ( p === RGBAFormat ) return 6408;
  		if ( p === LuminanceFormat ) return 6409;
  		if ( p === LuminanceAlphaFormat ) return 6410;
  		if ( p === DepthFormat ) return 6402;
  		if ( p === DepthStencilFormat ) return 34041;
  		if ( p === RedFormat ) return 6403;

  		if ( p === AddEquation ) return 32774;
  		if ( p === SubtractEquation ) return 32778;
  		if ( p === ReverseSubtractEquation ) return 32779;

  		if ( p === ZeroFactor ) return 0;
  		if ( p === OneFactor ) return 1;
  		if ( p === SrcColorFactor ) return 768;
  		if ( p === OneMinusSrcColorFactor ) return 769;
  		if ( p === SrcAlphaFactor ) return 770;
  		if ( p === OneMinusSrcAlphaFactor ) return 771;
  		if ( p === DstAlphaFactor ) return 772;
  		if ( p === OneMinusDstAlphaFactor ) return 773;

  		if ( p === DstColorFactor ) return 774;
  		if ( p === OneMinusDstColorFactor ) return 775;
  		if ( p === SrcAlphaSaturateFactor ) return 776;

  		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
  			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

  			if ( extension !== null ) {

  				if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
  				if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
  				if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
  				if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

  			}

  		}

  		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
  			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

  			if ( extension !== null ) {

  				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
  				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
  				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
  				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

  			}

  		}

  		if ( p === RGB_ETC1_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

  			if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

  		}

  		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
  			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
  			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
  			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
  			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

  			if ( extension !== null ) {

  				return p;

  			}

  		}

  		if ( p === MinEquation || p === MaxEquation ) {

  			if ( capabilities.isWebGL2 ) {

  				if ( p === MinEquation ) return 32775;
  				if ( p === MaxEquation ) return 32776;

  			}

  			extension = extensions.get( 'EXT_blend_minmax' );

  			if ( extension !== null ) {

  				if ( p === MinEquation ) return extension.MIN_EXT;
  				if ( p === MaxEquation ) return extension.MAX_EXT;

  			}

  		}

  		if ( p === UnsignedInt248Type ) {

  			if ( capabilities.isWebGL2 ) return 34042;

  			extension = extensions.get( 'WEBGL_depth_texture' );

  			if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

  		}

  		return 0;

  	}

  	return { convert: convert };

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Group() {

  	Object3D.call( this );

  	this.type = 'Group';

  }

  Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Group,

  	isGroup: true

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   * @author WestLangley / http://github.com/WestLangley
  */

  function Camera() {

  	Object3D.call( this );

  	this.type = 'Camera';

  	this.matrixWorldInverse = new Matrix4();

  	this.projectionMatrix = new Matrix4();
  	this.projectionMatrixInverse = new Matrix4();

  }

  Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Camera,

  	isCamera: true,

  	copy: function ( source, recursive ) {

  		Object3D.prototype.copy.call( this, source, recursive );

  		this.matrixWorldInverse.copy( source.matrixWorldInverse );

  		this.projectionMatrix.copy( source.projectionMatrix );
  		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

  		return this;

  	},

  	getWorldDirection: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		var e = this.matrixWorld.elements;

  		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

  	},

  	updateMatrixWorld: function ( force ) {

  		Object3D.prototype.updateMatrixWorld.call( this, force );

  		this.matrixWorldInverse.getInverse( this.matrixWorld );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author greggman / http://games.greggman.com/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author tschw
   */

  function PerspectiveCamera( fov, aspect, near, far ) {

  	Camera.call( this );

  	this.type = 'PerspectiveCamera';

  	this.fov = fov !== undefined ? fov : 50;
  	this.zoom = 1;

  	this.near = near !== undefined ? near : 0.1;
  	this.far = far !== undefined ? far : 2000;
  	this.focus = 10;

  	this.aspect = aspect !== undefined ? aspect : 1;
  	this.view = null;

  	this.filmGauge = 35;	// width of the film (default in millimeters)
  	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

  	this.updateProjectionMatrix();

  }

  PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

  	constructor: PerspectiveCamera,

  	isPerspectiveCamera: true,

  	copy: function ( source, recursive ) {

  		Camera.prototype.copy.call( this, source, recursive );

  		this.fov = source.fov;
  		this.zoom = source.zoom;

  		this.near = source.near;
  		this.far = source.far;
  		this.focus = source.focus;

  		this.aspect = source.aspect;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		this.filmGauge = source.filmGauge;
  		this.filmOffset = source.filmOffset;

  		return this;

  	},

  	/**
  	 * Sets the FOV by focal length in respect to the current .filmGauge.
  	 *
  	 * The default film gauge is 35, so that the focal length can be specified for
  	 * a 35mm (full frame) camera.
  	 *
  	 * Values for focal length and film gauge must have the same unit.
  	 */
  	setFocalLength: function ( focalLength ) {

  		// see http://www.bobatkins.com/photography/technical/field_of_view.html
  		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

  		this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
  		this.updateProjectionMatrix();

  	},

  	/**
  	 * Calculates the focal length from the current .fov and .filmGauge.
  	 */
  	getFocalLength: function () {

  		var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

  		return 0.5 * this.getFilmHeight() / vExtentSlope;

  	},

  	getEffectiveFOV: function () {

  		return _Math.RAD2DEG * 2 * Math.atan(
  			Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

  	},

  	getFilmWidth: function () {

  		// film not completely covered in portrait format (aspect < 1)
  		return this.filmGauge * Math.min( this.aspect, 1 );

  	},

  	getFilmHeight: function () {

  		// film not completely covered in landscape format (aspect > 1)
  		return this.filmGauge / Math.max( this.aspect, 1 );

  	},

  	/**
  	 * Sets an offset in a larger frustum. This is useful for multi-window or
  	 * multi-monitor/multi-machine setups.
  	 *
  	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
  	 * the monitors are in grid like this
  	 *
  	 *   +---+---+---+
  	 *   | A | B | C |
  	 *   +---+---+---+
  	 *   | D | E | F |
  	 *   +---+---+---+
  	 *
  	 * then for each monitor you would call it like this
  	 *
  	 *   var w = 1920;
  	 *   var h = 1080;
  	 *   var fullWidth = w * 3;
  	 *   var fullHeight = h * 2;
  	 *
  	 *   --A--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
  	 *   --B--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
  	 *   --C--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
  	 *   --D--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
  	 *   --E--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
  	 *   --F--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
  	 *
  	 *   Note there is no reason monitors have to be the same size or in a grid.
  	 */
  	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

  		this.aspect = fullWidth / fullHeight;

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	},

  	clearViewOffset: function () {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	},

  	updateProjectionMatrix: function () {

  		var near = this.near,
  			top = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
  			height = 2 * top,
  			width = this.aspect * height,
  			left = - 0.5 * width,
  			view = this.view;

  		if ( this.view !== null && this.view.enabled ) {

  			var fullWidth = view.fullWidth,
  				fullHeight = view.fullHeight;

  			left += view.offsetX * width / fullWidth;
  			top -= view.offsetY * height / fullHeight;
  			width *= view.width / fullWidth;
  			height *= view.height / fullHeight;

  		}

  		var skew = this.filmOffset;
  		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

  		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

  		this.projectionMatrixInverse.getInverse( this.projectionMatrix );

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.fov = this.fov;
  		data.object.zoom = this.zoom;

  		data.object.near = this.near;
  		data.object.far = this.far;
  		data.object.focus = this.focus;

  		data.object.aspect = this.aspect;

  		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

  		data.object.filmGauge = this.filmGauge;
  		data.object.filmOffset = this.filmOffset;

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function ArrayCamera( array ) {

  	PerspectiveCamera.call( this );

  	this.cameras = array || [];

  }

  ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

  	constructor: ArrayCamera,

  	isArrayCamera: true

  } );

  /**
   * @author jsantell / https://www.jsantell.com/
   * @author mrdoob / http://mrdoob.com/
   */

  var cameraLPos = new Vector3();
  var cameraRPos = new Vector3();

  /**
   * Assumes 2 cameras that are parallel and share an X-axis, and that
   * the cameras' projection and world matrices have already been set.
   * And that near and far planes are identical for both cameras.
   * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
   */
  function setProjectionFromUnion( camera, cameraL, cameraR ) {

  	cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
  	cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

  	var ipd = cameraLPos.distanceTo( cameraRPos );

  	var projL = cameraL.projectionMatrix.elements;
  	var projR = cameraR.projectionMatrix.elements;

  	// VR systems will have identical far and near planes, and
  	// most likely identical top and bottom frustum extents.
  	// Use the left camera for these values.
  	var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
  	var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
  	var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
  	var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

  	var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
  	var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
  	var left = near * leftFov;
  	var right = near * rightFov;

  	// Calculate the new camera's position offset from the
  	// left camera. xOffset should be roughly half `ipd`.
  	var zOffset = ipd / ( - leftFov + rightFov );
  	var xOffset = zOffset * - leftFov;

  	// TODO: Better way to apply this offset?
  	cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
  	camera.translateX( xOffset );
  	camera.translateZ( zOffset );
  	camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
  	camera.matrixWorldInverse.getInverse( camera.matrixWorld );

  	// Find the union of the frustum values of the cameras and scale
  	// the values so that the near plane's position does not change in world space,
  	// although must now be relative to the new union camera.
  	var near2 = near + zOffset;
  	var far2 = far + zOffset;
  	var left2 = left - xOffset;
  	var right2 = right + ( ipd - xOffset );
  	var top2 = topFov * far / far2 * near2;
  	var bottom2 = bottomFov * far / far2 * near2;

  	camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebVRManager( renderer ) {

  	var scope = this;

  	var device = null;
  	var frameData = null;

  	var poseTarget = null;

  	var controllers = [];
  	var standingMatrix = new Matrix4();
  	var standingMatrixInverse = new Matrix4();

  	var framebufferScaleFactor = 1.0;

  	var frameOfReferenceType = 'stage';

  	if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {

  		frameData = new window.VRFrameData();
  		window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

  	}

  	var matrixWorldInverse = new Matrix4();
  	var tempQuaternion = new Quaternion();
  	var tempPosition = new Vector3();

  	var cameraL = new PerspectiveCamera();
  	cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
  	cameraL.layers.enable( 1 );

  	var cameraR = new PerspectiveCamera();
  	cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
  	cameraR.layers.enable( 2 );

  	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
  	cameraVR.layers.enable( 1 );
  	cameraVR.layers.enable( 2 );

  	//

  	function isPresenting() {

  		return device !== null && device.isPresenting === true;

  	}

  	var currentSize = new Vector2(), currentPixelRatio;

  	function onVRDisplayPresentChange() {

  		if ( isPresenting() ) {

  			var eyeParameters = device.getEyeParameters( 'left' );
  			var renderWidth = eyeParameters.renderWidth * framebufferScaleFactor;
  			var renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;

  			currentPixelRatio = renderer.getPixelRatio();
  			renderer.getSize( currentSize );

  			renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );

  			animation.start();

  		} else {

  			if ( scope.enabled ) {

  				renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

  			}

  			animation.stop();

  		}

  	}

  	//

  	var triggers = [];

  	function findGamepad( id ) {

  		var gamepads = navigator.getGamepads && navigator.getGamepads();

  		for ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {

  			var gamepad = gamepads[ i ];

  			if ( gamepad && ( gamepad.id === 'Daydream Controller' ||
  				gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||
  				gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||
  				gamepad.id.startsWith( 'Spatial Controller' ) ) ) {

  				if ( j === id ) return gamepad;

  				j ++;

  			}

  		}

  	}

  	function updateControllers() {

  		for ( var i = 0; i < controllers.length; i ++ ) {

  			var controller = controllers[ i ];

  			var gamepad = findGamepad( i );

  			if ( gamepad !== undefined && gamepad.pose !== undefined ) {

  				if ( gamepad.pose === null ) return;

  				// Pose

  				var pose = gamepad.pose;

  				if ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );

  				if ( pose.position !== null ) controller.position.fromArray( pose.position );
  				if ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );
  				controller.matrix.compose( controller.position, controller.quaternion, controller.scale );
  				controller.matrix.premultiply( standingMatrix );
  				controller.matrix.decompose( controller.position, controller.quaternion, controller.scale );
  				controller.matrixWorldNeedsUpdate = true;
  				controller.visible = true;

  				// Trigger

  				var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;

  				if ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {

  					triggers[ i ] = gamepad.buttons[ buttonId ].pressed;

  					if ( triggers[ i ] === true ) {

  						controller.dispatchEvent( { type: 'selectstart' } );

  					} else {

  						controller.dispatchEvent( { type: 'selectend' } );
  						controller.dispatchEvent( { type: 'select' } );

  					}

  				}

  			} else {

  				controller.visible = false;

  			}

  		}

  	}

  	//

  	this.enabled = false;

  	this.getController = function ( id ) {

  		var controller = controllers[ id ];

  		if ( controller === undefined ) {

  			controller = new Group();
  			controller.matrixAutoUpdate = false;
  			controller.visible = false;

  			controllers[ id ] = controller;

  		}

  		return controller;

  	};

  	this.getDevice = function () {

  		return device;

  	};

  	this.setDevice = function ( value ) {

  		if ( value !== undefined ) device = value;

  		animation.setContext( value );

  	};

  	this.setFramebufferScaleFactor = function ( value ) {

  		framebufferScaleFactor = value;

  	};

  	this.setFrameOfReferenceType = function ( value ) {

  		frameOfReferenceType = value;

  	};

  	this.setPoseTarget = function ( object ) {

  		if ( object !== undefined ) poseTarget = object;

  	};

  	this.getCamera = function ( camera ) {

  		var userHeight = frameOfReferenceType === 'stage' ? 1.6 : 0;

  		if ( isPresenting() === false ) {

  			camera.position.set( 0, userHeight, 0 );
  			camera.rotation.set( 0, 0, 0 );

  			return camera;

  		}

  		device.depthNear = camera.near;
  		device.depthFar = camera.far;

  		device.getFrameData( frameData );

  		//

  		if ( frameOfReferenceType === 'stage' ) {

  			var stageParameters = device.stageParameters;

  			if ( stageParameters ) {

  				standingMatrix.fromArray( stageParameters.sittingToStandingTransform );

  			} else {

  				standingMatrix.makeTranslation( 0, userHeight, 0 );

  			}

  		}


  		var pose = frameData.pose;
  		var poseObject = poseTarget !== null ? poseTarget : camera;

  		// We want to manipulate poseObject by its position and quaternion components since users may rely on them.
  		poseObject.matrix.copy( standingMatrix );
  		poseObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );

  		if ( pose.orientation !== null ) {

  			tempQuaternion.fromArray( pose.orientation );
  			poseObject.quaternion.multiply( tempQuaternion );

  		}

  		if ( pose.position !== null ) {

  			tempQuaternion.setFromRotationMatrix( standingMatrix );
  			tempPosition.fromArray( pose.position );
  			tempPosition.applyQuaternion( tempQuaternion );
  			poseObject.position.add( tempPosition );

  		}

  		poseObject.updateMatrixWorld();

  		//

  		cameraL.near = camera.near;
  		cameraR.near = camera.near;

  		cameraL.far = camera.far;
  		cameraR.far = camera.far;

  		cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
  		cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

  		// TODO (mrdoob) Double check this code

  		standingMatrixInverse.getInverse( standingMatrix );

  		if ( frameOfReferenceType === 'stage' ) {

  			cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
  			cameraR.matrixWorldInverse.multiply( standingMatrixInverse );

  		}

  		var parent = poseObject.parent;

  		if ( parent !== null ) {

  			matrixWorldInverse.getInverse( parent.matrixWorld );

  			cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
  			cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

  		}

  		// envMap and Mirror needs camera.matrixWorld

  		cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
  		cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

  		cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
  		cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

  		setProjectionFromUnion( cameraVR, cameraL, cameraR );

  		//

  		var layers = device.getLayers();

  		if ( layers.length ) {

  			var layer = layers[ 0 ];

  			if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {

  				cameraL.bounds.fromArray( layer.leftBounds );

  			}

  			if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {

  				cameraR.bounds.fromArray( layer.rightBounds );

  			}

  		}

  		updateControllers();

  		return cameraVR;

  	};

  	this.getStandingMatrix = function () {

  		return standingMatrix;

  	};

  	this.isPresenting = isPresenting;

  	// Animation Loop

  	var animation = new WebGLAnimation();

  	this.setAnimationLoop = function ( callback ) {

  		animation.setAnimationLoop( callback );

  		if ( isPresenting() ) animation.start();

  	};

  	this.submitFrame = function () {

  		if ( isPresenting() ) device.submitFrame();

  	};

  	this.dispose = function () {

  		if ( typeof window !== 'undefined' ) {

  			window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );

  		}

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebXRManager( renderer ) {

  	var gl = renderer.context;

  	var device = null;
  	var session = null;

  	var framebufferScaleFactor = 1.0;

  	var frameOfReference = null;
  	var frameOfReferenceType = 'stage';

  	var pose = null;

  	var controllers = [];
  	var inputSources = [];

  	function isPresenting() {

  		return session !== null && frameOfReference !== null;

  	}

  	//

  	var cameraL = new PerspectiveCamera();
  	cameraL.layers.enable( 1 );
  	cameraL.viewport = new Vector4();

  	var cameraR = new PerspectiveCamera();
  	cameraR.layers.enable( 2 );
  	cameraR.viewport = new Vector4();

  	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
  	cameraVR.layers.enable( 1 );
  	cameraVR.layers.enable( 2 );

  	//

  	this.enabled = false;

  	this.getController = function ( id ) {

  		var controller = controllers[ id ];

  		if ( controller === undefined ) {

  			controller = new Group();
  			controller.matrixAutoUpdate = false;
  			controller.visible = false;

  			controllers[ id ] = controller;

  		}

  		return controller;

  	};

  	this.getDevice = function () {

  		return device;

  	};

  	this.setDevice = function ( value ) {

  		if ( value !== undefined ) device = value;
  		if ( value instanceof XRDevice ) gl.setCompatibleXRDevice( value );

  	};

  	//

  	function onSessionEvent( event ) {

  		var controller = controllers[ inputSources.indexOf( event.inputSource ) ];
  		if ( controller ) controller.dispatchEvent( { type: event.type } );

  	}

  	function onSessionEnd() {

  		renderer.setFramebuffer( null );
  		renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
  		animation.stop();

  	}

  	this.setFramebufferScaleFactor = function ( value ) {

  		framebufferScaleFactor = value;

  	};

  	this.setFrameOfReferenceType = function ( value ) {

  		frameOfReferenceType = value;

  	};

  	this.setSession = function ( value ) {

  		session = value;

  		if ( session !== null ) {

  			session.addEventListener( 'select', onSessionEvent );
  			session.addEventListener( 'selectstart', onSessionEvent );
  			session.addEventListener( 'selectend', onSessionEvent );
  			session.addEventListener( 'end', onSessionEnd );

  			session.baseLayer = new XRWebGLLayer( session, gl, { framebufferScaleFactor: framebufferScaleFactor } );
  			session.requestFrameOfReference( frameOfReferenceType ).then( function ( value ) {

  				frameOfReference = value;

  				renderer.setFramebuffer( session.baseLayer.framebuffer );

  				animation.setContext( session );
  				animation.start();

  			} );

  			//

  			inputSources = session.getInputSources();

  			session.addEventListener( 'inputsourceschange', function () {

  				inputSources = session.getInputSources();
  				console.log( inputSources );

  				for ( var i = 0; i < controllers.length; i ++ ) {

  					var controller = controllers[ i ];
  					controller.userData.inputSource = inputSources[ i ];

  				}

  			} );

  		}

  	};

  	function updateCamera( camera, parent ) {

  		if ( parent === null ) {

  			camera.matrixWorld.copy( camera.matrix );

  		} else {

  			camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

  		}

  		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

  	}

  	this.getCamera = function ( camera ) {

  		if ( isPresenting() ) {

  			var parent = camera.parent;
  			var cameras = cameraVR.cameras;

  			updateCamera( cameraVR, parent );

  			for ( var i = 0; i < cameras.length; i ++ ) {

  				updateCamera( cameras[ i ], parent );

  			}

  			// update camera and its children

  			camera.matrixWorld.copy( cameraVR.matrixWorld );

  			var children = camera.children;

  			for ( var i = 0, l = children.length; i < l; i ++ ) {

  				children[ i ].updateMatrixWorld( true );

  			}

  			setProjectionFromUnion( cameraVR, cameraL, cameraR );

  			return cameraVR;

  		}

  		return camera;

  	};

  	this.isPresenting = isPresenting;

  	// Animation Loop

  	var onAnimationFrameCallback = null;

  	function onAnimationFrame( time, frame ) {

  		pose = frame.getDevicePose( frameOfReference );

  		if ( pose !== null ) {

  			var layer = session.baseLayer;
  			var views = frame.views;

  			for ( var i = 0; i < views.length; i ++ ) {

  				var view = views[ i ];
  				var viewport = layer.getViewport( view );
  				var viewMatrix = pose.getViewMatrix( view );

  				var camera = cameraVR.cameras[ i ];
  				camera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );
  				camera.projectionMatrix.fromArray( view.projectionMatrix );
  				camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

  				if ( i === 0 ) {

  					cameraVR.matrix.copy( camera.matrix );

  				}

  			}

  		}

  		//

  		for ( var i = 0; i < controllers.length; i ++ ) {

  			var controller = controllers[ i ];

  			var inputSource = inputSources[ i ];

  			if ( inputSource ) {

  				var inputPose = frame.getInputPose( inputSource, frameOfReference );

  				if ( inputPose !== null ) {

  					if ( 'targetRay' in inputPose ) {

  						controller.matrix.elements = inputPose.targetRay.transformMatrix;

  					} else if ( 'pointerMatrix' in inputPose ) {

  						// DEPRECATED

  						controller.matrix.elements = inputPose.pointerMatrix;

  					}

  					controller.matrix.decompose( controller.position, controller.rotation, controller.scale );
  					controller.visible = true;

  					continue;

  				}

  			}

  			controller.visible = false;

  		}

  		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

  	}

  	var animation = new WebGLAnimation();
  	animation.setAnimationLoop( onAnimationFrame );

  	this.setAnimationLoop = function ( callback ) {

  		onAnimationFrameCallback = callback;

  	};

  	this.dispose = function () {};

  	// DEPRECATED

  	this.getStandingMatrix = function () {

  		console.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );
  		return new Matrix4();

  	};

  	this.submitFrame = function () {};

  }

  /**
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   * @author tschw
   */

  function WebGLRenderer( parameters ) {

  	console.log( 'THREE.WebGLRenderer', REVISION );

  	parameters = parameters || {};

  	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
  		_context = parameters.context !== undefined ? parameters.context : null,

  		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
  		_depth = parameters.depth !== undefined ? parameters.depth : true,
  		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
  		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
  		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
  		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
  		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';

  	var currentRenderList = null;
  	var currentRenderState = null;

  	// public properties

  	this.domElement = _canvas;
  	this.context = null;

  	// Debug configuration container
  	this.debug = {

  		/**
  		 * Enables error checking and reporting when shader programs are being compiled
  		 * @type {boolean}
  		 */
  		checkShaderErrors: false
  	};

  	// clearing

  	this.autoClear = true;
  	this.autoClearColor = true;
  	this.autoClearDepth = true;
  	this.autoClearStencil = true;

  	// scene graph

  	this.sortObjects = true;

  	// user-defined clipping

  	this.clippingPlanes = [];
  	this.localClippingEnabled = false;

  	// physically based shading

  	this.gammaFactor = 2.0;	// for backwards compatibility
  	this.gammaInput = false;
  	this.gammaOutput = false;

  	// physical lights

  	this.physicallyCorrectLights = false;

  	// tone mapping

  	this.toneMapping = LinearToneMapping;
  	this.toneMappingExposure = 1.0;
  	this.toneMappingWhitePoint = 1.0;

  	// morphs

  	this.maxMorphTargets = 8;
  	this.maxMorphNormals = 4;

  	// internal properties

  	var _this = this,

  		_isContextLost = false,

  		// internal state cache

  		_framebuffer = null,

  		_currentRenderTarget = null,
  		_currentFramebuffer = null,
  		_currentMaterialId = - 1,

  		// geometry and program caching

  		_currentGeometryProgram = {
  			geometry: null,
  			program: null,
  			wireframe: false
  		},

  		_currentCamera = null,
  		_currentArrayCamera = null,

  		_currentViewport = new Vector4(),
  		_currentScissor = new Vector4(),
  		_currentScissorTest = null,

  		//

  		_width = _canvas.width,
  		_height = _canvas.height,

  		_pixelRatio = 1,

  		_viewport = new Vector4( 0, 0, _width, _height ),
  		_scissor = new Vector4( 0, 0, _width, _height ),
  		_scissorTest = false,

  		// frustum

  		_frustum = new Frustum(),

  		// clipping

  		_clipping = new WebGLClipping(),
  		_clippingEnabled = false,
  		_localClippingEnabled = false,

  		// camera matrices cache

  		_projScreenMatrix = new Matrix4(),

  		_vector3 = new Vector3();

  	function getTargetPixelRatio() {

  		return _currentRenderTarget === null ? _pixelRatio : 1;

  	}

  	// initialize

  	var _gl;

  	try {

  		var contextAttributes = {
  			alpha: _alpha,
  			depth: _depth,
  			stencil: _stencil,
  			antialias: _antialias,
  			premultipliedAlpha: _premultipliedAlpha,
  			preserveDrawingBuffer: _preserveDrawingBuffer,
  			powerPreference: _powerPreference
  		};

  		// event listeners must be registered before WebGL context is created, see #12753

  		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
  		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

  		_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

  		if ( _gl === null ) {

  			if ( _canvas.getContext( 'webgl' ) !== null ) {

  				throw new Error( 'Error creating WebGL context with your selected attributes.' );

  			} else {

  				throw new Error( 'Error creating WebGL context.' );

  			}

  		}

  		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

  		if ( _gl.getShaderPrecisionFormat === undefined ) {

  			_gl.getShaderPrecisionFormat = function () {

  				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

  			};

  		}

  	} catch ( error ) {

  		console.error( 'THREE.WebGLRenderer: ' + error.message );
  		throw error;

  	}

  	var extensions, capabilities, state, info;
  	var properties, textures, attributes, geometries, objects;
  	var programCache, renderLists, renderStates;

  	var background, morphtargets, bufferRenderer, indexedBufferRenderer;

  	var utils;

  	function initGLContext() {

  		extensions = new WebGLExtensions( _gl );

  		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

  		if ( ! capabilities.isWebGL2 ) {

  			extensions.get( 'WEBGL_depth_texture' );
  			extensions.get( 'OES_texture_float' );
  			extensions.get( 'OES_texture_half_float' );
  			extensions.get( 'OES_texture_half_float_linear' );
  			extensions.get( 'OES_standard_derivatives' );
  			extensions.get( 'OES_element_index_uint' );
  			extensions.get( 'ANGLE_instanced_arrays' );

  		}

  		extensions.get( 'OES_texture_float_linear' );

  		utils = new WebGLUtils( _gl, extensions, capabilities );

  		state = new WebGLState( _gl, extensions, utils, capabilities );
  		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
  		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

  		info = new WebGLInfo( _gl );
  		properties = new WebGLProperties();
  		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
  		attributes = new WebGLAttributes( _gl );
  		geometries = new WebGLGeometries( _gl, attributes, info );
  		objects = new WebGLObjects( geometries, info );
  		morphtargets = new WebGLMorphtargets( _gl );
  		programCache = new WebGLPrograms( _this, extensions, capabilities, textures );
  		renderLists = new WebGLRenderLists();
  		renderStates = new WebGLRenderStates();

  		background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );

  		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
  		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

  		info.programs = programCache.programs;

  		_this.context = _gl;
  		_this.capabilities = capabilities;
  		_this.extensions = extensions;
  		_this.properties = properties;
  		_this.renderLists = renderLists;
  		_this.state = state;
  		_this.info = info;

  	}

  	initGLContext();

  	// vr

  	var vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this ) : new WebVRManager( _this );

  	this.vr = vr;

  	// shadow map

  	var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

  	this.shadowMap = shadowMap;

  	// API

  	this.getContext = function () {

  		return _gl;

  	};

  	this.getContextAttributes = function () {

  		return _gl.getContextAttributes();

  	};

  	this.forceContextLoss = function () {

  		var extension = extensions.get( 'WEBGL_lose_context' );
  		if ( extension ) extension.loseContext();

  	};

  	this.forceContextRestore = function () {

  		var extension = extensions.get( 'WEBGL_lose_context' );
  		if ( extension ) extension.restoreContext();

  	};

  	this.getPixelRatio = function () {

  		return _pixelRatio;

  	};

  	this.setPixelRatio = function ( value ) {

  		if ( value === undefined ) return;

  		_pixelRatio = value;

  		this.setSize( _width, _height, false );

  	};

  	this.getSize = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );

  			target = new Vector2();

  		}

  		return target.set( _width, _height );

  	};

  	this.setSize = function ( width, height, updateStyle ) {

  		if ( vr.isPresenting() ) {

  			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
  			return;

  		}

  		_width = width;
  		_height = height;

  		_canvas.width = width * _pixelRatio;
  		_canvas.height = height * _pixelRatio;

  		if ( updateStyle !== false ) {

  			_canvas.style.width = width + 'px';
  			_canvas.style.height = height + 'px';

  		}

  		this.setViewport( 0, 0, width, height );

  	};

  	this.getDrawingBufferSize = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );

  			target = new Vector2();

  		}

  		return target.set( _width * _pixelRatio, _height * _pixelRatio );

  	};

  	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

  		_width = width;
  		_height = height;

  		_pixelRatio = pixelRatio;

  		_canvas.width = width * pixelRatio;
  		_canvas.height = height * pixelRatio;

  		this.setViewport( 0, 0, width, height );

  	};

  	this.getCurrentViewport = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );

  			target = new Vector4();

  		}

  		return target.copy( _currentViewport );

  	};

  	this.getViewport = function ( target ) {

  		return target.copy( _viewport );

  	};

  	this.setViewport = function ( x, y, width, height ) {

  		if ( x.isVector4 ) {

  			_viewport.set( x.x, x.y, x.z, x.w );

  		} else {

  			_viewport.set( x, y, width, height );

  		}

  		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

  	};

  	this.getScissor = function ( target ) {

  		return target.copy( _scissor );

  	};

  	this.setScissor = function ( x, y, width, height ) {

  		if ( x.isVector4 ) {

  			_scissor.set( x.x, x.y, x.z, x.w );

  		} else {

  			_scissor.set( x, y, width, height );

  		}

  		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );

  	};

  	this.getScissorTest = function () {

  		return _scissorTest;

  	};

  	this.setScissorTest = function ( boolean ) {

  		state.setScissorTest( _scissorTest = boolean );

  	};

  	// Clearing

  	this.getClearColor = function () {

  		return background.getClearColor();

  	};

  	this.setClearColor = function () {

  		background.setClearColor.apply( background, arguments );

  	};

  	this.getClearAlpha = function () {

  		return background.getClearAlpha();

  	};

  	this.setClearAlpha = function () {

  		background.setClearAlpha.apply( background, arguments );

  	};

  	this.clear = function ( color, depth, stencil ) {

  		var bits = 0;

  		if ( color === undefined || color ) bits |= 16384;
  		if ( depth === undefined || depth ) bits |= 256;
  		if ( stencil === undefined || stencil ) bits |= 1024;

  		_gl.clear( bits );

  	};

  	this.clearColor = function () {

  		this.clear( true, false, false );

  	};

  	this.clearDepth = function () {

  		this.clear( false, true, false );

  	};

  	this.clearStencil = function () {

  		this.clear( false, false, true );

  	};

  	//

  	this.dispose = function () {

  		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
  		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

  		renderLists.dispose();
  		renderStates.dispose();
  		properties.dispose();
  		objects.dispose();

  		vr.dispose();

  		animation.stop();

  	};

  	// Events

  	function onContextLost( event ) {

  		event.preventDefault();

  		console.log( 'THREE.WebGLRenderer: Context Lost.' );

  		_isContextLost = true;

  	}

  	function onContextRestore( /* event */ ) {

  		console.log( 'THREE.WebGLRenderer: Context Restored.' );

  		_isContextLost = false;

  		initGLContext();

  	}

  	function onMaterialDispose( event ) {

  		var material = event.target;

  		material.removeEventListener( 'dispose', onMaterialDispose );

  		deallocateMaterial( material );

  	}

  	// Buffer deallocation

  	function deallocateMaterial( material ) {

  		releaseMaterialProgramReference( material );

  		properties.remove( material );

  	}


  	function releaseMaterialProgramReference( material ) {

  		var programInfo = properties.get( material ).program;

  		material.program = undefined;

  		if ( programInfo !== undefined ) {

  			programCache.releaseProgram( programInfo );

  		}

  	}

  	// Buffer rendering

  	function renderObjectImmediate( object, program ) {

  		object.render( function ( object ) {

  			_this.renderBufferImmediate( object, program );

  		} );

  	}

  	this.renderBufferImmediate = function ( object, program ) {

  		state.initAttributes();

  		var buffers = properties.get( object );

  		if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
  		if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
  		if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
  		if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

  		var programAttributes = program.getAttributes();

  		if ( object.hasPositions ) {

  			_gl.bindBuffer( 34962, buffers.position );
  			_gl.bufferData( 34962, object.positionArray, 35048 );

  			state.enableAttribute( programAttributes.position );
  			_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );

  		}

  		if ( object.hasNormals ) {

  			_gl.bindBuffer( 34962, buffers.normal );
  			_gl.bufferData( 34962, object.normalArray, 35048 );

  			state.enableAttribute( programAttributes.normal );
  			_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );

  		}

  		if ( object.hasUvs ) {

  			_gl.bindBuffer( 34962, buffers.uv );
  			_gl.bufferData( 34962, object.uvArray, 35048 );

  			state.enableAttribute( programAttributes.uv );
  			_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );

  		}

  		if ( object.hasColors ) {

  			_gl.bindBuffer( 34962, buffers.color );
  			_gl.bufferData( 34962, object.colorArray, 35048 );

  			state.enableAttribute( programAttributes.color );
  			_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );

  		}

  		state.disableUnusedAttributes();

  		_gl.drawArrays( 4, 0, object.count );

  		object.count = 0;

  	};

  	this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

  		var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

  		state.setMaterial( material, frontFaceCW );

  		var program = setProgram( camera, fog, material, object );

  		var updateBuffers = false;

  		if ( _currentGeometryProgram.geometry !== geometry.id ||
  			_currentGeometryProgram.program !== program.id ||
  			_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {

  			_currentGeometryProgram.geometry = geometry.id;
  			_currentGeometryProgram.program = program.id;
  			_currentGeometryProgram.wireframe = material.wireframe === true;
  			updateBuffers = true;

  		}

  		if ( object.morphTargetInfluences ) {

  			morphtargets.update( object, geometry, material, program );

  			updateBuffers = true;

  		}

  		//

  		var index = geometry.index;
  		var position = geometry.attributes.position;
  		var rangeFactor = 1;

  		if ( material.wireframe === true ) {

  			index = geometries.getWireframeAttribute( geometry );
  			rangeFactor = 2;

  		}

  		var attribute;
  		var renderer = bufferRenderer;

  		if ( index !== null ) {

  			attribute = attributes.get( index );

  			renderer = indexedBufferRenderer;
  			renderer.setIndex( attribute );

  		}

  		if ( updateBuffers ) {

  			setupVertexAttributes( material, program, geometry );

  			if ( index !== null ) {

  				_gl.bindBuffer( 34963, attribute.buffer );

  			}

  		}

  		//

  		var dataCount = Infinity;

  		if ( index !== null ) {

  			dataCount = index.count;

  		} else if ( position !== undefined ) {

  			dataCount = position.count;

  		}

  		var rangeStart = geometry.drawRange.start * rangeFactor;
  		var rangeCount = geometry.drawRange.count * rangeFactor;

  		var groupStart = group !== null ? group.start * rangeFactor : 0;
  		var groupCount = group !== null ? group.count * rangeFactor : Infinity;

  		var drawStart = Math.max( rangeStart, groupStart );
  		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

  		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

  		if ( drawCount === 0 ) return;

  		//

  		if ( object.isMesh ) {

  			if ( material.wireframe === true ) {

  				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
  				renderer.setMode( 1 );

  			} else {

  				switch ( object.drawMode ) {

  					case TrianglesDrawMode:
  						renderer.setMode( 4 );
  						break;

  					case TriangleStripDrawMode:
  						renderer.setMode( 5 );
  						break;

  					case TriangleFanDrawMode:
  						renderer.setMode( 6 );
  						break;

  				}

  			}


  		} else if ( object.isLine ) {

  			var lineWidth = material.linewidth;

  			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

  			state.setLineWidth( lineWidth * getTargetPixelRatio() );

  			if ( object.isLineSegments ) {

  				renderer.setMode( 1 );

  			} else if ( object.isLineLoop ) {

  				renderer.setMode( 2 );

  			} else {

  				renderer.setMode( 3 );

  			}

  		} else if ( object.isPoints ) {

  			renderer.setMode( 0 );

  		} else if ( object.isSprite ) {

  			renderer.setMode( 4 );

  		}

  		if ( geometry && geometry.isInstancedBufferGeometry ) {

  			if ( geometry.maxInstancedCount > 0 ) {

  				renderer.renderInstances( geometry, drawStart, drawCount );

  			}

  		} else {

  			renderer.render( drawStart, drawCount );

  		}

  	};

  	function setupVertexAttributes( material, program, geometry ) {

  		if ( geometry && geometry.isInstancedBufferGeometry && ! capabilities.isWebGL2 ) {

  			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {

  				console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
  				return;

  			}

  		}

  		state.initAttributes();

  		var geometryAttributes = geometry.attributes;

  		var programAttributes = program.getAttributes();

  		var materialDefaultAttributeValues = material.defaultAttributeValues;

  		for ( var name in programAttributes ) {

  			var programAttribute = programAttributes[ name ];

  			if ( programAttribute >= 0 ) {

  				var geometryAttribute = geometryAttributes[ name ];

  				if ( geometryAttribute !== undefined ) {

  					var normalized = geometryAttribute.normalized;
  					var size = geometryAttribute.itemSize;

  					var attribute = attributes.get( geometryAttribute );

  					// TODO Attribute may not be available on context restore

  					if ( attribute === undefined ) continue;

  					var buffer = attribute.buffer;
  					var type = attribute.type;
  					var bytesPerElement = attribute.bytesPerElement;

  					if ( geometryAttribute.isInterleavedBufferAttribute ) {

  						var data = geometryAttribute.data;
  						var stride = data.stride;
  						var offset = geometryAttribute.offset;

  						if ( data && data.isInstancedInterleavedBuffer ) {

  							state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

  							if ( geometry.maxInstancedCount === undefined ) {

  								geometry.maxInstancedCount = data.meshPerAttribute * data.count;

  							}

  						} else {

  							state.enableAttribute( programAttribute );

  						}

  						_gl.bindBuffer( 34962, buffer );
  						_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );

  					} else {

  						if ( geometryAttribute.isInstancedBufferAttribute ) {

  							state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

  							if ( geometry.maxInstancedCount === undefined ) {

  								geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

  							}

  						} else {

  							state.enableAttribute( programAttribute );

  						}

  						_gl.bindBuffer( 34962, buffer );
  						_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );

  					}

  				} else if ( materialDefaultAttributeValues !== undefined ) {

  					var value = materialDefaultAttributeValues[ name ];

  					if ( value !== undefined ) {

  						switch ( value.length ) {

  							case 2:
  								_gl.vertexAttrib2fv( programAttribute, value );
  								break;

  							case 3:
  								_gl.vertexAttrib3fv( programAttribute, value );
  								break;

  							case 4:
  								_gl.vertexAttrib4fv( programAttribute, value );
  								break;

  							default:
  								_gl.vertexAttrib1fv( programAttribute, value );

  						}

  					}

  				}

  			}

  		}

  		state.disableUnusedAttributes();

  	}

  	// Compile

  	this.compile = function ( scene, camera ) {

  		currentRenderState = renderStates.get( scene, camera );
  		currentRenderState.init();

  		scene.traverse( function ( object ) {

  			if ( object.isLight ) {

  				currentRenderState.pushLight( object );

  				if ( object.castShadow ) {

  					currentRenderState.pushShadow( object );

  				}

  			}

  		} );

  		currentRenderState.setupLights( camera );

  		scene.traverse( function ( object ) {

  			if ( object.material ) {

  				if ( Array.isArray( object.material ) ) {

  					for ( var i = 0; i < object.material.length; i ++ ) {

  						initMaterial( object.material[ i ], scene.fog, object );

  					}

  				} else {

  					initMaterial( object.material, scene.fog, object );

  				}

  			}

  		} );

  	};

  	// Animation Loop

  	var onAnimationFrameCallback = null;

  	function onAnimationFrame( time ) {

  		if ( vr.isPresenting() ) return;
  		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

  	}

  	var animation = new WebGLAnimation();
  	animation.setAnimationLoop( onAnimationFrame );

  	if ( typeof window !== 'undefined' ) animation.setContext( window );

  	this.setAnimationLoop = function ( callback ) {

  		onAnimationFrameCallback = callback;
  		vr.setAnimationLoop( callback );

  		animation.start();

  	};

  	// Rendering

  	this.render = function ( scene, camera ) {

  		var renderTarget, forceClear;

  		if ( arguments[ 2 ] !== undefined ) {

  			console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
  			renderTarget = arguments[ 2 ];

  		}

  		if ( arguments[ 3 ] !== undefined ) {

  			console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
  			forceClear = arguments[ 3 ];

  		}

  		if ( ! ( camera && camera.isCamera ) ) {

  			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
  			return;

  		}

  		if ( _isContextLost ) return;

  		// reset caching for this frame

  		_currentGeometryProgram.geometry = null;
  		_currentGeometryProgram.program = null;
  		_currentGeometryProgram.wireframe = false;
  		_currentMaterialId = - 1;
  		_currentCamera = null;

  		// update scene graph

  		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

  		// update camera matrices and frustum

  		if ( camera.parent === null ) camera.updateMatrixWorld();

  		if ( vr.enabled ) {

  			camera = vr.getCamera( camera );

  		}

  		//

  		currentRenderState = renderStates.get( scene, camera );
  		currentRenderState.init();

  		scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );

  		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
  		_frustum.setFromMatrix( _projScreenMatrix );

  		_localClippingEnabled = this.localClippingEnabled;
  		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

  		currentRenderList = renderLists.get( scene, camera );
  		currentRenderList.init();

  		projectObject( scene, camera, 0, _this.sortObjects );

  		if ( _this.sortObjects === true ) {

  			currentRenderList.sort();

  		}

  		//

  		if ( _clippingEnabled ) _clipping.beginShadows();

  		var shadowsArray = currentRenderState.state.shadowsArray;

  		shadowMap.render( shadowsArray, scene, camera );

  		currentRenderState.setupLights( camera );

  		if ( _clippingEnabled ) _clipping.endShadows();

  		//

  		if ( this.info.autoReset ) this.info.reset();

  		if ( renderTarget !== undefined ) {

  			this.setRenderTarget( renderTarget );

  		}

  		//

  		background.render( currentRenderList, scene, camera, forceClear );

  		// render scene

  		var opaqueObjects = currentRenderList.opaque;
  		var transparentObjects = currentRenderList.transparent;

  		if ( scene.overrideMaterial ) {

  			var overrideMaterial = scene.overrideMaterial;

  			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
  			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );

  		} else {

  			// opaque pass (front-to-back order)

  			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );

  			// transparent pass (back-to-front order)

  			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );

  		}

  		//

  		scene.onAfterRender( _this, scene, camera );

  		//

  		if ( _currentRenderTarget !== null ) {

  			// Generate mipmap if we're using any kind of mipmap filtering

  			textures.updateRenderTargetMipmap( _currentRenderTarget );

  			// resolve multisample renderbuffers to a single-sample texture if necessary

  			textures.updateMultisampleRenderTarget( _currentRenderTarget );

  		}

  		// Ensure depth buffer writing is enabled so it can be cleared on next render

  		state.buffers.depth.setTest( true );
  		state.buffers.depth.setMask( true );
  		state.buffers.color.setMask( true );

  		state.setPolygonOffset( false );

  		if ( vr.enabled ) {

  			vr.submitFrame();

  		}

  		// _gl.finish();

  		currentRenderList = null;
  		currentRenderState = null;

  	};

  	function projectObject( object, camera, groupOrder, sortObjects ) {

  		if ( object.visible === false ) return;

  		var visible = object.layers.test( camera.layers );

  		if ( visible ) {

  			if ( object.isGroup ) {

  				groupOrder = object.renderOrder;

  			} else if ( object.isLight ) {

  				currentRenderState.pushLight( object );

  				if ( object.castShadow ) {

  					currentRenderState.pushShadow( object );

  				}

  			} else if ( object.isSprite ) {

  				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

  					if ( sortObjects ) {

  						_vector3.setFromMatrixPosition( object.matrixWorld )
  							.applyMatrix4( _projScreenMatrix );

  					}

  					var geometry = objects.update( object );
  					var material = object.material;

  					if ( material.visible ) {

  						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

  					}

  				}

  			} else if ( object.isImmediateRenderObject ) {

  				if ( sortObjects ) {

  					_vector3.setFromMatrixPosition( object.matrixWorld )
  						.applyMatrix4( _projScreenMatrix );

  				}

  				currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );

  			} else if ( object.isMesh || object.isLine || object.isPoints ) {

  				if ( object.isSkinnedMesh ) {

  					object.skeleton.update();

  				}

  				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

  					if ( sortObjects ) {

  						_vector3.setFromMatrixPosition( object.matrixWorld )
  							.applyMatrix4( _projScreenMatrix );

  					}

  					var geometry = objects.update( object );
  					var material = object.material;

  					if ( Array.isArray( material ) ) {

  						var groups = geometry.groups;

  						for ( var i = 0, l = groups.length; i < l; i ++ ) {

  							var group = groups[ i ];
  							var groupMaterial = material[ group.materialIndex ];

  							if ( groupMaterial && groupMaterial.visible ) {

  								currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

  							}

  						}

  					} else if ( material.visible ) {

  						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

  					}

  				}

  			}

  		}

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			projectObject( children[ i ], camera, groupOrder, sortObjects );

  		}

  	}

  	function renderObjects( renderList, scene, camera, overrideMaterial ) {

  		for ( var i = 0, l = renderList.length; i < l; i ++ ) {

  			var renderItem = renderList[ i ];

  			var object = renderItem.object;
  			var geometry = renderItem.geometry;
  			var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
  			var group = renderItem.group;

  			if ( camera.isArrayCamera ) {

  				_currentArrayCamera = camera;

  				var cameras = camera.cameras;

  				for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

  					var camera2 = cameras[ j ];

  					if ( object.layers.test( camera2.layers ) ) {

  						if ( 'viewport' in camera2 ) { // XR

  							state.viewport( _currentViewport.copy( camera2.viewport ) );

  						} else {

  							var bounds = camera2.bounds;

  							var x = bounds.x * _width;
  							var y = bounds.y * _height;
  							var width = bounds.z * _width;
  							var height = bounds.w * _height;

  							state.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );

  						}

  						currentRenderState.setupLights( camera2 );

  						renderObject( object, scene, camera2, geometry, material, group );

  					}

  				}

  			} else {

  				_currentArrayCamera = null;

  				renderObject( object, scene, camera, geometry, material, group );

  			}

  		}

  	}

  	function renderObject( object, scene, camera, geometry, material, group ) {

  		object.onBeforeRender( _this, scene, camera, geometry, material, group );
  		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

  		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
  		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

  		if ( object.isImmediateRenderObject ) {

  			state.setMaterial( material );

  			var program = setProgram( camera, scene.fog, material, object );

  			_currentGeometryProgram.geometry = null;
  			_currentGeometryProgram.program = null;
  			_currentGeometryProgram.wireframe = false;

  			renderObjectImmediate( object, program );

  		} else {

  			_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

  		}

  		object.onAfterRender( _this, scene, camera, geometry, material, group );
  		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

  	}

  	function initMaterial( material, fog, object ) {

  		var materialProperties = properties.get( material );

  		var lights = currentRenderState.state.lights;
  		var shadowsArray = currentRenderState.state.shadowsArray;

  		var lightsHash = materialProperties.lightsHash;
  		var lightsStateHash = lights.state.hash;

  		var parameters = programCache.getParameters(
  			material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );

  		var code = programCache.getProgramCode( material, parameters );

  		var program = materialProperties.program;
  		var programChange = true;

  		if ( program === undefined ) {

  			// new material
  			material.addEventListener( 'dispose', onMaterialDispose );

  		} else if ( program.code !== code ) {

  			// changed glsl or parameters
  			releaseMaterialProgramReference( material );

  		} else if ( lightsHash.stateID !== lightsStateHash.stateID ||
  			lightsHash.directionalLength !== lightsStateHash.directionalLength ||
  			lightsHash.pointLength !== lightsStateHash.pointLength ||
  			lightsHash.spotLength !== lightsStateHash.spotLength ||
  			lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||
  			lightsHash.hemiLength !== lightsStateHash.hemiLength ||
  			lightsHash.shadowsLength !== lightsStateHash.shadowsLength ) {

  			lightsHash.stateID = lightsStateHash.stateID;
  			lightsHash.directionalLength = lightsStateHash.directionalLength;
  			lightsHash.pointLength = lightsStateHash.pointLength;
  			lightsHash.spotLength = lightsStateHash.spotLength;
  			lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;
  			lightsHash.hemiLength = lightsStateHash.hemiLength;
  			lightsHash.shadowsLength = lightsStateHash.shadowsLength;

  			programChange = false;

  		} else if ( parameters.shaderID !== undefined ) {

  			// same glsl and uniform list
  			return;

  		} else {

  			// only rebuild uniform list
  			programChange = false;

  		}

  		if ( programChange ) {

  			if ( parameters.shaderID ) {

  				var shader = ShaderLib[ parameters.shaderID ];

  				materialProperties.shader = {
  					name: material.type,
  					uniforms: cloneUniforms( shader.uniforms ),
  					vertexShader: shader.vertexShader,
  					fragmentShader: shader.fragmentShader
  				};

  			} else {

  				materialProperties.shader = {
  					name: material.type,
  					uniforms: material.uniforms,
  					vertexShader: material.vertexShader,
  					fragmentShader: material.fragmentShader
  				};

  			}

  			material.onBeforeCompile( materialProperties.shader, _this );

  			// Computing code again as onBeforeCompile may have changed the shaders
  			code = programCache.getProgramCode( material, parameters );

  			program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );

  			materialProperties.program = program;
  			material.program = program;

  		}

  		var programAttributes = program.getAttributes();

  		if ( material.morphTargets ) {

  			material.numSupportedMorphTargets = 0;

  			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

  				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

  					material.numSupportedMorphTargets ++;

  				}

  			}

  		}

  		if ( material.morphNormals ) {

  			material.numSupportedMorphNormals = 0;

  			for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

  				if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

  					material.numSupportedMorphNormals ++;

  				}

  			}

  		}

  		var uniforms = materialProperties.shader.uniforms;

  		if ( ! material.isShaderMaterial &&
  			! material.isRawShaderMaterial ||
  			material.clipping === true ) {

  			materialProperties.numClippingPlanes = _clipping.numPlanes;
  			materialProperties.numIntersection = _clipping.numIntersection;
  			uniforms.clippingPlanes = _clipping.uniform;

  		}

  		materialProperties.fog = fog;

  		// store the light setup it was created for
  		if ( lightsHash === undefined ) {

  			materialProperties.lightsHash = lightsHash = {};

  		}

  		lightsHash.stateID = lightsStateHash.stateID;
  		lightsHash.directionalLength = lightsStateHash.directionalLength;
  		lightsHash.pointLength = lightsStateHash.pointLength;
  		lightsHash.spotLength = lightsStateHash.spotLength;
  		lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;
  		lightsHash.hemiLength = lightsStateHash.hemiLength;
  		lightsHash.shadowsLength = lightsStateHash.shadowsLength;

  		if ( material.lights ) {

  			// wire up the material to this renderer's lighting state

  			uniforms.ambientLightColor.value = lights.state.ambient;
  			uniforms.lightProbe.value = lights.state.probe;
  			uniforms.directionalLights.value = lights.state.directional;
  			uniforms.spotLights.value = lights.state.spot;
  			uniforms.rectAreaLights.value = lights.state.rectArea;
  			uniforms.pointLights.value = lights.state.point;
  			uniforms.hemisphereLights.value = lights.state.hemi;

  			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
  			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
  			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
  			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
  			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
  			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
  			// TODO (abelnation): add area lights shadow info to uniforms

  		}

  		var progUniforms = materialProperties.program.getUniforms(),
  			uniformsList =
  				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

  		materialProperties.uniformsList = uniformsList;

  	}

  	function setProgram( camera, fog, material, object ) {

  		textures.resetTextureUnits();

  		var materialProperties = properties.get( material );
  		var lights = currentRenderState.state.lights;

  		var lightsHash = materialProperties.lightsHash;
  		var lightsStateHash = lights.state.hash;

  		if ( _clippingEnabled ) {

  			if ( _localClippingEnabled || camera !== _currentCamera ) {

  				var useCache =
  					camera === _currentCamera &&
  					material.id === _currentMaterialId;

  				// we might want to call this function with some ClippingGroup
  				// object instead of the material, once it becomes feasible
  				// (#8465, #8379)
  				_clipping.setState(
  					material.clippingPlanes, material.clipIntersection, material.clipShadows,
  					camera, materialProperties, useCache );

  			}

  		}

  		if ( material.needsUpdate === false ) {

  			if ( materialProperties.program === undefined ) {

  				material.needsUpdate = true;

  			} else if ( material.fog && materialProperties.fog !== fog ) {

  				material.needsUpdate = true;

  			} else if ( material.lights && ( lightsHash.stateID !== lightsStateHash.stateID ||
  				lightsHash.directionalLength !== lightsStateHash.directionalLength ||
  				lightsHash.pointLength !== lightsStateHash.pointLength ||
  				lightsHash.spotLength !== lightsStateHash.spotLength ||
  				lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||
  				lightsHash.hemiLength !== lightsStateHash.hemiLength ||
  				lightsHash.shadowsLength !== lightsStateHash.shadowsLength ) ) {

  				material.needsUpdate = true;

  			} else if ( materialProperties.numClippingPlanes !== undefined &&
  				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
  				materialProperties.numIntersection !== _clipping.numIntersection ) ) {

  				material.needsUpdate = true;

  			}

  		}

  		if ( material.needsUpdate ) {

  			initMaterial( material, fog, object );
  			material.needsUpdate = false;

  		}

  		var refreshProgram = false;
  		var refreshMaterial = false;
  		var refreshLights = false;

  		var program = materialProperties.program,
  			p_uniforms = program.getUniforms(),
  			m_uniforms = materialProperties.shader.uniforms;

  		if ( state.useProgram( program.program ) ) {

  			refreshProgram = true;
  			refreshMaterial = true;
  			refreshLights = true;

  		}

  		if ( material.id !== _currentMaterialId ) {

  			_currentMaterialId = material.id;

  			refreshMaterial = true;

  		}

  		if ( refreshProgram || _currentCamera !== camera ) {

  			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

  			if ( capabilities.logarithmicDepthBuffer ) {

  				p_uniforms.setValue( _gl, 'logDepthBufFC',
  					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

  			}

  			if ( _currentCamera !== camera ) {

  				_currentCamera = camera;

  				// lighting uniforms depend on the camera so enforce an update
  				// now, in case this material supports lights - or later, when
  				// the next material that does gets activated:

  				refreshMaterial = true;		// set to true on material change
  				refreshLights = true;		// remains set until update done

  			}

  			// load material specific uniforms
  			// (shader material also gets them for the sake of genericity)

  			if ( material.isShaderMaterial ||
  				material.isMeshPhongMaterial ||
  				material.isMeshStandardMaterial ||
  				material.envMap ) {

  				var uCamPos = p_uniforms.map.cameraPosition;

  				if ( uCamPos !== undefined ) {

  					uCamPos.setValue( _gl,
  						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

  				}

  			}

  			if ( material.isMeshPhongMaterial ||
  				material.isMeshLambertMaterial ||
  				material.isMeshBasicMaterial ||
  				material.isMeshStandardMaterial ||
  				material.isShaderMaterial ||
  				material.skinning ) {

  				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

  			}

  		}

  		// skinning uniforms must be set even if material didn't change
  		// auto-setting of texture unit for bone texture must go before other textures
  		// not sure why, but otherwise weird things happen

  		if ( material.skinning ) {

  			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
  			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

  			var skeleton = object.skeleton;

  			if ( skeleton ) {

  				var bones = skeleton.bones;

  				if ( capabilities.floatVertexTextures ) {

  					if ( skeleton.boneTexture === undefined ) {

  						// layout (1 matrix = 4 pixels)
  						//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
  						//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
  						//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
  						//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
  						//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


  						var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
  						size = _Math.ceilPowerOfTwo( size );
  						size = Math.max( size, 4 );

  						var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
  						boneMatrices.set( skeleton.boneMatrices ); // copy current values

  						var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
  						boneTexture.needsUpdate = true;

  						skeleton.boneMatrices = boneMatrices;
  						skeleton.boneTexture = boneTexture;
  						skeleton.boneTextureSize = size;

  					}

  					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
  					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

  				} else {

  					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

  				}

  			}

  		}

  		if ( refreshMaterial ) {

  			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
  			p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

  			if ( material.lights ) {

  				// the current material requires lighting info

  				// note: all lighting uniforms are always set correctly
  				// they simply reference the renderer's state for their
  				// values
  				//
  				// use the current material's .needsUpdate flags to set
  				// the GL state when required

  				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

  			}

  			// refresh uniforms common to several materials

  			if ( fog && material.fog ) {

  				refreshUniformsFog( m_uniforms, fog );

  			}

  			if ( material.isMeshBasicMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );

  			} else if ( material.isMeshLambertMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsLambert( m_uniforms, material );

  			} else if ( material.isMeshPhongMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );

  				if ( material.isMeshToonMaterial ) {

  					refreshUniformsToon( m_uniforms, material );

  				} else {

  					refreshUniformsPhong( m_uniforms, material );

  				}

  			} else if ( material.isMeshStandardMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );

  				if ( material.isMeshPhysicalMaterial ) {

  					refreshUniformsPhysical( m_uniforms, material );

  				} else {

  					refreshUniformsStandard( m_uniforms, material );

  				}

  			} else if ( material.isMeshMatcapMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );

  				refreshUniformsMatcap( m_uniforms, material );

  			} else if ( material.isMeshDepthMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsDepth( m_uniforms, material );

  			} else if ( material.isMeshDistanceMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsDistance( m_uniforms, material );

  			} else if ( material.isMeshNormalMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsNormal( m_uniforms, material );

  			} else if ( material.isLineBasicMaterial ) {

  				refreshUniformsLine( m_uniforms, material );

  				if ( material.isLineDashedMaterial ) {

  					refreshUniformsDash( m_uniforms, material );

  				}

  			} else if ( material.isPointsMaterial ) {

  				refreshUniformsPoints( m_uniforms, material );

  			} else if ( material.isSpriteMaterial ) {

  				refreshUniformsSprites( m_uniforms, material );

  			} else if ( material.isShadowMaterial ) {

  				m_uniforms.color.value.copy( material.color );
  				m_uniforms.opacity.value = material.opacity;

  			}

  			// RectAreaLight Texture
  			// TODO (mrdoob): Find a nicer implementation

  			if ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;
  			if ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;

  			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

  		}

  		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

  			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
  			material.uniformsNeedUpdate = false;

  		}

  		if ( material.isSpriteMaterial ) {

  			p_uniforms.setValue( _gl, 'center', object.center );

  		}

  		// common matrices

  		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
  		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
  		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

  		return program;

  	}

  	// Uniforms (refresh uniforms objects)

  	function refreshUniformsCommon( uniforms, material ) {

  		uniforms.opacity.value = material.opacity;

  		if ( material.color ) {

  			uniforms.diffuse.value.copy( material.color );

  		}

  		if ( material.emissive ) {

  			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

  		}

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  		}

  		if ( material.specularMap ) {

  			uniforms.specularMap.value = material.specularMap;

  		}

  		if ( material.envMap ) {

  			uniforms.envMap.value = material.envMap;

  			// don't flip CubeTexture envMaps, flip everything else:
  			//  WebGLRenderTargetCube will be flipped for backwards compatibility
  			//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
  			// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
  			uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;

  			uniforms.reflectivity.value = material.reflectivity;
  			uniforms.refractionRatio.value = material.refractionRatio;

  			uniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;

  		}

  		if ( material.lightMap ) {

  			uniforms.lightMap.value = material.lightMap;
  			uniforms.lightMapIntensity.value = material.lightMapIntensity;

  		}

  		if ( material.aoMap ) {

  			uniforms.aoMap.value = material.aoMap;
  			uniforms.aoMapIntensity.value = material.aoMapIntensity;

  		}

  		// uv repeat and offset setting priorities
  		// 1. color map
  		// 2. specular map
  		// 3. normal map
  		// 4. bump map
  		// 5. alpha map
  		// 6. emissive map

  		var uvScaleMap;

  		if ( material.map ) {

  			uvScaleMap = material.map;

  		} else if ( material.specularMap ) {

  			uvScaleMap = material.specularMap;

  		} else if ( material.displacementMap ) {

  			uvScaleMap = material.displacementMap;

  		} else if ( material.normalMap ) {

  			uvScaleMap = material.normalMap;

  		} else if ( material.bumpMap ) {

  			uvScaleMap = material.bumpMap;

  		} else if ( material.roughnessMap ) {

  			uvScaleMap = material.roughnessMap;

  		} else if ( material.metalnessMap ) {

  			uvScaleMap = material.metalnessMap;

  		} else if ( material.alphaMap ) {

  			uvScaleMap = material.alphaMap;

  		} else if ( material.emissiveMap ) {

  			uvScaleMap = material.emissiveMap;

  		}

  		if ( uvScaleMap !== undefined ) {

  			// backwards compatibility
  			if ( uvScaleMap.isWebGLRenderTarget ) {

  				uvScaleMap = uvScaleMap.texture;

  			}

  			if ( uvScaleMap.matrixAutoUpdate === true ) {

  				uvScaleMap.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

  		}

  	}

  	function refreshUniformsLine( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;

  	}

  	function refreshUniformsDash( uniforms, material ) {

  		uniforms.dashSize.value = material.dashSize;
  		uniforms.totalSize.value = material.dashSize + material.gapSize;
  		uniforms.scale.value = material.scale;

  	}

  	function refreshUniformsPoints( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;
  		uniforms.size.value = material.size * _pixelRatio;
  		uniforms.scale.value = _height * 0.5;

  		uniforms.map.value = material.map;

  		if ( material.map !== null ) {

  			if ( material.map.matrixAutoUpdate === true ) {

  				material.map.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( material.map.matrix );

  		}

  	}

  	function refreshUniformsSprites( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;
  		uniforms.rotation.value = material.rotation;
  		uniforms.map.value = material.map;

  		if ( material.map !== null ) {

  			if ( material.map.matrixAutoUpdate === true ) {

  				material.map.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( material.map.matrix );

  		}

  	}

  	function refreshUniformsFog( uniforms, fog ) {

  		uniforms.fogColor.value.copy( fog.color );

  		if ( fog.isFog ) {

  			uniforms.fogNear.value = fog.near;
  			uniforms.fogFar.value = fog.far;

  		} else if ( fog.isFogExp2 ) {

  			uniforms.fogDensity.value = fog.density;

  		}

  	}

  	function refreshUniformsLambert( uniforms, material ) {

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  	}

  	function refreshUniformsPhong( uniforms, material ) {

  		uniforms.specular.value.copy( material.specular );
  		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsToon( uniforms, material ) {

  		refreshUniformsPhong( uniforms, material );

  		if ( material.gradientMap ) {

  			uniforms.gradientMap.value = material.gradientMap;

  		}

  	}

  	function refreshUniformsStandard( uniforms, material ) {

  		uniforms.roughness.value = material.roughness;
  		uniforms.metalness.value = material.metalness;

  		if ( material.roughnessMap ) {

  			uniforms.roughnessMap.value = material.roughnessMap;

  		}

  		if ( material.metalnessMap ) {

  			uniforms.metalnessMap.value = material.metalnessMap;

  		}

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  		if ( material.envMap ) {

  			//uniforms.envMap.value = material.envMap; // part of uniforms common
  			uniforms.envMapIntensity.value = material.envMapIntensity;

  		}

  	}

  	function refreshUniformsPhysical( uniforms, material ) {

  		refreshUniformsStandard( uniforms, material );

  		uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

  		uniforms.clearCoat.value = material.clearCoat;
  		uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

  	}

  	function refreshUniformsMatcap( uniforms, material ) {

  		if ( material.matcap ) {

  			uniforms.matcap.value = material.matcap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsDepth( uniforms, material ) {

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsDistance( uniforms, material ) {

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  		uniforms.referencePosition.value.copy( material.referencePosition );
  		uniforms.nearDistance.value = material.nearDistance;
  		uniforms.farDistance.value = material.farDistance;

  	}

  	function refreshUniformsNormal( uniforms, material ) {

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

  	function markUniformsLightsNeedsUpdate( uniforms, value ) {

  		uniforms.ambientLightColor.needsUpdate = value;
  		uniforms.lightProbe.needsUpdate = value;

  		uniforms.directionalLights.needsUpdate = value;
  		uniforms.pointLights.needsUpdate = value;
  		uniforms.spotLights.needsUpdate = value;
  		uniforms.rectAreaLights.needsUpdate = value;
  		uniforms.hemisphereLights.needsUpdate = value;

  	}

  	//

  	this.setFramebuffer = function ( value ) {

  		_framebuffer = value;

  	};

  	this.getRenderTarget = function () {

  		return _currentRenderTarget;

  	};

  	this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipMapLevel ) {

  		_currentRenderTarget = renderTarget;

  		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

  			textures.setupRenderTarget( renderTarget );

  		}

  		var framebuffer = _framebuffer;
  		var isCube = false;

  		if ( renderTarget ) {

  			var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

  			if ( renderTarget.isWebGLRenderTargetCube ) {

  				framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
  				isCube = true;

  			} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {

  				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

  			} else {

  				framebuffer = __webglFramebuffer;

  			}

  			_currentViewport.copy( renderTarget.viewport );
  			_currentScissor.copy( renderTarget.scissor );
  			_currentScissorTest = renderTarget.scissorTest;

  		} else {

  			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
  			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
  			_currentScissorTest = _scissorTest;

  		}

  		if ( _currentFramebuffer !== framebuffer ) {

  			_gl.bindFramebuffer( 36160, framebuffer );
  			_currentFramebuffer = framebuffer;

  		}

  		state.viewport( _currentViewport );
  		state.scissor( _currentScissor );
  		state.setScissorTest( _currentScissorTest );

  		if ( isCube ) {

  			var textureProperties = properties.get( renderTarget.texture );
  			_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipMapLevel || 0 );

  		}

  	};

  	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

  		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

  			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
  			return;

  		}

  		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

  		if ( framebuffer ) {

  			var restore = false;

  			if ( framebuffer !== _currentFramebuffer ) {

  				_gl.bindFramebuffer( 36160, framebuffer );

  				restore = true;

  			}

  			try {

  				var texture = renderTarget.texture;
  				var textureFormat = texture.format;
  				var textureType = texture.type;

  				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
  					return;

  				}

  				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)
  					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
  					! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
  					return;

  				}

  				if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {

  					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

  					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

  						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

  					}

  				} else {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

  				}

  			} finally {

  				if ( restore ) {

  					_gl.bindFramebuffer( 36160, _currentFramebuffer );

  				}

  			}

  		}

  	};

  	this.copyFramebufferToTexture = function ( position, texture, level ) {

  		var width = texture.image.width;
  		var height = texture.image.height;
  		var glFormat = utils.convert( texture.format );

  		textures.setTexture2D( texture, 0 );

  		_gl.copyTexImage2D( 3553, level || 0, glFormat, position.x, position.y, width, height, 0 );

  	};

  	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {

  		var width = srcTexture.image.width;
  		var height = srcTexture.image.height;
  		var glFormat = utils.convert( dstTexture.format );
  		var glType = utils.convert( dstTexture.type );

  		textures.setTexture2D( dstTexture, 0 );

  		if ( srcTexture.isDataTexture ) {

  			_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

  		} else {

  			_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );

  		}

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function FogExp2( color, density ) {

  	this.name = '';

  	this.color = new Color( color );
  	this.density = ( density !== undefined ) ? density : 0.00025;

  }

  Object.assign( FogExp2.prototype, {

  	isFogExp2: true,

  	clone: function () {

  		return new FogExp2( this.color, this.density );

  	},

  	toJSON: function ( /* meta */ ) {

  		return {
  			type: 'FogExp2',
  			color: this.color.getHex(),
  			density: this.density
  		};

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Fog( color, near, far ) {

  	this.name = '';

  	this.color = new Color( color );

  	this.near = ( near !== undefined ) ? near : 1;
  	this.far = ( far !== undefined ) ? far : 1000;

  }

  Object.assign( Fog.prototype, {

  	isFog: true,

  	clone: function () {

  		return new Fog( this.color, this.near, this.far );

  	},

  	toJSON: function ( /* meta */ ) {

  		return {
  			type: 'Fog',
  			color: this.color.getHex(),
  			near: this.near,
  			far: this.far
  		};

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Scene() {

  	Object3D.call( this );

  	this.type = 'Scene';

  	this.background = null;
  	this.fog = null;
  	this.overrideMaterial = null;

  	this.autoUpdate = true; // checked by the renderer

  }

  Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Scene,

  	isScene: true,

  	copy: function ( source, recursive ) {

  		Object3D.prototype.copy.call( this, source, recursive );

  		if ( source.background !== null ) this.background = source.background.clone();
  		if ( source.fog !== null ) this.fog = source.fog.clone();
  		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

  		this.autoUpdate = source.autoUpdate;
  		this.matrixAutoUpdate = source.matrixAutoUpdate;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
  		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

  		return data;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InterleavedBuffer( array, stride ) {

  	this.array = array;
  	this.stride = stride;
  	this.count = array !== undefined ? array.length / stride : 0;

  	this.dynamic = false;
  	this.updateRange = { offset: 0, count: - 1 };

  	this.version = 0;

  }

  Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

  	set: function ( value ) {

  		if ( value === true ) this.version ++;

  	}

  } );

  Object.assign( InterleavedBuffer.prototype, {

  	isInterleavedBuffer: true,

  	onUploadCallback: function () {},

  	setArray: function ( array ) {

  		if ( Array.isArray( array ) ) {

  			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

  		}

  		this.count = array !== undefined ? array.length / this.stride : 0;
  		this.array = array;

  		return this;

  	},

  	setDynamic: function ( value ) {

  		this.dynamic = value;

  		return this;

  	},

  	copy: function ( source ) {

  		this.array = new source.array.constructor( source.array );
  		this.count = source.count;
  		this.stride = source.stride;
  		this.dynamic = source.dynamic;

  		return this;

  	},

  	copyAt: function ( index1, attribute, index2 ) {

  		index1 *= this.stride;
  		index2 *= attribute.stride;

  		for ( var i = 0, l = this.stride; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	},

  	set: function ( value, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.array.set( value, offset );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	onUpload: function ( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

  	this.data = interleavedBuffer;
  	this.itemSize = itemSize;
  	this.offset = offset;

  	this.normalized = normalized === true;

  }

  Object.defineProperties( InterleavedBufferAttribute.prototype, {

  	count: {

  		get: function () {

  			return this.data.count;

  		}

  	},

  	array: {

  		get: function () {

  			return this.data.array;

  		}

  	}

  } );

  Object.assign( InterleavedBufferAttribute.prototype, {

  	isInterleavedBufferAttribute: true,

  	setX: function ( index, x ) {

  		this.data.array[ index * this.data.stride + this.offset ] = x;

  		return this;

  	},

  	setY: function ( index, y ) {

  		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

  		return this;

  	},

  	setZ: function ( index, z ) {

  		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

  		return this;

  	},

  	setW: function ( index, w ) {

  		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

  		return this;

  	},

  	getX: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset ];

  	},

  	getY: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 1 ];

  	},

  	getZ: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 2 ];

  	},

  	getW: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 3 ];

  	},

  	setXY: function ( index, x, y ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;

  		return this;

  	},

  	setXYZ: function ( index, x, y, z ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;
  		this.data.array[ index + 2 ] = z;

  		return this;

  	},

  	setXYZW: function ( index, x, y, z, w ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;
  		this.data.array[ index + 2 ] = z;
  		this.data.array[ index + 3 ] = w;

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  map: new THREE.Texture( <Image> ),
   *  rotation: <float>,
   *  sizeAttenuation: <bool>
   * }
   */

  function SpriteMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'SpriteMaterial';

  	this.color = new Color( 0xffffff );
  	this.map = null;

  	this.rotation = 0;

  	this.sizeAttenuation = true;

  	this.lights = false;
  	this.transparent = true;

  	this.setValues( parameters );

  }

  SpriteMaterial.prototype = Object.create( Material.prototype );
  SpriteMaterial.prototype.constructor = SpriteMaterial;
  SpriteMaterial.prototype.isSpriteMaterial = true;

  SpriteMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );
  	this.map = source.map;

  	this.rotation = source.rotation;

  	this.sizeAttenuation = source.sizeAttenuation;

  	return this;

  };

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   */

  var geometry;

  function Sprite( material ) {

  	Object3D.call( this );

  	this.type = 'Sprite';

  	if ( geometry === undefined ) {

  		geometry = new BufferGeometry();

  		var float32Array = new Float32Array( [
  			- 0.5, - 0.5, 0, 0, 0,
  			0.5, - 0.5, 0, 1, 0,
  			0.5, 0.5, 0, 1, 1,
  			- 0.5, 0.5, 0, 0, 1
  		] );

  		var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

  		geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
  		geometry.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
  		geometry.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

  	}

  	this.geometry = geometry;
  	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

  	this.center = new Vector2( 0.5, 0.5 );

  }

  Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Sprite,

  	isSprite: true,

  	raycast: ( function () {

  		var intersectPoint = new Vector3();
  		var worldScale = new Vector3();
  		var mvPosition = new Vector3();

  		var alignedPosition = new Vector2();
  		var rotatedPosition = new Vector2();
  		var viewWorldMatrix = new Matrix4();

  		var vA = new Vector3();
  		var vB = new Vector3();
  		var vC = new Vector3();

  		var uvA = new Vector2();
  		var uvB = new Vector2();
  		var uvC = new Vector2();

  		function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {

  			// compute position in camera space
  			alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );

  			// to check if rotation is not zero
  			if ( sin !== undefined ) {

  				rotatedPosition.x = ( cos * alignedPosition.x ) - ( sin * alignedPosition.y );
  				rotatedPosition.y = ( sin * alignedPosition.x ) + ( cos * alignedPosition.y );

  			} else {

  				rotatedPosition.copy( alignedPosition );

  			}


  			vertexPosition.copy( mvPosition );
  			vertexPosition.x += rotatedPosition.x;
  			vertexPosition.y += rotatedPosition.y;

  			// transform to world space
  			vertexPosition.applyMatrix4( viewWorldMatrix );

  		}

  		return function raycast( raycaster, intersects ) {

  			worldScale.setFromMatrixScale( this.matrixWorld );
  			viewWorldMatrix.getInverse( this.modelViewMatrix ).premultiply( this.matrixWorld );
  			mvPosition.setFromMatrixPosition( this.modelViewMatrix );

  			var rotation = this.material.rotation;
  			var sin, cos;
  			if ( rotation !== 0 ) {

  				cos = Math.cos( rotation );
  				sin = Math.sin( rotation );

  			}

  			var center = this.center;

  			transformVertex( vA.set( - 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
  			transformVertex( vB.set( 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
  			transformVertex( vC.set( 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );

  			uvA.set( 0, 0 );
  			uvB.set( 1, 0 );
  			uvC.set( 1, 1 );

  			// check first triangle
  			var intersect = raycaster.ray.intersectTriangle( vA, vB, vC, false, intersectPoint );

  			if ( intersect === null ) {

  				// check second triangle
  				transformVertex( vB.set( - 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
  				uvB.set( 0, 1 );

  				intersect = raycaster.ray.intersectTriangle( vA, vC, vB, false, intersectPoint );
  				if ( intersect === null ) {

  					return;

  				}

  			}

  			var distance = raycaster.ray.origin.distanceTo( intersectPoint );

  			if ( distance < raycaster.near || distance > raycaster.far ) return;

  			intersects.push( {

  				distance: distance,
  				point: intersectPoint.clone(),
  				uv: Triangle.getUV( intersectPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() ),
  				face: null,
  				object: this

  			} );

  		};

  	}() ),

  	clone: function () {

  		return new this.constructor( this.material ).copy( this );

  	},

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		if ( source.center !== undefined ) this.center.copy( source.center );

  		return this;

  	}


  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  function LOD() {

  	Object3D.call( this );

  	this.type = 'LOD';

  	Object.defineProperties( this, {
  		levels: {
  			enumerable: true,
  			value: []
  		}
  	} );

  }

  LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: LOD,

  	isLOD: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source, false );

  		var levels = source.levels;

  		for ( var i = 0, l = levels.length; i < l; i ++ ) {

  			var level = levels[ i ];

  			this.addLevel( level.object.clone(), level.distance );

  		}

  		return this;

  	},

  	addLevel: function ( object, distance ) {

  		if ( distance === undefined ) distance = 0;

  		distance = Math.abs( distance );

  		var levels = this.levels;

  		for ( var l = 0; l < levels.length; l ++ ) {

  			if ( distance < levels[ l ].distance ) {

  				break;

  			}

  		}

  		levels.splice( l, 0, { distance: distance, object: object } );

  		this.add( object );

  		return this;

  	},

  	getObjectForDistance: function ( distance ) {

  		var levels = this.levels;

  		for ( var i = 1, l = levels.length; i < l; i ++ ) {

  			if ( distance < levels[ i ].distance ) {

  				break;

  			}

  		}

  		return levels[ i - 1 ].object;

  	},

  	raycast: ( function () {

  		var matrixPosition = new Vector3();

  		return function raycast( raycaster, intersects ) {

  			matrixPosition.setFromMatrixPosition( this.matrixWorld );

  			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

  			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

  		};

  	}() ),

  	update: function () {

  		var v1 = new Vector3();
  		var v2 = new Vector3();

  		return function update( camera ) {

  			var levels = this.levels;

  			if ( levels.length > 1 ) {

  				v1.setFromMatrixPosition( camera.matrixWorld );
  				v2.setFromMatrixPosition( this.matrixWorld );

  				var distance = v1.distanceTo( v2 );

  				levels[ 0 ].object.visible = true;

  				for ( var i = 1, l = levels.length; i < l; i ++ ) {

  					if ( distance >= levels[ i ].distance ) {

  						levels[ i - 1 ].object.visible = false;
  						levels[ i ].object.visible = true;

  					} else {

  						break;

  					}

  				}

  				for ( ; i < l; i ++ ) {

  					levels[ i ].object.visible = false;

  				}

  			}

  		};

  	}(),

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.levels = [];

  		var levels = this.levels;

  		for ( var i = 0, l = levels.length; i < l; i ++ ) {

  			var level = levels[ i ];

  			data.object.levels.push( {
  				object: level.object.uuid,
  				distance: level.distance
  			} );

  		}

  		return data;

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author ikerr / http://verold.com
   */

  function SkinnedMesh( geometry, material ) {

  	if ( geometry && geometry.isGeometry ) {

  		console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

  	}

  	Mesh.call( this, geometry, material );

  	this.type = 'SkinnedMesh';

  	this.bindMode = 'attached';
  	this.bindMatrix = new Matrix4();
  	this.bindMatrixInverse = new Matrix4();

  }

  SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

  	constructor: SkinnedMesh,

  	isSkinnedMesh: true,

  	bind: function ( skeleton, bindMatrix ) {

  		this.skeleton = skeleton;

  		if ( bindMatrix === undefined ) {

  			this.updateMatrixWorld( true );

  			this.skeleton.calculateInverses();

  			bindMatrix = this.matrixWorld;

  		}

  		this.bindMatrix.copy( bindMatrix );
  		this.bindMatrixInverse.getInverse( bindMatrix );

  	},

  	pose: function () {

  		this.skeleton.pose();

  	},

  	normalizeSkinWeights: function () {

  		var vector = new Vector4();

  		var skinWeight = this.geometry.attributes.skinWeight;

  		for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {

  			vector.x = skinWeight.getX( i );
  			vector.y = skinWeight.getY( i );
  			vector.z = skinWeight.getZ( i );
  			vector.w = skinWeight.getW( i );

  			var scale = 1.0 / vector.manhattanLength();

  			if ( scale !== Infinity ) {

  				vector.multiplyScalar( scale );

  			} else {

  				vector.set( 1, 0, 0, 0 ); // do something reasonable

  			}

  			skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );

  		}

  	},

  	updateMatrixWorld: function ( force ) {

  		Mesh.prototype.updateMatrixWorld.call( this, force );

  		if ( this.bindMode === 'attached' ) {

  			this.bindMatrixInverse.getInverse( this.matrixWorld );

  		} else if ( this.bindMode === 'detached' ) {

  			this.bindMatrixInverse.getInverse( this.bindMatrix );

  		} else {

  			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.geometry, this.material ).copy( this );

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author michael guerrero / http://realitymeltdown.com
   * @author ikerr / http://verold.com
   */

  function Skeleton( bones, boneInverses ) {

  	// copy the bone array

  	bones = bones || [];

  	this.bones = bones.slice( 0 );
  	this.boneMatrices = new Float32Array( this.bones.length * 16 );

  	// use the supplied bone inverses or calculate the inverses

  	if ( boneInverses === undefined ) {

  		this.calculateInverses();

  	} else {

  		if ( this.bones.length === boneInverses.length ) {

  			this.boneInverses = boneInverses.slice( 0 );

  		} else {

  			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

  			this.boneInverses = [];

  			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  				this.boneInverses.push( new Matrix4() );

  			}

  		}

  	}

  }

  Object.assign( Skeleton.prototype, {

  	calculateInverses: function () {

  		this.boneInverses = [];

  		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  			var inverse = new Matrix4();

  			if ( this.bones[ i ] ) {

  				inverse.getInverse( this.bones[ i ].matrixWorld );

  			}

  			this.boneInverses.push( inverse );

  		}

  	},

  	pose: function () {

  		var bone, i, il;

  		// recover the bind-time world matrices

  		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

  			bone = this.bones[ i ];

  			if ( bone ) {

  				bone.matrixWorld.getInverse( this.boneInverses[ i ] );

  			}

  		}

  		// compute the local matrices, positions, rotations and scales

  		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

  			bone = this.bones[ i ];

  			if ( bone ) {

  				if ( bone.parent && bone.parent.isBone ) {

  					bone.matrix.getInverse( bone.parent.matrixWorld );
  					bone.matrix.multiply( bone.matrixWorld );

  				} else {

  					bone.matrix.copy( bone.matrixWorld );

  				}

  				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

  			}

  		}

  	},

  	update: ( function () {

  		var offsetMatrix = new Matrix4();
  		var identityMatrix = new Matrix4();

  		return function update() {

  			var bones = this.bones;
  			var boneInverses = this.boneInverses;
  			var boneMatrices = this.boneMatrices;
  			var boneTexture = this.boneTexture;

  			// flatten bone matrices to array

  			for ( var i = 0, il = bones.length; i < il; i ++ ) {

  				// compute the offset between the current and the original transform

  				var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;

  				offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
  				offsetMatrix.toArray( boneMatrices, i * 16 );

  			}

  			if ( boneTexture !== undefined ) {

  				boneTexture.needsUpdate = true;

  			}

  		};

  	} )(),

  	clone: function () {

  		return new Skeleton( this.bones, this.boneInverses );

  	},

  	getBoneByName: function ( name ) {

  		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  			var bone = this.bones[ i ];

  			if ( bone.name === name ) {

  				return bone;

  			}

  		}

  		return undefined;

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author ikerr / http://verold.com
   */

  function Bone() {

  	Object3D.call( this );

  	this.type = 'Bone';

  }

  Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Bone,

  	isBone: true

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  linewidth: <float>,
   *  linecap: "round",
   *  linejoin: "round"
   * }
   */

  function LineBasicMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'LineBasicMaterial';

  	this.color = new Color( 0xffffff );

  	this.linewidth = 1;
  	this.linecap = 'round';
  	this.linejoin = 'round';

  	this.lights = false;

  	this.setValues( parameters );

  }

  LineBasicMaterial.prototype = Object.create( Material.prototype );
  LineBasicMaterial.prototype.constructor = LineBasicMaterial;

  LineBasicMaterial.prototype.isLineBasicMaterial = true;

  LineBasicMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.linewidth = source.linewidth;
  	this.linecap = source.linecap;
  	this.linejoin = source.linejoin;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Line( geometry, material, mode ) {

  	if ( mode === 1 ) {

  		console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );

  	}

  	Object3D.call( this );

  	this.type = 'Line';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

  }

  Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Line,

  	isLine: true,

  	computeLineDistances: ( function () {

  		var start = new Vector3();
  		var end = new Vector3();

  		return function computeLineDistances() {

  			var geometry = this.geometry;

  			if ( geometry.isBufferGeometry ) {

  				// we assume non-indexed geometry

  				if ( geometry.index === null ) {

  					var positionAttribute = geometry.attributes.position;
  					var lineDistances = [ 0 ];

  					for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {

  						start.fromBufferAttribute( positionAttribute, i - 1 );
  						end.fromBufferAttribute( positionAttribute, i );

  						lineDistances[ i ] = lineDistances[ i - 1 ];
  						lineDistances[ i ] += start.distanceTo( end );

  					}

  					geometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

  				} else {

  					console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

  				}

  			} else if ( geometry.isGeometry ) {

  				var vertices = geometry.vertices;
  				var lineDistances = geometry.lineDistances;

  				lineDistances[ 0 ] = 0;

  				for ( var i = 1, l = vertices.length; i < l; i ++ ) {

  					lineDistances[ i ] = lineDistances[ i - 1 ];
  					lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );

  				}

  			}

  			return this;

  		};

  	}() ),

  	raycast: ( function () {

  		var inverseMatrix = new Matrix4();
  		var ray = new Ray();
  		var sphere = new Sphere();

  		return function raycast( raycaster, intersects ) {

  			var precision = raycaster.linePrecision;

  			var geometry = this.geometry;
  			var matrixWorld = this.matrixWorld;

  			// Checking boundingSphere distance to ray

  			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  			sphere.copy( geometry.boundingSphere );
  			sphere.applyMatrix4( matrixWorld );
  			sphere.radius += precision;

  			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

  			//

  			inverseMatrix.getInverse( matrixWorld );
  			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

  			var localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
  			var localPrecisionSq = localPrecision * localPrecision;

  			var vStart = new Vector3();
  			var vEnd = new Vector3();
  			var interSegment = new Vector3();
  			var interRay = new Vector3();
  			var step = ( this && this.isLineSegments ) ? 2 : 1;

  			if ( geometry.isBufferGeometry ) {

  				var index = geometry.index;
  				var attributes = geometry.attributes;
  				var positions = attributes.position.array;

  				if ( index !== null ) {

  					var indices = index.array;

  					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

  						var a = indices[ i ];
  						var b = indices[ i + 1 ];

  						vStart.fromArray( positions, a * 3 );
  						vEnd.fromArray( positions, b * 3 );

  						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

  						if ( distSq > localPrecisionSq ) continue;

  						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  						var distance = raycaster.ray.origin.distanceTo( interRay );

  						if ( distance < raycaster.near || distance > raycaster.far ) continue;

  						intersects.push( {

  							distance: distance,
  							// What do we want? intersection point on the ray or on the segment??
  							// point: raycaster.ray.at( distance ),
  							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  							index: i,
  							face: null,
  							faceIndex: null,
  							object: this

  						} );

  					}

  				} else {

  					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

  						vStart.fromArray( positions, 3 * i );
  						vEnd.fromArray( positions, 3 * i + 3 );

  						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

  						if ( distSq > localPrecisionSq ) continue;

  						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  						var distance = raycaster.ray.origin.distanceTo( interRay );

  						if ( distance < raycaster.near || distance > raycaster.far ) continue;

  						intersects.push( {

  							distance: distance,
  							// What do we want? intersection point on the ray or on the segment??
  							// point: raycaster.ray.at( distance ),
  							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  							index: i,
  							face: null,
  							faceIndex: null,
  							object: this

  						} );

  					}

  				}

  			} else if ( geometry.isGeometry ) {

  				var vertices = geometry.vertices;
  				var nbVertices = vertices.length;

  				for ( var i = 0; i < nbVertices - 1; i += step ) {

  					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

  					if ( distSq > localPrecisionSq ) continue;

  					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  					var distance = raycaster.ray.origin.distanceTo( interRay );

  					if ( distance < raycaster.near || distance > raycaster.far ) continue;

  					intersects.push( {

  						distance: distance,
  						// What do we want? intersection point on the ray or on the segment??
  						// point: raycaster.ray.at( distance ),
  						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  						index: i,
  						face: null,
  						faceIndex: null,
  						object: this

  					} );

  				}

  			}

  		};

  	}() ),

  	clone: function () {

  		return new this.constructor( this.geometry, this.material ).copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function LineSegments( geometry, material ) {

  	Line.call( this, geometry, material );

  	this.type = 'LineSegments';

  }

  LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

  	constructor: LineSegments,

  	isLineSegments: true,

  	computeLineDistances: ( function () {

  		var start = new Vector3();
  		var end = new Vector3();

  		return function computeLineDistances() {

  			var geometry = this.geometry;

  			if ( geometry.isBufferGeometry ) {

  				// we assume non-indexed geometry

  				if ( geometry.index === null ) {

  					var positionAttribute = geometry.attributes.position;
  					var lineDistances = [];

  					for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {

  						start.fromBufferAttribute( positionAttribute, i );
  						end.fromBufferAttribute( positionAttribute, i + 1 );

  						lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
  						lineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );

  					}

  					geometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

  				} else {

  					console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

  				}

  			} else if ( geometry.isGeometry ) {

  				var vertices = geometry.vertices;
  				var lineDistances = geometry.lineDistances;

  				for ( var i = 0, l = vertices.length; i < l; i += 2 ) {

  					start.copy( vertices[ i ] );
  					end.copy( vertices[ i + 1 ] );

  					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
  					lineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );

  				}

  			}

  			return this;

  		};

  	}() )

  } );

  /**
   * @author mgreter / http://github.com/mgreter
   */

  function LineLoop( geometry, material ) {

  	Line.call( this, geometry, material );

  	this.type = 'LineLoop';

  }

  LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

  	constructor: LineLoop,

  	isLineLoop: true,

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *  map: new THREE.Texture( <Image> ),
   *
   *  size: <float>,
   *  sizeAttenuation: <bool>
   *
   *  morphTargets: <bool>
   * }
   */

  function PointsMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'PointsMaterial';

  	this.color = new Color( 0xffffff );

  	this.map = null;

  	this.size = 1;
  	this.sizeAttenuation = true;

  	this.morphTargets = false;

  	this.lights = false;

  	this.setValues( parameters );

  }

  PointsMaterial.prototype = Object.create( Material.prototype );
  PointsMaterial.prototype.constructor = PointsMaterial;

  PointsMaterial.prototype.isPointsMaterial = true;

  PointsMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.size = source.size;
  	this.sizeAttenuation = source.sizeAttenuation;

  	this.morphTargets = source.morphTargets;

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function Points( geometry, material ) {

  	Object3D.call( this );

  	this.type = 'Points';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

  }

  Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Points,

  	isPoints: true,

  	raycast: ( function () {

  		var inverseMatrix = new Matrix4();
  		var ray = new Ray();
  		var sphere = new Sphere();

  		return function raycast( raycaster, intersects ) {

  			var object = this;
  			var geometry = this.geometry;
  			var matrixWorld = this.matrixWorld;
  			var threshold = raycaster.params.Points.threshold;

  			// Checking boundingSphere distance to ray

  			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  			sphere.copy( geometry.boundingSphere );
  			sphere.applyMatrix4( matrixWorld );
  			sphere.radius += threshold;

  			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

  			//

  			inverseMatrix.getInverse( matrixWorld );
  			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

  			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
  			var localThresholdSq = localThreshold * localThreshold;
  			var position = new Vector3();
  			var intersectPoint = new Vector3();

  			function testPoint( point, index ) {

  				var rayPointDistanceSq = ray.distanceSqToPoint( point );

  				if ( rayPointDistanceSq < localThresholdSq ) {

  					ray.closestPointToPoint( point, intersectPoint );
  					intersectPoint.applyMatrix4( matrixWorld );

  					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

  					if ( distance < raycaster.near || distance > raycaster.far ) return;

  					intersects.push( {

  						distance: distance,
  						distanceToRay: Math.sqrt( rayPointDistanceSq ),
  						point: intersectPoint.clone(),
  						index: index,
  						face: null,
  						object: object

  					} );

  				}

  			}

  			if ( geometry.isBufferGeometry ) {

  				var index = geometry.index;
  				var attributes = geometry.attributes;
  				var positions = attributes.position.array;

  				if ( index !== null ) {

  					var indices = index.array;

  					for ( var i = 0, il = indices.length; i < il; i ++ ) {

  						var a = indices[ i ];

  						position.fromArray( positions, a * 3 );

  						testPoint( position, a );

  					}

  				} else {

  					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

  						position.fromArray( positions, i * 3 );

  						testPoint( position, i );

  					}

  				}

  			} else {

  				var vertices = geometry.vertices;

  				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

  					testPoint( vertices[ i ], i );

  				}

  			}

  		};

  	}() ),

  	clone: function () {

  		return new this.constructor( this.geometry, this.material ).copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

  	Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.format = format !== undefined ? format : RGBFormat;

  	this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
  	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;

  	this.generateMipmaps = false;

  }

  VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

  	constructor: VideoTexture,

  	isVideoTexture: true,

  	update: function () {

  		var video = this.image;

  		if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

  			this.needsUpdate = true;

  		}

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.image = { width: width, height: height };
  	this.mipmaps = mipmaps;

  	// no flipping for cube textures
  	// (also flipping doesn't work for compressed textures )

  	this.flipY = false;

  	// can't generate mipmaps for compressed textures
  	// mips must be embedded in DDS files

  	this.generateMipmaps = false;

  }

  CompressedTexture.prototype = Object.create( Texture.prototype );
  CompressedTexture.prototype.constructor = CompressedTexture;

  CompressedTexture.prototype.isCompressedTexture = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

  	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.needsUpdate = true;

  }

  CanvasTexture.prototype = Object.create( Texture.prototype );
  CanvasTexture.prototype.constructor = CanvasTexture;
  CanvasTexture.prototype.isCanvasTexture = true;

  /**
   * @author Matt DesLauriers / @mattdesl
   * @author atix / arthursilber.de
   */

  function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

  	format = format !== undefined ? format : DepthFormat;

  	if ( format !== DepthFormat && format !== DepthStencilFormat ) {

  		throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

  	}

  	if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
  	if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.image = { width: width, height: height };

  	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

  	this.flipY = false;
  	this.generateMipmaps	= false;

  }

  DepthTexture.prototype = Object.create( Texture.prototype );
  DepthTexture.prototype.constructor = DepthTexture;
  DepthTexture.prototype.isDepthTexture = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WireframeGeometry( geometry ) {

  	BufferGeometry.call( this );

  	this.type = 'WireframeGeometry';

  	// buffer

  	var vertices = [];

  	// helper variables

  	var i, j, l, o, ol;
  	var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
  	var key, keys = [ 'a', 'b', 'c' ];
  	var vertex;

  	// different logic for Geometry and BufferGeometry

  	if ( geometry && geometry.isGeometry ) {

  		// create a data structure that contains all edges without duplicates

  		var faces = geometry.faces;

  		for ( i = 0, l = faces.length; i < l; i ++ ) {

  			var face = faces[ i ];

  			for ( j = 0; j < 3; j ++ ) {

  				edge1 = face[ keys[ j ] ];
  				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
  				edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
  				edge[ 1 ] = Math.max( edge1, edge2 );

  				key = edge[ 0 ] + ',' + edge[ 1 ];

  				if ( edges[ key ] === undefined ) {

  					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

  				}

  			}

  		}

  		// generate vertices

  		for ( key in edges ) {

  			e = edges[ key ];

  			vertex = geometry.vertices[ e.index1 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			vertex = geometry.vertices[ e.index2 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	} else if ( geometry && geometry.isBufferGeometry ) {

  		var position, indices, groups;
  		var group, start, count;
  		var index1, index2;

  		vertex = new Vector3();

  		if ( geometry.index !== null ) {

  			// indexed BufferGeometry

  			position = geometry.attributes.position;
  			indices = geometry.index;
  			groups = geometry.groups;

  			if ( groups.length === 0 ) {

  				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

  			}

  			// create a data structure that contains all eges without duplicates

  			for ( o = 0, ol = groups.length; o < ol; ++ o ) {

  				group = groups[ o ];

  				start = group.start;
  				count = group.count;

  				for ( i = start, l = ( start + count ); i < l; i += 3 ) {

  					for ( j = 0; j < 3; j ++ ) {

  						edge1 = indices.getX( i + j );
  						edge2 = indices.getX( i + ( j + 1 ) % 3 );
  						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
  						edge[ 1 ] = Math.max( edge1, edge2 );

  						key = edge[ 0 ] + ',' + edge[ 1 ];

  						if ( edges[ key ] === undefined ) {

  							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

  						}

  					}

  				}

  			}

  			// generate vertices

  			for ( key in edges ) {

  				e = edges[ key ];

  				vertex.fromBufferAttribute( position, e.index1 );
  				vertices.push( vertex.x, vertex.y, vertex.z );

  				vertex.fromBufferAttribute( position, e.index2 );
  				vertices.push( vertex.x, vertex.y, vertex.z );

  			}

  		} else {

  			// non-indexed BufferGeometry

  			position = geometry.attributes.position;

  			for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

  				for ( j = 0; j < 3; j ++ ) {

  					// three edges per triangle, an edge is represented as (index1, index2)
  					// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

  					index1 = 3 * i + j;
  					vertex.fromBufferAttribute( position, index1 );
  					vertices.push( vertex.x, vertex.y, vertex.z );

  					index2 = 3 * i + ( ( j + 1 ) % 3 );
  					vertex.fromBufferAttribute( position, index2 );
  					vertices.push( vertex.x, vertex.y, vertex.z );

  				}

  			}

  		}

  	}

  	// build geometry

  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

  }

  WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
  WireframeGeometry.prototype.constructor = WireframeGeometry;

  /**
   * @author zz85 / https://github.com/zz85
   * @author Mugen87 / https://github.com/Mugen87
   *
   * Parametric Surfaces Geometry
   * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
   */

  // ParametricGeometry

  function ParametricGeometry( func, slices, stacks ) {

  	Geometry.call( this );

  	this.type = 'ParametricGeometry';

  	this.parameters = {
  		func: func,
  		slices: slices,
  		stacks: stacks
  	};

  	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
  	this.mergeVertices();

  }

  ParametricGeometry.prototype = Object.create( Geometry.prototype );
  ParametricGeometry.prototype.constructor = ParametricGeometry;

  // ParametricBufferGeometry

  function ParametricBufferGeometry( func, slices, stacks ) {

  	BufferGeometry.call( this );

  	this.type = 'ParametricBufferGeometry';

  	this.parameters = {
  		func: func,
  		slices: slices,
  		stacks: stacks
  	};

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	var EPS = 0.00001;

  	var normal = new Vector3();

  	var p0 = new Vector3(), p1 = new Vector3();
  	var pu = new Vector3(), pv = new Vector3();

  	var i, j;

  	if ( func.length < 3 ) {

  		console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );

  	}

  	// generate vertices, normals and uvs

  	var sliceCount = slices + 1;

  	for ( i = 0; i <= stacks; i ++ ) {

  		var v = i / stacks;

  		for ( j = 0; j <= slices; j ++ ) {

  			var u = j / slices;

  			// vertex

  			func( u, v, p0 );
  			vertices.push( p0.x, p0.y, p0.z );

  			// normal

  			// approximate tangent vectors via finite differences

  			if ( u - EPS >= 0 ) {

  				func( u - EPS, v, p1 );
  				pu.subVectors( p0, p1 );

  			} else {

  				func( u + EPS, v, p1 );
  				pu.subVectors( p1, p0 );

  			}

  			if ( v - EPS >= 0 ) {

  				func( u, v - EPS, p1 );
  				pv.subVectors( p0, p1 );

  			} else {

  				func( u, v + EPS, p1 );
  				pv.subVectors( p1, p0 );

  			}

  			// cross product of tangent vectors returns surface normal

  			normal.crossVectors( pu, pv ).normalize();
  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( u, v );

  		}

  	}

  	// generate indices

  	for ( i = 0; i < stacks; i ++ ) {

  		for ( j = 0; j < slices; j ++ ) {

  			var a = i * sliceCount + j;
  			var b = i * sliceCount + j + 1;
  			var c = ( i + 1 ) * sliceCount + j + 1;
  			var d = ( i + 1 ) * sliceCount + j;

  			// faces one and two

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

  /**
   * @author clockworkgeek / https://github.com/clockworkgeek
   * @author timothypratley / https://github.com/timothypratley
   * @author WestLangley / http://github.com/WestLangley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // PolyhedronGeometry

  function PolyhedronGeometry( vertices, indices, radius, detail ) {

  	Geometry.call( this );

  	this.type = 'PolyhedronGeometry';

  	this.parameters = {
  		vertices: vertices,
  		indices: indices,
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
  	this.mergeVertices();

  }

  PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
  PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

  // PolyhedronBufferGeometry

  function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

  	BufferGeometry.call( this );

  	this.type = 'PolyhedronBufferGeometry';

  	this.parameters = {
  		vertices: vertices,
  		indices: indices,
  		radius: radius,
  		detail: detail
  	};

  	radius = radius || 1;
  	detail = detail || 0;

  	// default buffer data

  	var vertexBuffer = [];
  	var uvBuffer = [];

  	// the subdivision creates the vertex buffer data

  	subdivide( detail );

  	// all vertices should lie on a conceptual sphere with a given radius

  	appplyRadius( radius );

  	// finally, create the uv data

  	generateUVs();

  	// build non-indexed geometry

  	this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

  	if ( detail === 0 ) {

  		this.computeVertexNormals(); // flat normals

  	} else {

  		this.normalizeNormals(); // smooth normals

  	}

  	// helper functions

  	function subdivide( detail ) {

  		var a = new Vector3();
  		var b = new Vector3();
  		var c = new Vector3();

  		// iterate over all faces and apply a subdivison with the given detail value

  		for ( var i = 0; i < indices.length; i += 3 ) {

  			// get the vertices of the face

  			getVertexByIndex( indices[ i + 0 ], a );
  			getVertexByIndex( indices[ i + 1 ], b );
  			getVertexByIndex( indices[ i + 2 ], c );

  			// perform subdivision

  			subdivideFace( a, b, c, detail );

  		}

  	}

  	function subdivideFace( a, b, c, detail ) {

  		var cols = Math.pow( 2, detail );

  		// we use this multidimensional array as a data structure for creating the subdivision

  		var v = [];

  		var i, j;

  		// construct all of the vertices for this subdivision

  		for ( i = 0; i <= cols; i ++ ) {

  			v[ i ] = [];

  			var aj = a.clone().lerp( c, i / cols );
  			var bj = b.clone().lerp( c, i / cols );

  			var rows = cols - i;

  			for ( j = 0; j <= rows; j ++ ) {

  				if ( j === 0 && i === cols ) {

  					v[ i ][ j ] = aj;

  				} else {

  					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

  				}

  			}

  		}

  		// construct all of the faces

  		for ( i = 0; i < cols; i ++ ) {

  			for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

  				var k = Math.floor( j / 2 );

  				if ( j % 2 === 0 ) {

  					pushVertex( v[ i ][ k + 1 ] );
  					pushVertex( v[ i + 1 ][ k ] );
  					pushVertex( v[ i ][ k ] );

  				} else {

  					pushVertex( v[ i ][ k + 1 ] );
  					pushVertex( v[ i + 1 ][ k + 1 ] );
  					pushVertex( v[ i + 1 ][ k ] );

  				}

  			}

  		}

  	}

  	function appplyRadius( radius ) {

  		var vertex = new Vector3();

  		// iterate over the entire buffer and apply the radius to each vertex

  		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

  			vertex.x = vertexBuffer[ i + 0 ];
  			vertex.y = vertexBuffer[ i + 1 ];
  			vertex.z = vertexBuffer[ i + 2 ];

  			vertex.normalize().multiplyScalar( radius );

  			vertexBuffer[ i + 0 ] = vertex.x;
  			vertexBuffer[ i + 1 ] = vertex.y;
  			vertexBuffer[ i + 2 ] = vertex.z;

  		}

  	}

  	function generateUVs() {

  		var vertex = new Vector3();

  		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

  			vertex.x = vertexBuffer[ i + 0 ];
  			vertex.y = vertexBuffer[ i + 1 ];
  			vertex.z = vertexBuffer[ i + 2 ];

  			var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
  			var v = inclination( vertex ) / Math.PI + 0.5;
  			uvBuffer.push( u, 1 - v );

  		}

  		correctUVs();

  		correctSeam();

  	}

  	function correctSeam() {

  		// handle case when face straddles the seam, see #3269

  		for ( var i = 0; i < uvBuffer.length; i += 6 ) {

  			// uv data of a single face

  			var x0 = uvBuffer[ i + 0 ];
  			var x1 = uvBuffer[ i + 2 ];
  			var x2 = uvBuffer[ i + 4 ];

  			var max = Math.max( x0, x1, x2 );
  			var min = Math.min( x0, x1, x2 );

  			// 0.9 is somewhat arbitrary

  			if ( max > 0.9 && min < 0.1 ) {

  				if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
  				if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
  				if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

  			}

  		}

  	}

  	function pushVertex( vertex ) {

  		vertexBuffer.push( vertex.x, vertex.y, vertex.z );

  	}

  	function getVertexByIndex( index, vertex ) {

  		var stride = index * 3;

  		vertex.x = vertices[ stride + 0 ];
  		vertex.y = vertices[ stride + 1 ];
  		vertex.z = vertices[ stride + 2 ];

  	}

  	function correctUVs() {

  		var a = new Vector3();
  		var b = new Vector3();
  		var c = new Vector3();

  		var centroid = new Vector3();

  		var uvA = new Vector2();
  		var uvB = new Vector2();
  		var uvC = new Vector2();

  		for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

  			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
  			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
  			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

  			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
  			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
  			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

  			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

  			var azi = azimuth( centroid );

  			correctUV( uvA, j + 0, a, azi );
  			correctUV( uvB, j + 2, b, azi );
  			correctUV( uvC, j + 4, c, azi );

  		}

  	}

  	function correctUV( uv, stride, vector, azimuth ) {

  		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

  			uvBuffer[ stride ] = uv.x - 1;

  		}

  		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

  			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

  		}

  	}

  	// Angle around the Y axis, counter-clockwise when looking from above.

  	function azimuth( vector ) {

  		return Math.atan2( vector.z, - vector.x );

  	}


  	// Angle above the XZ plane.

  	function inclination( vector ) {

  		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

  	}

  }

  PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // TetrahedronGeometry

  function TetrahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'TetrahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
  TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

  // TetrahedronBufferGeometry

  function TetrahedronBufferGeometry( radius, detail ) {

  	var vertices = [
  		1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
  	];

  	var indices = [
  		2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'TetrahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // OctahedronGeometry

  function OctahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'OctahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  OctahedronGeometry.prototype = Object.create( Geometry.prototype );
  OctahedronGeometry.prototype.constructor = OctahedronGeometry;

  // OctahedronBufferGeometry

  function OctahedronBufferGeometry( radius, detail ) {

  	var vertices = [
  		1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
  		0, - 1, 0, 	0, 0, 1,	0, 0, - 1
  	];

  	var indices = [
  		0, 2, 4,	0, 4, 3,	0, 3, 5,
  		0, 5, 2,	1, 2, 5,	1, 5, 3,
  		1, 3, 4,	1, 4, 2
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'OctahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // IcosahedronGeometry

  function IcosahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'IcosahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
  IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

  // IcosahedronBufferGeometry

  function IcosahedronBufferGeometry( radius, detail ) {

  	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

  	var vertices = [
  		- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
  		 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
  		 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
  	];

  	var indices = [
  		 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
  		 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
  		 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
  		 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'IcosahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

  /**
   * @author Abe Pazos / https://hamoid.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  // DodecahedronGeometry

  function DodecahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'DodecahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
  DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

  // DodecahedronBufferGeometry

  function DodecahedronBufferGeometry( radius, detail ) {

  	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
  	var r = 1 / t;

  	var vertices = [

  		// (±1, ±1, ±1)
  		- 1, - 1, - 1,	- 1, - 1, 1,
  		- 1, 1, - 1, - 1, 1, 1,
  		1, - 1, - 1, 1, - 1, 1,
  		1, 1, - 1, 1, 1, 1,

  		// (0, ±1/φ, ±φ)
  		 0, - r, - t, 0, - r, t,
  		 0, r, - t, 0, r, t,

  		// (±1/φ, ±φ, 0)
  		- r, - t, 0, - r, t, 0,
  		 r, - t, 0, r, t, 0,

  		// (±φ, 0, ±1/φ)
  		- t, 0, - r, t, 0, - r,
  		- t, 0, r, t, 0, r
  	];

  	var indices = [
  		3, 11, 7, 	3, 7, 15, 	3, 15, 13,
  		7, 19, 17, 	7, 17, 6, 	7, 6, 15,
  		17, 4, 8, 	17, 8, 10, 	17, 10, 6,
  		8, 0, 16, 	8, 16, 2, 	8, 2, 10,
  		0, 12, 1, 	0, 1, 18, 	0, 18, 16,
  		6, 10, 2, 	6, 2, 13, 	6, 13, 15,
  		2, 16, 18, 	2, 18, 3, 	2, 3, 13,
  		18, 1, 9, 	18, 9, 11, 	18, 11, 3,
  		4, 14, 12, 	4, 12, 0, 	4, 0, 8,
  		11, 9, 5, 	11, 5, 19, 	11, 19, 7,
  		19, 5, 14, 	19, 14, 4, 	19, 4, 17,
  		1, 12, 14, 	1, 14, 5, 	1, 5, 9
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'DodecahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

  /**
   * @author oosmoxiecode / https://github.com/oosmoxiecode
   * @author WestLangley / https://github.com/WestLangley
   * @author zz85 / https://github.com/zz85
   * @author miningold / https://github.com/miningold
   * @author jonobr1 / https://github.com/jonobr1
   * @author Mugen87 / https://github.com/Mugen87
   *
   */

  // TubeGeometry

  function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

  	Geometry.call( this );

  	this.type = 'TubeGeometry';

  	this.parameters = {
  		path: path,
  		tubularSegments: tubularSegments,
  		radius: radius,
  		radialSegments: radialSegments,
  		closed: closed
  	};

  	if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

  	var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

  	// expose internals

  	this.tangents = bufferGeometry.tangents;
  	this.normals = bufferGeometry.normals;
  	this.binormals = bufferGeometry.binormals;

  	// create geometry

  	this.fromBufferGeometry( bufferGeometry );
  	this.mergeVertices();

  }

  TubeGeometry.prototype = Object.create( Geometry.prototype );
  TubeGeometry.prototype.constructor = TubeGeometry;

  // TubeBufferGeometry

  function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

  	BufferGeometry.call( this );

  	this.type = 'TubeBufferGeometry';

  	this.parameters = {
  		path: path,
  		tubularSegments: tubularSegments,
  		radius: radius,
  		radialSegments: radialSegments,
  		closed: closed
  	};

  	tubularSegments = tubularSegments || 64;
  	radius = radius || 1;
  	radialSegments = radialSegments || 8;
  	closed = closed || false;

  	var frames = path.computeFrenetFrames( tubularSegments, closed );

  	// expose internals

  	this.tangents = frames.tangents;
  	this.normals = frames.normals;
  	this.binormals = frames.binormals;

  	// helper variables

  	var vertex = new Vector3();
  	var normal = new Vector3();
  	var uv = new Vector2();
  	var P = new Vector3();

  	var i, j;

  	// buffer

  	var vertices = [];
  	var normals = [];
  	var uvs = [];
  	var indices = [];

  	// create buffer data

  	generateBufferData();

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// functions

  	function generateBufferData() {

  		for ( i = 0; i < tubularSegments; i ++ ) {

  			generateSegment( i );

  		}

  		// if the geometry is not closed, generate the last row of vertices and normals
  		// at the regular position on the given path
  		//
  		// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

  		generateSegment( ( closed === false ) ? tubularSegments : 0 );

  		// uvs are generated in a separate function.
  		// this makes it easy compute correct values for closed geometries

  		generateUVs();

  		// finally create faces

  		generateIndices();

  	}

  	function generateSegment( i ) {

  		// we use getPointAt to sample evenly distributed points from the given path

  		P = path.getPointAt( i / tubularSegments, P );

  		// retrieve corresponding normal and binormal

  		var N = frames.normals[ i ];
  		var B = frames.binormals[ i ];

  		// generate normals and vertices for the current segment

  		for ( j = 0; j <= radialSegments; j ++ ) {

  			var v = j / radialSegments * Math.PI * 2;

  			var sin = Math.sin( v );
  			var cos = - Math.cos( v );

  			// normal

  			normal.x = ( cos * N.x + sin * B.x );
  			normal.y = ( cos * N.y + sin * B.y );
  			normal.z = ( cos * N.z + sin * B.z );
  			normal.normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// vertex

  			vertex.x = P.x + radius * normal.x;
  			vertex.y = P.y + radius * normal.y;
  			vertex.z = P.z + radius * normal.z;

  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	}

  	function generateIndices() {

  		for ( j = 1; j <= tubularSegments; j ++ ) {

  			for ( i = 1; i <= radialSegments; i ++ ) {

  				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
  				var b = ( radialSegments + 1 ) * j + ( i - 1 );
  				var c = ( radialSegments + 1 ) * j + i;
  				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

  				// faces

  				indices.push( a, b, d );
  				indices.push( b, c, d );

  			}

  		}

  	}

  	function generateUVs() {

  		for ( i = 0; i <= tubularSegments; i ++ ) {

  			for ( j = 0; j <= radialSegments; j ++ ) {

  				uv.x = i / tubularSegments;
  				uv.y = j / radialSegments;

  				uvs.push( uv.x, uv.y );

  			}

  		}

  	}

  }

  TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

  TubeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	data.path = this.parameters.path.toJSON();

  	return data;

  };

  /**
   * @author oosmoxiecode
   * @author Mugen87 / https://github.com/Mugen87
   *
   * based on http://www.blackpawn.com/texts/pqtorus/
   */

  // TorusKnotGeometry

  function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

  	Geometry.call( this );

  	this.type = 'TorusKnotGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		tubularSegments: tubularSegments,
  		radialSegments: radialSegments,
  		p: p,
  		q: q
  	};

  	if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

  	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
  	this.mergeVertices();

  }

  TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
  TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

  // TorusKnotBufferGeometry

  function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

  	BufferGeometry.call( this );

  	this.type = 'TorusKnotBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		tubularSegments: tubularSegments,
  		radialSegments: radialSegments,
  		p: p,
  		q: q
  	};

  	radius = radius || 1;
  	tube = tube || 0.4;
  	tubularSegments = Math.floor( tubularSegments ) || 64;
  	radialSegments = Math.floor( radialSegments ) || 8;
  	p = p || 2;
  	q = q || 3;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var i, j;

  	var vertex = new Vector3();
  	var normal = new Vector3();

  	var P1 = new Vector3();
  	var P2 = new Vector3();

  	var B = new Vector3();
  	var T = new Vector3();
  	var N = new Vector3();

  	// generate vertices, normals and uvs

  	for ( i = 0; i <= tubularSegments; ++ i ) {

  		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

  		var u = i / tubularSegments * p * Math.PI * 2;

  		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
  		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

  		calculatePositionOnCurve( u, p, q, radius, P1 );
  		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

  		// calculate orthonormal basis

  		T.subVectors( P2, P1 );
  		N.addVectors( P2, P1 );
  		B.crossVectors( T, N );
  		N.crossVectors( B, T );

  		// normalize B, N. T can be ignored, we don't use it

  		B.normalize();
  		N.normalize();

  		for ( j = 0; j <= radialSegments; ++ j ) {

  			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
  			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

  			var v = j / radialSegments * Math.PI * 2;
  			var cx = - tube * Math.cos( v );
  			var cy = tube * Math.sin( v );

  			// now calculate the final vertex position.
  			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

  			vertex.x = P1.x + ( cx * N.x + cy * B.x );
  			vertex.y = P1.y + ( cx * N.y + cy * B.y );
  			vertex.z = P1.z + ( cx * N.z + cy * B.z );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

  			normal.subVectors( vertex, P1 ).normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( i / tubularSegments );
  			uvs.push( j / radialSegments );

  		}

  	}

  	// generate indices

  	for ( j = 1; j <= tubularSegments; j ++ ) {

  		for ( i = 1; i <= radialSegments; i ++ ) {

  			// indices

  			var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
  			var b = ( radialSegments + 1 ) * j + ( i - 1 );
  			var c = ( radialSegments + 1 ) * j + i;
  			var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// this function calculates the current position on the torus curve

  	function calculatePositionOnCurve( u, p, q, radius, position ) {

  		var cu = Math.cos( u );
  		var su = Math.sin( u );
  		var quOverP = q / p * u;
  		var cs = Math.cos( quOverP );

  		position.x = radius * ( 2 + cs ) * 0.5 * cu;
  		position.y = radius * ( 2 + cs ) * su * 0.5;
  		position.z = radius * Math.sin( quOverP ) * 0.5;

  	}

  }

  TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

  /**
   * @author oosmoxiecode
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // TorusGeometry

  function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

  	Geometry.call( this );

  	this.type = 'TorusGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		radialSegments: radialSegments,
  		tubularSegments: tubularSegments,
  		arc: arc
  	};

  	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
  	this.mergeVertices();

  }

  TorusGeometry.prototype = Object.create( Geometry.prototype );
  TorusGeometry.prototype.constructor = TorusGeometry;

  // TorusBufferGeometry

  function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

  	BufferGeometry.call( this );

  	this.type = 'TorusBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		radialSegments: radialSegments,
  		tubularSegments: tubularSegments,
  		arc: arc
  	};

  	radius = radius || 1;
  	tube = tube || 0.4;
  	radialSegments = Math.floor( radialSegments ) || 8;
  	tubularSegments = Math.floor( tubularSegments ) || 6;
  	arc = arc || Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var center = new Vector3();
  	var vertex = new Vector3();
  	var normal = new Vector3();

  	var j, i;

  	// generate vertices, normals and uvs

  	for ( j = 0; j <= radialSegments; j ++ ) {

  		for ( i = 0; i <= tubularSegments; i ++ ) {

  			var u = i / tubularSegments * arc;
  			var v = j / radialSegments * Math.PI * 2;

  			// vertex

  			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
  			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
  			vertex.z = tube * Math.sin( v );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			center.x = radius * Math.cos( u );
  			center.y = radius * Math.sin( u );
  			normal.subVectors( vertex, center ).normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( i / tubularSegments );
  			uvs.push( j / radialSegments );

  		}

  	}

  	// generate indices

  	for ( j = 1; j <= radialSegments; j ++ ) {

  		for ( i = 1; i <= tubularSegments; i ++ ) {

  			// indices

  			var a = ( tubularSegments + 1 ) * j + i - 1;
  			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
  			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
  			var d = ( tubularSegments + 1 ) * j + i;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

  /**
   * @author Mugen87 / https://github.com/Mugen87
   * Port from https://github.com/mapbox/earcut (v2.1.2)
   */

  var Earcut = {

  	triangulate: function ( data, holeIndices, dim ) {

  		dim = dim || 2;

  		var hasHoles = holeIndices && holeIndices.length,
  			outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
  			outerNode = linkedList( data, 0, outerLen, dim, true ),
  			triangles = [];

  		if ( ! outerNode ) return triangles;

  		var minX, minY, maxX, maxY, x, y, invSize;

  		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );

  		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

  		if ( data.length > 80 * dim ) {

  			minX = maxX = data[ 0 ];
  			minY = maxY = data[ 1 ];

  			for ( var i = dim; i < outerLen; i += dim ) {

  				x = data[ i ];
  				y = data[ i + 1 ];
  				if ( x < minX ) minX = x;
  				if ( y < minY ) minY = y;
  				if ( x > maxX ) maxX = x;
  				if ( y > maxY ) maxY = y;

  			}

  			// minX, minY and invSize are later used to transform coords into integers for z-order calculation

  			invSize = Math.max( maxX - minX, maxY - minY );
  			invSize = invSize !== 0 ? 1 / invSize : 0;

  		}

  		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

  		return triangles;

  	}

  };

  // create a circular doubly linked list from polygon points in the specified winding order

  function linkedList( data, start, end, dim, clockwise ) {

  	var i, last;

  	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

  		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

  	} else {

  		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

  	}

  	if ( last && equals$4( last, last.next ) ) {

  		removeNode( last );
  		last = last.next;

  	}

  	return last;

  }

  // eliminate colinear or duplicate points

  function filterPoints( start, end ) {

  	if ( ! start ) return start;
  	if ( ! end ) end = start;

  	var p = start, again;

  	do {

  		again = false;

  		if ( ! p.steiner && ( equals$4( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

  			removeNode( p );
  			p = end = p.prev;
  			if ( p === p.next ) break;
  			again = true;

  		} else {

  			p = p.next;

  		}

  	} while ( again || p !== end );

  	return end;

  }

  // main ear slicing loop which triangulates a polygon (given as a linked list)

  function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

  	if ( ! ear ) return;

  	// interlink polygon nodes in z-order

  	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );

  	var stop = ear, prev, next;

  	// iterate through ears, slicing them one by one

  	while ( ear.prev !== ear.next ) {

  		prev = ear.prev;
  		next = ear.next;

  		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

  			// cut off the triangle
  			triangles.push( prev.i / dim );
  			triangles.push( ear.i / dim );
  			triangles.push( next.i / dim );

  			removeNode( ear );

  			// skipping the next vertice leads to less sliver triangles
  			ear = next.next;
  			stop = next.next;

  			continue;

  		}

  		ear = next;

  		// if we looped through the whole remaining polygon and can't find any more ears

  		if ( ear === stop ) {

  			// try filtering points and slicing again

  			if ( ! pass ) {

  				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

  				// if this didn't work, try curing all small self-intersections locally

  			} else if ( pass === 1 ) {

  				ear = cureLocalIntersections( ear, triangles, dim );
  				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

  				// as a last resort, try splitting the remaining polygon into two

  			} else if ( pass === 2 ) {

  				splitEarcut( ear, triangles, dim, minX, minY, invSize );

  			}

  			break;

  		}

  	}

  }

  // check whether a polygon node forms a valid ear with adjacent nodes

  function isEar( ear ) {

  	var a = ear.prev,
  		b = ear,
  		c = ear.next;

  	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

  	// now make sure we don't have other points inside the potential ear
  	var p = ear.next.next;

  	while ( p !== ear.prev ) {

  		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {

  			return false;

  		}

  		p = p.next;

  	}

  	return true;

  }

  function isEarHashed( ear, minX, minY, invSize ) {

  	var a = ear.prev,
  		b = ear,
  		c = ear.next;

  	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

  	// triangle bbox; min & max are calculated like this for speed

  	var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
  		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
  		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
  		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

  	// z-order range for the current triangle bbox;

  	var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
  		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

  	// first look for points inside the triangle in increasing z-order

  	var p = ear.nextZ;

  	while ( p && p.z <= maxZ ) {

  		if ( p !== ear.prev && p !== ear.next &&
  				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
  				area( p.prev, p, p.next ) >= 0 ) return false;
  		p = p.nextZ;

  	}

  	// then look for points in decreasing z-order

  	p = ear.prevZ;

  	while ( p && p.z >= minZ ) {

  		if ( p !== ear.prev && p !== ear.next &&
  				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
  				area( p.prev, p, p.next ) >= 0 ) return false;

  		p = p.prevZ;

  	}

  	return true;

  }

  // go through all polygon nodes and cure small local self-intersections

  function cureLocalIntersections( start, triangles, dim ) {

  	var p = start;

  	do {

  		var a = p.prev, b = p.next.next;

  		if ( ! equals$4( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

  			triangles.push( a.i / dim );
  			triangles.push( p.i / dim );
  			triangles.push( b.i / dim );

  			// remove two nodes involved

  			removeNode( p );
  			removeNode( p.next );

  			p = start = b;

  		}

  		p = p.next;

  	} while ( p !== start );

  	return p;

  }

  // try splitting polygon into two and triangulate them independently

  function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

  	// look for a valid diagonal that divides the polygon into two

  	var a = start;

  	do {

  		var b = a.next.next;

  		while ( b !== a.prev ) {

  			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

  				// split the polygon in two by the diagonal

  				var c = splitPolygon( a, b );

  				// filter colinear points around the cuts

  				a = filterPoints( a, a.next );
  				c = filterPoints( c, c.next );

  				// run earcut on each half

  				earcutLinked( a, triangles, dim, minX, minY, invSize );
  				earcutLinked( c, triangles, dim, minX, minY, invSize );
  				return;

  			}

  			b = b.next;

  		}

  		a = a.next;

  	} while ( a !== start );

  }

  // link every hole into the outer loop, producing a single-ring polygon without holes

  function eliminateHoles( data, holeIndices, outerNode, dim ) {

  	var queue = [], i, len, start, end, list;

  	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

  		start = holeIndices[ i ] * dim;
  		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
  		list = linkedList( data, start, end, dim, false );
  		if ( list === list.next ) list.steiner = true;
  		queue.push( getLeftmost( list ) );

  	}

  	queue.sort( compareX );

  	// process holes from left to right

  	for ( i = 0; i < queue.length; i ++ ) {

  		eliminateHole( queue[ i ], outerNode );
  		outerNode = filterPoints( outerNode, outerNode.next );

  	}

  	return outerNode;

  }

  function compareX( a, b ) {

  	return a.x - b.x;

  }

  // find a bridge between vertices that connects hole with an outer ring and and link it

  function eliminateHole( hole, outerNode ) {

  	outerNode = findHoleBridge( hole, outerNode );

  	if ( outerNode ) {

  		var b = splitPolygon( outerNode, hole );

  		filterPoints( b, b.next );

  	}

  }

  // David Eberly's algorithm for finding a bridge between hole and outer polygon

  function findHoleBridge( hole, outerNode ) {

  	var p = outerNode,
  		hx = hole.x,
  		hy = hole.y,
  		qx = - Infinity,
  		m;

  	// find a segment intersected by a ray from the hole's leftmost point to the left;
  	// segment's endpoint with lesser x will be potential connection point

  	do {

  		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

  			var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );

  			if ( x <= hx && x > qx ) {

  				qx = x;

  				if ( x === hx ) {

  					if ( hy === p.y ) return p;
  					if ( hy === p.next.y ) return p.next;

  				}

  				m = p.x < p.next.x ? p : p.next;

  			}

  		}

  		p = p.next;

  	} while ( p !== outerNode );

  	if ( ! m ) return null;

  	if ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint

  	// look for points inside the triangle of hole point, segment intersection and endpoint;
  	// if there are no points found, we have a valid connection;
  	// otherwise choose the point of the minimum angle with the ray as connection point

  	var stop = m,
  		mx = m.x,
  		my = m.y,
  		tanMin = Infinity,
  		tan;

  	p = m.next;

  	while ( p !== stop ) {

  		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
  						pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

  			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

  			if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {

  				m = p;
  				tanMin = tan;

  			}

  		}

  		p = p.next;

  	}

  	return m;

  }

  // interlink polygon nodes in z-order

  function indexCurve( start, minX, minY, invSize ) {

  	var p = start;

  	do {

  		if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
  		p.prevZ = p.prev;
  		p.nextZ = p.next;
  		p = p.next;

  	} while ( p !== start );

  	p.prevZ.nextZ = null;
  	p.prevZ = null;

  	sortLinked( p );

  }

  // Simon Tatham's linked list merge sort algorithm
  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html

  function sortLinked( list ) {

  	var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;

  	do {

  		p = list;
  		list = null;
  		tail = null;
  		numMerges = 0;

  		while ( p ) {

  			numMerges ++;
  			q = p;
  			pSize = 0;

  			for ( i = 0; i < inSize; i ++ ) {

  				pSize ++;
  				q = q.nextZ;
  				if ( ! q ) break;

  			}

  			qSize = inSize;

  			while ( pSize > 0 || ( qSize > 0 && q ) ) {

  				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

  					e = p;
  					p = p.nextZ;
  					pSize --;

  				} else {

  					e = q;
  					q = q.nextZ;
  					qSize --;

  				}

  				if ( tail ) tail.nextZ = e;
  				else list = e;

  				e.prevZ = tail;
  				tail = e;

  			}

  			p = q;

  		}

  		tail.nextZ = null;
  		inSize *= 2;

  	} while ( numMerges > 1 );

  	return list;

  }

  // z-order of a point given coords and inverse of the longer side of data bbox

  function zOrder( x, y, minX, minY, invSize ) {

  	// coords are transformed into non-negative 15-bit integer range

  	x = 32767 * ( x - minX ) * invSize;
  	y = 32767 * ( y - minY ) * invSize;

  	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
  	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
  	x = ( x | ( x << 2 ) ) & 0x33333333;
  	x = ( x | ( x << 1 ) ) & 0x55555555;

  	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
  	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
  	y = ( y | ( y << 2 ) ) & 0x33333333;
  	y = ( y | ( y << 1 ) ) & 0x55555555;

  	return x | ( y << 1 );

  }

  // find the leftmost node of a polygon ring

  function getLeftmost( start ) {

  	var p = start, leftmost = start;

  	do {

  		if ( p.x < leftmost.x ) leftmost = p;
  		p = p.next;

  	} while ( p !== start );

  	return leftmost;

  }

  // check if a point lies within a convex triangle

  function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

  	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
  	 ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
  	 ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

  }

  // check if a diagonal between two polygon nodes is valid (lies in polygon interior)

  function isValidDiagonal( a, b ) {

  	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
  		locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );

  }

  // signed area of a triangle

  function area( p, q, r ) {

  	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

  }

  // check if two points are equal

  function equals$4( p1, p2 ) {

  	return p1.x === p2.x && p1.y === p2.y;

  }

  // check if two segments intersect

  function intersects( p1, q1, p2, q2 ) {

  	if ( ( equals$4( p1, q1 ) && equals$4( p2, q2 ) ) ||
  			( equals$4( p1, q2 ) && equals$4( p2, q1 ) ) ) return true;

  	return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
  				 area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;

  }

  // check if a polygon diagonal intersects any polygon segments

  function intersectsPolygon( a, b ) {

  	var p = a;

  	do {

  		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
  						intersects( p, p.next, a, b ) ) {

  			return true;

  		}

  		p = p.next;

  	} while ( p !== a );

  	return false;

  }

  // check if a polygon diagonal is locally inside the polygon

  function locallyInside( a, b ) {

  	return area( a.prev, a, a.next ) < 0 ?
  		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
  		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

  }

  // check if the middle point of a polygon diagonal is inside the polygon

  function middleInside( a, b ) {

  	var p = a,
  		inside = false,
  		px = ( a.x + b.x ) / 2,
  		py = ( a.y + b.y ) / 2;

  	do {

  		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
  						( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {

  			inside = ! inside;

  		}

  		p = p.next;

  	} while ( p !== a );

  	return inside;

  }

  // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
  // if one belongs to the outer ring and another to a hole, it merges it into a single ring

  function splitPolygon( a, b ) {

  	var a2 = new Node$2( a.i, a.x, a.y ),
  		b2 = new Node$2( b.i, b.x, b.y ),
  		an = a.next,
  		bp = b.prev;

  	a.next = b;
  	b.prev = a;

  	a2.next = an;
  	an.prev = a2;

  	b2.next = a2;
  	a2.prev = b2;

  	bp.next = b2;
  	b2.prev = bp;

  	return b2;

  }

  // create a node and optionally link it with previous one (in a circular doubly linked list)

  function insertNode( i, x, y, last ) {

  	var p = new Node$2( i, x, y );

  	if ( ! last ) {

  		p.prev = p;
  		p.next = p;

  	} else {

  		p.next = last.next;
  		p.prev = last;
  		last.next.prev = p;
  		last.next = p;

  	}

  	return p;

  }

  function removeNode( p ) {

  	p.next.prev = p.prev;
  	p.prev.next = p.next;

  	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
  	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;

  }

  function Node$2( i, x, y ) {

  	// vertice index in coordinates array
  	this.i = i;

  	// vertex coordinates
  	this.x = x;
  	this.y = y;

  	// previous and next vertice nodes in a polygon ring
  	this.prev = null;
  	this.next = null;

  	// z-order curve value
  	this.z = null;

  	// previous and next nodes in z-order
  	this.prevZ = null;
  	this.nextZ = null;

  	// indicates whether this is a steiner point
  	this.steiner = false;

  }

  function signedArea( data, start, end, dim ) {

  	var sum = 0;

  	for ( var i = start, j = end - dim; i < end; i += dim ) {

  		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
  		j = i;

  	}

  	return sum;

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   */

  var ShapeUtils = {

  	// calculate area of the contour polygon

  	area: function ( contour ) {

  		var n = contour.length;
  		var a = 0.0;

  		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

  			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

  		}

  		return a * 0.5;

  	},

  	isClockWise: function ( pts ) {

  		return ShapeUtils.area( pts ) < 0;

  	},

  	triangulateShape: function ( contour, holes ) {

  		var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
  		var holeIndices = []; // array of hole indices
  		var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

  		removeDupEndPts( contour );
  		addContour( vertices, contour );

  		//

  		var holeIndex = contour.length;

  		holes.forEach( removeDupEndPts );

  		for ( var i = 0; i < holes.length; i ++ ) {

  			holeIndices.push( holeIndex );
  			holeIndex += holes[ i ].length;
  			addContour( vertices, holes[ i ] );

  		}

  		//

  		var triangles = Earcut.triangulate( vertices, holeIndices );

  		//

  		for ( var i = 0; i < triangles.length; i += 3 ) {

  			faces.push( triangles.slice( i, i + 3 ) );

  		}

  		return faces;

  	}

  };

  function removeDupEndPts( points ) {

  	var l = points.length;

  	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

  		points.pop();

  	}

  }

  function addContour( vertices, contour ) {

  	for ( var i = 0; i < contour.length; i ++ ) {

  		vertices.push( contour[ i ].x );
  		vertices.push( contour[ i ].y );

  	}

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   * Creates extruded geometry from a path shape.
   *
   * parameters = {
   *
   *  curveSegments: <int>, // number of points on the curves
   *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
   *  depth: <float>, // Depth to extrude the shape
   *
   *  bevelEnabled: <bool>, // turn on bevel
   *  bevelThickness: <float>, // how deep into the original shape bevel goes
   *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
   *  bevelOffset: <float>, // how far from shape outline does bevel start
   *  bevelSegments: <int>, // number of bevel layers
   *
   *  extrudePath: <THREE.Curve> // curve to extrude shape along
   *
   *  UVGenerator: <Object> // object that provides UV generator functions
   *
   * }
   */

  // ExtrudeGeometry

  function ExtrudeGeometry( shapes, options ) {

  	Geometry.call( this );

  	this.type = 'ExtrudeGeometry';

  	this.parameters = {
  		shapes: shapes,
  		options: options
  	};

  	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
  	this.mergeVertices();

  }

  ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
  ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

  ExtrudeGeometry.prototype.toJSON = function () {

  	var data = Geometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;
  	var options = this.parameters.options;

  	return toJSON( shapes, options, data );

  };

  // ExtrudeBufferGeometry

  function ExtrudeBufferGeometry( shapes, options ) {

  	BufferGeometry.call( this );

  	this.type = 'ExtrudeBufferGeometry';

  	this.parameters = {
  		shapes: shapes,
  		options: options
  	};

  	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

  	var scope = this;

  	var verticesArray = [];
  	var uvArray = [];

  	for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  		var shape = shapes[ i ];
  		addShape( shape );

  	}

  	// build geometry

  	this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

  	this.computeVertexNormals();

  	// functions

  	function addShape( shape ) {

  		var placeholder = [];

  		// options

  		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
  		var steps = options.steps !== undefined ? options.steps : 1;
  		var depth = options.depth !== undefined ? options.depth : 100;

  		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
  		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
  		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
  		var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
  		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

  		var extrudePath = options.extrudePath;

  		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

  		// deprecated options

  		if ( options.amount !== undefined ) {

  			console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
  			depth = options.amount;

  		}

  		//

  		var extrudePts, extrudeByPath = false;
  		var splineTube, binormal, normal, position2;

  		if ( extrudePath ) {

  			extrudePts = extrudePath.getSpacedPoints( steps );

  			extrudeByPath = true;
  			bevelEnabled = false; // bevels not supported for path extrusion

  			// SETUP TNB variables

  			// TODO1 - have a .isClosed in spline?

  			splineTube = extrudePath.computeFrenetFrames( steps, false );

  			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

  			binormal = new Vector3();
  			normal = new Vector3();
  			position2 = new Vector3();

  		}

  		// Safeguards if bevels are not enabled

  		if ( ! bevelEnabled ) {

  			bevelSegments = 0;
  			bevelThickness = 0;
  			bevelSize = 0;
  			bevelOffset = 0;

  		}

  		// Variables initialization

  		var ahole, h, hl; // looping of holes

  		var shapePoints = shape.extractPoints( curveSegments );

  		var vertices = shapePoints.shape;
  		var holes = shapePoints.holes;

  		var reverse = ! ShapeUtils.isClockWise( vertices );

  		if ( reverse ) {

  			vertices = vertices.reverse();

  			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

  			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  				ahole = holes[ h ];

  				if ( ShapeUtils.isClockWise( ahole ) ) {

  					holes[ h ] = ahole.reverse();

  				}

  			}

  		}


  		var faces = ShapeUtils.triangulateShape( vertices, holes );

  		/* Vertices */

  		var contour = vertices; // vertices has all points but contour has only points of circumference

  		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  			ahole = holes[ h ];

  			vertices = vertices.concat( ahole );

  		}


  		function scalePt2( pt, vec, size ) {

  			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

  			return vec.clone().multiplyScalar( size ).add( pt );

  		}

  		var b, bs, t, z,
  			vert, vlen = vertices.length,
  			face, flen = faces.length;


  		// Find directions for point movement


  		function getBevelVec( inPt, inPrev, inNext ) {

  			// computes for inPt the corresponding point inPt' on a new contour
  			//   shifted by 1 unit (length of normalized vector) to the left
  			// if we walk along contour clockwise, this new contour is outside the old one
  			//
  			// inPt' is the intersection of the two lines parallel to the two
  			//  adjacent edges of inPt at a distance of 1 unit on the left side.

  			var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

  			// good reading for geometry algorithms (here: line-line intersection)
  			// http://geomalgorithms.com/a05-_intersect-1.html

  			var v_prev_x = inPt.x - inPrev.x,
  				v_prev_y = inPt.y - inPrev.y;
  			var v_next_x = inNext.x - inPt.x,
  				v_next_y = inNext.y - inPt.y;

  			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

  			// check for collinear edges
  			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

  			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

  				// not collinear

  				// length of vectors for normalizing

  				var v_prev_len = Math.sqrt( v_prev_lensq );
  				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

  				// shift adjacent points by unit vectors to the left

  				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
  				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

  				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
  				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

  				// scaling factor for v_prev to intersection point

  				var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
  						( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
  					( v_prev_x * v_next_y - v_prev_y * v_next_x );

  				// vector from inPt to intersection point

  				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
  				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

  				// Don't normalize!, otherwise sharp corners become ugly
  				//  but prevent crazy spikes
  				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
  				if ( v_trans_lensq <= 2 ) {

  					return new Vector2( v_trans_x, v_trans_y );

  				} else {

  					shrink_by = Math.sqrt( v_trans_lensq / 2 );

  				}

  			} else {

  				// handle special case of collinear edges

  				var direction_eq = false; // assumes: opposite
  				if ( v_prev_x > Number.EPSILON ) {

  					if ( v_next_x > Number.EPSILON ) {

  						direction_eq = true;

  					}

  				} else {

  					if ( v_prev_x < - Number.EPSILON ) {

  						if ( v_next_x < - Number.EPSILON ) {

  							direction_eq = true;

  						}

  					} else {

  						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

  							direction_eq = true;

  						}

  					}

  				}

  				if ( direction_eq ) {

  					// console.log("Warning: lines are a straight sequence");
  					v_trans_x = - v_prev_y;
  					v_trans_y = v_prev_x;
  					shrink_by = Math.sqrt( v_prev_lensq );

  				} else {

  					// console.log("Warning: lines are a straight spike");
  					v_trans_x = v_prev_x;
  					v_trans_y = v_prev_y;
  					shrink_by = Math.sqrt( v_prev_lensq / 2 );

  				}

  			}

  			return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

  		}


  		var contourMovements = [];

  		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

  			if ( j === il ) j = 0;
  			if ( k === il ) k = 0;

  			//  (j)---(i)---(k)
  			// console.log('i,j,k', i, j , k)

  			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

  		}

  		var holesMovements = [],
  			oneHoleMovements, verticesMovements = contourMovements.concat();

  		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  			ahole = holes[ h ];

  			oneHoleMovements = [];

  			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

  				if ( j === il ) j = 0;
  				if ( k === il ) k = 0;

  				//  (j)---(i)---(k)
  				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

  			}

  			holesMovements.push( oneHoleMovements );
  			verticesMovements = verticesMovements.concat( oneHoleMovements );

  		}


  		// Loop bevelSegments, 1 for the front, 1 for the back

  		for ( b = 0; b < bevelSegments; b ++ ) {

  			//for ( b = bevelSegments; b > 0; b -- ) {

  			t = b / bevelSegments;
  			z = bevelThickness * Math.cos( t * Math.PI / 2 );
  			bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

  			// contract shape

  			for ( i = 0, il = contour.length; i < il; i ++ ) {

  				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

  				v( vert.x, vert.y, - z );

  			}

  			// expand holes

  			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  				ahole = holes[ h ];
  				oneHoleMovements = holesMovements[ h ];

  				for ( i = 0, il = ahole.length; i < il; i ++ ) {

  					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

  					v( vert.x, vert.y, - z );

  				}

  			}

  		}

  		bs = bevelSize + bevelOffset;

  		// Back facing vertices

  		for ( i = 0; i < vlen; i ++ ) {

  			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

  			if ( ! extrudeByPath ) {

  				v( vert.x, vert.y, 0 );

  			} else {

  				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

  				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
  				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

  				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

  				v( position2.x, position2.y, position2.z );

  			}

  		}

  		// Add stepped vertices...
  		// Including front facing vertices

  		var s;

  		for ( s = 1; s <= steps; s ++ ) {

  			for ( i = 0; i < vlen; i ++ ) {

  				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

  				if ( ! extrudeByPath ) {

  					v( vert.x, vert.y, depth / steps * s );

  				} else {

  					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

  					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
  					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

  					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

  					v( position2.x, position2.y, position2.z );

  				}

  			}

  		}


  		// Add bevel segments planes

  		//for ( b = 1; b <= bevelSegments; b ++ ) {
  		for ( b = bevelSegments - 1; b >= 0; b -- ) {

  			t = b / bevelSegments;
  			z = bevelThickness * Math.cos( t * Math.PI / 2 );
  			bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

  			// contract shape

  			for ( i = 0, il = contour.length; i < il; i ++ ) {

  				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
  				v( vert.x, vert.y, depth + z );

  			}

  			// expand holes

  			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  				ahole = holes[ h ];
  				oneHoleMovements = holesMovements[ h ];

  				for ( i = 0, il = ahole.length; i < il; i ++ ) {

  					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

  					if ( ! extrudeByPath ) {

  						v( vert.x, vert.y, depth + z );

  					} else {

  						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

  					}

  				}

  			}

  		}

  		/* Faces */

  		// Top and bottom faces

  		buildLidFaces();

  		// Sides faces

  		buildSideFaces();


  		/////  Internal functions

  		function buildLidFaces() {

  			var start = verticesArray.length / 3;

  			if ( bevelEnabled ) {

  				var layer = 0; // steps + 1
  				var offset = vlen * layer;

  				// Bottom faces

  				for ( i = 0; i < flen; i ++ ) {

  					face = faces[ i ];
  					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

  				}

  				layer = steps + bevelSegments * 2;
  				offset = vlen * layer;

  				// Top faces

  				for ( i = 0; i < flen; i ++ ) {

  					face = faces[ i ];
  					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

  				}

  			} else {

  				// Bottom faces

  				for ( i = 0; i < flen; i ++ ) {

  					face = faces[ i ];
  					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

  				}

  				// Top faces

  				for ( i = 0; i < flen; i ++ ) {

  					face = faces[ i ];
  					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

  				}

  			}

  			scope.addGroup( start, verticesArray.length / 3 - start, 0 );

  		}

  		// Create faces for the z-sides of the shape

  		function buildSideFaces() {

  			var start = verticesArray.length / 3;
  			var layeroffset = 0;
  			sidewalls( contour, layeroffset );
  			layeroffset += contour.length;

  			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  				ahole = holes[ h ];
  				sidewalls( ahole, layeroffset );

  				//, true
  				layeroffset += ahole.length;

  			}


  			scope.addGroup( start, verticesArray.length / 3 - start, 1 );


  		}

  		function sidewalls( contour, layeroffset ) {

  			var j, k;
  			i = contour.length;

  			while ( -- i >= 0 ) {

  				j = i;
  				k = i - 1;
  				if ( k < 0 ) k = contour.length - 1;

  				//console.log('b', i,j, i-1, k,vertices.length);

  				var s = 0,
  					sl = steps + bevelSegments * 2;

  				for ( s = 0; s < sl; s ++ ) {

  					var slen1 = vlen * s;
  					var slen2 = vlen * ( s + 1 );

  					var a = layeroffset + j + slen1,
  						b = layeroffset + k + slen1,
  						c = layeroffset + k + slen2,
  						d = layeroffset + j + slen2;

  					f4( a, b, c, d );

  				}

  			}

  		}

  		function v( x, y, z ) {

  			placeholder.push( x );
  			placeholder.push( y );
  			placeholder.push( z );

  		}


  		function f3( a, b, c ) {

  			addVertex( a );
  			addVertex( b );
  			addVertex( c );

  			var nextIndex = verticesArray.length / 3;
  			var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

  			addUV( uvs[ 0 ] );
  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 2 ] );

  		}

  		function f4( a, b, c, d ) {

  			addVertex( a );
  			addVertex( b );
  			addVertex( d );

  			addVertex( b );
  			addVertex( c );
  			addVertex( d );


  			var nextIndex = verticesArray.length / 3;
  			var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

  			addUV( uvs[ 0 ] );
  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 3 ] );

  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 2 ] );
  			addUV( uvs[ 3 ] );

  		}

  		function addVertex( index ) {

  			verticesArray.push( placeholder[ index * 3 + 0 ] );
  			verticesArray.push( placeholder[ index * 3 + 1 ] );
  			verticesArray.push( placeholder[ index * 3 + 2 ] );

  		}


  		function addUV( vector2 ) {

  			uvArray.push( vector2.x );
  			uvArray.push( vector2.y );

  		}

  	}

  }

  ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

  ExtrudeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;
  	var options = this.parameters.options;

  	return toJSON( shapes, options, data );

  };

  //

  var WorldUVGenerator = {

  	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

  		var a_x = vertices[ indexA * 3 ];
  		var a_y = vertices[ indexA * 3 + 1 ];
  		var b_x = vertices[ indexB * 3 ];
  		var b_y = vertices[ indexB * 3 + 1 ];
  		var c_x = vertices[ indexC * 3 ];
  		var c_y = vertices[ indexC * 3 + 1 ];

  		return [
  			new Vector2( a_x, a_y ),
  			new Vector2( b_x, b_y ),
  			new Vector2( c_x, c_y )
  		];

  	},

  	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

  		var a_x = vertices[ indexA * 3 ];
  		var a_y = vertices[ indexA * 3 + 1 ];
  		var a_z = vertices[ indexA * 3 + 2 ];
  		var b_x = vertices[ indexB * 3 ];
  		var b_y = vertices[ indexB * 3 + 1 ];
  		var b_z = vertices[ indexB * 3 + 2 ];
  		var c_x = vertices[ indexC * 3 ];
  		var c_y = vertices[ indexC * 3 + 1 ];
  		var c_z = vertices[ indexC * 3 + 2 ];
  		var d_x = vertices[ indexD * 3 ];
  		var d_y = vertices[ indexD * 3 + 1 ];
  		var d_z = vertices[ indexD * 3 + 2 ];

  		if ( Math.abs( a_y - b_y ) < 0.01 ) {

  			return [
  				new Vector2( a_x, 1 - a_z ),
  				new Vector2( b_x, 1 - b_z ),
  				new Vector2( c_x, 1 - c_z ),
  				new Vector2( d_x, 1 - d_z )
  			];

  		} else {

  			return [
  				new Vector2( a_y, 1 - a_z ),
  				new Vector2( b_y, 1 - b_z ),
  				new Vector2( c_y, 1 - c_z ),
  				new Vector2( d_y, 1 - d_z )
  			];

  		}

  	}
  };

  function toJSON( shapes, options, data ) {

  	//

  	data.shapes = [];

  	if ( Array.isArray( shapes ) ) {

  		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  			var shape = shapes[ i ];

  			data.shapes.push( shape.uuid );

  		}

  	} else {

  		data.shapes.push( shapes.uuid );

  	}

  	//

  	if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();

  	return data;

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author alteredq / http://alteredqualia.com/
   *
   * Text = 3D Text
   *
   * parameters = {
   *  font: <THREE.Font>, // font
   *
   *  size: <float>, // size of the text
   *  height: <float>, // thickness to extrude text
   *  curveSegments: <int>, // number of points on the curves
   *
   *  bevelEnabled: <bool>, // turn on bevel
   *  bevelThickness: <float>, // how deep into text bevel goes
   *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
   *  bevelOffset: <float> // how far from text outline does bevel start
   * }
   */

  // TextGeometry

  function TextGeometry( text, parameters ) {

  	Geometry.call( this );

  	this.type = 'TextGeometry';

  	this.parameters = {
  		text: text,
  		parameters: parameters
  	};

  	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
  	this.mergeVertices();

  }

  TextGeometry.prototype = Object.create( Geometry.prototype );
  TextGeometry.prototype.constructor = TextGeometry;

  // TextBufferGeometry

  function TextBufferGeometry( text, parameters ) {

  	parameters = parameters || {};

  	var font = parameters.font;

  	if ( ! ( font && font.isFont ) ) {

  		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
  		return new Geometry();

  	}

  	var shapes = font.generateShapes( text, parameters.size );

  	// translate parameters to ExtrudeGeometry API

  	parameters.depth = parameters.height !== undefined ? parameters.height : 50;

  	// defaults

  	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
  	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
  	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

  	ExtrudeBufferGeometry.call( this, shapes, parameters );

  	this.type = 'TextBufferGeometry';

  }

  TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
  TextBufferGeometry.prototype.constructor = TextBufferGeometry;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author benaadams / https://twitter.com/ben_a_adams
   * @author Mugen87 / https://github.com/Mugen87
   */

  // SphereGeometry

  function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'SphereGeometry';

  	this.parameters = {
  		radius: radius,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments,
  		phiStart: phiStart,
  		phiLength: phiLength,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  SphereGeometry.prototype = Object.create( Geometry.prototype );
  SphereGeometry.prototype.constructor = SphereGeometry;

  // SphereBufferGeometry

  function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'SphereBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments,
  		phiStart: phiStart,
  		phiLength: phiLength,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	radius = radius || 1;

  	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
  	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

  	phiStart = phiStart !== undefined ? phiStart : 0;
  	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

  	var thetaEnd = thetaStart + thetaLength;

  	var ix, iy;

  	var index = 0;
  	var grid = [];

  	var vertex = new Vector3();
  	var normal = new Vector3();

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// generate vertices, normals and uvs

  	for ( iy = 0; iy <= heightSegments; iy ++ ) {

  		var verticesRow = [];

  		var v = iy / heightSegments;

  		// special case for the poles

  		var uOffset = ( iy == 0 ) ? 0.5 / widthSegments : ( ( iy == heightSegments ) ? - 0.5 / widthSegments : 0 );

  		for ( ix = 0; ix <= widthSegments; ix ++ ) {

  			var u = ix / widthSegments;

  			// vertex

  			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
  			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
  			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normal.copy( vertex ).normalize();
  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( u + uOffset, 1 - v );

  			verticesRow.push( index ++ );

  		}

  		grid.push( verticesRow );

  	}

  	// indices

  	for ( iy = 0; iy < heightSegments; iy ++ ) {

  		for ( ix = 0; ix < widthSegments; ix ++ ) {

  			var a = grid[ iy ][ ix + 1 ];
  			var b = grid[ iy ][ ix ];
  			var c = grid[ iy + 1 ][ ix ];
  			var d = grid[ iy + 1 ][ ix + 1 ];

  			if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
  			if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

  /**
   * @author Kaleb Murphy
   * @author Mugen87 / https://github.com/Mugen87
   */

  // RingGeometry

  function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'RingGeometry';

  	this.parameters = {
  		innerRadius: innerRadius,
  		outerRadius: outerRadius,
  		thetaSegments: thetaSegments,
  		phiSegments: phiSegments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  RingGeometry.prototype = Object.create( Geometry.prototype );
  RingGeometry.prototype.constructor = RingGeometry;

  // RingBufferGeometry

  function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'RingBufferGeometry';

  	this.parameters = {
  		innerRadius: innerRadius,
  		outerRadius: outerRadius,
  		thetaSegments: thetaSegments,
  		phiSegments: phiSegments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	innerRadius = innerRadius || 0.5;
  	outerRadius = outerRadius || 1;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
  	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// some helper variables

  	var segment;
  	var radius = innerRadius;
  	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
  	var vertex = new Vector3();
  	var uv = new Vector2();
  	var j, i;

  	// generate vertices, normals and uvs

  	for ( j = 0; j <= phiSegments; j ++ ) {

  		for ( i = 0; i <= thetaSegments; i ++ ) {

  			// values are generate from the inside of the ring to the outside

  			segment = thetaStart + i / thetaSegments * thetaLength;

  			// vertex

  			vertex.x = radius * Math.cos( segment );
  			vertex.y = radius * Math.sin( segment );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normals.push( 0, 0, 1 );

  			// uv

  			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
  			uv.y = ( vertex.y / outerRadius + 1 ) / 2;

  			uvs.push( uv.x, uv.y );

  		}

  		// increase the radius for next row of vertices

  		radius += radiusStep;

  	}

  	// indices

  	for ( j = 0; j < phiSegments; j ++ ) {

  		var thetaSegmentLevel = j * ( thetaSegments + 1 );

  		for ( i = 0; i < thetaSegments; i ++ ) {

  			segment = i + thetaSegmentLevel;

  			var a = segment;
  			var b = segment + thetaSegments + 1;
  			var c = segment + thetaSegments + 2;
  			var d = segment + 1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  RingBufferGeometry.prototype.constructor = RingBufferGeometry;

  /**
   * @author zz85 / https://github.com/zz85
   * @author bhouston / http://clara.io
   * @author Mugen87 / https://github.com/Mugen87
   */

  // LatheGeometry

  function LatheGeometry( points, segments, phiStart, phiLength ) {

  	Geometry.call( this );

  	this.type = 'LatheGeometry';

  	this.parameters = {
  		points: points,
  		segments: segments,
  		phiStart: phiStart,
  		phiLength: phiLength
  	};

  	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
  	this.mergeVertices();

  }

  LatheGeometry.prototype = Object.create( Geometry.prototype );
  LatheGeometry.prototype.constructor = LatheGeometry;

  // LatheBufferGeometry

  function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

  	BufferGeometry.call( this );

  	this.type = 'LatheBufferGeometry';

  	this.parameters = {
  		points: points,
  		segments: segments,
  		phiStart: phiStart,
  		phiLength: phiLength
  	};

  	segments = Math.floor( segments ) || 12;
  	phiStart = phiStart || 0;
  	phiLength = phiLength || Math.PI * 2;

  	// clamp phiLength so it's in range of [ 0, 2PI ]

  	phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


  	// buffers

  	var indices = [];
  	var vertices = [];
  	var uvs = [];

  	// helper variables

  	var base;
  	var inverseSegments = 1.0 / segments;
  	var vertex = new Vector3();
  	var uv = new Vector2();
  	var i, j;

  	// generate vertices and uvs

  	for ( i = 0; i <= segments; i ++ ) {

  		var phi = phiStart + i * inverseSegments * phiLength;

  		var sin = Math.sin( phi );
  		var cos = Math.cos( phi );

  		for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

  			// vertex

  			vertex.x = points[ j ].x * sin;
  			vertex.y = points[ j ].y;
  			vertex.z = points[ j ].x * cos;

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// uv

  			uv.x = i / segments;
  			uv.y = j / ( points.length - 1 );

  			uvs.push( uv.x, uv.y );


  		}

  	}

  	// indices

  	for ( i = 0; i < segments; i ++ ) {

  		for ( j = 0; j < ( points.length - 1 ); j ++ ) {

  			base = j + i * points.length;

  			var a = base;
  			var b = base + points.length;
  			var c = base + points.length + 1;
  			var d = base + 1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// generate normals

  	this.computeVertexNormals();

  	// if the geometry is closed, we need to average the normals along the seam.
  	// because the corresponding vertices are identical (but still have different UVs).

  	if ( phiLength === Math.PI * 2 ) {

  		var normals = this.attributes.normal.array;
  		var n1 = new Vector3();
  		var n2 = new Vector3();
  		var n = new Vector3();

  		// this is the buffer offset for the last line of vertices

  		base = segments * points.length * 3;

  		for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

  			// select the normal of the vertex in the first line

  			n1.x = normals[ j + 0 ];
  			n1.y = normals[ j + 1 ];
  			n1.z = normals[ j + 2 ];

  			// select the normal of the vertex in the last line

  			n2.x = normals[ base + j + 0 ];
  			n2.y = normals[ base + j + 1 ];
  			n2.z = normals[ base + j + 2 ];

  			// average normals

  			n.addVectors( n1, n2 ).normalize();

  			// assign the new values to both normals

  			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
  			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
  			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

  		}

  	}

  }

  LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

  /**
   * @author jonobr1 / http://jonobr1.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  // ShapeGeometry

  function ShapeGeometry( shapes, curveSegments ) {

  	Geometry.call( this );

  	this.type = 'ShapeGeometry';

  	if ( typeof curveSegments === 'object' ) {

  		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

  		curveSegments = curveSegments.curveSegments;

  	}

  	this.parameters = {
  		shapes: shapes,
  		curveSegments: curveSegments
  	};

  	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
  	this.mergeVertices();

  }

  ShapeGeometry.prototype = Object.create( Geometry.prototype );
  ShapeGeometry.prototype.constructor = ShapeGeometry;

  ShapeGeometry.prototype.toJSON = function () {

  	var data = Geometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;

  	return toJSON$1( shapes, data );

  };

  // ShapeBufferGeometry

  function ShapeBufferGeometry( shapes, curveSegments ) {

  	BufferGeometry.call( this );

  	this.type = 'ShapeBufferGeometry';

  	this.parameters = {
  		shapes: shapes,
  		curveSegments: curveSegments
  	};

  	curveSegments = curveSegments || 12;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var groupStart = 0;
  	var groupCount = 0;

  	// allow single and array values for "shapes" parameter

  	if ( Array.isArray( shapes ) === false ) {

  		addShape( shapes );

  	} else {

  		for ( var i = 0; i < shapes.length; i ++ ) {

  			addShape( shapes[ i ] );

  			this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

  			groupStart += groupCount;
  			groupCount = 0;

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


  	// helper functions

  	function addShape( shape ) {

  		var i, l, shapeHole;

  		var indexOffset = vertices.length / 3;
  		var points = shape.extractPoints( curveSegments );

  		var shapeVertices = points.shape;
  		var shapeHoles = points.holes;

  		// check direction of vertices

  		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

  			shapeVertices = shapeVertices.reverse();

  		}

  		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

  			shapeHole = shapeHoles[ i ];

  			if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

  				shapeHoles[ i ] = shapeHole.reverse();

  			}

  		}

  		var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

  		// join vertices of inner and outer paths to a single array

  		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

  			shapeHole = shapeHoles[ i ];
  			shapeVertices = shapeVertices.concat( shapeHole );

  		}

  		// vertices, normals, uvs

  		for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

  			var vertex = shapeVertices[ i ];

  			vertices.push( vertex.x, vertex.y, 0 );
  			normals.push( 0, 0, 1 );
  			uvs.push( vertex.x, vertex.y ); // world uvs

  		}

  		// incides

  		for ( i = 0, l = faces.length; i < l; i ++ ) {

  			var face = faces[ i ];

  			var a = face[ 0 ] + indexOffset;
  			var b = face[ 1 ] + indexOffset;
  			var c = face[ 2 ] + indexOffset;

  			indices.push( a, b, c );
  			groupCount += 3;

  		}

  	}

  }

  ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

  ShapeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;

  	return toJSON$1( shapes, data );

  };

  //

  function toJSON$1( shapes, data ) {

  	data.shapes = [];

  	if ( Array.isArray( shapes ) ) {

  		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  			var shape = shapes[ i ];

  			data.shapes.push( shape.uuid );

  		}

  	} else {

  		data.shapes.push( shapes.uuid );

  	}

  	return data;

  }

  /**
   * @author WestLangley / http://github.com/WestLangley
   * @author Mugen87 / https://github.com/Mugen87
   */

  function EdgesGeometry( geometry, thresholdAngle ) {

  	BufferGeometry.call( this );

  	this.type = 'EdgesGeometry';

  	this.parameters = {
  		thresholdAngle: thresholdAngle
  	};

  	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

  	// buffer

  	var vertices = [];

  	// helper variables

  	var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
  	var edge = [ 0, 0 ], edges = {}, edge1, edge2;
  	var key, keys = [ 'a', 'b', 'c' ];

  	// prepare source geometry

  	var geometry2;

  	if ( geometry.isBufferGeometry ) {

  		geometry2 = new Geometry();
  		geometry2.fromBufferGeometry( geometry );

  	} else {

  		geometry2 = geometry.clone();

  	}

  	geometry2.mergeVertices();
  	geometry2.computeFaceNormals();

  	var sourceVertices = geometry2.vertices;
  	var faces = geometry2.faces;

  	// now create a data structure where each entry represents an edge with its adjoining faces

  	for ( var i = 0, l = faces.length; i < l; i ++ ) {

  		var face = faces[ i ];

  		for ( var j = 0; j < 3; j ++ ) {

  			edge1 = face[ keys[ j ] ];
  			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
  			edge[ 0 ] = Math.min( edge1, edge2 );
  			edge[ 1 ] = Math.max( edge1, edge2 );

  			key = edge[ 0 ] + ',' + edge[ 1 ];

  			if ( edges[ key ] === undefined ) {

  				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

  			} else {

  				edges[ key ].face2 = i;

  			}

  		}

  	}

  	// generate vertices

  	for ( key in edges ) {

  		var e = edges[ key ];

  		// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

  		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

  			var vertex = sourceVertices[ e.index1 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			vertex = sourceVertices[ e.index2 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	}

  	// build geometry

  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

  }

  EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
  EdgesGeometry.prototype.constructor = EdgesGeometry;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // CylinderGeometry

  function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'CylinderGeometry';

  	this.parameters = {
  		radiusTop: radiusTop,
  		radiusBottom: radiusBottom,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  CylinderGeometry.prototype = Object.create( Geometry.prototype );
  CylinderGeometry.prototype.constructor = CylinderGeometry;

  // CylinderBufferGeometry

  function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'CylinderBufferGeometry';

  	this.parameters = {
  		radiusTop: radiusTop,
  		radiusBottom: radiusBottom,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	var scope = this;

  	radiusTop = radiusTop !== undefined ? radiusTop : 1;
  	radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
  	height = height || 1;

  	radialSegments = Math.floor( radialSegments ) || 8;
  	heightSegments = Math.floor( heightSegments ) || 1;

  	openEnded = openEnded !== undefined ? openEnded : false;
  	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var index = 0;
  	var indexArray = [];
  	var halfHeight = height / 2;
  	var groupStart = 0;

  	// generate geometry

  	generateTorso();

  	if ( openEnded === false ) {

  		if ( radiusTop > 0 ) generateCap( true );
  		if ( radiusBottom > 0 ) generateCap( false );

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	function generateTorso() {

  		var x, y;
  		var normal = new Vector3();
  		var vertex = new Vector3();

  		var groupCount = 0;

  		// this will be used to calculate the normal
  		var slope = ( radiusBottom - radiusTop ) / height;

  		// generate vertices, normals and uvs

  		for ( y = 0; y <= heightSegments; y ++ ) {

  			var indexRow = [];

  			var v = y / heightSegments;

  			// calculate the radius of the current row

  			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

  			for ( x = 0; x <= radialSegments; x ++ ) {

  				var u = x / radialSegments;

  				var theta = u * thetaLength + thetaStart;

  				var sinTheta = Math.sin( theta );
  				var cosTheta = Math.cos( theta );

  				// vertex

  				vertex.x = radius * sinTheta;
  				vertex.y = - v * height + halfHeight;
  				vertex.z = radius * cosTheta;
  				vertices.push( vertex.x, vertex.y, vertex.z );

  				// normal

  				normal.set( sinTheta, slope, cosTheta ).normalize();
  				normals.push( normal.x, normal.y, normal.z );

  				// uv

  				uvs.push( u, 1 - v );

  				// save index of vertex in respective row

  				indexRow.push( index ++ );

  			}

  			// now save vertices of the row in our index array

  			indexArray.push( indexRow );

  		}

  		// generate indices

  		for ( x = 0; x < radialSegments; x ++ ) {

  			for ( y = 0; y < heightSegments; y ++ ) {

  				// we use the index array to access the correct indices

  				var a = indexArray[ y ][ x ];
  				var b = indexArray[ y + 1 ][ x ];
  				var c = indexArray[ y + 1 ][ x + 1 ];
  				var d = indexArray[ y ][ x + 1 ];

  				// faces

  				indices.push( a, b, d );
  				indices.push( b, c, d );

  				// update group counter

  				groupCount += 6;

  			}

  		}

  		// add a group to the geometry. this will ensure multi material support

  		scope.addGroup( groupStart, groupCount, 0 );

  		// calculate new start value for groups

  		groupStart += groupCount;

  	}

  	function generateCap( top ) {

  		var x, centerIndexStart, centerIndexEnd;

  		var uv = new Vector2();
  		var vertex = new Vector3();

  		var groupCount = 0;

  		var radius = ( top === true ) ? radiusTop : radiusBottom;
  		var sign = ( top === true ) ? 1 : - 1;

  		// save the index of the first center vertex
  		centerIndexStart = index;

  		// first we generate the center vertex data of the cap.
  		// because the geometry needs one set of uvs per face,
  		// we must generate a center vertex per face/segment

  		for ( x = 1; x <= radialSegments; x ++ ) {

  			// vertex

  			vertices.push( 0, halfHeight * sign, 0 );

  			// normal

  			normals.push( 0, sign, 0 );

  			// uv

  			uvs.push( 0.5, 0.5 );

  			// increase index

  			index ++;

  		}

  		// save the index of the last center vertex

  		centerIndexEnd = index;

  		// now we generate the surrounding vertices, normals and uvs

  		for ( x = 0; x <= radialSegments; x ++ ) {

  			var u = x / radialSegments;
  			var theta = u * thetaLength + thetaStart;

  			var cosTheta = Math.cos( theta );
  			var sinTheta = Math.sin( theta );

  			// vertex

  			vertex.x = radius * sinTheta;
  			vertex.y = halfHeight * sign;
  			vertex.z = radius * cosTheta;
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normals.push( 0, sign, 0 );

  			// uv

  			uv.x = ( cosTheta * 0.5 ) + 0.5;
  			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
  			uvs.push( uv.x, uv.y );

  			// increase index

  			index ++;

  		}

  		// generate indices

  		for ( x = 0; x < radialSegments; x ++ ) {

  			var c = centerIndexStart + x;
  			var i = centerIndexEnd + x;

  			if ( top === true ) {

  				// face top

  				indices.push( i, i + 1, c );

  			} else {

  				// face bottom

  				indices.push( i + 1, i, c );

  			}

  			groupCount += 3;

  		}

  		// add a group to the geometry. this will ensure multi material support

  		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

  		// calculate new start value for groups

  		groupStart += groupCount;

  	}

  }

  CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

  /**
   * @author abelnation / http://github.com/abelnation
   */

  // ConeGeometry

  function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

  	this.type = 'ConeGeometry';

  	this.parameters = {
  		radius: radius,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  }

  ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
  ConeGeometry.prototype.constructor = ConeGeometry;

  // ConeBufferGeometry

  function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

  	this.type = 'ConeBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  }

  ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
  ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   * @author Mugen87 / https://github.com/Mugen87
   * @author hughes
   */

  // CircleGeometry

  function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'CircleGeometry';

  	this.parameters = {
  		radius: radius,
  		segments: segments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  CircleGeometry.prototype = Object.create( Geometry.prototype );
  CircleGeometry.prototype.constructor = CircleGeometry;

  // CircleBufferGeometry

  function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'CircleBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		segments: segments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	radius = radius || 1;
  	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var i, s;
  	var vertex = new Vector3();
  	var uv = new Vector2();

  	// center point

  	vertices.push( 0, 0, 0 );
  	normals.push( 0, 0, 1 );
  	uvs.push( 0.5, 0.5 );

  	for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

  		var segment = thetaStart + s / segments * thetaLength;

  		// vertex

  		vertex.x = radius * Math.cos( segment );
  		vertex.y = radius * Math.sin( segment );

  		vertices.push( vertex.x, vertex.y, vertex.z );

  		// normal

  		normals.push( 0, 0, 1 );

  		// uvs

  		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
  		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

  		uvs.push( uv.x, uv.y );

  	}

  	// indices

  	for ( i = 1; i <= segments; i ++ ) {

  		indices.push( i, i + 1, 0 );

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



  var Geometries = /*#__PURE__*/Object.freeze({
  	WireframeGeometry: WireframeGeometry,
  	ParametricGeometry: ParametricGeometry,
  	ParametricBufferGeometry: ParametricBufferGeometry,
  	TetrahedronGeometry: TetrahedronGeometry,
  	TetrahedronBufferGeometry: TetrahedronBufferGeometry,
  	OctahedronGeometry: OctahedronGeometry,
  	OctahedronBufferGeometry: OctahedronBufferGeometry,
  	IcosahedronGeometry: IcosahedronGeometry,
  	IcosahedronBufferGeometry: IcosahedronBufferGeometry,
  	DodecahedronGeometry: DodecahedronGeometry,
  	DodecahedronBufferGeometry: DodecahedronBufferGeometry,
  	PolyhedronGeometry: PolyhedronGeometry,
  	PolyhedronBufferGeometry: PolyhedronBufferGeometry,
  	TubeGeometry: TubeGeometry,
  	TubeBufferGeometry: TubeBufferGeometry,
  	TorusKnotGeometry: TorusKnotGeometry,
  	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
  	TorusGeometry: TorusGeometry,
  	TorusBufferGeometry: TorusBufferGeometry,
  	TextGeometry: TextGeometry,
  	TextBufferGeometry: TextBufferGeometry,
  	SphereGeometry: SphereGeometry,
  	SphereBufferGeometry: SphereBufferGeometry,
  	RingGeometry: RingGeometry,
  	RingBufferGeometry: RingBufferGeometry,
  	PlaneGeometry: PlaneGeometry,
  	PlaneBufferGeometry: PlaneBufferGeometry,
  	LatheGeometry: LatheGeometry,
  	LatheBufferGeometry: LatheBufferGeometry,
  	ShapeGeometry: ShapeGeometry,
  	ShapeBufferGeometry: ShapeBufferGeometry,
  	ExtrudeGeometry: ExtrudeGeometry,
  	ExtrudeBufferGeometry: ExtrudeBufferGeometry,
  	EdgesGeometry: EdgesGeometry,
  	ConeGeometry: ConeGeometry,
  	ConeBufferGeometry: ConeBufferGeometry,
  	CylinderGeometry: CylinderGeometry,
  	CylinderBufferGeometry: CylinderBufferGeometry,
  	CircleGeometry: CircleGeometry,
  	CircleBufferGeometry: CircleBufferGeometry,
  	BoxGeometry: BoxGeometry,
  	BoxBufferGeometry: BoxBufferGeometry
  });

  /**
   * @author mrdoob / http://mrdoob.com/
   *
   * parameters = {
   *  color: <THREE.Color>
   * }
   */

  function ShadowMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'ShadowMaterial';

  	this.color = new Color( 0x000000 );
  	this.transparent = true;

  	this.setValues( parameters );

  }

  ShadowMaterial.prototype = Object.create( Material.prototype );
  ShadowMaterial.prototype.constructor = ShadowMaterial;

  ShadowMaterial.prototype.isShadowMaterial = true;

  ShadowMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function RawShaderMaterial( parameters ) {

  	ShaderMaterial.call( this, parameters );

  	this.type = 'RawShaderMaterial';

  }

  RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
  RawShaderMaterial.prototype.constructor = RawShaderMaterial;

  RawShaderMaterial.prototype.isRawShaderMaterial = true;

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  color: <hex>,
   *  roughness: <float>,
   *  metalness: <float>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  roughnessMap: new THREE.Texture( <Image> ),
   *
   *  metalnessMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  envMapIntensity: <float>
   *
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshStandardMaterial( parameters ) {

  	Material.call( this );

  	this.defines = { 'STANDARD': '' };

  	this.type = 'MeshStandardMaterial';

  	this.color = new Color( 0xffffff ); // diffuse
  	this.roughness = 0.5;
  	this.metalness = 0.5;

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.roughnessMap = null;

  	this.metalnessMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.envMapIntensity = 1.0;

  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshStandardMaterial.prototype = Object.create( Material.prototype );
  MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

  MeshStandardMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.defines = { 'STANDARD': '' };

  	this.color.copy( source.color );
  	this.roughness = source.roughness;
  	this.metalness = source.metalness;

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.roughnessMap = source.roughnessMap;

  	this.metalnessMap = source.metalnessMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.envMapIntensity = source.envMapIntensity;

  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  reflectivity: <float>
   *  clearCoat: <float>
   *  clearCoatRoughness: <float>
   * }
   */

  function MeshPhysicalMaterial( parameters ) {

  	MeshStandardMaterial.call( this );

  	this.defines = { 'PHYSICAL': '' };

  	this.type = 'MeshPhysicalMaterial';

  	this.reflectivity = 0.5; // maps to F0 = 0.04

  	this.clearCoat = 0.0;
  	this.clearCoatRoughness = 0.0;

  	this.setValues( parameters );

  }

  MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
  MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

  MeshPhysicalMaterial.prototype.copy = function ( source ) {

  	MeshStandardMaterial.prototype.copy.call( this, source );

  	this.defines = { 'PHYSICAL': '' };

  	this.reflectivity = source.reflectivity;

  	this.clearCoat = source.clearCoat;
  	this.clearCoatRoughness = source.clearCoatRoughness;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  specular: <hex>,
   *  shininess: <float>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.Multiply,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshPhongMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshPhongMaterial';

  	this.color = new Color( 0xffffff ); // diffuse
  	this.specular = new Color( 0x111111 );
  	this.shininess = 30;

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshPhongMaterial.prototype = Object.create( Material.prototype );
  MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

  MeshPhongMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );
  	this.specular.copy( source.specular );
  	this.shininess = source.shininess;

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author takahirox / http://github.com/takahirox
   *
   * parameters = {
   *  gradientMap: new THREE.Texture( <Image> )
   * }
   */

  function MeshToonMaterial( parameters ) {

  	MeshPhongMaterial.call( this );

  	this.defines = { 'TOON': '' };

  	this.type = 'MeshToonMaterial';

  	this.gradientMap = null;

  	this.setValues( parameters );

  }

  MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
  MeshToonMaterial.prototype.constructor = MeshToonMaterial;

  MeshToonMaterial.prototype.isMeshToonMaterial = true;

  MeshToonMaterial.prototype.copy = function ( source ) {

  	MeshPhongMaterial.prototype.copy.call( this, source );

  	this.gradientMap = source.gradientMap;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  opacity: <float>,
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshNormalMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshNormalMaterial';

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false;
  	this.lights = false;

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshNormalMaterial.prototype = Object.create( Material.prototype );
  MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

  MeshNormalMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.Multiply,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshLambertMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshLambertMaterial';

  	this.color = new Color( 0xffffff ); // diffuse

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshLambertMaterial.prototype = Object.create( Material.prototype );
  MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

  MeshLambertMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  matcap: new THREE.Texture( <Image> ),
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshMatcapMaterial( parameters ) {

  	Material.call( this );

  	this.defines = { 'MATCAP': '' };

  	this.type = 'MeshMatcapMaterial';

  	this.color = new Color( 0xffffff ); // diffuse

  	this.matcap = null;

  	this.map = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.alphaMap = null;

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.lights = false;

  	this.setValues( parameters );

  }

  MeshMatcapMaterial.prototype = Object.create( Material.prototype );
  MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;

  MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

  MeshMatcapMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.defines = { 'MATCAP': '' };

  	this.color.copy( source.color );

  	this.matcap = source.matcap;

  	this.map = source.map;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.alphaMap = source.alphaMap;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  linewidth: <float>,
   *
   *  scale: <float>,
   *  dashSize: <float>,
   *  gapSize: <float>
   * }
   */

  function LineDashedMaterial( parameters ) {

  	LineBasicMaterial.call( this );

  	this.type = 'LineDashedMaterial';

  	this.scale = 1;
  	this.dashSize = 3;
  	this.gapSize = 1;

  	this.setValues( parameters );

  }

  LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
  LineDashedMaterial.prototype.constructor = LineDashedMaterial;

  LineDashedMaterial.prototype.isLineDashedMaterial = true;

  LineDashedMaterial.prototype.copy = function ( source ) {

  	LineBasicMaterial.prototype.copy.call( this, source );

  	this.scale = source.scale;
  	this.dashSize = source.dashSize;
  	this.gapSize = source.gapSize;

  	return this;

  };



  var Materials = /*#__PURE__*/Object.freeze({
  	ShadowMaterial: ShadowMaterial,
  	SpriteMaterial: SpriteMaterial,
  	RawShaderMaterial: RawShaderMaterial,
  	ShaderMaterial: ShaderMaterial,
  	PointsMaterial: PointsMaterial,
  	MeshPhysicalMaterial: MeshPhysicalMaterial,
  	MeshStandardMaterial: MeshStandardMaterial,
  	MeshPhongMaterial: MeshPhongMaterial,
  	MeshToonMaterial: MeshToonMaterial,
  	MeshNormalMaterial: MeshNormalMaterial,
  	MeshLambertMaterial: MeshLambertMaterial,
  	MeshDepthMaterial: MeshDepthMaterial,
  	MeshDistanceMaterial: MeshDistanceMaterial,
  	MeshBasicMaterial: MeshBasicMaterial,
  	MeshMatcapMaterial: MeshMatcapMaterial,
  	LineDashedMaterial: LineDashedMaterial,
  	LineBasicMaterial: LineBasicMaterial,
  	Material: Material
  });

  /**
   * @author tschw
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   */

  var AnimationUtils = {

  	// same as Array.prototype.slice, but also works on typed arrays
  	arraySlice: function ( array, from, to ) {

  		if ( AnimationUtils.isTypedArray( array ) ) {

  			// in ios9 array.subarray(from, undefined) will return empty array
  			// but array.subarray(from) or array.subarray(from, len) is correct
  			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

  		}

  		return array.slice( from, to );

  	},

  	// converts an array to a specific type
  	convertArray: function ( array, type, forceClone ) {

  		if ( ! array || // let 'undefined' and 'null' pass
  			! forceClone && array.constructor === type ) return array;

  		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

  			return new type( array ); // create typed array

  		}

  		return Array.prototype.slice.call( array ); // create Array

  	},

  	isTypedArray: function ( object ) {

  		return ArrayBuffer.isView( object ) &&
  			! ( object instanceof DataView );

  	},

  	// returns an array by which times and values can be sorted
  	getKeyframeOrder: function ( times ) {

  		function compareTime( i, j ) {

  			return times[ i ] - times[ j ];

  		}

  		var n = times.length;
  		var result = new Array( n );
  		for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

  		result.sort( compareTime );

  		return result;

  	},

  	// uses the array previously returned by 'getKeyframeOrder' to sort data
  	sortedArray: function ( values, stride, order ) {

  		var nValues = values.length;
  		var result = new values.constructor( nValues );

  		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

  			var srcOffset = order[ i ] * stride;

  			for ( var j = 0; j !== stride; ++ j ) {

  				result[ dstOffset ++ ] = values[ srcOffset + j ];

  			}

  		}

  		return result;

  	},

  	// function for parsing AOS keyframe formats
  	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

  		var i = 1, key = jsonKeys[ 0 ];

  		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

  			key = jsonKeys[ i ++ ];

  		}

  		if ( key === undefined ) return; // no data

  		var value = key[ valuePropertyName ];
  		if ( value === undefined ) return; // no data

  		if ( Array.isArray( value ) ) {

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					values.push.apply( values, value ); // push all elements

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		} else if ( value.toArray !== undefined ) {

  			// ...assume THREE.Math-ish

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					value.toArray( values, values.length );

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		} else {

  			// otherwise push as-is

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					values.push( value );

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		}

  	}

  };

  /**
   * Abstract base class of interpolants over parametric samples.
   *
   * The parameter domain is one dimensional, typically the time or a path
   * along a curve defined by the data.
   *
   * The sample values can have any dimensionality and derived classes may
   * apply special interpretations to the data.
   *
   * This class provides the interval seek in a Template Method, deferring
   * the actual interpolation to derived classes.
   *
   * Time complexity is O(1) for linear access crossing at most two points
   * and O(log N) for random access, where N is the number of positions.
   *
   * References:
   *
   * 		http://www.oodesign.com/template-method-pattern.html
   *
   * @author tschw
   */

  function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	this.parameterPositions = parameterPositions;
  	this._cachedIndex = 0;

  	this.resultBuffer = resultBuffer !== undefined ?
  		resultBuffer : new sampleValues.constructor( sampleSize );
  	this.sampleValues = sampleValues;
  	this.valueSize = sampleSize;

  }

  Object.assign( Interpolant.prototype, {

  	evaluate: function ( t ) {

  		var pp = this.parameterPositions,
  			i1 = this._cachedIndex,

  			t1 = pp[ i1 ],
  			t0 = pp[ i1 - 1 ];

  		validate_interval: {

  			seek: {

  				var right;

  				linear_scan: {

  					//- See http://jsperf.com/comparison-to-undefined/3
  					//- slower code:
  					//-
  					//- 				if ( t >= t1 || t1 === undefined ) {
  					forward_scan: if ( ! ( t < t1 ) ) {

  						for ( var giveUpAt = i1 + 2; ; ) {

  							if ( t1 === undefined ) {

  								if ( t < t0 ) break forward_scan;

  								// after end

  								i1 = pp.length;
  								this._cachedIndex = i1;
  								return this.afterEnd_( i1 - 1, t, t0 );

  							}

  							if ( i1 === giveUpAt ) break; // this loop

  							t0 = t1;
  							t1 = pp[ ++ i1 ];

  							if ( t < t1 ) {

  								// we have arrived at the sought interval
  								break seek;

  							}

  						}

  						// prepare binary search on the right side of the index
  						right = pp.length;
  						break linear_scan;

  					}

  					//- slower code:
  					//-					if ( t < t0 || t0 === undefined ) {
  					if ( ! ( t >= t0 ) ) {

  						// looping?

  						var t1global = pp[ 1 ];

  						if ( t < t1global ) {

  							i1 = 2; // + 1, using the scan for the details
  							t0 = t1global;

  						}

  						// linear reverse scan

  						for ( var giveUpAt = i1 - 2; ; ) {

  							if ( t0 === undefined ) {

  								// before start

  								this._cachedIndex = 0;
  								return this.beforeStart_( 0, t, t1 );

  							}

  							if ( i1 === giveUpAt ) break; // this loop

  							t1 = t0;
  							t0 = pp[ -- i1 - 1 ];

  							if ( t >= t0 ) {

  								// we have arrived at the sought interval
  								break seek;

  							}

  						}

  						// prepare binary search on the left side of the index
  						right = i1;
  						i1 = 0;
  						break linear_scan;

  					}

  					// the interval is valid

  					break validate_interval;

  				} // linear scan

  				// binary search

  				while ( i1 < right ) {

  					var mid = ( i1 + right ) >>> 1;

  					if ( t < pp[ mid ] ) {

  						right = mid;

  					} else {

  						i1 = mid + 1;

  					}

  				}

  				t1 = pp[ i1 ];
  				t0 = pp[ i1 - 1 ];

  				// check boundary cases, again

  				if ( t0 === undefined ) {

  					this._cachedIndex = 0;
  					return this.beforeStart_( 0, t, t1 );

  				}

  				if ( t1 === undefined ) {

  					i1 = pp.length;
  					this._cachedIndex = i1;
  					return this.afterEnd_( i1 - 1, t0, t );

  				}

  			} // seek

  			this._cachedIndex = i1;

  			this.intervalChanged_( i1, t0, t1 );

  		} // validate_interval

  		return this.interpolate_( i1, t0, t, t1 );

  	},

  	settings: null, // optional, subclass-specific settings structure
  	// Note: The indirection allows central control of many interpolants.

  	// --- Protected interface

  	DefaultSettings_: {},

  	getSettings_: function () {

  		return this.settings || this.DefaultSettings_;

  	},

  	copySampleValue_: function ( index ) {

  		// copies a sample value to the result buffer

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,
  			offset = index * stride;

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] = values[ offset + i ];

  		}

  		return result;

  	},

  	// Template methods for derived classes:

  	interpolate_: function ( /* i1, t0, t, t1 */ ) {

  		throw new Error( 'call to abstract method' );
  		// implementations shall return this.resultBuffer

  	},

  	intervalChanged_: function ( /* i1, t0, t1 */ ) {

  		// empty

  	}

  } );

  //!\ DECLARE ALIAS AFTER assign prototype !
  Object.assign( Interpolant.prototype, {

  	//( 0, t, t0 ), returns this.resultBuffer
  	beforeStart_: Interpolant.prototype.copySampleValue_,

  	//( N-1, tN-1, t ), returns this.resultBuffer
  	afterEnd_: Interpolant.prototype.copySampleValue_,

  } );

  /**
   * Fast and simple cubic spline interpolant.
   *
   * It was derived from a Hermitian construction setting the first derivative
   * at each sample position to the linear slope between neighboring positions
   * over their parameter interval.
   *
   * @author tschw
   */

  function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  	this._weightPrev = - 0;
  	this._offsetPrev = - 0;
  	this._weightNext = - 0;
  	this._offsetNext = - 0;

  }

  CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: CubicInterpolant,

  	DefaultSettings_: {

  		endingStart: ZeroCurvatureEnding,
  		endingEnd: ZeroCurvatureEnding

  	},

  	intervalChanged_: function ( i1, t0, t1 ) {

  		var pp = this.parameterPositions,
  			iPrev = i1 - 2,
  			iNext = i1 + 1,

  			tPrev = pp[ iPrev ],
  			tNext = pp[ iNext ];

  		if ( tPrev === undefined ) {

  			switch ( this.getSettings_().endingStart ) {

  				case ZeroSlopeEnding:

  					// f'(t0) = 0
  					iPrev = i1;
  					tPrev = 2 * t0 - t1;

  					break;

  				case WrapAroundEnding:

  					// use the other end of the curve
  					iPrev = pp.length - 2;
  					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

  					break;

  				default: // ZeroCurvatureEnding

  					// f''(t0) = 0 a.k.a. Natural Spline
  					iPrev = i1;
  					tPrev = t1;

  			}

  		}

  		if ( tNext === undefined ) {

  			switch ( this.getSettings_().endingEnd ) {

  				case ZeroSlopeEnding:

  					// f'(tN) = 0
  					iNext = i1;
  					tNext = 2 * t1 - t0;

  					break;

  				case WrapAroundEnding:

  					// use the other end of the curve
  					iNext = 1;
  					tNext = t1 + pp[ 1 ] - pp[ 0 ];

  					break;

  				default: // ZeroCurvatureEnding

  					// f''(tN) = 0, a.k.a. Natural Spline
  					iNext = i1 - 1;
  					tNext = t0;

  			}

  		}

  		var halfDt = ( t1 - t0 ) * 0.5,
  			stride = this.valueSize;

  		this._weightPrev = halfDt / ( t0 - tPrev );
  		this._weightNext = halfDt / ( tNext - t1 );
  		this._offsetPrev = iPrev * stride;
  		this._offsetNext = iNext * stride;

  	},

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			o1 = i1 * stride,		o0 = o1 - stride,
  			oP = this._offsetPrev, 	oN = this._offsetNext,
  			wP = this._weightPrev,	wN = this._weightNext,

  			p = ( t - t0 ) / ( t1 - t0 ),
  			pp = p * p,
  			ppp = pp * p;

  		// evaluate polynomials

  		var sP = - wP * ppp + 2 * wP * pp - wP * p;
  		var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
  		var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
  		var sN = wN * ppp - wN * pp;

  		// combine data linearly

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] =
  					sP * values[ oP + i ] +
  					s0 * values[ o0 + i ] +
  					s1 * values[ o1 + i ] +
  					sN * values[ oN + i ];

  		}

  		return result;

  	}

  } );

  /**
   * @author tschw
   */

  function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: LinearInterpolant,

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			offset1 = i1 * stride,
  			offset0 = offset1 - stride,

  			weight1 = ( t - t0 ) / ( t1 - t0 ),
  			weight0 = 1 - weight1;

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] =
  					values[ offset0 + i ] * weight0 +
  					values[ offset1 + i ] * weight1;

  		}

  		return result;

  	}

  } );

  /**
   *
   * Interpolant that evaluates to the sample value at the position preceeding
   * the parameter.
   *
   * @author tschw
   */

  function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: DiscreteInterpolant,

  	interpolate_: function ( i1 /*, t0, t, t1 */ ) {

  		return this.copySampleValue_( i1 - 1 );

  	}

  } );

  /**
   *
   * A timed sequence of keyframes for a specific property.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function KeyframeTrack( name, times, values, interpolation ) {

  	if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
  	if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );

  	this.name = name;

  	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
  	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

  	this.setInterpolation( interpolation || this.DefaultInterpolation );

  }

  // Static methods

  Object.assign( KeyframeTrack, {

  	// Serialization (in static context, because of constructor invocation
  	// and automatic invocation of .toJSON):

  	toJSON: function ( track ) {

  		var trackType = track.constructor;

  		var json;

  		// derived classes can define a static toJSON method
  		if ( trackType.toJSON !== undefined ) {

  			json = trackType.toJSON( track );

  		} else {

  			// by default, we assume the data can be serialized as-is
  			json = {

  				'name': track.name,
  				'times': AnimationUtils.convertArray( track.times, Array ),
  				'values': AnimationUtils.convertArray( track.values, Array )

  			};

  			var interpolation = track.getInterpolation();

  			if ( interpolation !== track.DefaultInterpolation ) {

  				json.interpolation = interpolation;

  			}

  		}

  		json.type = track.ValueTypeName; // mandatory

  		return json;

  	}

  } );

  Object.assign( KeyframeTrack.prototype, {

  	constructor: KeyframeTrack,

  	TimeBufferType: Float32Array,

  	ValueBufferType: Float32Array,

  	DefaultInterpolation: InterpolateLinear,

  	InterpolantFactoryMethodDiscrete: function ( result ) {

  		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodLinear: function ( result ) {

  		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodSmooth: function ( result ) {

  		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	setInterpolation: function ( interpolation ) {

  		var factoryMethod;

  		switch ( interpolation ) {

  			case InterpolateDiscrete:

  				factoryMethod = this.InterpolantFactoryMethodDiscrete;

  				break;

  			case InterpolateLinear:

  				factoryMethod = this.InterpolantFactoryMethodLinear;

  				break;

  			case InterpolateSmooth:

  				factoryMethod = this.InterpolantFactoryMethodSmooth;

  				break;

  		}

  		if ( factoryMethod === undefined ) {

  			var message = "unsupported interpolation for " +
  				this.ValueTypeName + " keyframe track named " + this.name;

  			if ( this.createInterpolant === undefined ) {

  				// fall back to default, unless the default itself is messed up
  				if ( interpolation !== this.DefaultInterpolation ) {

  					this.setInterpolation( this.DefaultInterpolation );

  				} else {

  					throw new Error( message ); // fatal, in this case

  				}

  			}

  			console.warn( 'THREE.KeyframeTrack:', message );
  			return this;

  		}

  		this.createInterpolant = factoryMethod;

  		return this;

  	},

  	getInterpolation: function () {

  		switch ( this.createInterpolant ) {

  			case this.InterpolantFactoryMethodDiscrete:

  				return InterpolateDiscrete;

  			case this.InterpolantFactoryMethodLinear:

  				return InterpolateLinear;

  			case this.InterpolantFactoryMethodSmooth:

  				return InterpolateSmooth;

  		}

  	},

  	getValueSize: function () {

  		return this.values.length / this.times.length;

  	},

  	// move all keyframes either forwards or backwards in time
  	shift: function ( timeOffset ) {

  		if ( timeOffset !== 0.0 ) {

  			var times = this.times;

  			for ( var i = 0, n = times.length; i !== n; ++ i ) {

  				times[ i ] += timeOffset;

  			}

  		}

  		return this;

  	},

  	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  	scale: function ( timeScale ) {

  		if ( timeScale !== 1.0 ) {

  			var times = this.times;

  			for ( var i = 0, n = times.length; i !== n; ++ i ) {

  				times[ i ] *= timeScale;

  			}

  		}

  		return this;

  	},

  	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  	trim: function ( startTime, endTime ) {

  		var times = this.times,
  			nKeys = times.length,
  			from = 0,
  			to = nKeys - 1;

  		while ( from !== nKeys && times[ from ] < startTime ) {

  			++ from;

  		}

  		while ( to !== - 1 && times[ to ] > endTime ) {

  			-- to;

  		}

  		++ to; // inclusive -> exclusive bound

  		if ( from !== 0 || to !== nKeys ) {

  			// empty tracks are forbidden, so keep at least one keyframe
  			if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;

  			var stride = this.getValueSize();
  			this.times = AnimationUtils.arraySlice( times, from, to );
  			this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

  		}

  		return this;

  	},

  	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  	validate: function () {

  		var valid = true;

  		var valueSize = this.getValueSize();
  		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

  			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
  			valid = false;

  		}

  		var times = this.times,
  			values = this.values,

  			nKeys = times.length;

  		if ( nKeys === 0 ) {

  			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
  			valid = false;

  		}

  		var prevTime = null;

  		for ( var i = 0; i !== nKeys; i ++ ) {

  			var currTime = times[ i ];

  			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

  				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
  				valid = false;
  				break;

  			}

  			if ( prevTime !== null && prevTime > currTime ) {

  				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
  				valid = false;
  				break;

  			}

  			prevTime = currTime;

  		}

  		if ( values !== undefined ) {

  			if ( AnimationUtils.isTypedArray( values ) ) {

  				for ( var i = 0, n = values.length; i !== n; ++ i ) {

  					var value = values[ i ];

  					if ( isNaN( value ) ) {

  						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
  						valid = false;
  						break;

  					}

  				}

  			}

  		}

  		return valid;

  	},

  	// removes equivalent sequential keys as common in morph target sequences
  	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  	optimize: function () {

  		var times = this.times,
  			values = this.values,
  			stride = this.getValueSize(),

  			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

  			writeIndex = 1,
  			lastIndex = times.length - 1;

  		for ( var i = 1; i < lastIndex; ++ i ) {

  			var keep = false;

  			var time = times[ i ];
  			var timeNext = times[ i + 1 ];

  			// remove adjacent keyframes scheduled at the same time

  			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

  				if ( ! smoothInterpolation ) {

  					// remove unnecessary keyframes same as their neighbors

  					var offset = i * stride,
  						offsetP = offset - stride,
  						offsetN = offset + stride;

  					for ( var j = 0; j !== stride; ++ j ) {

  						var value = values[ offset + j ];

  						if ( value !== values[ offsetP + j ] ||
  							value !== values[ offsetN + j ] ) {

  							keep = true;
  							break;

  						}

  					}

  				} else {

  					keep = true;

  				}

  			}

  			// in-place compaction

  			if ( keep ) {

  				if ( i !== writeIndex ) {

  					times[ writeIndex ] = times[ i ];

  					var readOffset = i * stride,
  						writeOffset = writeIndex * stride;

  					for ( var j = 0; j !== stride; ++ j ) {

  						values[ writeOffset + j ] = values[ readOffset + j ];

  					}

  				}

  				++ writeIndex;

  			}

  		}

  		// flush last keyframe (compaction looks ahead)

  		if ( lastIndex > 0 ) {

  			times[ writeIndex ] = times[ lastIndex ];

  			for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

  				values[ writeOffset + j ] = values[ readOffset + j ];

  			}

  			++ writeIndex;

  		}

  		if ( writeIndex !== times.length ) {

  			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
  			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

  		}

  		return this;

  	},

  	clone: function () {

  		var times = AnimationUtils.arraySlice( this.times, 0 );
  		var values = AnimationUtils.arraySlice( this.values, 0 );

  		var TypedKeyframeTrack = this.constructor;
  		var track = new TypedKeyframeTrack( this.name, times, values );

  		// Interpolant argument to constructor is not saved, so copy the factory method directly.
  		track.createInterpolant = this.createInterpolant;

  		return track;

  	}

  } );

  /**
   *
   * A Track of Boolean keyframe values.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function BooleanKeyframeTrack( name, times, values ) {

  	KeyframeTrack.call( this, name, times, values );

  }

  BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: BooleanKeyframeTrack,

  	ValueTypeName: 'bool',
  	ValueBufferType: Array,

  	DefaultInterpolation: InterpolateDiscrete,

  	InterpolantFactoryMethodLinear: undefined,
  	InterpolantFactoryMethodSmooth: undefined

  	// Note: Actually this track could have a optimized / compressed
  	// representation of a single value and a custom interpolant that
  	// computes "firstValue ^ isOdd( index )".

  } );

  /**
   *
   * A Track of keyframe values that represent color.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function ColorKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: ColorKeyframeTrack,

  	ValueTypeName: 'color'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  	// Note: Very basic implementation and nothing special yet.
  	// However, this is the place for color space parameterization.

  } );

  /**
   *
   * A Track of numeric keyframe values.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function NumberKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: NumberKeyframeTrack,

  	ValueTypeName: 'number'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  } );

  /**
   * Spherical linear unit quaternion interpolant.
   *
   * @author tschw
   */

  function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: QuaternionLinearInterpolant,

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			offset = i1 * stride,

  			alpha = ( t - t0 ) / ( t1 - t0 );

  		for ( var end = offset + stride; offset !== end; offset += 4 ) {

  			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

  		}

  		return result;

  	}

  } );

  /**
   *
   * A Track of quaternion keyframe values.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function QuaternionKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: QuaternionKeyframeTrack,

  	ValueTypeName: 'quaternion',

  	// ValueBufferType is inherited

  	DefaultInterpolation: InterpolateLinear,

  	InterpolantFactoryMethodLinear: function ( result ) {

  		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodSmooth: undefined // not yet implemented

  } );

  /**
   *
   * A Track that interpolates Strings
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function StringKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: StringKeyframeTrack,

  	ValueTypeName: 'string',
  	ValueBufferType: Array,

  	DefaultInterpolation: InterpolateDiscrete,

  	InterpolantFactoryMethodLinear: undefined,

  	InterpolantFactoryMethodSmooth: undefined

  } );

  /**
   *
   * A Track of vectored keyframe values.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function VectorKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: VectorKeyframeTrack,

  	ValueTypeName: 'vector'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  } );

  /**
   *
   * Reusable set of Tracks that represent an animation.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   */

  function AnimationClip( name, duration, tracks ) {

  	this.name = name;
  	this.tracks = tracks;
  	this.duration = ( duration !== undefined ) ? duration : - 1;

  	this.uuid = _Math.generateUUID();

  	// this means it should figure out its duration by scanning the tracks
  	if ( this.duration < 0 ) {

  		this.resetDuration();

  	}

  }

  function getTrackTypeForValueTypeName( typeName ) {

  	switch ( typeName.toLowerCase() ) {

  		case 'scalar':
  		case 'double':
  		case 'float':
  		case 'number':
  		case 'integer':

  			return NumberKeyframeTrack;

  		case 'vector':
  		case 'vector2':
  		case 'vector3':
  		case 'vector4':

  			return VectorKeyframeTrack;

  		case 'color':

  			return ColorKeyframeTrack;

  		case 'quaternion':

  			return QuaternionKeyframeTrack;

  		case 'bool':
  		case 'boolean':

  			return BooleanKeyframeTrack;

  		case 'string':

  			return StringKeyframeTrack;

  	}

  	throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

  }

  function parseKeyframeTrack( json ) {

  	if ( json.type === undefined ) {

  		throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

  	}

  	var trackType = getTrackTypeForValueTypeName( json.type );

  	if ( json.times === undefined ) {

  		var times = [], values = [];

  		AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

  		json.times = times;
  		json.values = values;

  	}

  	// derived classes can define a static parse method
  	if ( trackType.parse !== undefined ) {

  		return trackType.parse( json );

  	} else {

  		// by default, we assume a constructor compatible with the base
  		return new trackType( json.name, json.times, json.values, json.interpolation );

  	}

  }

  Object.assign( AnimationClip, {

  	parse: function ( json ) {

  		var tracks = [],
  			jsonTracks = json.tracks,
  			frameTime = 1.0 / ( json.fps || 1.0 );

  		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

  			tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );

  		}

  		return new AnimationClip( json.name, json.duration, tracks );

  	},

  	toJSON: function ( clip ) {

  		var tracks = [],
  			clipTracks = clip.tracks;

  		var json = {

  			'name': clip.name,
  			'duration': clip.duration,
  			'tracks': tracks,
  			'uuid': clip.uuid

  		};

  		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

  			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

  		}

  		return json;

  	},

  	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

  		var numMorphTargets = morphTargetSequence.length;
  		var tracks = [];

  		for ( var i = 0; i < numMorphTargets; i ++ ) {

  			var times = [];
  			var values = [];

  			times.push(
  				( i + numMorphTargets - 1 ) % numMorphTargets,
  				i,
  				( i + 1 ) % numMorphTargets );

  			values.push( 0, 1, 0 );

  			var order = AnimationUtils.getKeyframeOrder( times );
  			times = AnimationUtils.sortedArray( times, 1, order );
  			values = AnimationUtils.sortedArray( values, 1, order );

  			// if there is a key at the first frame, duplicate it as the
  			// last frame as well for perfect loop.
  			if ( ! noLoop && times[ 0 ] === 0 ) {

  				times.push( numMorphTargets );
  				values.push( values[ 0 ] );

  			}

  			tracks.push(
  				new NumberKeyframeTrack(
  					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
  					times, values
  				).scale( 1.0 / fps ) );

  		}

  		return new AnimationClip( name, - 1, tracks );

  	},

  	findByName: function ( objectOrClipArray, name ) {

  		var clipArray = objectOrClipArray;

  		if ( ! Array.isArray( objectOrClipArray ) ) {

  			var o = objectOrClipArray;
  			clipArray = o.geometry && o.geometry.animations || o.animations;

  		}

  		for ( var i = 0; i < clipArray.length; i ++ ) {

  			if ( clipArray[ i ].name === name ) {

  				return clipArray[ i ];

  			}

  		}

  		return null;

  	},

  	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

  		var animationToMorphTargets = {};

  		// tested with https://regex101.com/ on trick sequences
  		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
  		var pattern = /^([\w-]*?)([\d]+)$/;

  		// sort morph target names into animation groups based
  		// patterns like Walk_001, Walk_002, Run_001, Run_002
  		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

  			var morphTarget = morphTargets[ i ];
  			var parts = morphTarget.name.match( pattern );

  			if ( parts && parts.length > 1 ) {

  				var name = parts[ 1 ];

  				var animationMorphTargets = animationToMorphTargets[ name ];
  				if ( ! animationMorphTargets ) {

  					animationToMorphTargets[ name ] = animationMorphTargets = [];

  				}

  				animationMorphTargets.push( morphTarget );

  			}

  		}

  		var clips = [];

  		for ( var name in animationToMorphTargets ) {

  			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

  		}

  		return clips;

  	},

  	// parse the animation.hierarchy format
  	parseAnimation: function ( animation, bones ) {

  		if ( ! animation ) {

  			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
  			return null;

  		}

  		var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

  			// only return track if there are actually keys.
  			if ( animationKeys.length !== 0 ) {

  				var times = [];
  				var values = [];

  				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

  				// empty keys are filtered out, so check again
  				if ( times.length !== 0 ) {

  					destTracks.push( new trackType( trackName, times, values ) );

  				}

  			}

  		};

  		var tracks = [];

  		var clipName = animation.name || 'default';
  		// automatic length determination in AnimationClip.
  		var duration = animation.length || - 1;
  		var fps = animation.fps || 30;

  		var hierarchyTracks = animation.hierarchy || [];

  		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

  			var animationKeys = hierarchyTracks[ h ].keys;

  			// skip empty tracks
  			if ( ! animationKeys || animationKeys.length === 0 ) continue;

  			// process morph targets
  			if ( animationKeys[ 0 ].morphTargets ) {

  				// figure out all morph targets used in this track
  				var morphTargetNames = {};

  				for ( var k = 0; k < animationKeys.length; k ++ ) {

  					if ( animationKeys[ k ].morphTargets ) {

  						for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

  							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

  						}

  					}

  				}

  				// create a track for each morph target with all zero
  				// morphTargetInfluences except for the keys in which
  				// the morphTarget is named.
  				for ( var morphTargetName in morphTargetNames ) {

  					var times = [];
  					var values = [];

  					for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

  						var animationKey = animationKeys[ k ];

  						times.push( animationKey.time );
  						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

  					}

  					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

  				}

  				duration = morphTargetNames.length * ( fps || 1.0 );

  			} else {

  				// ...assume skeletal animation

  				var boneName = '.bones[' + bones[ h ].name + ']';

  				addNonemptyTrack(
  					VectorKeyframeTrack, boneName + '.position',
  					animationKeys, 'pos', tracks );

  				addNonemptyTrack(
  					QuaternionKeyframeTrack, boneName + '.quaternion',
  					animationKeys, 'rot', tracks );

  				addNonemptyTrack(
  					VectorKeyframeTrack, boneName + '.scale',
  					animationKeys, 'scl', tracks );

  			}

  		}

  		if ( tracks.length === 0 ) {

  			return null;

  		}

  		var clip = new AnimationClip( clipName, duration, tracks );

  		return clip;

  	}

  } );

  Object.assign( AnimationClip.prototype, {

  	resetDuration: function () {

  		var tracks = this.tracks, duration = 0;

  		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

  			var track = this.tracks[ i ];

  			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

  		}

  		this.duration = duration;

  		return this;

  	},

  	trim: function () {

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			this.tracks[ i ].trim( 0, this.duration );

  		}

  		return this;

  	},

  	validate: function () {

  		var valid = true;

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			valid = valid && this.tracks[ i ].validate();

  		}

  		return valid;

  	},

  	optimize: function () {

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			this.tracks[ i ].optimize();

  		}

  		return this;

  	},


  	clone: function () {

  		var tracks = [];

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			tracks.push( this.tracks[ i ].clone() );

  		}

  		return new AnimationClip( this.name, this.duration, tracks );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var Cache = {

  	enabled: false,

  	files: {},

  	add: function ( key, file ) {

  		if ( this.enabled === false ) return;

  		// console.log( 'THREE.Cache', 'Adding key:', key );

  		this.files[ key ] = file;

  	},

  	get: function ( key ) {

  		if ( this.enabled === false ) return;

  		// console.log( 'THREE.Cache', 'Checking key:', key );

  		return this.files[ key ];

  	},

  	remove: function ( key ) {

  		delete this.files[ key ];

  	},

  	clear: function () {

  		this.files = {};

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function LoadingManager( onLoad, onProgress, onError ) {

  	var scope = this;

  	var isLoading = false;
  	var itemsLoaded = 0;
  	var itemsTotal = 0;
  	var urlModifier = undefined;

  	// Refer to #5689 for the reason why we don't set .onStart
  	// in the constructor

  	this.onStart = undefined;
  	this.onLoad = onLoad;
  	this.onProgress = onProgress;
  	this.onError = onError;

  	this.itemStart = function ( url ) {

  		itemsTotal ++;

  		if ( isLoading === false ) {

  			if ( scope.onStart !== undefined ) {

  				scope.onStart( url, itemsLoaded, itemsTotal );

  			}

  		}

  		isLoading = true;

  	};

  	this.itemEnd = function ( url ) {

  		itemsLoaded ++;

  		if ( scope.onProgress !== undefined ) {

  			scope.onProgress( url, itemsLoaded, itemsTotal );

  		}

  		if ( itemsLoaded === itemsTotal ) {

  			isLoading = false;

  			if ( scope.onLoad !== undefined ) {

  				scope.onLoad();

  			}

  		}

  	};

  	this.itemError = function ( url ) {

  		if ( scope.onError !== undefined ) {

  			scope.onError( url );

  		}

  	};

  	this.resolveURL = function ( url ) {

  		if ( urlModifier ) {

  			return urlModifier( url );

  		}

  		return url;

  	};

  	this.setURLModifier = function ( transform ) {

  		urlModifier = transform;
  		return this;

  	};

  }

  var DefaultLoadingManager = new LoadingManager();

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var loading = {};

  function FileLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  }

  Object.assign( FileLoader.prototype, {

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( url === undefined ) url = '';

  		if ( this.path !== undefined ) url = this.path + url;

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) onLoad( cached );

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		// Check if request is duplicate

  		if ( loading[ url ] !== undefined ) {

  			loading[ url ].push( {

  				onLoad: onLoad,
  				onProgress: onProgress,
  				onError: onError

  			} );

  			return;

  		}

  		// Check for data: URI
  		var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
  		var dataUriRegexResult = url.match( dataUriRegex );

  		// Safari can not handle Data URIs through XMLHttpRequest so process manually
  		if ( dataUriRegexResult ) {

  			var mimeType = dataUriRegexResult[ 1 ];
  			var isBase64 = !! dataUriRegexResult[ 2 ];
  			var data = dataUriRegexResult[ 3 ];

  			data = decodeURIComponent( data );

  			if ( isBase64 ) data = atob( data );

  			try {

  				var response;
  				var responseType = ( this.responseType || '' ).toLowerCase();

  				switch ( responseType ) {

  					case 'arraybuffer':
  					case 'blob':

  						var view = new Uint8Array( data.length );

  						for ( var i = 0; i < data.length; i ++ ) {

  							view[ i ] = data.charCodeAt( i );

  						}

  						if ( responseType === 'blob' ) {

  							response = new Blob( [ view.buffer ], { type: mimeType } );

  						} else {

  							response = view.buffer;

  						}

  						break;

  					case 'document':

  						var parser = new DOMParser();
  						response = parser.parseFromString( data, mimeType );

  						break;

  					case 'json':

  						response = JSON.parse( data );

  						break;

  					default: // 'text' or other

  						response = data;

  						break;

  				}

  				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
  				setTimeout( function () {

  					if ( onLoad ) onLoad( response );

  					scope.manager.itemEnd( url );

  				}, 0 );

  			} catch ( error ) {

  				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
  				setTimeout( function () {

  					if ( onError ) onError( error );

  					scope.manager.itemError( url );
  					scope.manager.itemEnd( url );

  				}, 0 );

  			}

  		} else {

  			// Initialise array for duplicate requests

  			loading[ url ] = [];

  			loading[ url ].push( {

  				onLoad: onLoad,
  				onProgress: onProgress,
  				onError: onError

  			} );

  			var request = new XMLHttpRequest();

  			request.open( 'GET', url, true );

  			request.addEventListener( 'load', function ( event ) {

  				var response = this.response;

  				Cache.add( url, response );

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				if ( this.status === 200 || this.status === 0 ) {

  					// Some browsers return HTTP Status 0 when using non-http protocol
  					// e.g. 'file://' or 'data://'. Handle as success.

  					if ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

  					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  						var callback = callbacks[ i ];
  						if ( callback.onLoad ) callback.onLoad( response );

  					}

  					scope.manager.itemEnd( url );

  				} else {

  					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  						var callback = callbacks[ i ];
  						if ( callback.onError ) callback.onError( event );

  					}

  					scope.manager.itemError( url );
  					scope.manager.itemEnd( url );

  				}

  			}, false );

  			request.addEventListener( 'progress', function ( event ) {

  				var callbacks = loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onProgress ) callback.onProgress( event );

  				}

  			}, false );

  			request.addEventListener( 'error', function ( event ) {

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onError ) callback.onError( event );

  				}

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			}, false );

  			request.addEventListener( 'abort', function ( event ) {

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onError ) callback.onError( event );

  				}

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			}, false );

  			if ( this.responseType !== undefined ) request.responseType = this.responseType;
  			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

  			if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

  			for ( var header in this.requestHeader ) {

  				request.setRequestHeader( header, this.requestHeader[ header ] );

  			}

  			request.send( null );

  		}

  		scope.manager.itemStart( url );

  		return request;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	},

  	setResponseType: function ( value ) {

  		this.responseType = value;
  		return this;

  	},

  	setWithCredentials: function ( value ) {

  		this.withCredentials = value;
  		return this;

  	},

  	setMimeType: function ( value ) {

  		this.mimeType = value;
  		return this;

  	},

  	setRequestHeader: function ( value ) {

  		this.requestHeader = value;
  		return this;

  	}

  } );

  /**
   * @author bhouston / http://clara.io/
   */

  function AnimationLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  }

  Object.assign( AnimationLoader.prototype, {

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			onLoad( scope.parse( JSON.parse( text ) ) );

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var animations = [];

  		for ( var i = 0; i < json.length; i ++ ) {

  			var clip = AnimationClip.parse( json[ i ] );

  			animations.push( clip );

  		}

  		return animations;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   *
   * Abstract Base class to block based textures loader (dds, pvr, ...)
   */

  function CompressedTextureLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  	// override in sub classes
  	this._parser = null;

  }

  Object.assign( CompressedTextureLoader.prototype, {

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var images = [];

  		var texture = new CompressedTexture();
  		texture.image = images;

  		var loader = new FileLoader( this.manager );
  		loader.setPath( this.path );
  		loader.setResponseType( 'arraybuffer' );

  		function loadTexture( i ) {

  			loader.load( url[ i ], function ( buffer ) {

  				var texDatas = scope._parser( buffer, true );

  				images[ i ] = {
  					width: texDatas.width,
  					height: texDatas.height,
  					format: texDatas.format,
  					mipmaps: texDatas.mipmaps
  				};

  				loaded += 1;

  				if ( loaded === 6 ) {

  					if ( texDatas.mipmapCount === 1 )
  						texture.minFilter = LinearFilter;

  					texture.format = texDatas.format;
  					texture.needsUpdate = true;

  					if ( onLoad ) onLoad( texture );

  				}

  			}, onProgress, onError );

  		}

  		if ( Array.isArray( url ) ) {

  			var loaded = 0;

  			for ( var i = 0, il = url.length; i < il; ++ i ) {

  				loadTexture( i );

  			}

  		} else {

  			// compressed cubemap texture stored in a single DDS file

  			loader.load( url, function ( buffer ) {

  				var texDatas = scope._parser( buffer, true );

  				if ( texDatas.isCubemap ) {

  					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

  					for ( var f = 0; f < faces; f ++ ) {

  						images[ f ] = { mipmaps: [] };

  						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

  							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
  							images[ f ].format = texDatas.format;
  							images[ f ].width = texDatas.width;
  							images[ f ].height = texDatas.height;

  						}

  					}

  				} else {

  					texture.image.width = texDatas.width;
  					texture.image.height = texDatas.height;
  					texture.mipmaps = texDatas.mipmaps;

  				}

  				if ( texDatas.mipmapCount === 1 ) {

  					texture.minFilter = LinearFilter;

  				}

  				texture.format = texDatas.format;
  				texture.needsUpdate = true;

  				if ( onLoad ) onLoad( texture );

  			}, onProgress, onError );

  		}

  		return texture;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  /**
   * @author Nikos M. / https://github.com/foo123/
   *
   * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
   */

  function DataTextureLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  	// override in sub classes
  	this._parser = null;

  }

  Object.assign( DataTextureLoader.prototype, {

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var texture = new DataTexture();

  		var loader = new FileLoader( this.manager );
  		loader.setResponseType( 'arraybuffer' );
  		loader.setPath( this.path );
  		loader.load( url, function ( buffer ) {

  			var texData = scope._parser( buffer );

  			if ( ! texData ) return;

  			if ( texData.image !== undefined ) {

  				texture.image = texData.image;

  			} else if ( texData.data !== undefined ) {

  				texture.image.width = texData.width;
  				texture.image.height = texData.height;
  				texture.image.data = texData.data;

  			}

  			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
  			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;

  			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
  			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearMipMapLinearFilter;

  			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

  			if ( texData.format !== undefined ) {

  				texture.format = texData.format;

  			}
  			if ( texData.type !== undefined ) {

  				texture.type = texData.type;

  			}

  			if ( texData.mipmaps !== undefined ) {

  				texture.mipmaps = texData.mipmaps;

  			}

  			if ( texData.mipmapCount === 1 ) {

  				texture.minFilter = LinearFilter;

  			}

  			texture.needsUpdate = true;

  			if ( onLoad ) onLoad( texture, texData );

  		}, onProgress, onError );


  		return texture;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */


  function ImageLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  }

  Object.assign( ImageLoader.prototype, {

  	crossOrigin: 'anonymous',

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( url === undefined ) url = '';

  		if ( this.path !== undefined ) url = this.path + url;

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) onLoad( cached );

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

  		function onImageLoad() {

  			image.removeEventListener( 'load', onImageLoad, false );
  			image.removeEventListener( 'error', onImageError, false );

  			Cache.add( url, this );

  			if ( onLoad ) onLoad( this );

  			scope.manager.itemEnd( url );

  		}

  		function onImageError( event ) {

  			image.removeEventListener( 'load', onImageLoad, false );
  			image.removeEventListener( 'error', onImageError, false );

  			if ( onError ) onError( event );

  			scope.manager.itemError( url );
  			scope.manager.itemEnd( url );

  		}

  		image.addEventListener( 'load', onImageLoad, false );
  		image.addEventListener( 'error', onImageError, false );

  		if ( url.substr( 0, 5 ) !== 'data:' ) {

  			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

  		}

  		scope.manager.itemStart( url );

  		image.src = url;

  		return image;

  	},

  	setCrossOrigin: function ( value ) {

  		this.crossOrigin = value;
  		return this;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */


  function CubeTextureLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  }

  Object.assign( CubeTextureLoader.prototype, {

  	crossOrigin: 'anonymous',

  	load: function ( urls, onLoad, onProgress, onError ) {

  		var texture = new CubeTexture();

  		var loader = new ImageLoader( this.manager );
  		loader.setCrossOrigin( this.crossOrigin );
  		loader.setPath( this.path );

  		var loaded = 0;

  		function loadTexture( i ) {

  			loader.load( urls[ i ], function ( image ) {

  				texture.images[ i ] = image;

  				loaded ++;

  				if ( loaded === 6 ) {

  					texture.needsUpdate = true;

  					if ( onLoad ) onLoad( texture );

  				}

  			}, undefined, onError );

  		}

  		for ( var i = 0; i < urls.length; ++ i ) {

  			loadTexture( i );

  		}

  		return texture;

  	},

  	setCrossOrigin: function ( value ) {

  		this.crossOrigin = value;
  		return this;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */


  function TextureLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  }

  Object.assign( TextureLoader.prototype, {

  	crossOrigin: 'anonymous',

  	load: function ( url, onLoad, onProgress, onError ) {

  		var texture = new Texture();

  		var loader = new ImageLoader( this.manager );
  		loader.setCrossOrigin( this.crossOrigin );
  		loader.setPath( this.path );

  		loader.load( url, function ( image ) {

  			texture.image = image;

  			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
  			var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

  			texture.format = isJPEG ? RGBFormat : RGBAFormat;
  			texture.needsUpdate = true;

  			if ( onLoad !== undefined ) {

  				onLoad( texture );

  			}

  		}, onProgress, onError );

  		return texture;

  	},

  	setCrossOrigin: function ( value ) {

  		this.crossOrigin = value;
  		return this;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Extensible curve object
   *
   * Some common of curve methods:
   * .getPoint( t, optionalTarget ), .getTangent( t )
   * .getPointAt( u, optionalTarget ), .getTangentAt( u )
   * .getPoints(), .getSpacedPoints()
   * .getLength()
   * .updateArcLengths()
   *
   * This following curves inherit from THREE.Curve:
   *
   * -- 2D curves --
   * THREE.ArcCurve
   * THREE.CubicBezierCurve
   * THREE.EllipseCurve
   * THREE.LineCurve
   * THREE.QuadraticBezierCurve
   * THREE.SplineCurve
   *
   * -- 3D curves --
   * THREE.CatmullRomCurve3
   * THREE.CubicBezierCurve3
   * THREE.LineCurve3
   * THREE.QuadraticBezierCurve3
   *
   * A series of curves can be represented as a THREE.CurvePath.
   *
   **/

  /**************************************************************
   *	Abstract Curve base class
   **************************************************************/

  function Curve() {

  	this.type = 'Curve';

  	this.arcLengthDivisions = 200;

  }

  Object.assign( Curve.prototype, {

  	// Virtual base class method to overwrite and implement in subclasses
  	//	- t [0 .. 1]

  	getPoint: function ( /* t, optionalTarget */ ) {

  		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
  		return null;

  	},

  	// Get point at relative position in curve according to arc length
  	// - u [0 .. 1]

  	getPointAt: function ( u, optionalTarget ) {

  		var t = this.getUtoTmapping( u );
  		return this.getPoint( t, optionalTarget );

  	},

  	// Get sequence of points using getPoint( t )

  	getPoints: function ( divisions ) {

  		if ( divisions === undefined ) divisions = 5;

  		var points = [];

  		for ( var d = 0; d <= divisions; d ++ ) {

  			points.push( this.getPoint( d / divisions ) );

  		}

  		return points;

  	},

  	// Get sequence of points using getPointAt( u )

  	getSpacedPoints: function ( divisions ) {

  		if ( divisions === undefined ) divisions = 5;

  		var points = [];

  		for ( var d = 0; d <= divisions; d ++ ) {

  			points.push( this.getPointAt( d / divisions ) );

  		}

  		return points;

  	},

  	// Get total curve arc length

  	getLength: function () {

  		var lengths = this.getLengths();
  		return lengths[ lengths.length - 1 ];

  	},

  	// Get list of cumulative segment lengths

  	getLengths: function ( divisions ) {

  		if ( divisions === undefined ) divisions = this.arcLengthDivisions;

  		if ( this.cacheArcLengths &&
  			( this.cacheArcLengths.length === divisions + 1 ) &&
  			! this.needsUpdate ) {

  			return this.cacheArcLengths;

  		}

  		this.needsUpdate = false;

  		var cache = [];
  		var current, last = this.getPoint( 0 );
  		var p, sum = 0;

  		cache.push( 0 );

  		for ( p = 1; p <= divisions; p ++ ) {

  			current = this.getPoint( p / divisions );
  			sum += current.distanceTo( last );
  			cache.push( sum );
  			last = current;

  		}

  		this.cacheArcLengths = cache;

  		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

  	},

  	updateArcLengths: function () {

  		this.needsUpdate = true;
  		this.getLengths();

  	},

  	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

  	getUtoTmapping: function ( u, distance ) {

  		var arcLengths = this.getLengths();

  		var i = 0, il = arcLengths.length;

  		var targetArcLength; // The targeted u distance value to get

  		if ( distance ) {

  			targetArcLength = distance;

  		} else {

  			targetArcLength = u * arcLengths[ il - 1 ];

  		}

  		// binary search for the index with largest value smaller than target u distance

  		var low = 0, high = il - 1, comparison;

  		while ( low <= high ) {

  			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

  			comparison = arcLengths[ i ] - targetArcLength;

  			if ( comparison < 0 ) {

  				low = i + 1;

  			} else if ( comparison > 0 ) {

  				high = i - 1;

  			} else {

  				high = i;
  				break;

  				// DONE

  			}

  		}

  		i = high;

  		if ( arcLengths[ i ] === targetArcLength ) {

  			return i / ( il - 1 );

  		}

  		// we could get finer grain at lengths, or use simple interpolation between two points

  		var lengthBefore = arcLengths[ i ];
  		var lengthAfter = arcLengths[ i + 1 ];

  		var segmentLength = lengthAfter - lengthBefore;

  		// determine where we are between the 'before' and 'after' points

  		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

  		// add that fractional amount to t

  		var t = ( i + segmentFraction ) / ( il - 1 );

  		return t;

  	},

  	// Returns a unit vector tangent at t
  	// In case any sub curve does not implement its tangent derivation,
  	// 2 points a small delta apart will be used to find its gradient
  	// which seems to give a reasonable approximation

  	getTangent: function ( t ) {

  		var delta = 0.0001;
  		var t1 = t - delta;
  		var t2 = t + delta;

  		// Capping in case of danger

  		if ( t1 < 0 ) t1 = 0;
  		if ( t2 > 1 ) t2 = 1;

  		var pt1 = this.getPoint( t1 );
  		var pt2 = this.getPoint( t2 );

  		var vec = pt2.clone().sub( pt1 );
  		return vec.normalize();

  	},

  	getTangentAt: function ( u ) {

  		var t = this.getUtoTmapping( u );
  		return this.getTangent( t );

  	},

  	computeFrenetFrames: function ( segments, closed ) {

  		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

  		var normal = new Vector3();

  		var tangents = [];
  		var normals = [];
  		var binormals = [];

  		var vec = new Vector3();
  		var mat = new Matrix4();

  		var i, u, theta;

  		// compute the tangent vectors for each segment on the curve

  		for ( i = 0; i <= segments; i ++ ) {

  			u = i / segments;

  			tangents[ i ] = this.getTangentAt( u );
  			tangents[ i ].normalize();

  		}

  		// select an initial normal vector perpendicular to the first tangent vector,
  		// and in the direction of the minimum tangent xyz component

  		normals[ 0 ] = new Vector3();
  		binormals[ 0 ] = new Vector3();
  		var min = Number.MAX_VALUE;
  		var tx = Math.abs( tangents[ 0 ].x );
  		var ty = Math.abs( tangents[ 0 ].y );
  		var tz = Math.abs( tangents[ 0 ].z );

  		if ( tx <= min ) {

  			min = tx;
  			normal.set( 1, 0, 0 );

  		}

  		if ( ty <= min ) {

  			min = ty;
  			normal.set( 0, 1, 0 );

  		}

  		if ( tz <= min ) {

  			normal.set( 0, 0, 1 );

  		}

  		vec.crossVectors( tangents[ 0 ], normal ).normalize();

  		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
  		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


  		// compute the slowly-varying normal and binormal vectors for each segment on the curve

  		for ( i = 1; i <= segments; i ++ ) {

  			normals[ i ] = normals[ i - 1 ].clone();

  			binormals[ i ] = binormals[ i - 1 ].clone();

  			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

  			if ( vec.length() > Number.EPSILON ) {

  				vec.normalize();

  				theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

  				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

  			}

  			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

  		}

  		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

  		if ( closed === true ) {

  			theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
  			theta /= segments;

  			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

  				theta = - theta;

  			}

  			for ( i = 1; i <= segments; i ++ ) {

  				// twist a little...
  				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
  				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

  			}

  		}

  		return {
  			tangents: tangents,
  			normals: normals,
  			binormals: binormals
  		};

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.arcLengthDivisions = source.arcLengthDivisions;

  		return this;

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Curve',
  				generator: 'Curve.toJSON'
  			}
  		};

  		data.arcLengthDivisions = this.arcLengthDivisions;
  		data.type = this.type;

  		return data;

  	},

  	fromJSON: function ( json ) {

  		this.arcLengthDivisions = json.arcLengthDivisions;

  		return this;

  	}

  } );

  function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  	Curve.call( this );

  	this.type = 'EllipseCurve';

  	this.aX = aX || 0;
  	this.aY = aY || 0;

  	this.xRadius = xRadius || 1;
  	this.yRadius = yRadius || 1;

  	this.aStartAngle = aStartAngle || 0;
  	this.aEndAngle = aEndAngle || 2 * Math.PI;

  	this.aClockwise = aClockwise || false;

  	this.aRotation = aRotation || 0;

  }

  EllipseCurve.prototype = Object.create( Curve.prototype );
  EllipseCurve.prototype.constructor = EllipseCurve;

  EllipseCurve.prototype.isEllipseCurve = true;

  EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var twoPi = Math.PI * 2;
  	var deltaAngle = this.aEndAngle - this.aStartAngle;
  	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

  	// ensures that deltaAngle is 0 .. 2 PI
  	while ( deltaAngle < 0 ) deltaAngle += twoPi;
  	while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

  	if ( deltaAngle < Number.EPSILON ) {

  		if ( samePoints ) {

  			deltaAngle = 0;

  		} else {

  			deltaAngle = twoPi;

  		}

  	}

  	if ( this.aClockwise === true && ! samePoints ) {

  		if ( deltaAngle === twoPi ) {

  			deltaAngle = - twoPi;

  		} else {

  			deltaAngle = deltaAngle - twoPi;

  		}

  	}

  	var angle = this.aStartAngle + t * deltaAngle;
  	var x = this.aX + this.xRadius * Math.cos( angle );
  	var y = this.aY + this.yRadius * Math.sin( angle );

  	if ( this.aRotation !== 0 ) {

  		var cos = Math.cos( this.aRotation );
  		var sin = Math.sin( this.aRotation );

  		var tx = x - this.aX;
  		var ty = y - this.aY;

  		// Rotate the point about the center of the ellipse.
  		x = tx * cos - ty * sin + this.aX;
  		y = tx * sin + ty * cos + this.aY;

  	}

  	return point.set( x, y );

  };

  EllipseCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.aX = source.aX;
  	this.aY = source.aY;

  	this.xRadius = source.xRadius;
  	this.yRadius = source.yRadius;

  	this.aStartAngle = source.aStartAngle;
  	this.aEndAngle = source.aEndAngle;

  	this.aClockwise = source.aClockwise;

  	this.aRotation = source.aRotation;

  	return this;

  };


  EllipseCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.aX = this.aX;
  	data.aY = this.aY;

  	data.xRadius = this.xRadius;
  	data.yRadius = this.yRadius;

  	data.aStartAngle = this.aStartAngle;
  	data.aEndAngle = this.aEndAngle;

  	data.aClockwise = this.aClockwise;

  	data.aRotation = this.aRotation;

  	return data;

  };

  EllipseCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.aX = json.aX;
  	this.aY = json.aY;

  	this.xRadius = json.xRadius;
  	this.yRadius = json.yRadius;

  	this.aStartAngle = json.aStartAngle;
  	this.aEndAngle = json.aEndAngle;

  	this.aClockwise = json.aClockwise;

  	this.aRotation = json.aRotation;

  	return this;

  };

  function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  	EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

  	this.type = 'ArcCurve';

  }

  ArcCurve.prototype = Object.create( EllipseCurve.prototype );
  ArcCurve.prototype.constructor = ArcCurve;

  ArcCurve.prototype.isArcCurve = true;

  /**
   * @author zz85 https://github.com/zz85
   *
   * Centripetal CatmullRom Curve - which is useful for avoiding
   * cusps and self-intersections in non-uniform catmull rom curves.
   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
   *
   * curve.type accepts centripetal(default), chordal and catmullrom
   * curve.tension is used for catmullrom which defaults to 0.5
   */


  /*
  Based on an optimized c++ solution in
   - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
   - http://ideone.com/NoEbVM

  This CubicPoly class could be used for reusing some variables and calculations,
  but for three.js curve use, it could be possible inlined and flatten into a single function call
  which can be placed in CurveUtils.
  */

  function CubicPoly() {

  	var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

  	/*
  	 * Compute coefficients for a cubic polynomial
  	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
  	 * such that
  	 *   p(0) = x0, p(1) = x1
  	 *  and
  	 *   p'(0) = t0, p'(1) = t1.
  	 */
  	function init( x0, x1, t0, t1 ) {

  		c0 = x0;
  		c1 = t0;
  		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
  		c3 = 2 * x0 - 2 * x1 + t0 + t1;

  	}

  	return {

  		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

  			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

  		},

  		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

  			// compute tangents when parameterized in [t1,t2]
  			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
  			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

  			// rescale tangents for parametrization in [0,1]
  			t1 *= dt1;
  			t2 *= dt1;

  			init( x1, x2, t1, t2 );

  		},

  		calc: function ( t ) {

  			var t2 = t * t;
  			var t3 = t2 * t;
  			return c0 + c1 * t + c2 * t2 + c3 * t3;

  		}

  	};

  }

  //

  var tmp$1 = new Vector3();
  var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();

  function CatmullRomCurve3( points, closed, curveType, tension ) {

  	Curve.call( this );

  	this.type = 'CatmullRomCurve3';

  	this.points = points || [];
  	this.closed = closed || false;
  	this.curveType = curveType || 'centripetal';
  	this.tension = tension || 0.5;

  }

  CatmullRomCurve3.prototype = Object.create( Curve.prototype );
  CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

  CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var points = this.points;
  	var l = points.length;

  	var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
  	var intPoint = Math.floor( p );
  	var weight = p - intPoint;

  	if ( this.closed ) {

  		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

  	} else if ( weight === 0 && intPoint === l - 1 ) {

  		intPoint = l - 2;
  		weight = 1;

  	}

  	var p0, p1, p2, p3; // 4 points

  	if ( this.closed || intPoint > 0 ) {

  		p0 = points[ ( intPoint - 1 ) % l ];

  	} else {

  		// extrapolate first point
  		tmp$1.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
  		p0 = tmp$1;

  	}

  	p1 = points[ intPoint % l ];
  	p2 = points[ ( intPoint + 1 ) % l ];

  	if ( this.closed || intPoint + 2 < l ) {

  		p3 = points[ ( intPoint + 2 ) % l ];

  	} else {

  		// extrapolate last point
  		tmp$1.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
  		p3 = tmp$1;

  	}

  	if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

  		// init Centripetal / Chordal Catmull-Rom
  		var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
  		var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
  		var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
  		var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

  		// safety check for repeated points
  		if ( dt1 < 1e-4 ) dt1 = 1.0;
  		if ( dt0 < 1e-4 ) dt0 = dt1;
  		if ( dt2 < 1e-4 ) dt2 = dt1;

  		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
  		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
  		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

  	} else if ( this.curveType === 'catmullrom' ) {

  		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
  		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
  		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

  	}

  	point.set(
  		px.calc( weight ),
  		py.calc( weight ),
  		pz.calc( weight )
  	);

  	return point;

  };

  CatmullRomCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.points = [];

  	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

  		var point = source.points[ i ];

  		this.points.push( point.clone() );

  	}

  	this.closed = source.closed;
  	this.curveType = source.curveType;
  	this.tension = source.tension;

  	return this;

  };

  CatmullRomCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.points = [];

  	for ( var i = 0, l = this.points.length; i < l; i ++ ) {

  		var point = this.points[ i ];
  		data.points.push( point.toArray() );

  	}

  	data.closed = this.closed;
  	data.curveType = this.curveType;
  	data.tension = this.tension;

  	return data;

  };

  CatmullRomCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.points = [];

  	for ( var i = 0, l = json.points.length; i < l; i ++ ) {

  		var point = json.points[ i ];
  		this.points.push( new Vector3().fromArray( point ) );

  	}

  	this.closed = json.closed;
  	this.curveType = json.curveType;
  	this.tension = json.tension;

  	return this;

  };

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   * Bezier Curves formulas obtained from
   * http://en.wikipedia.org/wiki/Bézier_curve
   */

  function CatmullRom( t, p0, p1, p2, p3 ) {

  	var v0 = ( p2 - p0 ) * 0.5;
  	var v1 = ( p3 - p1 ) * 0.5;
  	var t2 = t * t;
  	var t3 = t * t2;
  	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

  }

  //

  function QuadraticBezierP0( t, p ) {

  	var k = 1 - t;
  	return k * k * p;

  }

  function QuadraticBezierP1( t, p ) {

  	return 2 * ( 1 - t ) * t * p;

  }

  function QuadraticBezierP2( t, p ) {

  	return t * t * p;

  }

  function QuadraticBezier( t, p0, p1, p2 ) {

  	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
  		QuadraticBezierP2( t, p2 );

  }

  //

  function CubicBezierP0( t, p ) {

  	var k = 1 - t;
  	return k * k * k * p;

  }

  function CubicBezierP1( t, p ) {

  	var k = 1 - t;
  	return 3 * k * k * t * p;

  }

  function CubicBezierP2( t, p ) {

  	return 3 * ( 1 - t ) * t * t * p;

  }

  function CubicBezierP3( t, p ) {

  	return t * t * t * p;

  }

  function CubicBezier( t, p0, p1, p2, p3 ) {

  	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
  		CubicBezierP3( t, p3 );

  }

  function CubicBezierCurve( v0, v1, v2, v3 ) {

  	Curve.call( this );

  	this.type = 'CubicBezierCurve';

  	this.v0 = v0 || new Vector2();
  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();
  	this.v3 = v3 || new Vector2();

  }

  CubicBezierCurve.prototype = Object.create( Curve.prototype );
  CubicBezierCurve.prototype.constructor = CubicBezierCurve;

  CubicBezierCurve.prototype.isCubicBezierCurve = true;

  CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

  	point.set(
  		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
  		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
  	);

  	return point;

  };

  CubicBezierCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );
  	this.v3.copy( source.v3 );

  	return this;

  };

  CubicBezierCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();
  	data.v3 = this.v3.toArray();

  	return data;

  };

  CubicBezierCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );
  	this.v3.fromArray( json.v3 );

  	return this;

  };

  function CubicBezierCurve3( v0, v1, v2, v3 ) {

  	Curve.call( this );

  	this.type = 'CubicBezierCurve3';

  	this.v0 = v0 || new Vector3();
  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();
  	this.v3 = v3 || new Vector3();

  }

  CubicBezierCurve3.prototype = Object.create( Curve.prototype );
  CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

  CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

  	point.set(
  		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
  		CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
  		CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
  	);

  	return point;

  };

  CubicBezierCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );
  	this.v3.copy( source.v3 );

  	return this;

  };

  CubicBezierCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();
  	data.v3 = this.v3.toArray();

  	return data;

  };

  CubicBezierCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );
  	this.v3.fromArray( json.v3 );

  	return this;

  };

  function LineCurve( v1, v2 ) {

  	Curve.call( this );

  	this.type = 'LineCurve';

  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();

  }

  LineCurve.prototype = Object.create( Curve.prototype );
  LineCurve.prototype.constructor = LineCurve;

  LineCurve.prototype.isLineCurve = true;

  LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	if ( t === 1 ) {

  		point.copy( this.v2 );

  	} else {

  		point.copy( this.v2 ).sub( this.v1 );
  		point.multiplyScalar( t ).add( this.v1 );

  	}

  	return point;

  };

  // Line curve is linear, so we can overwrite default getPointAt

  LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

  	return this.getPoint( u, optionalTarget );

  };

  LineCurve.prototype.getTangent = function ( /* t */ ) {

  	var tangent = this.v2.clone().sub( this.v1 );

  	return tangent.normalize();

  };

  LineCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  LineCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  LineCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function LineCurve3( v1, v2 ) {

  	Curve.call( this );

  	this.type = 'LineCurve3';

  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();

  }

  LineCurve3.prototype = Object.create( Curve.prototype );
  LineCurve3.prototype.constructor = LineCurve3;

  LineCurve3.prototype.isLineCurve3 = true;

  LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	if ( t === 1 ) {

  		point.copy( this.v2 );

  	} else {

  		point.copy( this.v2 ).sub( this.v1 );
  		point.multiplyScalar( t ).add( this.v1 );

  	}

  	return point;

  };

  // Line curve is linear, so we can overwrite default getPointAt

  LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

  	return this.getPoint( u, optionalTarget );

  };

  LineCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  LineCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  LineCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function QuadraticBezierCurve( v0, v1, v2 ) {

  	Curve.call( this );

  	this.type = 'QuadraticBezierCurve';

  	this.v0 = v0 || new Vector2();
  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();

  }

  QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
  QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

  QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

  	point.set(
  		QuadraticBezier( t, v0.x, v1.x, v2.x ),
  		QuadraticBezier( t, v0.y, v1.y, v2.y )
  	);

  	return point;

  };

  QuadraticBezierCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  QuadraticBezierCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function QuadraticBezierCurve3( v0, v1, v2 ) {

  	Curve.call( this );

  	this.type = 'QuadraticBezierCurve3';

  	this.v0 = v0 || new Vector3();
  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();

  }

  QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
  QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

  QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

  	point.set(
  		QuadraticBezier( t, v0.x, v1.x, v2.x ),
  		QuadraticBezier( t, v0.y, v1.y, v2.y ),
  		QuadraticBezier( t, v0.z, v1.z, v2.z )
  	);

  	return point;

  };

  QuadraticBezierCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  QuadraticBezierCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function SplineCurve( points /* array of Vector2 */ ) {

  	Curve.call( this );

  	this.type = 'SplineCurve';

  	this.points = points || [];

  }

  SplineCurve.prototype = Object.create( Curve.prototype );
  SplineCurve.prototype.constructor = SplineCurve;

  SplineCurve.prototype.isSplineCurve = true;

  SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var points = this.points;
  	var p = ( points.length - 1 ) * t;

  	var intPoint = Math.floor( p );
  	var weight = p - intPoint;

  	var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
  	var p1 = points[ intPoint ];
  	var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
  	var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

  	point.set(
  		CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
  		CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
  	);

  	return point;

  };

  SplineCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.points = [];

  	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

  		var point = source.points[ i ];

  		this.points.push( point.clone() );

  	}

  	return this;

  };

  SplineCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.points = [];

  	for ( var i = 0, l = this.points.length; i < l; i ++ ) {

  		var point = this.points[ i ];
  		data.points.push( point.toArray() );

  	}

  	return data;

  };

  SplineCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.points = [];

  	for ( var i = 0, l = json.points.length; i < l; i ++ ) {

  		var point = json.points[ i ];
  		this.points.push( new Vector2().fromArray( point ) );

  	}

  	return this;

  };



  var Curves = /*#__PURE__*/Object.freeze({
  	ArcCurve: ArcCurve,
  	CatmullRomCurve3: CatmullRomCurve3,
  	CubicBezierCurve: CubicBezierCurve,
  	CubicBezierCurve3: CubicBezierCurve3,
  	EllipseCurve: EllipseCurve,
  	LineCurve: LineCurve,
  	LineCurve3: LineCurve3,
  	QuadraticBezierCurve: QuadraticBezierCurve,
  	QuadraticBezierCurve3: QuadraticBezierCurve3,
  	SplineCurve: SplineCurve
  });

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   **/

  /**************************************************************
   *	Curved Path - a curve path is simply a array of connected
   *  curves, but retains the api of a curve
   **************************************************************/

  function CurvePath() {

  	Curve.call( this );

  	this.type = 'CurvePath';

  	this.curves = [];
  	this.autoClose = false; // Automatically closes the path

  }

  CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

  	constructor: CurvePath,

  	add: function ( curve ) {

  		this.curves.push( curve );

  	},

  	closePath: function () {

  		// Add a line curve if start and end of lines are not connected
  		var startPoint = this.curves[ 0 ].getPoint( 0 );
  		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

  		if ( ! startPoint.equals( endPoint ) ) {

  			this.curves.push( new LineCurve( endPoint, startPoint ) );

  		}

  	},

  	// To get accurate point with reference to
  	// entire path distance at time t,
  	// following has to be done:

  	// 1. Length of each sub path have to be known
  	// 2. Locate and identify type of curve
  	// 3. Get t for the curve
  	// 4. Return curve.getPointAt(t')

  	getPoint: function ( t ) {

  		var d = t * this.getLength();
  		var curveLengths = this.getCurveLengths();
  		var i = 0;

  		// To think about boundaries points.

  		while ( i < curveLengths.length ) {

  			if ( curveLengths[ i ] >= d ) {

  				var diff = curveLengths[ i ] - d;
  				var curve = this.curves[ i ];

  				var segmentLength = curve.getLength();
  				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

  				return curve.getPointAt( u );

  			}

  			i ++;

  		}

  		return null;

  		// loop where sum != 0, sum > d , sum+1 <d

  	},

  	// We cannot use the default THREE.Curve getPoint() with getLength() because in
  	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  	// getPoint() depends on getLength

  	getLength: function () {

  		var lens = this.getCurveLengths();
  		return lens[ lens.length - 1 ];

  	},

  	// cacheLengths must be recalculated.
  	updateArcLengths: function () {

  		this.needsUpdate = true;
  		this.cacheLengths = null;
  		this.getCurveLengths();

  	},

  	// Compute lengths and cache them
  	// We cannot overwrite getLengths() because UtoT mapping uses it.

  	getCurveLengths: function () {

  		// We use cache values if curves and cache array are same length

  		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

  			return this.cacheLengths;

  		}

  		// Get length of sub-curve
  		// Push sums into cached array

  		var lengths = [], sums = 0;

  		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

  			sums += this.curves[ i ].getLength();
  			lengths.push( sums );

  		}

  		this.cacheLengths = lengths;

  		return lengths;

  	},

  	getSpacedPoints: function ( divisions ) {

  		if ( divisions === undefined ) divisions = 40;

  		var points = [];

  		for ( var i = 0; i <= divisions; i ++ ) {

  			points.push( this.getPoint( i / divisions ) );

  		}

  		if ( this.autoClose ) {

  			points.push( points[ 0 ] );

  		}

  		return points;

  	},

  	getPoints: function ( divisions ) {

  		divisions = divisions || 12;

  		var points = [], last;

  		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

  			var curve = curves[ i ];
  			var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
  				: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
  					: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
  						: divisions;

  			var pts = curve.getPoints( resolution );

  			for ( var j = 0; j < pts.length; j ++ ) {

  				var point = pts[ j ];

  				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

  				points.push( point );
  				last = point;

  			}

  		}

  		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

  			points.push( points[ 0 ] );

  		}

  		return points;

  	},

  	copy: function ( source ) {

  		Curve.prototype.copy.call( this, source );

  		this.curves = [];

  		for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

  			var curve = source.curves[ i ];

  			this.curves.push( curve.clone() );

  		}

  		this.autoClose = source.autoClose;

  		return this;

  	},

  	toJSON: function () {

  		var data = Curve.prototype.toJSON.call( this );

  		data.autoClose = this.autoClose;
  		data.curves = [];

  		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

  			var curve = this.curves[ i ];
  			data.curves.push( curve.toJSON() );

  		}

  		return data;

  	},

  	fromJSON: function ( json ) {

  		Curve.prototype.fromJSON.call( this, json );

  		this.autoClose = json.autoClose;
  		this.curves = [];

  		for ( var i = 0, l = json.curves.length; i < l; i ++ ) {

  			var curve = json.curves[ i ];
  			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Creates free form 2d path using series of points, lines or curves.
   **/

  function Path$1( points ) {

  	CurvePath.call( this );

  	this.type = 'Path';

  	this.currentPoint = new Vector2();

  	if ( points ) {

  		this.setFromPoints( points );

  	}

  }

  Path$1.prototype = Object.assign( Object.create( CurvePath.prototype ), {

  	constructor: Path$1,

  	setFromPoints: function ( points ) {

  		this.moveTo( points[ 0 ].x, points[ 0 ].y );

  		for ( var i = 1, l = points.length; i < l; i ++ ) {

  			this.lineTo( points[ i ].x, points[ i ].y );

  		}

  	},

  	moveTo: function ( x, y ) {

  		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

  	},

  	lineTo: function ( x, y ) {

  		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
  		this.curves.push( curve );

  		this.currentPoint.set( x, y );

  	},

  	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

  		var curve = new QuadraticBezierCurve(
  			this.currentPoint.clone(),
  			new Vector2( aCPx, aCPy ),
  			new Vector2( aX, aY )
  		);

  		this.curves.push( curve );

  		this.currentPoint.set( aX, aY );

  	},

  	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

  		var curve = new CubicBezierCurve(
  			this.currentPoint.clone(),
  			new Vector2( aCP1x, aCP1y ),
  			new Vector2( aCP2x, aCP2y ),
  			new Vector2( aX, aY )
  		);

  		this.curves.push( curve );

  		this.currentPoint.set( aX, aY );

  	},

  	splineThru: function ( pts /*Array of Vector*/ ) {

  		var npts = [ this.currentPoint.clone() ].concat( pts );

  		var curve = new SplineCurve( npts );
  		this.curves.push( curve );

  		this.currentPoint.copy( pts[ pts.length - 1 ] );

  	},

  	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  		var x0 = this.currentPoint.x;
  		var y0 = this.currentPoint.y;

  		this.absarc( aX + x0, aY + y0, aRadius,
  			aStartAngle, aEndAngle, aClockwise );

  	},

  	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

  	},

  	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  		var x0 = this.currentPoint.x;
  		var y0 = this.currentPoint.y;

  		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

  	},

  	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

  		if ( this.curves.length > 0 ) {

  			// if a previous curve is present, attempt to join
  			var firstPoint = curve.getPoint( 0 );

  			if ( ! firstPoint.equals( this.currentPoint ) ) {

  				this.lineTo( firstPoint.x, firstPoint.y );

  			}

  		}

  		this.curves.push( curve );

  		var lastPoint = curve.getPoint( 1 );
  		this.currentPoint.copy( lastPoint );

  	},

  	copy: function ( source ) {

  		CurvePath.prototype.copy.call( this, source );

  		this.currentPoint.copy( source.currentPoint );

  		return this;

  	},

  	toJSON: function () {

  		var data = CurvePath.prototype.toJSON.call( this );

  		data.currentPoint = this.currentPoint.toArray();

  		return data;

  	},

  	fromJSON: function ( json ) {

  		CurvePath.prototype.fromJSON.call( this, json );

  		this.currentPoint.fromArray( json.currentPoint );

  		return this;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Defines a 2d shape plane using paths.
   **/

  // STEP 1 Create a path.
  // STEP 2 Turn path into shape.
  // STEP 3 ExtrudeGeometry takes in Shape/Shapes
  // STEP 3a - Extract points from each shape, turn to vertices
  // STEP 3b - Triangulate each shape, add faces.

  function Shape$1( points ) {

  	Path$1.call( this, points );

  	this.uuid = _Math.generateUUID();

  	this.type = 'Shape';

  	this.holes = [];

  }

  Shape$1.prototype = Object.assign( Object.create( Path$1.prototype ), {

  	constructor: Shape$1,

  	getPointsHoles: function ( divisions ) {

  		var holesPts = [];

  		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

  			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

  		}

  		return holesPts;

  	},

  	// get points of shape and holes (keypoints based on segments parameter)

  	extractPoints: function ( divisions ) {

  		return {

  			shape: this.getPoints( divisions ),
  			holes: this.getPointsHoles( divisions )

  		};

  	},

  	copy: function ( source ) {

  		Path$1.prototype.copy.call( this, source );

  		this.holes = [];

  		for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

  			var hole = source.holes[ i ];

  			this.holes.push( hole.clone() );

  		}

  		return this;

  	},

  	toJSON: function () {

  		var data = Path$1.prototype.toJSON.call( this );

  		data.uuid = this.uuid;
  		data.holes = [];

  		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

  			var hole = this.holes[ i ];
  			data.holes.push( hole.toJSON() );

  		}

  		return data;

  	},

  	fromJSON: function ( json ) {

  		Path$1.prototype.fromJSON.call( this, json );

  		this.uuid = json.uuid;
  		this.holes = [];

  		for ( var i = 0, l = json.holes.length; i < l; i ++ ) {

  			var hole = json.holes[ i ];
  			this.holes.push( new Path$1().fromJSON( hole ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Light( color, intensity ) {

  	Object3D.call( this );

  	this.type = 'Light';

  	this.color = new Color( color );
  	this.intensity = intensity !== undefined ? intensity : 1;

  	this.receiveShadow = undefined;

  }

  Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Light,

  	isLight: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		this.color.copy( source.color );
  		this.intensity = source.intensity;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.color = this.color.getHex();
  		data.object.intensity = this.intensity;

  		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

  		if ( this.distance !== undefined ) data.object.distance = this.distance;
  		if ( this.angle !== undefined ) data.object.angle = this.angle;
  		if ( this.decay !== undefined ) data.object.decay = this.decay;
  		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

  		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

  		return data;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function HemisphereLight( skyColor, groundColor, intensity ) {

  	Light.call( this, skyColor, intensity );

  	this.type = 'HemisphereLight';

  	this.castShadow = undefined;

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.groundColor = new Color( groundColor );

  }

  HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: HemisphereLight,

  	isHemisphereLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.groundColor.copy( source.groundColor );

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function LightShadow( camera ) {

  	this.camera = camera;

  	this.bias = 0;
  	this.radius = 1;

  	this.mapSize = new Vector2( 512, 512 );

  	this.map = null;
  	this.matrix = new Matrix4();

  }

  Object.assign( LightShadow.prototype, {

  	copy: function ( source ) {

  		this.camera = source.camera.clone();

  		this.bias = source.bias;
  		this.radius = source.radius;

  		this.mapSize.copy( source.mapSize );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	toJSON: function () {

  		var object = {};

  		if ( this.bias !== 0 ) object.bias = this.bias;
  		if ( this.radius !== 1 ) object.radius = this.radius;
  		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

  		object.camera = this.camera.toJSON( false ).object;
  		delete object.camera.matrix;

  		return object;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function SpotLightShadow() {

  	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

  }

  SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

  	constructor: SpotLightShadow,

  	isSpotLightShadow: true,

  	update: function ( light ) {

  		var camera = this.camera;

  		var fov = _Math.RAD2DEG * 2 * light.angle;
  		var aspect = this.mapSize.width / this.mapSize.height;
  		var far = light.distance || camera.far;

  		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

  			camera.fov = fov;
  			camera.aspect = aspect;
  			camera.far = far;
  			camera.updateProjectionMatrix();

  		}

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

  	Light.call( this, color, intensity );

  	this.type = 'SpotLight';

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.target = new Object3D();

  	Object.defineProperty( this, 'power', {
  		get: function () {

  			// intensity = power per solid angle.
  			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			return this.intensity * Math.PI;

  		},
  		set: function ( power ) {

  			// intensity = power per solid angle.
  			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			this.intensity = power / Math.PI;

  		}
  	} );

  	this.distance = ( distance !== undefined ) ? distance : 0;
  	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
  	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
  	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

  	this.shadow = new SpotLightShadow();

  }

  SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: SpotLight,

  	isSpotLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.distance = source.distance;
  		this.angle = source.angle;
  		this.penumbra = source.penumbra;
  		this.decay = source.decay;

  		this.target = source.target.clone();

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */


  function PointLight( color, intensity, distance, decay ) {

  	Light.call( this, color, intensity );

  	this.type = 'PointLight';

  	Object.defineProperty( this, 'power', {
  		get: function () {

  			// intensity = power per solid angle.
  			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			return this.intensity * 4 * Math.PI;

  		},
  		set: function ( power ) {

  			// intensity = power per solid angle.
  			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			this.intensity = power / ( 4 * Math.PI );

  		}
  	} );

  	this.distance = ( distance !== undefined ) ? distance : 0;
  	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

  	this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

  }

  PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: PointLight,

  	isPointLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.distance = source.distance;
  		this.decay = source.decay;

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author arose / http://github.com/arose
   */

  function OrthographicCamera( left, right, top, bottom, near, far ) {

  	Camera.call( this );

  	this.type = 'OrthographicCamera';

  	this.zoom = 1;
  	this.view = null;

  	this.left = ( left !== undefined ) ? left : - 1;
  	this.right = ( right !== undefined ) ? right : 1;
  	this.top = ( top !== undefined ) ? top : 1;
  	this.bottom = ( bottom !== undefined ) ? bottom : - 1;

  	this.near = ( near !== undefined ) ? near : 0.1;
  	this.far = ( far !== undefined ) ? far : 2000;

  	this.updateProjectionMatrix();

  }

  OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

  	constructor: OrthographicCamera,

  	isOrthographicCamera: true,

  	copy: function ( source, recursive ) {

  		Camera.prototype.copy.call( this, source, recursive );

  		this.left = source.left;
  		this.right = source.right;
  		this.top = source.top;
  		this.bottom = source.bottom;
  		this.near = source.near;
  		this.far = source.far;

  		this.zoom = source.zoom;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		return this;

  	},

  	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	},

  	clearViewOffset: function () {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	},

  	updateProjectionMatrix: function () {

  		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
  		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
  		var cx = ( this.right + this.left ) / 2;
  		var cy = ( this.top + this.bottom ) / 2;

  		var left = cx - dx;
  		var right = cx + dx;
  		var top = cy + dy;
  		var bottom = cy - dy;

  		if ( this.view !== null && this.view.enabled ) {

  			var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
  			var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
  			var scaleW = ( this.right - this.left ) / this.view.width;
  			var scaleH = ( this.top - this.bottom ) / this.view.height;

  			left += scaleW * ( this.view.offsetX / zoomW );
  			right = left + scaleW * ( this.view.width / zoomW );
  			top -= scaleH * ( this.view.offsetY / zoomH );
  			bottom = top - scaleH * ( this.view.height / zoomH );

  		}

  		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

  		this.projectionMatrixInverse.getInverse( this.projectionMatrix );

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.zoom = this.zoom;
  		data.object.left = this.left;
  		data.object.right = this.right;
  		data.object.top = this.top;
  		data.object.bottom = this.bottom;
  		data.object.near = this.near;
  		data.object.far = this.far;

  		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function DirectionalLightShadow( ) {

  	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

  }

  DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

  	constructor: DirectionalLightShadow

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function DirectionalLight( color, intensity ) {

  	Light.call( this, color, intensity );

  	this.type = 'DirectionalLight';

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.target = new Object3D();

  	this.shadow = new DirectionalLightShadow();

  }

  DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: DirectionalLight,

  	isDirectionalLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.target = source.target.clone();

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function AmbientLight( color, intensity ) {

  	Light.call( this, color, intensity );

  	this.type = 'AmbientLight';

  	this.castShadow = undefined;

  }

  AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: AmbientLight,

  	isAmbientLight: true

  } );

  /**
   * @author abelnation / http://github.com/abelnation
   */

  function RectAreaLight( color, intensity, width, height ) {

  	Light.call( this, color, intensity );

  	this.type = 'RectAreaLight';

  	this.width = ( width !== undefined ) ? width : 10;
  	this.height = ( height !== undefined ) ? height : 10;

  }

  RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: RectAreaLight,

  	isRectAreaLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.width = source.width;
  		this.height = source.height;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Light.prototype.toJSON.call( this, meta );

  		data.object.width = this.width;
  		data.object.height = this.height;

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function MaterialLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
  	this.textures = {};

  }

  Object.assign( MaterialLoader.prototype, {

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			onLoad( scope.parse( JSON.parse( text ) ) );

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var textures = this.textures;

  		function getTexture( name ) {

  			if ( textures[ name ] === undefined ) {

  				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

  			}

  			return textures[ name ];

  		}

  		var material = new Materials[ json.type ]();

  		if ( json.uuid !== undefined ) material.uuid = json.uuid;
  		if ( json.name !== undefined ) material.name = json.name;
  		if ( json.color !== undefined ) material.color.setHex( json.color );
  		if ( json.roughness !== undefined ) material.roughness = json.roughness;
  		if ( json.metalness !== undefined ) material.metalness = json.metalness;
  		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
  		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
  		if ( json.shininess !== undefined ) material.shininess = json.shininess;
  		if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
  		if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
  		if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
  		if ( json.fog !== undefined ) material.fog = json.fog;
  		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
  		if ( json.blending !== undefined ) material.blending = json.blending;
  		if ( json.combine !== undefined ) material.combine = json.combine;
  		if ( json.side !== undefined ) material.side = json.side;
  		if ( json.opacity !== undefined ) material.opacity = json.opacity;
  		if ( json.transparent !== undefined ) material.transparent = json.transparent;
  		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
  		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
  		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
  		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
  		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
  		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
  		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
  		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

  		if ( json.rotation !== undefined ) material.rotation = json.rotation;

  		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
  		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
  		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
  		if ( json.scale !== undefined ) material.scale = json.scale;

  		if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
  		if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
  		if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;

  		if ( json.skinning !== undefined ) material.skinning = json.skinning;
  		if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
  		if ( json.dithering !== undefined ) material.dithering = json.dithering;

  		if ( json.visible !== undefined ) material.visible = json.visible;
  		if ( json.userData !== undefined ) material.userData = json.userData;

  		// Shader Material

  		if ( json.uniforms !== undefined ) {

  			for ( var name in json.uniforms ) {

  				var uniform = json.uniforms[ name ];

  				material.uniforms[ name ] = {};

  				switch ( uniform.type ) {

  					case 't':
  						material.uniforms[ name ].value = getTexture( uniform.value );
  						break;

  					case 'c':
  						material.uniforms[ name ].value = new Color().setHex( uniform.value );
  						break;

  					case 'v2':
  						material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
  						break;

  					case 'v3':
  						material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
  						break;

  					case 'v4':
  						material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
  						break;

  					case 'm3':
  						material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );

  					case 'm4':
  						material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
  						break;

  					default:
  						material.uniforms[ name ].value = uniform.value;

  				}

  			}

  		}

  		if ( json.defines !== undefined ) material.defines = json.defines;
  		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
  		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;

  		if ( json.extensions !== undefined ) {

  			for ( var key in json.extensions ) {

  				material.extensions[ key ] = json.extensions[ key ];

  			}

  		}

  		// Deprecated

  		if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

  		// for PointsMaterial

  		if ( json.size !== undefined ) material.size = json.size;
  		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

  		// maps

  		if ( json.map !== undefined ) material.map = getTexture( json.map );
  		if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );

  		if ( json.alphaMap !== undefined ) {

  			material.alphaMap = getTexture( json.alphaMap );
  			material.transparent = true;

  		}

  		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
  		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

  		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
  		if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
  		if ( json.normalScale !== undefined ) {

  			var normalScale = json.normalScale;

  			if ( Array.isArray( normalScale ) === false ) {

  				// Blender exporter used to export a scalar. See #7459

  				normalScale = [ normalScale, normalScale ];

  			}

  			material.normalScale = new Vector2().fromArray( normalScale );

  		}

  		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
  		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
  		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

  		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
  		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

  		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
  		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

  		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

  		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
  		if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;

  		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

  		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
  		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

  		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
  		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

  		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

  		return material;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	},

  	setTextures: function ( value ) {

  		this.textures = value;
  		return this;

  	}

  } );

  /**
   * @author Don McCurdy / https://www.donmccurdy.com
   */

  var LoaderUtils = {

  	decodeText: function ( array ) {

  		if ( typeof TextDecoder !== 'undefined' ) {

  			return new TextDecoder().decode( array );

  		}

  		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
  		// throws a "maximum call stack size exceeded" error for large arrays.

  		var s = '';

  		for ( var i = 0, il = array.length; i < il; i ++ ) {

  			// Implicitly assumes little-endian.
  			s += String.fromCharCode( array[ i ] );

  		}

  		// Merges multi-byte utf-8 characters.
  		return decodeURIComponent( escape( s ) );

  	},

  	extractUrlBase: function ( url ) {

  		var index = url.lastIndexOf( '/' );

  		if ( index === - 1 ) return './';

  		return url.substr( 0, index + 1 );

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function BufferGeometryLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  }

  Object.assign( BufferGeometryLoader.prototype, {

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			onLoad( scope.parse( JSON.parse( text ) ) );

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var geometry = new BufferGeometry();

  		var index = json.data.index;

  		if ( index !== undefined ) {

  			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
  			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

  		}

  		var attributes = json.data.attributes;

  		for ( var key in attributes ) {

  			var attribute = attributes[ key ];
  			var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

  			var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
  			if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
  			geometry.addAttribute( key, bufferAttribute );

  		}

  		var morphAttributes = json.data.morphAttributes;

  		if ( morphAttributes ) {

  			for ( var key in morphAttributes ) {

  				var attributeArray = morphAttributes[ key ];

  				var array = [];

  				for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

  					var attribute = attributeArray[ i ];
  					var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

  					var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
  					if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
  					array.push( bufferAttribute );

  				}

  				geometry.morphAttributes[ key ] = array;

  			}

  		}

  		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

  		if ( groups !== undefined ) {

  			for ( var i = 0, n = groups.length; i !== n; ++ i ) {

  				var group = groups[ i ];

  				geometry.addGroup( group.start, group.count, group.materialIndex );

  			}

  		}

  		var boundingSphere = json.data.boundingSphere;

  		if ( boundingSphere !== undefined ) {

  			var center = new Vector3();

  			if ( boundingSphere.center !== undefined ) {

  				center.fromArray( boundingSphere.center );

  			}

  			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

  		}

  		if ( json.name ) geometry.name = json.name;
  		if ( json.userData ) geometry.userData = json.userData;

  		return geometry;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  var TYPED_ARRAYS = {
  	Int8Array: Int8Array,
  	Uint8Array: Uint8Array,
  	// Workaround for IE11 pre KB2929437. See #11440
  	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
  	Int16Array: Int16Array,
  	Uint16Array: Uint16Array,
  	Int32Array: Int32Array,
  	Uint32Array: Uint32Array,
  	Float32Array: Float32Array,
  	Float64Array: Float64Array
  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function ObjectLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
  	this.resourcePath = '';

  }

  Object.assign( ObjectLoader.prototype, {

  	crossOrigin: 'anonymous',

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var path = ( this.path === undefined ) ? LoaderUtils.extractUrlBase( url ) : this.path;
  		this.resourcePath = this.resourcePath || path;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( this.path );
  		loader.load( url, function ( text ) {

  			var json = null;

  			try {

  				json = JSON.parse( text );

  			} catch ( error ) {

  				if ( onError !== undefined ) onError( error );

  				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

  				return;

  			}

  			var metadata = json.metadata;

  			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

  				console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
  				return;

  			}

  			scope.parse( json, onLoad );

  		}, onProgress, onError );

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	},

  	setResourcePath: function ( value ) {

  		this.resourcePath = value;
  		return this;

  	},

  	setCrossOrigin: function ( value ) {

  		this.crossOrigin = value;
  		return this;

  	},

  	parse: function ( json, onLoad ) {

  		var shapes = this.parseShape( json.shapes );
  		var geometries = this.parseGeometries( json.geometries, shapes );

  		var images = this.parseImages( json.images, function () {

  			if ( onLoad !== undefined ) onLoad( object );

  		} );

  		var textures = this.parseTextures( json.textures, images );
  		var materials = this.parseMaterials( json.materials, textures );

  		var object = this.parseObject( json.object, geometries, materials );

  		if ( json.animations ) {

  			object.animations = this.parseAnimations( json.animations );

  		}

  		if ( json.images === undefined || json.images.length === 0 ) {

  			if ( onLoad !== undefined ) onLoad( object );

  		}

  		return object;

  	},

  	parseShape: function ( json ) {

  		var shapes = {};

  		if ( json !== undefined ) {

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var shape = new Shape$1().fromJSON( json[ i ] );

  				shapes[ shape.uuid ] = shape;

  			}

  		}

  		return shapes;

  	},

  	parseGeometries: function ( json, shapes ) {

  		var geometries = {};

  		if ( json !== undefined ) {

  			var bufferGeometryLoader = new BufferGeometryLoader();

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var geometry;
  				var data = json[ i ];

  				switch ( data.type ) {

  					case 'PlaneGeometry':
  					case 'PlaneBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.width,
  							data.height,
  							data.widthSegments,
  							data.heightSegments
  						);

  						break;

  					case 'BoxGeometry':
  					case 'BoxBufferGeometry':
  					case 'CubeGeometry': // backwards compatible

  						geometry = new Geometries[ data.type ](
  							data.width,
  							data.height,
  							data.depth,
  							data.widthSegments,
  							data.heightSegments,
  							data.depthSegments
  						);

  						break;

  					case 'CircleGeometry':
  					case 'CircleBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.segments,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'CylinderGeometry':
  					case 'CylinderBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radiusTop,
  							data.radiusBottom,
  							data.height,
  							data.radialSegments,
  							data.heightSegments,
  							data.openEnded,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'ConeGeometry':
  					case 'ConeBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.height,
  							data.radialSegments,
  							data.heightSegments,
  							data.openEnded,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'SphereGeometry':
  					case 'SphereBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.widthSegments,
  							data.heightSegments,
  							data.phiStart,
  							data.phiLength,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'DodecahedronGeometry':
  					case 'DodecahedronBufferGeometry':
  					case 'IcosahedronGeometry':
  					case 'IcosahedronBufferGeometry':
  					case 'OctahedronGeometry':
  					case 'OctahedronBufferGeometry':
  					case 'TetrahedronGeometry':
  					case 'TetrahedronBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.detail
  						);

  						break;

  					case 'RingGeometry':
  					case 'RingBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.innerRadius,
  							data.outerRadius,
  							data.thetaSegments,
  							data.phiSegments,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'TorusGeometry':
  					case 'TorusBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.tube,
  							data.radialSegments,
  							data.tubularSegments,
  							data.arc
  						);

  						break;

  					case 'TorusKnotGeometry':
  					case 'TorusKnotBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.tube,
  							data.tubularSegments,
  							data.radialSegments,
  							data.p,
  							data.q
  						);

  						break;

  					case 'TubeGeometry':
  					case 'TubeBufferGeometry':

  						// This only works for built-in curves (e.g. CatmullRomCurve3).
  						// User defined curves or instances of CurvePath will not be deserialized.
  						geometry = new Geometries[ data.type ](
  							new Curves[ data.path.type ]().fromJSON( data.path ),
  							data.tubularSegments,
  							data.radius,
  							data.radialSegments,
  							data.closed
  						);

  						break;

  					case 'LatheGeometry':
  					case 'LatheBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.points,
  							data.segments,
  							data.phiStart,
  							data.phiLength
  						);

  						break;

  					case 'PolyhedronGeometry':
  					case 'PolyhedronBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.vertices,
  							data.indices,
  							data.radius,
  							data.details
  						);

  						break;

  					case 'ShapeGeometry':
  					case 'ShapeBufferGeometry':

  						var geometryShapes = [];

  						for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

  							var shape = shapes[ data.shapes[ j ] ];

  							geometryShapes.push( shape );

  						}

  						geometry = new Geometries[ data.type ](
  							geometryShapes,
  							data.curveSegments
  						);

  						break;


  					case 'ExtrudeGeometry':
  					case 'ExtrudeBufferGeometry':

  						var geometryShapes = [];

  						for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

  							var shape = shapes[ data.shapes[ j ] ];

  							geometryShapes.push( shape );

  						}

  						var extrudePath = data.options.extrudePath;

  						if ( extrudePath !== undefined ) {

  							data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

  						}

  						geometry = new Geometries[ data.type ](
  							geometryShapes,
  							data.options
  						);

  						break;

  					case 'BufferGeometry':

  						geometry = bufferGeometryLoader.parse( data );

  						break;

  					case 'Geometry':

  						if ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {

  							var geometryLoader = new THREE.LegacyJSONLoader();
  							geometry = geometryLoader.parse( data, this.resourcePath ).geometry;


  						} else {

  							console.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".' );

  						}

  						break;

  					default:

  						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

  						continue;

  				}

  				geometry.uuid = data.uuid;

  				if ( data.name !== undefined ) geometry.name = data.name;
  				if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;

  				geometries[ data.uuid ] = geometry;

  			}

  		}

  		return geometries;

  	},

  	parseMaterials: function ( json, textures ) {

  		var cache = {}; // MultiMaterial
  		var materials = {};

  		if ( json !== undefined ) {

  			var loader = new MaterialLoader();
  			loader.setTextures( textures );

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var data = json[ i ];

  				if ( data.type === 'MultiMaterial' ) {

  					// Deprecated

  					var array = [];

  					for ( var j = 0; j < data.materials.length; j ++ ) {

  						var material = data.materials[ j ];

  						if ( cache[ material.uuid ] === undefined ) {

  							cache[ material.uuid ] = loader.parse( material );

  						}

  						array.push( cache[ material.uuid ] );

  					}

  					materials[ data.uuid ] = array;

  				} else {

  					if ( cache[ data.uuid ] === undefined ) {

  						cache[ data.uuid ] = loader.parse( data );

  					}

  					materials[ data.uuid ] = cache[ data.uuid ];

  				}

  			}

  		}

  		return materials;

  	},

  	parseAnimations: function ( json ) {

  		var animations = [];

  		for ( var i = 0; i < json.length; i ++ ) {

  			var data = json[ i ];

  			var clip = AnimationClip.parse( data );

  			if ( data.uuid !== undefined ) clip.uuid = data.uuid;

  			animations.push( clip );

  		}

  		return animations;

  	},

  	parseImages: function ( json, onLoad ) {

  		var scope = this;
  		var images = {};

  		function loadImage( url ) {

  			scope.manager.itemStart( url );

  			return loader.load( url, function () {

  				scope.manager.itemEnd( url );

  			}, undefined, function () {

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			} );

  		}

  		if ( json !== undefined && json.length > 0 ) {

  			var manager = new LoadingManager( onLoad );

  			var loader = new ImageLoader( manager );
  			loader.setCrossOrigin( this.crossOrigin );

  			for ( var i = 0, il = json.length; i < il; i ++ ) {

  				var image = json[ i ];
  				var url = image.url;

  				if ( Array.isArray( url ) ) {

  					// load array of images e.g CubeTexture

  					images[ image.uuid ] = [];

  					for ( var j = 0, jl = url.length; j < jl; j ++ ) {

  						var currentUrl = url[ j ];

  						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;

  						images[ image.uuid ].push( loadImage( path ) );

  					}

  				} else {

  					// load single image

  					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;

  					images[ image.uuid ] = loadImage( path );

  				}

  			}

  		}

  		return images;

  	},

  	parseTextures: function ( json, images ) {

  		function parseConstant( value, type ) {

  			if ( typeof value === 'number' ) return value;

  			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

  			return type[ value ];

  		}

  		var textures = {};

  		if ( json !== undefined ) {

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var data = json[ i ];

  				if ( data.image === undefined ) {

  					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

  				}

  				if ( images[ data.image ] === undefined ) {

  					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

  				}

  				var texture;

  				if ( Array.isArray( images[ data.image ] ) ) {

  					texture = new CubeTexture( images[ data.image ] );

  				} else {

  					texture = new Texture( images[ data.image ] );

  				}

  				texture.needsUpdate = true;

  				texture.uuid = data.uuid;

  				if ( data.name !== undefined ) texture.name = data.name;

  				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

  				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
  				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
  				if ( data.center !== undefined ) texture.center.fromArray( data.center );
  				if ( data.rotation !== undefined ) texture.rotation = data.rotation;

  				if ( data.wrap !== undefined ) {

  					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
  					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

  				}

  				if ( data.format !== undefined ) texture.format = data.format;
  				if ( data.type !== undefined ) texture.type = data.type;
  				if ( data.encoding !== undefined ) texture.encoding = data.encoding;

  				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
  				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
  				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

  				if ( data.flipY !== undefined ) texture.flipY = data.flipY;

  				if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
  				if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;

  				textures[ data.uuid ] = texture;

  			}

  		}

  		return textures;

  	},

  	parseObject: function ( data, geometries, materials ) {

  		var object;

  		function getGeometry( name ) {

  			if ( geometries[ name ] === undefined ) {

  				console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

  			}

  			return geometries[ name ];

  		}

  		function getMaterial( name ) {

  			if ( name === undefined ) return undefined;

  			if ( Array.isArray( name ) ) {

  				var array = [];

  				for ( var i = 0, l = name.length; i < l; i ++ ) {

  					var uuid = name[ i ];

  					if ( materials[ uuid ] === undefined ) {

  						console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

  					}

  					array.push( materials[ uuid ] );

  				}

  				return array;

  			}

  			if ( materials[ name ] === undefined ) {

  				console.warn( 'THREE.ObjectLoader: Undefined material', name );

  			}

  			return materials[ name ];

  		}

  		switch ( data.type ) {

  			case 'Scene':

  				object = new Scene();

  				if ( data.background !== undefined ) {

  					if ( Number.isInteger( data.background ) ) {

  						object.background = new Color( data.background );

  					}

  				}

  				if ( data.fog !== undefined ) {

  					if ( data.fog.type === 'Fog' ) {

  						object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

  					} else if ( data.fog.type === 'FogExp2' ) {

  						object.fog = new FogExp2( data.fog.color, data.fog.density );

  					}

  				}

  				break;

  			case 'PerspectiveCamera':

  				object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

  				if ( data.focus !== undefined ) object.focus = data.focus;
  				if ( data.zoom !== undefined ) object.zoom = data.zoom;
  				if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
  				if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
  				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

  				break;

  			case 'OrthographicCamera':

  				object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

  				if ( data.zoom !== undefined ) object.zoom = data.zoom;
  				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

  				break;

  			case 'AmbientLight':

  				object = new AmbientLight( data.color, data.intensity );

  				break;

  			case 'DirectionalLight':

  				object = new DirectionalLight( data.color, data.intensity );

  				break;

  			case 'PointLight':

  				object = new PointLight( data.color, data.intensity, data.distance, data.decay );

  				break;

  			case 'RectAreaLight':

  				object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

  				break;

  			case 'SpotLight':

  				object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

  				break;

  			case 'HemisphereLight':

  				object = new HemisphereLight( data.color, data.groundColor, data.intensity );

  				break;

  			case 'SkinnedMesh':

  				console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

  			case 'Mesh':

  				var geometry = getGeometry( data.geometry );
  				var material = getMaterial( data.material );

  				if ( geometry.bones && geometry.bones.length > 0 ) {

  					object = new SkinnedMesh( geometry, material );

  				} else {

  					object = new Mesh( geometry, material );

  				}

  				if ( data.drawMode !== undefined ) object.setDrawMode( data.drawMode );

  				break;

  			case 'LOD':

  				object = new LOD();

  				break;

  			case 'Line':

  				object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

  				break;

  			case 'LineLoop':

  				object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'LineSegments':

  				object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'PointCloud':
  			case 'Points':

  				object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'Sprite':

  				object = new Sprite( getMaterial( data.material ) );

  				break;

  			case 'Group':

  				object = new Group();

  				break;

  			default:

  				object = new Object3D();

  		}

  		object.uuid = data.uuid;

  		if ( data.name !== undefined ) object.name = data.name;

  		if ( data.matrix !== undefined ) {

  			object.matrix.fromArray( data.matrix );

  			if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
  			if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );

  		} else {

  			if ( data.position !== undefined ) object.position.fromArray( data.position );
  			if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
  			if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
  			if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

  		}

  		if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
  		if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

  		if ( data.shadow ) {

  			if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
  			if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
  			if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
  			if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

  		}

  		if ( data.visible !== undefined ) object.visible = data.visible;
  		if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
  		if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
  		if ( data.userData !== undefined ) object.userData = data.userData;
  		if ( data.layers !== undefined ) object.layers.mask = data.layers;

  		if ( data.children !== undefined ) {

  			var children = data.children;

  			for ( var i = 0; i < children.length; i ++ ) {

  				object.add( this.parseObject( children[ i ], geometries, materials ) );

  			}

  		}

  		if ( data.type === 'LOD' ) {

  			var levels = data.levels;

  			for ( var l = 0; l < levels.length; l ++ ) {

  				var level = levels[ l ];
  				var child = object.getObjectByProperty( 'uuid', level.object );

  				if ( child !== undefined ) {

  					object.addLevel( child, level.distance );

  				}

  			}

  		}

  		return object;

  	}

  } );

  var TEXTURE_MAPPING = {
  	UVMapping: UVMapping,
  	CubeReflectionMapping: CubeReflectionMapping,
  	CubeRefractionMapping: CubeRefractionMapping,
  	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
  	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
  	SphericalReflectionMapping: SphericalReflectionMapping,
  	CubeUVReflectionMapping: CubeUVReflectionMapping,
  	CubeUVRefractionMapping: CubeUVRefractionMapping
  };

  var TEXTURE_WRAPPING = {
  	RepeatWrapping: RepeatWrapping,
  	ClampToEdgeWrapping: ClampToEdgeWrapping,
  	MirroredRepeatWrapping: MirroredRepeatWrapping
  };

  var TEXTURE_FILTER = {
  	NearestFilter: NearestFilter,
  	NearestMipMapNearestFilter: NearestMipMapNearestFilter,
  	NearestMipMapLinearFilter: NearestMipMapLinearFilter,
  	LinearFilter: LinearFilter,
  	LinearMipMapNearestFilter: LinearMipMapNearestFilter,
  	LinearMipMapLinearFilter: LinearMipMapLinearFilter
  };

  /**
   * @author thespite / http://clicktorelease.com/
   */


  function ImageBitmapLoader( manager ) {

  	if ( typeof createImageBitmap === 'undefined' ) {

  		console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

  	}

  	if ( typeof fetch === 'undefined' ) {

  		console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

  	}

  	this.manager = manager !== undefined ? manager : DefaultLoadingManager;
  	this.options = undefined;

  }

  ImageBitmapLoader.prototype = {

  	constructor: ImageBitmapLoader,

  	setOptions: function setOptions( options ) {

  		this.options = options;

  		return this;

  	},

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( url === undefined ) url = '';

  		if ( this.path !== undefined ) url = this.path + url;

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) onLoad( cached );

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		fetch( url ).then( function ( res ) {

  			return res.blob();

  		} ).then( function ( blob ) {

  			if ( scope.options === undefined ) {

  				// Workaround for FireFox. It causes an error if you pass options.
  				return createImageBitmap( blob );

  			} else {

  				return createImageBitmap( blob, scope.options );

  			}

  		} ).then( function ( imageBitmap ) {

  			Cache.add( url, imageBitmap );

  			if ( onLoad ) onLoad( imageBitmap );

  			scope.manager.itemEnd( url );

  		} ).catch( function ( e ) {

  			if ( onError ) onError( e );

  			scope.manager.itemError( url );
  			scope.manager.itemEnd( url );

  		} );

  		scope.manager.itemStart( url );

  	},

  	setCrossOrigin: function ( /* value */ ) {

  		return this;

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  };

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
   **/

  function ShapePath() {

  	this.type = 'ShapePath';

  	this.color = new Color();

  	this.subPaths = [];
  	this.currentPath = null;

  }

  Object.assign( ShapePath.prototype, {

  	moveTo: function ( x, y ) {

  		this.currentPath = new Path$1();
  		this.subPaths.push( this.currentPath );
  		this.currentPath.moveTo( x, y );

  	},

  	lineTo: function ( x, y ) {

  		this.currentPath.lineTo( x, y );

  	},

  	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

  		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

  	},

  	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

  		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

  	},

  	splineThru: function ( pts ) {

  		this.currentPath.splineThru( pts );

  	},

  	toShapes: function ( isCCW, noHoles ) {

  		function toShapesNoHoles( inSubpaths ) {

  			var shapes = [];

  			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

  				var tmpPath = inSubpaths[ i ];

  				var tmpShape = new Shape$1();
  				tmpShape.curves = tmpPath.curves;

  				shapes.push( tmpShape );

  			}

  			return shapes;

  		}

  		function isPointInsidePolygon( inPt, inPolygon ) {

  			var polyLen = inPolygon.length;

  			// inPt on polygon contour => immediate success    or
  			// toggling of inside/outside at every single! intersection point of an edge
  			//  with the horizontal line through inPt, left of inPt
  			//  not counting lowerY endpoints of edges and whole edges on that line
  			var inside = false;
  			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

  				var edgeLowPt = inPolygon[ p ];
  				var edgeHighPt = inPolygon[ q ];

  				var edgeDx = edgeHighPt.x - edgeLowPt.x;
  				var edgeDy = edgeHighPt.y - edgeLowPt.y;

  				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

  					// not parallel
  					if ( edgeDy < 0 ) {

  						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
  						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

  					}
  					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

  					if ( inPt.y === edgeLowPt.y ) {

  						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
  						// continue;				// no intersection or edgeLowPt => doesn't count !!!

  					} else {

  						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
  						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
  						if ( perpEdge < 0 ) 				continue;
  						inside = ! inside;		// true intersection left of inPt

  					}

  				} else {

  					// parallel or collinear
  					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
  					// edge lies on the same horizontal line as inPt
  					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
  						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
  					// continue;

  				}

  			}

  			return	inside;

  		}

  		var isClockWise = ShapeUtils.isClockWise;

  		var subPaths = this.subPaths;
  		if ( subPaths.length === 0 ) return [];

  		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


  		var solid, tmpPath, tmpShape, shapes = [];

  		if ( subPaths.length === 1 ) {

  			tmpPath = subPaths[ 0 ];
  			tmpShape = new Shape$1();
  			tmpShape.curves = tmpPath.curves;
  			shapes.push( tmpShape );
  			return shapes;

  		}

  		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
  		holesFirst = isCCW ? ! holesFirst : holesFirst;

  		// console.log("Holes first", holesFirst);

  		var betterShapeHoles = [];
  		var newShapes = [];
  		var newShapeHoles = [];
  		var mainIdx = 0;
  		var tmpPoints;

  		newShapes[ mainIdx ] = undefined;
  		newShapeHoles[ mainIdx ] = [];

  		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

  			tmpPath = subPaths[ i ];
  			tmpPoints = tmpPath.getPoints();
  			solid = isClockWise( tmpPoints );
  			solid = isCCW ? ! solid : solid;

  			if ( solid ) {

  				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

  				newShapes[ mainIdx ] = { s: new Shape$1(), p: tmpPoints };
  				newShapes[ mainIdx ].s.curves = tmpPath.curves;

  				if ( holesFirst )	mainIdx ++;
  				newShapeHoles[ mainIdx ] = [];

  				//console.log('cw', i);

  			} else {

  				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

  				//console.log('ccw', i);

  			}

  		}

  		// only Holes? -> probably all Shapes with wrong orientation
  		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


  		if ( newShapes.length > 1 ) {

  			var ambiguous = false;
  			var toChange = [];

  			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

  				betterShapeHoles[ sIdx ] = [];

  			}

  			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

  				var sho = newShapeHoles[ sIdx ];

  				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

  					var ho = sho[ hIdx ];
  					var hole_unassigned = true;

  					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

  						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

  							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
  							if ( hole_unassigned ) {

  								hole_unassigned = false;
  								betterShapeHoles[ s2Idx ].push( ho );

  							} else {

  								ambiguous = true;

  							}

  						}

  					}
  					if ( hole_unassigned ) {

  						betterShapeHoles[ sIdx ].push( ho );

  					}

  				}

  			}
  			// console.log("ambiguous: ", ambiguous);
  			if ( toChange.length > 0 ) {

  				// console.log("to change: ", toChange);
  				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

  			}

  		}

  		var tmpHoles;

  		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

  			tmpShape = newShapes[ i ].s;
  			shapes.push( tmpShape );
  			tmpHoles = newShapeHoles[ i ];

  			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

  				tmpShape.holes.push( tmpHoles[ j ].h );

  			}

  		}

  		//console.log("shape", shapes);

  		return shapes;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author mrdoob / http://mrdoob.com/
   */


  function Font$1( data ) {

  	this.type = 'Font';

  	this.data = data;

  }

  Object.assign( Font$1.prototype, {

  	isFont: true,

  	generateShapes: function ( text, size ) {

  		if ( size === undefined ) size = 100;

  		var shapes = [];
  		var paths = createPaths( text, size, this.data );

  		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

  			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

  		}

  		return shapes;

  	}

  } );

  function createPaths( text, size, data ) {

  	var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988
  	var scale = size / data.resolution;
  	var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

  	var paths = [];

  	var offsetX = 0, offsetY = 0;

  	for ( var i = 0; i < chars.length; i ++ ) {

  		var char = chars[ i ];

  		if ( char === '\n' ) {

  			offsetX = 0;
  			offsetY -= line_height;

  		} else {

  			var ret = createPath( char, scale, offsetX, offsetY, data );
  			offsetX += ret.offsetX;
  			paths.push( ret.path );

  		}

  	}

  	return paths;

  }

  function createPath( char, scale, offsetX, offsetY, data ) {

  	var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];

  	if ( ! glyph ) return;

  	var path = new ShapePath();

  	var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

  	if ( glyph.o ) {

  		var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

  		for ( var i = 0, l = outline.length; i < l; ) {

  			var action = outline[ i ++ ];

  			switch ( action ) {

  				case 'm': // moveTo

  					x = outline[ i ++ ] * scale + offsetX;
  					y = outline[ i ++ ] * scale + offsetY;

  					path.moveTo( x, y );

  					break;

  				case 'l': // lineTo

  					x = outline[ i ++ ] * scale + offsetX;
  					y = outline[ i ++ ] * scale + offsetY;

  					path.lineTo( x, y );

  					break;

  				case 'q': // quadraticCurveTo

  					cpx = outline[ i ++ ] * scale + offsetX;
  					cpy = outline[ i ++ ] * scale + offsetY;
  					cpx1 = outline[ i ++ ] * scale + offsetX;
  					cpy1 = outline[ i ++ ] * scale + offsetY;

  					path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

  					break;

  				case 'b': // bezierCurveTo

  					cpx = outline[ i ++ ] * scale + offsetX;
  					cpy = outline[ i ++ ] * scale + offsetY;
  					cpx1 = outline[ i ++ ] * scale + offsetX;
  					cpy1 = outline[ i ++ ] * scale + offsetY;
  					cpx2 = outline[ i ++ ] * scale + offsetX;
  					cpy2 = outline[ i ++ ] * scale + offsetY;

  					path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

  					break;

  			}

  		}

  	}

  	return { offsetX: glyph.ha * scale, path: path };

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function FontLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  }

  Object.assign( FontLoader.prototype, {

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( this.manager );
  		loader.setPath( this.path );
  		loader.load( url, function ( text ) {

  			var json;

  			try {

  				json = JSON.parse( text );

  			} catch ( e ) {

  				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
  				json = JSON.parse( text.substring( 65, text.length - 2 ) );

  			}

  			var font = scope.parse( json );

  			if ( onLoad ) onLoad( font );

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		return new Font$1( json );

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function Loader() {}

  Loader.Handlers = {

  	handlers: [],

  	add: function ( regex, loader ) {

  		this.handlers.push( regex, loader );

  	},

  	get: function ( file ) {

  		var handlers = this.handlers;

  		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

  			var regex = handlers[ i ];
  			var loader = handlers[ i + 1 ];

  			if ( regex.test( file ) ) {

  				return loader;

  			}

  		}

  		return null;

  	}

  };

  Object.assign( Loader.prototype, {

  	crossOrigin: 'anonymous',

  	onLoadStart: function () {},

  	onLoadProgress: function () {},

  	onLoadComplete: function () {},

  	initMaterials: function ( materials, texturePath, crossOrigin ) {

  		var array = [];

  		for ( var i = 0; i < materials.length; ++ i ) {

  			array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

  		}

  		return array;

  	},

  	createMaterial: ( function () {

  		var BlendingMode = {
  			NoBlending: NoBlending,
  			NormalBlending: NormalBlending,
  			AdditiveBlending: AdditiveBlending,
  			SubtractiveBlending: SubtractiveBlending,
  			MultiplyBlending: MultiplyBlending,
  			CustomBlending: CustomBlending
  		};

  		var color = new Color();
  		var textureLoader = new TextureLoader();
  		var materialLoader = new MaterialLoader();

  		return function createMaterial( m, texturePath, crossOrigin ) {

  			// convert from old material format

  			var textures = {};

  			function loadTexture( path, repeat, offset, wrap, anisotropy ) {

  				var fullPath = texturePath + path;
  				var loader = Loader.Handlers.get( fullPath );

  				var texture;

  				if ( loader !== null ) {

  					texture = loader.load( fullPath );

  				} else {

  					textureLoader.setCrossOrigin( crossOrigin );
  					texture = textureLoader.load( fullPath );

  				}

  				if ( repeat !== undefined ) {

  					texture.repeat.fromArray( repeat );

  					if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
  					if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

  				}

  				if ( offset !== undefined ) {

  					texture.offset.fromArray( offset );

  				}

  				if ( wrap !== undefined ) {

  					if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
  					if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

  					if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
  					if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

  				}

  				if ( anisotropy !== undefined ) {

  					texture.anisotropy = anisotropy;

  				}

  				var uuid = _Math.generateUUID();

  				textures[ uuid ] = texture;

  				return uuid;

  			}

  			//

  			var json = {
  				uuid: _Math.generateUUID(),
  				type: 'MeshLambertMaterial'
  			};

  			for ( var name in m ) {

  				var value = m[ name ];

  				switch ( name ) {

  					case 'DbgColor':
  					case 'DbgIndex':
  					case 'opticalDensity':
  					case 'illumination':
  						break;
  					case 'DbgName':
  						json.name = value;
  						break;
  					case 'blending':
  						json.blending = BlendingMode[ value ];
  						break;
  					case 'colorAmbient':
  					case 'mapAmbient':
  						console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
  						break;
  					case 'colorDiffuse':
  						json.color = color.fromArray( value ).getHex();
  						break;
  					case 'colorSpecular':
  						json.specular = color.fromArray( value ).getHex();
  						break;
  					case 'colorEmissive':
  						json.emissive = color.fromArray( value ).getHex();
  						break;
  					case 'specularCoef':
  						json.shininess = value;
  						break;
  					case 'shading':
  						if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
  						if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
  						if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
  						break;
  					case 'mapDiffuse':
  						json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
  						break;
  					case 'mapDiffuseRepeat':
  					case 'mapDiffuseOffset':
  					case 'mapDiffuseWrap':
  					case 'mapDiffuseAnisotropy':
  						break;
  					case 'mapEmissive':
  						json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
  						break;
  					case 'mapEmissiveRepeat':
  					case 'mapEmissiveOffset':
  					case 'mapEmissiveWrap':
  					case 'mapEmissiveAnisotropy':
  						break;
  					case 'mapLight':
  						json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
  						break;
  					case 'mapLightRepeat':
  					case 'mapLightOffset':
  					case 'mapLightWrap':
  					case 'mapLightAnisotropy':
  						break;
  					case 'mapAO':
  						json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
  						break;
  					case 'mapAORepeat':
  					case 'mapAOOffset':
  					case 'mapAOWrap':
  					case 'mapAOAnisotropy':
  						break;
  					case 'mapBump':
  						json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
  						break;
  					case 'mapBumpScale':
  						json.bumpScale = value;
  						break;
  					case 'mapBumpRepeat':
  					case 'mapBumpOffset':
  					case 'mapBumpWrap':
  					case 'mapBumpAnisotropy':
  						break;
  					case 'mapNormal':
  						json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
  						break;
  					case 'mapNormalFactor':
  						json.normalScale = value;
  						break;
  					case 'mapNormalRepeat':
  					case 'mapNormalOffset':
  					case 'mapNormalWrap':
  					case 'mapNormalAnisotropy':
  						break;
  					case 'mapSpecular':
  						json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
  						break;
  					case 'mapSpecularRepeat':
  					case 'mapSpecularOffset':
  					case 'mapSpecularWrap':
  					case 'mapSpecularAnisotropy':
  						break;
  					case 'mapMetalness':
  						json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
  						break;
  					case 'mapMetalnessRepeat':
  					case 'mapMetalnessOffset':
  					case 'mapMetalnessWrap':
  					case 'mapMetalnessAnisotropy':
  						break;
  					case 'mapRoughness':
  						json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
  						break;
  					case 'mapRoughnessRepeat':
  					case 'mapRoughnessOffset':
  					case 'mapRoughnessWrap':
  					case 'mapRoughnessAnisotropy':
  						break;
  					case 'mapAlpha':
  						json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
  						break;
  					case 'mapAlphaRepeat':
  					case 'mapAlphaOffset':
  					case 'mapAlphaWrap':
  					case 'mapAlphaAnisotropy':
  						break;
  					case 'flipSided':
  						json.side = BackSide;
  						break;
  					case 'doubleSided':
  						json.side = DoubleSide;
  						break;
  					case 'transparency':
  						console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
  						json.opacity = value;
  						break;
  					case 'depthTest':
  					case 'depthWrite':
  					case 'colorWrite':
  					case 'opacity':
  					case 'reflectivity':
  					case 'transparent':
  					case 'visible':
  					case 'wireframe':
  						json[ name ] = value;
  						break;
  					case 'vertexColors':
  						if ( value === true ) json.vertexColors = VertexColors;
  						if ( value === 'face' ) json.vertexColors = FaceColors;
  						break;
  					default:
  						console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
  						break;

  				}

  			}

  			if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
  			if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

  			if ( json.opacity < 1 ) json.transparent = true;

  			materialLoader.setTextures( textures );

  			return materialLoader.parse( json );

  		};

  	} )()

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var context;

  var AudioContext = {

  	getContext: function () {

  		if ( context === undefined ) {

  			context = new ( window.AudioContext || window.webkitAudioContext )();

  		}

  		return context;

  	},

  	setContext: function ( value ) {

  		context = value;

  	}

  };

  /**
   * @author Reece Aaron Lecrivain / http://reecenotes.com/
   */

  function AudioLoader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  }

  Object.assign( AudioLoader.prototype, {

  	load: function ( url, onLoad, onProgress, onError ) {

  		var loader = new FileLoader( this.manager );
  		loader.setResponseType( 'arraybuffer' );
  		loader.setPath( this.path );
  		loader.load( url, function ( buffer ) {

  			// Create a copy of the buffer. The `decodeAudioData` method
  			// detaches the buffer when complete, preventing reuse.
  			var bufferCopy = buffer.slice( 0 );

  			var context = AudioContext.getContext();
  			context.decodeAudioData( bufferCopy, function ( audioBuffer ) {

  				onLoad( audioBuffer );

  			} );

  		}, onProgress, onError );

  	},

  	setPath: function ( value ) {

  		this.path = value;
  		return this;

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * Primary reference:
   *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
   *
   * Secondary reference:
   *   https://www.ppsloan.org/publications/StupidSH36.pdf
   */

  // 3-band SH defined by 9 coefficients

  function SphericalHarmonics3() {

  	this.coefficients = [];

  	for ( var i = 0; i < 9; i ++ ) {

  		this.coefficients.push( new Vector3() );

  	}

  }

  Object.assign( SphericalHarmonics3.prototype, {

  	isSphericalHarmonics3: true,

  	set: function ( coefficients ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].copy( coefficients[ i ] );

  		}

  		return this;

  	},

  	zero: function () {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].set( 0, 0, 0 );

  		}

  		return this;

  	},

  	// get the radiance in the direction of the normal
  	// target is a Vector3
  	getAt: function ( normal, target ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		var coeff = this.coefficients;

  		// band 0
  		target = coeff[ 0 ] * 0.282095;

  		// band 1
  		target += coeff[ 1 ] * 0.488603 * y;
  		target += coeff[ 2 ] * 0.488603 * z;
  		target += coeff[ 3 ] * 0.488603 * x;

  		// band 2
  		target += coeff[ 4 ] * 1.092548 * ( x * y );
  		target += coeff[ 5 ] * 1.092548 * ( y * z );
  		target += coeff[ 6 ] * 0.315392 * ( 3.0 * z * z - 1.0 );
  		target += coeff[ 7 ] * 1.092548 * ( x * z );
  		target += coeff[ 8 ] * 0.546274 * ( x * x - y * y );

  		return target;

  	},

  	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  	// target is a Vector3
  	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
  	getIrradianceAt: function ( normal, target ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		var coeff = this.coefficients;

  		// band 0
  		target = coeff[ 0 ] * 0.886227; // π * 0.282095

  		// band 1
  		target += coeff[ 1 ] * 2.0 * 0.511664 * y; // ( 2 * π / 3 ) * 0.488603
  		target += coeff[ 2 ] * 2.0 * 0.511664 * z;
  		target += coeff[ 3 ] * 2.0 * 0.511664 * x;

  		// band 2
  		target += coeff[ 4 ] * 2.0 * 0.429043 * x * y; // ( π / 4 ) * 1.092548
  		target += coeff[ 5 ] * 2.0 * 0.429043 * y * z;
  		target += coeff[ 6 ] * ( 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
  		target += coeff[ 7 ] * 2.0 * 0.429043 * x * z;
  		target += coeff[ 8 ] * 0.429043 * ( x * x - y * y ); // ( π / 4 ) * 0.546274

  		return target;

  	},

  	add: function ( sh ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].add( sh.coefficients[ i ] );

  		}

  		return this;

  	},


  	scale: function ( s ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].multiplyScalar( s );

  		}

  		return this;

  	},

  	lerp: function ( sh, alpha ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );

  		}

  		return this;

  	},

  	equals: function ( sh ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {

  				return false;

  			}

  		}

  		return true;

  	},

  	copy: function ( sh ) {

  		return this.set( sh.coefficients );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	fromArray: function ( array ) {

  		var coefficients = this.coefficients;

  		for ( var i = 0; i < 9; i ++ ) {

  			coefficients[ i ].fromArray( array, i * 3 );

  		}

  		return this;

  	},

  	toArray: function () {

  		var array = [];
  		var coefficients = this.coefficients;

  		for ( var i = 0; i < 9; i ++ ) {

  			coefficients[ i ].toArray( array, i * 3 );

  		}

  		return array;

  	}

  } );

  Object.assign( SphericalHarmonics3, {

  	// evaluate the basis functions
  	// shBasis is an Array[ 9 ]
  	getBasisAt: function ( normal, shBasis ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		// band 0
  		shBasis[ 0 ] = 0.282095;

  		// band 1
  		shBasis[ 1 ] = 0.488603 * y;
  		shBasis[ 2 ] = 0.488603 * z;
  		shBasis[ 3 ] = 0.488603 * x;

  		// band 2
  		shBasis[ 4 ] = 1.092548 * x * y;
  		shBasis[ 5 ] = 1.092548 * y * z;
  		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
  		shBasis[ 7 ] = 1.092548 * x * z;
  		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * A LightProbe is a source of indirect-diffuse light
   */

  function LightProbe( sh, intensity ) {

  	Light.call( this, undefined, intensity );

  	this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();

  }

  LightProbe.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: LightProbe,

  	isLightProbe: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.sh.copy( source.sh );
  		this.intensity = source.intensity;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Light.prototype.toJSON.call( this, meta );

  		// data.sh = this.sh.toArray(); // todo

  		return data;

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function HemisphereLightProbe( skyColor, groundColor, intensity ) {

  	LightProbe.call( this, undefined, intensity );

  	var color1 = new Color().set( skyColor );
  	var color2 = new Color().set( groundColor );

  	var sky = new Vector3( color1.r, color1.g, color1.b );
  	var ground = new Vector3( color2.r, color2.g, color2.b );

  	// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
  	var c0 = Math.sqrt( Math.PI );
  	var c1 = c0 * Math.sqrt( 0.75 );

  	this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
  	this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );

  }

  HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

  	constructor: HemisphereLightProbe,

  	isHemisphereLightProbe: true,

  	copy: function ( source ) { // modifying colors not currently supported

  		LightProbe.prototype.copy.call( this, source );

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = LightProbe.prototype.toJSON.call( this, meta );

  		// data.sh = this.sh.toArray(); // todo

  		return data;

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function AmbientLightProbe( color, intensity ) {

  	LightProbe.call( this, undefined, intensity );

  	var color1 = new Color().set( color );

  	// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
  	this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );

  }

  AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

  	constructor: AmbientLightProbe,

  	isAmbientLightProbe: true,

  	copy: function ( source ) { // modifying color not currently supported

  		LightProbe.prototype.copy.call( this, source );

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = LightProbe.prototype.toJSON.call( this, meta );

  		// data.sh = this.sh.toArray(); // todo

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function StereoCamera() {

  	this.type = 'StereoCamera';

  	this.aspect = 1;

  	this.eyeSep = 0.064;

  	this.cameraL = new PerspectiveCamera();
  	this.cameraL.layers.enable( 1 );
  	this.cameraL.matrixAutoUpdate = false;

  	this.cameraR = new PerspectiveCamera();
  	this.cameraR.layers.enable( 2 );
  	this.cameraR.matrixAutoUpdate = false;

  }

  Object.assign( StereoCamera.prototype, {

  	update: ( function () {

  		var instance, focus, fov, aspect, near, far, zoom, eyeSep;

  		var eyeRight = new Matrix4();
  		var eyeLeft = new Matrix4();

  		return function update( camera ) {

  			var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
  												aspect !== camera.aspect * this.aspect || near !== camera.near ||
  												far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

  			if ( needsUpdate ) {

  				instance = this;
  				focus = camera.focus;
  				fov = camera.fov;
  				aspect = camera.aspect * this.aspect;
  				near = camera.near;
  				far = camera.far;
  				zoom = camera.zoom;

  				// Off-axis stereoscopic effect based on
  				// http://paulbourke.net/stereographics/stereorender/

  				var projectionMatrix = camera.projectionMatrix.clone();
  				eyeSep = this.eyeSep / 2;
  				var eyeSepOnProjection = eyeSep * near / focus;
  				var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
  				var xmin, xmax;

  				// translate xOffset

  				eyeLeft.elements[ 12 ] = - eyeSep;
  				eyeRight.elements[ 12 ] = eyeSep;

  				// for left eye

  				xmin = - ymax * aspect + eyeSepOnProjection;
  				xmax = ymax * aspect + eyeSepOnProjection;

  				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
  				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

  				this.cameraL.projectionMatrix.copy( projectionMatrix );

  				// for right eye

  				xmin = - ymax * aspect - eyeSepOnProjection;
  				xmax = ymax * aspect - eyeSepOnProjection;

  				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
  				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

  				this.cameraR.projectionMatrix.copy( projectionMatrix );

  			}

  			this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
  			this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

  		};

  	} )()

  } );

  /**
   * Camera for rendering cube maps
   *	- renders scene into axis-aligned cube
   *
   * @author alteredq / http://alteredqualia.com/
   */

  var fov = 90, aspect = 1;

  function CubeCamera( near, far, cubeResolution, options ) {

  	Object3D.call( this );

  	this.type = 'CubeCamera';

  	var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPX.up.set( 0, - 1, 0 );
  	cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
  	this.add( cameraPX );

  	var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNX.up.set( 0, - 1, 0 );
  	cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
  	this.add( cameraNX );

  	var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPY.up.set( 0, 0, 1 );
  	cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
  	this.add( cameraPY );

  	var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNY.up.set( 0, 0, - 1 );
  	cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
  	this.add( cameraNY );

  	var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPZ.up.set( 0, - 1, 0 );
  	cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
  	this.add( cameraPZ );

  	var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNZ.up.set( 0, - 1, 0 );
  	cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
  	this.add( cameraNZ );

  	options = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

  	this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
  	this.renderTarget.texture.name = "CubeCamera";

  	this.update = function ( renderer, scene ) {

  		if ( this.parent === null ) this.updateMatrixWorld();

  		var currentRenderTarget = renderer.getRenderTarget();

  		var renderTarget = this.renderTarget;
  		var generateMipmaps = renderTarget.texture.generateMipmaps;

  		renderTarget.texture.generateMipmaps = false;

  		renderer.setRenderTarget( renderTarget, 0 );
  		renderer.render( scene, cameraPX );

  		renderer.setRenderTarget( renderTarget, 1 );
  		renderer.render( scene, cameraNX );

  		renderer.setRenderTarget( renderTarget, 2 );
  		renderer.render( scene, cameraPY );

  		renderer.setRenderTarget( renderTarget, 3 );
  		renderer.render( scene, cameraNY );

  		renderer.setRenderTarget( renderTarget, 4 );
  		renderer.render( scene, cameraPZ );

  		renderTarget.texture.generateMipmaps = generateMipmaps;

  		renderer.setRenderTarget( renderTarget, 5 );
  		renderer.render( scene, cameraNZ );

  		renderer.setRenderTarget( currentRenderTarget );

  	};

  	this.clear = function ( renderer, color, depth, stencil ) {

  		var currentRenderTarget = renderer.getRenderTarget();

  		var renderTarget = this.renderTarget;

  		for ( var i = 0; i < 6; i ++ ) {

  			renderer.setRenderTarget( renderTarget, i );

  			renderer.clear( color, depth, stencil );

  		}

  		renderer.setRenderTarget( currentRenderTarget );

  	};

  }

  CubeCamera.prototype = Object.create( Object3D.prototype );
  CubeCamera.prototype.constructor = CubeCamera;

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function Clock( autoStart ) {

  	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

  	this.startTime = 0;
  	this.oldTime = 0;
  	this.elapsedTime = 0;

  	this.running = false;

  }

  Object.assign( Clock.prototype, {

  	start: function () {

  		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

  		this.oldTime = this.startTime;
  		this.elapsedTime = 0;
  		this.running = true;

  	},

  	stop: function () {

  		this.getElapsedTime();
  		this.running = false;
  		this.autoStart = false;

  	},

  	getElapsedTime: function () {

  		this.getDelta();
  		return this.elapsedTime;

  	},

  	getDelta: function () {

  		var diff = 0;

  		if ( this.autoStart && ! this.running ) {

  			this.start();
  			return 0;

  		}

  		if ( this.running ) {

  			var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

  			diff = ( newTime - this.oldTime ) / 1000;
  			this.oldTime = newTime;

  			this.elapsedTime += diff;

  		}

  		return diff;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function AudioListener() {

  	Object3D.call( this );

  	this.type = 'AudioListener';

  	this.context = AudioContext.getContext();

  	this.gain = this.context.createGain();
  	this.gain.connect( this.context.destination );

  	this.filter = null;

  	this.timeDelta = 0;

  }

  AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: AudioListener,

  	getInput: function () {

  		return this.gain;

  	},

  	removeFilter: function ( ) {

  		if ( this.filter !== null ) {

  			this.gain.disconnect( this.filter );
  			this.filter.disconnect( this.context.destination );
  			this.gain.connect( this.context.destination );
  			this.filter = null;

  		}

  		return this;

  	},

  	getFilter: function () {

  		return this.filter;

  	},

  	setFilter: function ( value ) {

  		if ( this.filter !== null ) {

  			this.gain.disconnect( this.filter );
  			this.filter.disconnect( this.context.destination );

  		} else {

  			this.gain.disconnect( this.context.destination );

  		}

  		this.filter = value;
  		this.gain.connect( this.filter );
  		this.filter.connect( this.context.destination );

  		return this;

  	},

  	getMasterVolume: function () {

  		return this.gain.gain.value;

  	},

  	setMasterVolume: function ( value ) {

  		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

  		return this;

  	},

  	updateMatrixWorld: ( function () {

  		var position = new Vector3();
  		var quaternion = new Quaternion();
  		var scale = new Vector3();

  		var orientation = new Vector3();
  		var clock = new Clock();

  		return function updateMatrixWorld( force ) {

  			Object3D.prototype.updateMatrixWorld.call( this, force );

  			var listener = this.context.listener;
  			var up = this.up;

  			this.timeDelta = clock.getDelta();

  			this.matrixWorld.decompose( position, quaternion, scale );

  			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

  			if ( listener.positionX ) {

  				// code path for Chrome (see #14393)

  				var endTime = this.context.currentTime + this.timeDelta;

  				listener.positionX.linearRampToValueAtTime( position.x, endTime );
  				listener.positionY.linearRampToValueAtTime( position.y, endTime );
  				listener.positionZ.linearRampToValueAtTime( position.z, endTime );
  				listener.forwardX.linearRampToValueAtTime( orientation.x, endTime );
  				listener.forwardY.linearRampToValueAtTime( orientation.y, endTime );
  				listener.forwardZ.linearRampToValueAtTime( orientation.z, endTime );
  				listener.upX.linearRampToValueAtTime( up.x, endTime );
  				listener.upY.linearRampToValueAtTime( up.y, endTime );
  				listener.upZ.linearRampToValueAtTime( up.z, endTime );

  			} else {

  				listener.setPosition( position.x, position.y, position.z );
  				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

  			}

  		};

  	} )()

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Reece Aaron Lecrivain / http://reecenotes.com/
   */

  function Audio( listener ) {

  	Object3D.call( this );

  	this.type = 'Audio';

  	this.listener = listener;
  	this.context = listener.context;

  	this.gain = this.context.createGain();
  	this.gain.connect( listener.getInput() );

  	this.autoplay = false;

  	this.buffer = null;
  	this.detune = 0;
  	this.loop = false;
  	this.startTime = 0;
  	this.offset = 0;
  	this.playbackRate = 1;
  	this.isPlaying = false;
  	this.hasPlaybackControl = true;
  	this.sourceType = 'empty';

  	this.filters = [];

  }

  Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Audio,

  	getOutput: function () {

  		return this.gain;

  	},

  	setNodeSource: function ( audioNode ) {

  		this.hasPlaybackControl = false;
  		this.sourceType = 'audioNode';
  		this.source = audioNode;
  		this.connect();

  		return this;

  	},

  	setMediaElementSource: function ( mediaElement ) {

  		this.hasPlaybackControl = false;
  		this.sourceType = 'mediaNode';
  		this.source = this.context.createMediaElementSource( mediaElement );
  		this.connect();

  		return this;

  	},

  	setBuffer: function ( audioBuffer ) {

  		this.buffer = audioBuffer;
  		this.sourceType = 'buffer';

  		if ( this.autoplay ) this.play();

  		return this;

  	},

  	play: function () {

  		if ( this.isPlaying === true ) {

  			console.warn( 'THREE.Audio: Audio is already playing.' );
  			return;

  		}

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		var source = this.context.createBufferSource();

  		source.buffer = this.buffer;
  		source.loop = this.loop;
  		source.onended = this.onEnded.bind( this );
  		this.startTime = this.context.currentTime;
  		source.start( this.startTime, this.offset );

  		this.isPlaying = true;

  		this.source = source;

  		this.setDetune( this.detune );
  		this.setPlaybackRate( this.playbackRate );

  		return this.connect();

  	},

  	pause: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		if ( this.isPlaying === true ) {

  			this.source.stop();
  			this.source.onended = null;
  			this.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;
  			this.isPlaying = false;

  		}

  		return this;

  	},

  	stop: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this.source.stop();
  		this.source.onended = null;
  		this.offset = 0;
  		this.isPlaying = false;

  		return this;

  	},

  	connect: function () {

  		if ( this.filters.length > 0 ) {

  			this.source.connect( this.filters[ 0 ] );

  			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

  				this.filters[ i - 1 ].connect( this.filters[ i ] );

  			}

  			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

  		} else {

  			this.source.connect( this.getOutput() );

  		}

  		return this;

  	},

  	disconnect: function () {

  		if ( this.filters.length > 0 ) {

  			this.source.disconnect( this.filters[ 0 ] );

  			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

  				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

  			}

  			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

  		} else {

  			this.source.disconnect( this.getOutput() );

  		}

  		return this;

  	},

  	getFilters: function () {

  		return this.filters;

  	},

  	setFilters: function ( value ) {

  		if ( ! value ) value = [];

  		if ( this.isPlaying === true ) {

  			this.disconnect();
  			this.filters = value;
  			this.connect();

  		} else {

  			this.filters = value;

  		}

  		return this;

  	},

  	setDetune: function ( value ) {

  		this.detune = value;

  		if ( this.source.detune === undefined ) return; // only set detune when available

  		if ( this.isPlaying === true ) {

  			this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );

  		}

  		return this;

  	},

  	getDetune: function () {

  		return this.detune;

  	},

  	getFilter: function () {

  		return this.getFilters()[ 0 ];

  	},

  	setFilter: function ( filter ) {

  		return this.setFilters( filter ? [ filter ] : [] );

  	},

  	setPlaybackRate: function ( value ) {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this.playbackRate = value;

  		if ( this.isPlaying === true ) {

  			this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );

  		}

  		return this;

  	},

  	getPlaybackRate: function () {

  		return this.playbackRate;

  	},

  	onEnded: function () {

  		this.isPlaying = false;

  	},

  	getLoop: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return false;

  		}

  		return this.loop;

  	},

  	setLoop: function ( value ) {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this.loop = value;

  		if ( this.isPlaying === true ) {

  			this.source.loop = this.loop;

  		}

  		return this;

  	},

  	getVolume: function () {

  		return this.gain.gain.value;

  	},

  	setVolume: function ( value ) {

  		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function PositionalAudio( listener ) {

  	Audio.call( this, listener );

  	this.panner = this.context.createPanner();
  	this.panner.connect( this.gain );

  }

  PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

  	constructor: PositionalAudio,

  	getOutput: function () {

  		return this.panner;

  	},

  	getRefDistance: function () {

  		return this.panner.refDistance;

  	},

  	setRefDistance: function ( value ) {

  		this.panner.refDistance = value;

  		return this;

  	},

  	getRolloffFactor: function () {

  		return this.panner.rolloffFactor;

  	},

  	setRolloffFactor: function ( value ) {

  		this.panner.rolloffFactor = value;

  		return this;

  	},

  	getDistanceModel: function () {

  		return this.panner.distanceModel;

  	},

  	setDistanceModel: function ( value ) {

  		this.panner.distanceModel = value;

  		return this;

  	},

  	getMaxDistance: function () {

  		return this.panner.maxDistance;

  	},

  	setMaxDistance: function ( value ) {

  		this.panner.maxDistance = value;

  		return this;

  	},

  	setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {

  		this.panner.coneInnerAngle = coneInnerAngle;
  		this.panner.coneOuterAngle = coneOuterAngle;
  		this.panner.coneOuterGain = coneOuterGain;

  		return this;

  	},

  	updateMatrixWorld: ( function () {

  		var position = new Vector3();
  		var quaternion = new Quaternion();
  		var scale = new Vector3();

  		var orientation = new Vector3();

  		return function updateMatrixWorld( force ) {

  			Object3D.prototype.updateMatrixWorld.call( this, force );

  			if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;

  			this.matrixWorld.decompose( position, quaternion, scale );

  			orientation.set( 0, 0, 1 ).applyQuaternion( quaternion );

  			var panner = this.panner;

  			if ( panner.positionX ) {

  				// code path for Chrome and Firefox (see #14393)

  				var endTime = this.context.currentTime + this.listener.timeDelta;

  				panner.positionX.linearRampToValueAtTime( position.x, endTime );
  				panner.positionY.linearRampToValueAtTime( position.y, endTime );
  				panner.positionZ.linearRampToValueAtTime( position.z, endTime );
  				panner.orientationX.linearRampToValueAtTime( orientation.x, endTime );
  				panner.orientationY.linearRampToValueAtTime( orientation.y, endTime );
  				panner.orientationZ.linearRampToValueAtTime( orientation.z, endTime );

  			} else {

  				panner.setPosition( position.x, position.y, position.z );
  				panner.setOrientation( orientation.x, orientation.y, orientation.z );

  			}

  		};

  	} )()


  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function AudioAnalyser( audio, fftSize ) {

  	this.analyser = audio.context.createAnalyser();
  	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

  	this.data = new Uint8Array( this.analyser.frequencyBinCount );

  	audio.getOutput().connect( this.analyser );

  }

  Object.assign( AudioAnalyser.prototype, {

  	getFrequencyData: function () {

  		this.analyser.getByteFrequencyData( this.data );

  		return this.data;

  	},

  	getAverageFrequency: function () {

  		var value = 0, data = this.getFrequencyData();

  		for ( var i = 0; i < data.length; i ++ ) {

  			value += data[ i ];

  		}

  		return value / data.length;

  	}

  } );

  /**
   *
   * Buffered scene graph property that allows weighted accumulation.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function PropertyMixer( binding, typeName, valueSize ) {

  	this.binding = binding;
  	this.valueSize = valueSize;

  	var bufferType = Float64Array,
  		mixFunction;

  	switch ( typeName ) {

  		case 'quaternion':
  			mixFunction = this._slerp;
  			break;

  		case 'string':
  		case 'bool':
  			bufferType = Array;
  			mixFunction = this._select;
  			break;

  		default:
  			mixFunction = this._lerp;

  	}

  	this.buffer = new bufferType( valueSize * 4 );
  	// layout: [ incoming | accu0 | accu1 | orig ]
  	//
  	// interpolators can use .buffer as their .result
  	// the data then goes to 'incoming'
  	//
  	// 'accu0' and 'accu1' are used frame-interleaved for
  	// the cumulative result and are compared to detect
  	// changes
  	//
  	// 'orig' stores the original state of the property

  	this._mixBufferRegion = mixFunction;

  	this.cumulativeWeight = 0;

  	this.useCount = 0;
  	this.referenceCount = 0;

  }

  Object.assign( PropertyMixer.prototype, {

  	// accumulate data in the 'incoming' region into 'accu<i>'
  	accumulate: function ( accuIndex, weight ) {

  		// note: happily accumulating nothing when weight = 0, the caller knows
  		// the weight and shouldn't have made the call in the first place

  		var buffer = this.buffer,
  			stride = this.valueSize,
  			offset = accuIndex * stride + stride,

  			currentWeight = this.cumulativeWeight;

  		if ( currentWeight === 0 ) {

  			// accuN := incoming * weight

  			for ( var i = 0; i !== stride; ++ i ) {

  				buffer[ offset + i ] = buffer[ i ];

  			}

  			currentWeight = weight;

  		} else {

  			// accuN := accuN + incoming * weight

  			currentWeight += weight;
  			var mix = weight / currentWeight;
  			this._mixBufferRegion( buffer, offset, 0, mix, stride );

  		}

  		this.cumulativeWeight = currentWeight;

  	},

  	// apply the state of 'accu<i>' to the binding when accus differ
  	apply: function ( accuIndex ) {

  		var stride = this.valueSize,
  			buffer = this.buffer,
  			offset = accuIndex * stride + stride,

  			weight = this.cumulativeWeight,

  			binding = this.binding;

  		this.cumulativeWeight = 0;

  		if ( weight < 1 ) {

  			// accuN := accuN + original * ( 1 - cumulativeWeight )

  			var originalValueOffset = stride * 3;

  			this._mixBufferRegion(
  				buffer, offset, originalValueOffset, 1 - weight, stride );

  		}

  		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

  			if ( buffer[ i ] !== buffer[ i + stride ] ) {

  				// value has changed -> update scene graph

  				binding.setValue( buffer, offset );
  				break;

  			}

  		}

  	},

  	// remember the state of the bound property and copy it to both accus
  	saveOriginalState: function () {

  		var binding = this.binding;

  		var buffer = this.buffer,
  			stride = this.valueSize,

  			originalValueOffset = stride * 3;

  		binding.getValue( buffer, originalValueOffset );

  		// accu[0..1] := orig -- initially detect changes against the original
  		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

  			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

  		}

  		this.cumulativeWeight = 0;

  	},

  	// apply the state previously taken via 'saveOriginalState' to the binding
  	restoreOriginalState: function () {

  		var originalValueOffset = this.valueSize * 3;
  		this.binding.setValue( this.buffer, originalValueOffset );

  	},


  	// mix functions

  	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

  		if ( t >= 0.5 ) {

  			for ( var i = 0; i !== stride; ++ i ) {

  				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

  			}

  		}

  	},

  	_slerp: function ( buffer, dstOffset, srcOffset, t ) {

  		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

  	},

  	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

  		var s = 1 - t;

  		for ( var i = 0; i !== stride; ++ i ) {

  			var j = dstOffset + i;

  			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

  		}

  	}

  } );

  /**
   *
   * A reference to a real property in the scene graph.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  // Characters [].:/ are reserved for track binding syntax.
  var RESERVED_CHARS_RE = '\\[\\]\\.:\\/';

  function Composite( targetGroup, path, optionalParsedPath ) {

  	var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

  	this._targetGroup = targetGroup;
  	this._bindings = targetGroup.subscribe_( path, parsedPath );

  }

  Object.assign( Composite.prototype, {

  	getValue: function ( array, offset ) {

  		this.bind(); // bind all binding

  		var firstValidIndex = this._targetGroup.nCachedObjects_,
  			binding = this._bindings[ firstValidIndex ];

  		// and only call .getValue on the first
  		if ( binding !== undefined ) binding.getValue( array, offset );

  	},

  	setValue: function ( array, offset ) {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].setValue( array, offset );

  		}

  	},

  	bind: function () {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].bind();

  		}

  	},

  	unbind: function () {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].unbind();

  		}

  	}

  } );


  function PropertyBinding( rootNode, path, parsedPath ) {

  	this.path = path;
  	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

  	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

  	this.rootNode = rootNode;

  }

  Object.assign( PropertyBinding, {

  	Composite: Composite,

  	create: function ( root, path, parsedPath ) {

  		if ( ! ( root && root.isAnimationObjectGroup ) ) {

  			return new PropertyBinding( root, path, parsedPath );

  		} else {

  			return new PropertyBinding.Composite( root, path, parsedPath );

  		}

  	},

  	/**
  	 * Replaces spaces with underscores and removes unsupported characters from
  	 * node names, to ensure compatibility with parseTrackName().
  	 *
  	 * @param {string} name Node name to be sanitized.
  	 * @return {string}
  	 */
  	sanitizeNodeName: ( function () {

  		var reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );

  		return function sanitizeNodeName( name ) {

  			return name.replace( /\s/g, '_' ).replace( reservedRe, '' );

  		};

  	}() ),

  	parseTrackName: function () {

  		// Attempts to allow node names from any language. ES5's `\w` regexp matches
  		// only latin characters, and the unicode \p{L} is not yet supported. So
  		// instead, we exclude reserved characters and match everything else.
  		var wordChar = '[^' + RESERVED_CHARS_RE + ']';
  		var wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

  		// Parent directories, delimited by '/' or ':'. Currently unused, but must
  		// be matched to parse the rest of the track name.
  		var directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', wordChar );

  		// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
  		var nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );

  		// Object on target node, and accessor. May not contain reserved
  		// characters. Accessor may contain any character except closing bracket.
  		var objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', wordChar );

  		// Property and accessor. May not contain reserved characters. Accessor may
  		// contain any non-bracket characters.
  		var propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', wordChar );

  		var trackRe = new RegExp( ''
  			+ '^'
  			+ directoryRe
  			+ nodeRe
  			+ objectRe
  			+ propertyRe
  			+ '$'
  		);

  		var supportedObjectNames = [ 'material', 'materials', 'bones' ];

  		return function parseTrackName( trackName ) {

  			var matches = trackRe.exec( trackName );

  			if ( ! matches ) {

  				throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

  			}

  			var results = {
  				// directoryName: matches[ 1 ], // (tschw) currently unused
  				nodeName: matches[ 2 ],
  				objectName: matches[ 3 ],
  				objectIndex: matches[ 4 ],
  				propertyName: matches[ 5 ], // required
  				propertyIndex: matches[ 6 ]
  			};

  			var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

  			if ( lastDot !== undefined && lastDot !== - 1 ) {

  				var objectName = results.nodeName.substring( lastDot + 1 );

  				// Object names must be checked against a whitelist. Otherwise, there
  				// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
  				// 'bar' could be the objectName, or part of a nodeName (which can
  				// include '.' characters).
  				if ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {

  					results.nodeName = results.nodeName.substring( 0, lastDot );
  					results.objectName = objectName;

  				}

  			}

  			if ( results.propertyName === null || results.propertyName.length === 0 ) {

  				throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

  			}

  			return results;

  		};

  	}(),

  	findNode: function ( root, nodeName ) {

  		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

  			return root;

  		}

  		// search into skeleton bones.
  		if ( root.skeleton ) {

  			var bone = root.skeleton.getBoneByName( nodeName );

  			if ( bone !== undefined ) {

  				return bone;

  			}

  		}

  		// search into node subtree.
  		if ( root.children ) {

  			var searchNodeSubtree = function ( children ) {

  				for ( var i = 0; i < children.length; i ++ ) {

  					var childNode = children[ i ];

  					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

  						return childNode;

  					}

  					var result = searchNodeSubtree( childNode.children );

  					if ( result ) return result;

  				}

  				return null;

  			};

  			var subTreeNode = searchNodeSubtree( root.children );

  			if ( subTreeNode ) {

  				return subTreeNode;

  			}

  		}

  		return null;

  	}

  } );

  Object.assign( PropertyBinding.prototype, { // prototype, continued

  	// these are used to "bind" a nonexistent property
  	_getValue_unavailable: function () {},
  	_setValue_unavailable: function () {},

  	BindingType: {
  		Direct: 0,
  		EntireArray: 1,
  		ArrayElement: 2,
  		HasFromToArray: 3
  	},

  	Versioning: {
  		None: 0,
  		NeedsUpdate: 1,
  		MatrixWorldNeedsUpdate: 2
  	},

  	GetterByBindingType: [

  		function getValue_direct( buffer, offset ) {

  			buffer[ offset ] = this.node[ this.propertyName ];

  		},

  		function getValue_array( buffer, offset ) {

  			var source = this.resolvedProperty;

  			for ( var i = 0, n = source.length; i !== n; ++ i ) {

  				buffer[ offset ++ ] = source[ i ];

  			}

  		},

  		function getValue_arrayElement( buffer, offset ) {

  			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

  		},

  		function getValue_toArray( buffer, offset ) {

  			this.resolvedProperty.toArray( buffer, offset );

  		}

  	],

  	SetterByBindingTypeAndVersioning: [

  		[
  			// Direct

  			function setValue_direct( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];

  			},

  			function setValue_direct_setNeedsUpdate( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// EntireArray

  			function setValue_array( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  			},

  			function setValue_array_setNeedsUpdate( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// ArrayElement

  			function setValue_arrayElement( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

  			},

  			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// HasToFromArray

  			function setValue_fromArray( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );

  			},

  			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		]

  	],

  	getValue: function getValue_unbound( targetArray, offset ) {

  		this.bind();
  		this.getValue( targetArray, offset );

  		// Note: This class uses a State pattern on a per-method basis:
  		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
  		// prototype version of these methods with one that represents
  		// the bound state. When the property is not found, the methods
  		// become no-ops.

  	},

  	setValue: function getValue_unbound( sourceArray, offset ) {

  		this.bind();
  		this.setValue( sourceArray, offset );

  	},

  	// create getter / setter pair for a property in the scene graph
  	bind: function () {

  		var targetObject = this.node,
  			parsedPath = this.parsedPath,

  			objectName = parsedPath.objectName,
  			propertyName = parsedPath.propertyName,
  			propertyIndex = parsedPath.propertyIndex;

  		if ( ! targetObject ) {

  			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

  			this.node = targetObject;

  		}

  		// set fail state so we can just 'return' on error
  		this.getValue = this._getValue_unavailable;
  		this.setValue = this._setValue_unavailable;

  		// ensure there is a value node
  		if ( ! targetObject ) {

  			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
  			return;

  		}

  		if ( objectName ) {

  			var objectIndex = parsedPath.objectIndex;

  			// special cases were we need to reach deeper into the hierarchy to get the face materials....
  			switch ( objectName ) {

  				case 'materials':

  					if ( ! targetObject.material ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
  						return;

  					}

  					if ( ! targetObject.material.materials ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
  						return;

  					}

  					targetObject = targetObject.material.materials;

  					break;

  				case 'bones':

  					if ( ! targetObject.skeleton ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
  						return;

  					}

  					// potential future optimization: skip this if propertyIndex is already an integer
  					// and convert the integer string to a true integer.

  					targetObject = targetObject.skeleton.bones;

  					// support resolving morphTarget names into indices.
  					for ( var i = 0; i < targetObject.length; i ++ ) {

  						if ( targetObject[ i ].name === objectIndex ) {

  							objectIndex = i;
  							break;

  						}

  					}

  					break;

  				default:

  					if ( targetObject[ objectName ] === undefined ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
  						return;

  					}

  					targetObject = targetObject[ objectName ];

  			}


  			if ( objectIndex !== undefined ) {

  				if ( targetObject[ objectIndex ] === undefined ) {

  					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
  					return;

  				}

  				targetObject = targetObject[ objectIndex ];

  			}

  		}

  		// resolve property
  		var nodeProperty = targetObject[ propertyName ];

  		if ( nodeProperty === undefined ) {

  			var nodeName = parsedPath.nodeName;

  			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
  				'.' + propertyName + ' but it wasn\'t found.', targetObject );
  			return;

  		}

  		// determine versioning scheme
  		var versioning = this.Versioning.None;

  		this.targetObject = targetObject;

  		if ( targetObject.needsUpdate !== undefined ) { // material

  			versioning = this.Versioning.NeedsUpdate;

  		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

  			versioning = this.Versioning.MatrixWorldNeedsUpdate;

  		}

  		// determine how the property gets bound
  		var bindingType = this.BindingType.Direct;

  		if ( propertyIndex !== undefined ) {

  			// access a sub element of the property array (only primitives are supported right now)

  			if ( propertyName === "morphTargetInfluences" ) {

  				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

  				// support resolving morphTarget names into indices.
  				if ( ! targetObject.geometry ) {

  					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
  					return;

  				}

  				if ( targetObject.geometry.isBufferGeometry ) {

  					if ( ! targetObject.geometry.morphAttributes ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
  						return;

  					}

  					for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

  						if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

  							propertyIndex = i;
  							break;

  						}

  					}


  				} else {

  					if ( ! targetObject.geometry.morphTargets ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
  						return;

  					}

  					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

  						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

  							propertyIndex = i;
  							break;

  						}

  					}

  				}

  			}

  			bindingType = this.BindingType.ArrayElement;

  			this.resolvedProperty = nodeProperty;
  			this.propertyIndex = propertyIndex;

  		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

  			// must use copy for Object3D.Euler/Quaternion

  			bindingType = this.BindingType.HasFromToArray;

  			this.resolvedProperty = nodeProperty;

  		} else if ( Array.isArray( nodeProperty ) ) {

  			bindingType = this.BindingType.EntireArray;

  			this.resolvedProperty = nodeProperty;

  		} else {

  			this.propertyName = propertyName;

  		}

  		// select getter / setter
  		this.getValue = this.GetterByBindingType[ bindingType ];
  		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

  	},

  	unbind: function () {

  		this.node = null;

  		// back to the prototype version of getValue / setValue
  		// note: avoiding to mutate the shape of 'this' via 'delete'
  		this.getValue = this._getValue_unbound;
  		this.setValue = this._setValue_unbound;

  	}

  } );

  //!\ DECLARE ALIAS AFTER assign prototype !
  Object.assign( PropertyBinding.prototype, {

  	// initial state of these methods that calls 'bind'
  	_getValue_unbound: PropertyBinding.prototype.getValue,
  	_setValue_unbound: PropertyBinding.prototype.setValue,

  } );

  /**
   *
   * A group of objects that receives a shared animation state.
   *
   * Usage:
   *
   *  - Add objects you would otherwise pass as 'root' to the
   *    constructor or the .clipAction method of AnimationMixer.
   *
   *  - Instead pass this object as 'root'.
   *
   *  - You can also add and remove objects later when the mixer
   *    is running.
   *
   * Note:
   *
   *    Objects of this class appear as one object to the mixer,
   *    so cache control of the individual objects must be done
   *    on the group.
   *
   * Limitation:
   *
   *  - The animated properties must be compatible among the
   *    all objects in the group.
   *
   *  - A single property can either be controlled through a
   *    target group or directly, but not both.
   *
   * @author tschw
   */

  function AnimationObjectGroup() {

  	this.uuid = _Math.generateUUID();

  	// cached objects followed by the active ones
  	this._objects = Array.prototype.slice.call( arguments );

  	this.nCachedObjects_ = 0; // threshold
  	// note: read by PropertyBinding.Composite

  	var indices = {};
  	this._indicesByUUID = indices; // for bookkeeping

  	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  		indices[ arguments[ i ].uuid ] = i;

  	}

  	this._paths = []; // inside: string
  	this._parsedPaths = []; // inside: { we don't care, here }
  	this._bindings = []; // inside: Array< PropertyBinding >
  	this._bindingsIndicesByPath = {}; // inside: indices in these arrays

  	var scope = this;

  	this.stats = {

  		objects: {
  			get total() {

  				return scope._objects.length;

  			},
  			get inUse() {

  				return this.total - scope.nCachedObjects_;

  			}
  		},
  		get bindingsPerObject() {

  			return scope._bindings.length;

  		}

  	};

  }

  Object.assign( AnimationObjectGroup.prototype, {

  	isAnimationObjectGroup: true,

  	add: function () {

  		var objects = this._objects,
  			nObjects = objects.length,
  			nCachedObjects = this.nCachedObjects_,
  			indicesByUUID = this._indicesByUUID,
  			paths = this._paths,
  			parsedPaths = this._parsedPaths,
  			bindings = this._bindings,
  			nBindings = bindings.length,
  			knownObject = undefined;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments[ i ],
  				uuid = object.uuid,
  				index = indicesByUUID[ uuid ];

  			if ( index === undefined ) {

  				// unknown object -> add it to the ACTIVE region

  				index = nObjects ++;
  				indicesByUUID[ uuid ] = index;
  				objects.push( object );

  				// accounting is done, now do the same for all bindings

  				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

  				}

  			} else if ( index < nCachedObjects ) {

  				knownObject = objects[ index ];

  				// move existing object to the ACTIVE region

  				var firstActiveIndex = -- nCachedObjects,
  					lastCachedObject = objects[ firstActiveIndex ];

  				indicesByUUID[ lastCachedObject.uuid ] = index;
  				objects[ index ] = lastCachedObject;

  				indicesByUUID[ uuid ] = firstActiveIndex;
  				objects[ firstActiveIndex ] = object;

  				// accounting is done, now do the same for all bindings

  				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  					var bindingsForPath = bindings[ j ],
  						lastCached = bindingsForPath[ firstActiveIndex ],
  						binding = bindingsForPath[ index ];

  					bindingsForPath[ index ] = lastCached;

  					if ( binding === undefined ) {

  						// since we do not bother to create new bindings
  						// for objects that are cached, the binding may
  						// or may not exist

  						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

  					}

  					bindingsForPath[ firstActiveIndex ] = binding;

  				}

  			} else if ( objects[ index ] !== knownObject ) {

  				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
  					'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

  			} // else the object is already where we want it to be

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	remove: function () {

  		var objects = this._objects,
  			nCachedObjects = this.nCachedObjects_,
  			indicesByUUID = this._indicesByUUID,
  			bindings = this._bindings,
  			nBindings = bindings.length;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments[ i ],
  				uuid = object.uuid,
  				index = indicesByUUID[ uuid ];

  			if ( index !== undefined && index >= nCachedObjects ) {

  				// move existing object into the CACHED region

  				var lastCachedIndex = nCachedObjects ++,
  					firstActiveObject = objects[ lastCachedIndex ];

  				indicesByUUID[ firstActiveObject.uuid ] = index;
  				objects[ index ] = firstActiveObject;

  				indicesByUUID[ uuid ] = lastCachedIndex;
  				objects[ lastCachedIndex ] = object;

  				// accounting is done, now do the same for all bindings

  				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  					var bindingsForPath = bindings[ j ],
  						firstActive = bindingsForPath[ lastCachedIndex ],
  						binding = bindingsForPath[ index ];

  					bindingsForPath[ index ] = firstActive;
  					bindingsForPath[ lastCachedIndex ] = binding;

  				}

  			}

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	// remove & forget
  	uncache: function () {

  		var objects = this._objects,
  			nObjects = objects.length,
  			nCachedObjects = this.nCachedObjects_,
  			indicesByUUID = this._indicesByUUID,
  			bindings = this._bindings,
  			nBindings = bindings.length;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments[ i ],
  				uuid = object.uuid,
  				index = indicesByUUID[ uuid ];

  			if ( index !== undefined ) {

  				delete indicesByUUID[ uuid ];

  				if ( index < nCachedObjects ) {

  					// object is cached, shrink the CACHED region

  					var firstActiveIndex = -- nCachedObjects,
  						lastCachedObject = objects[ firstActiveIndex ],
  						lastIndex = -- nObjects,
  						lastObject = objects[ lastIndex ];

  					// last cached object takes this object's place
  					indicesByUUID[ lastCachedObject.uuid ] = index;
  					objects[ index ] = lastCachedObject;

  					// last object goes to the activated slot and pop
  					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
  					objects[ firstActiveIndex ] = lastObject;
  					objects.pop();

  					// accounting is done, now do the same for all bindings

  					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  						var bindingsForPath = bindings[ j ],
  							lastCached = bindingsForPath[ firstActiveIndex ],
  							last = bindingsForPath[ lastIndex ];

  						bindingsForPath[ index ] = lastCached;
  						bindingsForPath[ firstActiveIndex ] = last;
  						bindingsForPath.pop();

  					}

  				} else {

  					// object is active, just swap with the last and pop

  					var lastIndex = -- nObjects,
  						lastObject = objects[ lastIndex ];

  					indicesByUUID[ lastObject.uuid ] = index;
  					objects[ index ] = lastObject;
  					objects.pop();

  					// accounting is done, now do the same for all bindings

  					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  						var bindingsForPath = bindings[ j ];

  						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
  						bindingsForPath.pop();

  					}

  				} // cached or active

  			} // if object is known

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	// Internal interface used by befriended PropertyBinding.Composite:

  	subscribe_: function ( path, parsedPath ) {

  		// returns an array of bindings for the given path that is changed
  		// according to the contained objects in the group

  		var indicesByPath = this._bindingsIndicesByPath,
  			index = indicesByPath[ path ],
  			bindings = this._bindings;

  		if ( index !== undefined ) return bindings[ index ];

  		var paths = this._paths,
  			parsedPaths = this._parsedPaths,
  			objects = this._objects,
  			nObjects = objects.length,
  			nCachedObjects = this.nCachedObjects_,
  			bindingsForPath = new Array( nObjects );

  		index = bindings.length;

  		indicesByPath[ path ] = index;

  		paths.push( path );
  		parsedPaths.push( parsedPath );
  		bindings.push( bindingsForPath );

  		for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

  			var object = objects[ i ];
  			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

  		}

  		return bindingsForPath;

  	},

  	unsubscribe_: function ( path ) {

  		// tells the group to forget about a property path and no longer
  		// update the array previously obtained with 'subscribe_'

  		var indicesByPath = this._bindingsIndicesByPath,
  			index = indicesByPath[ path ];

  		if ( index !== undefined ) {

  			var paths = this._paths,
  				parsedPaths = this._parsedPaths,
  				bindings = this._bindings,
  				lastBindingsIndex = bindings.length - 1,
  				lastBindings = bindings[ lastBindingsIndex ],
  				lastBindingsPath = path[ lastBindingsIndex ];

  			indicesByPath[ lastBindingsPath ] = index;

  			bindings[ index ] = lastBindings;
  			bindings.pop();

  			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
  			parsedPaths.pop();

  			paths[ index ] = paths[ lastBindingsIndex ];
  			paths.pop();

  		}

  	}

  } );

  /**
   *
   * Action provided by AnimationMixer for scheduling clip playback on specific
   * objects.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   *
   */

  function AnimationAction( mixer, clip, localRoot ) {

  	this._mixer = mixer;
  	this._clip = clip;
  	this._localRoot = localRoot || null;

  	var tracks = clip.tracks,
  		nTracks = tracks.length,
  		interpolants = new Array( nTracks );

  	var interpolantSettings = {
  		endingStart: ZeroCurvatureEnding,
  		endingEnd: ZeroCurvatureEnding
  	};

  	for ( var i = 0; i !== nTracks; ++ i ) {

  		var interpolant = tracks[ i ].createInterpolant( null );
  		interpolants[ i ] = interpolant;
  		interpolant.settings = interpolantSettings;

  	}

  	this._interpolantSettings = interpolantSettings;

  	this._interpolants = interpolants; // bound by the mixer

  	// inside: PropertyMixer (managed by the mixer)
  	this._propertyBindings = new Array( nTracks );

  	this._cacheIndex = null; // for the memory manager
  	this._byClipCacheIndex = null; // for the memory manager

  	this._timeScaleInterpolant = null;
  	this._weightInterpolant = null;

  	this.loop = LoopRepeat;
  	this._loopCount = - 1;

  	// global mixer time when the action is to be started
  	// it's set back to 'null' upon start of the action
  	this._startTime = null;

  	// scaled local time of the action
  	// gets clamped or wrapped to 0..clip.duration according to loop
  	this.time = 0;

  	this.timeScale = 1;
  	this._effectiveTimeScale = 1;

  	this.weight = 1;
  	this._effectiveWeight = 1;

  	this.repetitions = Infinity; // no. of repetitions when looping

  	this.paused = false; // true -> zero effective time scale
  	this.enabled = true; // false -> zero effective weight

  	this.clampWhenFinished = false;// keep feeding the last frame?

  	this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
  	this.zeroSlopeAtEnd = true;// clips for start, loop and end

  }

  Object.assign( AnimationAction.prototype, {

  	// State & Scheduling

  	play: function () {

  		this._mixer._activateAction( this );

  		return this;

  	},

  	stop: function () {

  		this._mixer._deactivateAction( this );

  		return this.reset();

  	},

  	reset: function () {

  		this.paused = false;
  		this.enabled = true;

  		this.time = 0; // restart clip
  		this._loopCount = - 1;// forget previous loops
  		this._startTime = null;// forget scheduling

  		return this.stopFading().stopWarping();

  	},

  	isRunning: function () {

  		return this.enabled && ! this.paused && this.timeScale !== 0 &&
  			this._startTime === null && this._mixer._isActiveAction( this );

  	},

  	// return true when play has been called
  	isScheduled: function () {

  		return this._mixer._isActiveAction( this );

  	},

  	startAt: function ( time ) {

  		this._startTime = time;

  		return this;

  	},

  	setLoop: function ( mode, repetitions ) {

  		this.loop = mode;
  		this.repetitions = repetitions;

  		return this;

  	},

  	// Weight

  	// set the weight stopping any scheduled fading
  	// although .enabled = false yields an effective weight of zero, this
  	// method does *not* change .enabled, because it would be confusing
  	setEffectiveWeight: function ( weight ) {

  		this.weight = weight;

  		// note: same logic as when updated at runtime
  		this._effectiveWeight = this.enabled ? weight : 0;

  		return this.stopFading();

  	},

  	// return the weight considering fading and .enabled
  	getEffectiveWeight: function () {

  		return this._effectiveWeight;

  	},

  	fadeIn: function ( duration ) {

  		return this._scheduleFading( duration, 0, 1 );

  	},

  	fadeOut: function ( duration ) {

  		return this._scheduleFading( duration, 1, 0 );

  	},

  	crossFadeFrom: function ( fadeOutAction, duration, warp ) {

  		fadeOutAction.fadeOut( duration );
  		this.fadeIn( duration );

  		if ( warp ) {

  			var fadeInDuration = this._clip.duration,
  				fadeOutDuration = fadeOutAction._clip.duration,

  				startEndRatio = fadeOutDuration / fadeInDuration,
  				endStartRatio = fadeInDuration / fadeOutDuration;

  			fadeOutAction.warp( 1.0, startEndRatio, duration );
  			this.warp( endStartRatio, 1.0, duration );

  		}

  		return this;

  	},

  	crossFadeTo: function ( fadeInAction, duration, warp ) {

  		return fadeInAction.crossFadeFrom( this, duration, warp );

  	},

  	stopFading: function () {

  		var weightInterpolant = this._weightInterpolant;

  		if ( weightInterpolant !== null ) {

  			this._weightInterpolant = null;
  			this._mixer._takeBackControlInterpolant( weightInterpolant );

  		}

  		return this;

  	},

  	// Time Scale Control

  	// set the time scale stopping any scheduled warping
  	// although .paused = true yields an effective time scale of zero, this
  	// method does *not* change .paused, because it would be confusing
  	setEffectiveTimeScale: function ( timeScale ) {

  		this.timeScale = timeScale;
  		this._effectiveTimeScale = this.paused ? 0 : timeScale;

  		return this.stopWarping();

  	},

  	// return the time scale considering warping and .paused
  	getEffectiveTimeScale: function () {

  		return this._effectiveTimeScale;

  	},

  	setDuration: function ( duration ) {

  		this.timeScale = this._clip.duration / duration;

  		return this.stopWarping();

  	},

  	syncWith: function ( action ) {

  		this.time = action.time;
  		this.timeScale = action.timeScale;

  		return this.stopWarping();

  	},

  	halt: function ( duration ) {

  		return this.warp( this._effectiveTimeScale, 0, duration );

  	},

  	warp: function ( startTimeScale, endTimeScale, duration ) {

  		var mixer = this._mixer, now = mixer.time,
  			interpolant = this._timeScaleInterpolant,

  			timeScale = this.timeScale;

  		if ( interpolant === null ) {

  			interpolant = mixer._lendControlInterpolant();
  			this._timeScaleInterpolant = interpolant;

  		}

  		var times = interpolant.parameterPositions,
  			values = interpolant.sampleValues;

  		times[ 0 ] = now;
  		times[ 1 ] = now + duration;

  		values[ 0 ] = startTimeScale / timeScale;
  		values[ 1 ] = endTimeScale / timeScale;

  		return this;

  	},

  	stopWarping: function () {

  		var timeScaleInterpolant = this._timeScaleInterpolant;

  		if ( timeScaleInterpolant !== null ) {

  			this._timeScaleInterpolant = null;
  			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

  		}

  		return this;

  	},

  	// Object Accessors

  	getMixer: function () {

  		return this._mixer;

  	},

  	getClip: function () {

  		return this._clip;

  	},

  	getRoot: function () {

  		return this._localRoot || this._mixer._root;

  	},

  	// Interna

  	_update: function ( time, deltaTime, timeDirection, accuIndex ) {

  		// called by the mixer

  		if ( ! this.enabled ) {

  			// call ._updateWeight() to update ._effectiveWeight

  			this._updateWeight( time );
  			return;

  		}

  		var startTime = this._startTime;

  		if ( startTime !== null ) {

  			// check for scheduled start of action

  			var timeRunning = ( time - startTime ) * timeDirection;
  			if ( timeRunning < 0 || timeDirection === 0 ) {

  				return; // yet to come / don't decide when delta = 0

  			}

  			// start

  			this._startTime = null; // unschedule
  			deltaTime = timeDirection * timeRunning;

  		}

  		// apply time scale and advance time

  		deltaTime *= this._updateTimeScale( time );
  		var clipTime = this._updateTime( deltaTime );

  		// note: _updateTime may disable the action resulting in
  		// an effective weight of 0

  		var weight = this._updateWeight( time );

  		if ( weight > 0 ) {

  			var interpolants = this._interpolants;
  			var propertyMixers = this._propertyBindings;

  			for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

  				interpolants[ j ].evaluate( clipTime );
  				propertyMixers[ j ].accumulate( accuIndex, weight );

  			}

  		}

  	},

  	_updateWeight: function ( time ) {

  		var weight = 0;

  		if ( this.enabled ) {

  			weight = this.weight;
  			var interpolant = this._weightInterpolant;

  			if ( interpolant !== null ) {

  				var interpolantValue = interpolant.evaluate( time )[ 0 ];

  				weight *= interpolantValue;

  				if ( time > interpolant.parameterPositions[ 1 ] ) {

  					this.stopFading();

  					if ( interpolantValue === 0 ) {

  						// faded out, disable
  						this.enabled = false;

  					}

  				}

  			}

  		}

  		this._effectiveWeight = weight;
  		return weight;

  	},

  	_updateTimeScale: function ( time ) {

  		var timeScale = 0;

  		if ( ! this.paused ) {

  			timeScale = this.timeScale;

  			var interpolant = this._timeScaleInterpolant;

  			if ( interpolant !== null ) {

  				var interpolantValue = interpolant.evaluate( time )[ 0 ];

  				timeScale *= interpolantValue;

  				if ( time > interpolant.parameterPositions[ 1 ] ) {

  					this.stopWarping();

  					if ( timeScale === 0 ) {

  						// motion has halted, pause
  						this.paused = true;

  					} else {

  						// warp done - apply final time scale
  						this.timeScale = timeScale;

  					}

  				}

  			}

  		}

  		this._effectiveTimeScale = timeScale;
  		return timeScale;

  	},

  	_updateTime: function ( deltaTime ) {

  		var time = this.time + deltaTime;
  		var duration = this._clip.duration;
  		var loop = this.loop;
  		var loopCount = this._loopCount;

  		var pingPong = ( loop === LoopPingPong );

  		if ( deltaTime === 0 ) {

  			if ( loopCount === - 1 ) return time;

  			return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;

  		}

  		if ( loop === LoopOnce ) {

  			if ( loopCount === - 1 ) {

  				// just started

  				this._loopCount = 0;
  				this._setEndings( true, true, false );

  			}

  			handle_stop: {

  				if ( time >= duration ) {

  					time = duration;

  				} else if ( time < 0 ) {

  					time = 0;

  				} else break handle_stop;

  				if ( this.clampWhenFinished ) this.paused = true;
  				else this.enabled = false;

  				this._mixer.dispatchEvent( {
  					type: 'finished', action: this,
  					direction: deltaTime < 0 ? - 1 : 1
  				} );

  			}

  		} else { // repetitive Repeat or PingPong

  			if ( loopCount === - 1 ) {

  				// just started

  				if ( deltaTime >= 0 ) {

  					loopCount = 0;

  					this._setEndings( true, this.repetitions === 0, pingPong );

  				} else {

  					// when looping in reverse direction, the initial
  					// transition through zero counts as a repetition,
  					// so leave loopCount at -1

  					this._setEndings( this.repetitions === 0, true, pingPong );

  				}

  			}

  			if ( time >= duration || time < 0 ) {

  				// wrap around

  				var loopDelta = Math.floor( time / duration ); // signed
  				time -= duration * loopDelta;

  				loopCount += Math.abs( loopDelta );

  				var pending = this.repetitions - loopCount;

  				if ( pending <= 0 ) {

  					// have to stop (switch state, clamp time, fire event)

  					if ( this.clampWhenFinished ) this.paused = true;
  					else this.enabled = false;

  					time = deltaTime > 0 ? duration : 0;

  					this._mixer.dispatchEvent( {
  						type: 'finished', action: this,
  						direction: deltaTime > 0 ? 1 : - 1
  					} );

  				} else {

  					// keep running

  					if ( pending === 1 ) {

  						// entering the last round

  						var atStart = deltaTime < 0;
  						this._setEndings( atStart, ! atStart, pingPong );

  					} else {

  						this._setEndings( false, false, pingPong );

  					}

  					this._loopCount = loopCount;

  					this._mixer.dispatchEvent( {
  						type: 'loop', action: this, loopDelta: loopDelta
  					} );

  				}

  			}

  			if ( pingPong && ( loopCount & 1 ) === 1 ) {

  				// invert time for the "pong round"

  				this.time = time;
  				return duration - time;

  			}

  		}

  		this.time = time;
  		return time;

  	},

  	_setEndings: function ( atStart, atEnd, pingPong ) {

  		var settings = this._interpolantSettings;

  		if ( pingPong ) {

  			settings.endingStart = ZeroSlopeEnding;
  			settings.endingEnd = ZeroSlopeEnding;

  		} else {

  			// assuming for LoopOnce atStart == atEnd == true

  			if ( atStart ) {

  				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

  			} else {

  				settings.endingStart = WrapAroundEnding;

  			}

  			if ( atEnd ) {

  				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

  			} else {

  				settings.endingEnd 	 = WrapAroundEnding;

  			}

  		}

  	},

  	_scheduleFading: function ( duration, weightNow, weightThen ) {

  		var mixer = this._mixer, now = mixer.time,
  			interpolant = this._weightInterpolant;

  		if ( interpolant === null ) {

  			interpolant = mixer._lendControlInterpolant();
  			this._weightInterpolant = interpolant;

  		}

  		var times = interpolant.parameterPositions,
  			values = interpolant.sampleValues;

  		times[ 0 ] = now;
  		values[ 0 ] = weightNow;
  		times[ 1 ] = now + duration;
  		values[ 1 ] = weightThen;

  		return this;

  	}

  } );

  /**
   *
   * Player for AnimationClips.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function AnimationMixer( root ) {

  	this._root = root;
  	this._initMemoryManager();
  	this._accuIndex = 0;

  	this.time = 0;

  	this.timeScale = 1.0;

  }

  AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: AnimationMixer,

  	_bindAction: function ( action, prototypeAction ) {

  		var root = action._localRoot || this._root,
  			tracks = action._clip.tracks,
  			nTracks = tracks.length,
  			bindings = action._propertyBindings,
  			interpolants = action._interpolants,
  			rootUuid = root.uuid,
  			bindingsByRoot = this._bindingsByRootAndName,
  			bindingsByName = bindingsByRoot[ rootUuid ];

  		if ( bindingsByName === undefined ) {

  			bindingsByName = {};
  			bindingsByRoot[ rootUuid ] = bindingsByName;

  		}

  		for ( var i = 0; i !== nTracks; ++ i ) {

  			var track = tracks[ i ],
  				trackName = track.name,
  				binding = bindingsByName[ trackName ];

  			if ( binding !== undefined ) {

  				bindings[ i ] = binding;

  			} else {

  				binding = bindings[ i ];

  				if ( binding !== undefined ) {

  					// existing binding, make sure the cache knows

  					if ( binding._cacheIndex === null ) {

  						++ binding.referenceCount;
  						this._addInactiveBinding( binding, rootUuid, trackName );

  					}

  					continue;

  				}

  				var path = prototypeAction && prototypeAction.
  					_propertyBindings[ i ].binding.parsedPath;

  				binding = new PropertyMixer(
  					PropertyBinding.create( root, trackName, path ),
  					track.ValueTypeName, track.getValueSize() );

  				++ binding.referenceCount;
  				this._addInactiveBinding( binding, rootUuid, trackName );

  				bindings[ i ] = binding;

  			}

  			interpolants[ i ].resultBuffer = binding.buffer;

  		}

  	},

  	_activateAction: function ( action ) {

  		if ( ! this._isActiveAction( action ) ) {

  			if ( action._cacheIndex === null ) {

  				// this action has been forgotten by the cache, but the user
  				// appears to be still using it -> rebind

  				var rootUuid = ( action._localRoot || this._root ).uuid,
  					clipUuid = action._clip.uuid,
  					actionsForClip = this._actionsByClip[ clipUuid ];

  				this._bindAction( action,
  					actionsForClip && actionsForClip.knownActions[ 0 ] );

  				this._addInactiveAction( action, clipUuid, rootUuid );

  			}

  			var bindings = action._propertyBindings;

  			// increment reference counts / sort out state
  			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  				var binding = bindings[ i ];

  				if ( binding.useCount ++ === 0 ) {

  					this._lendBinding( binding );
  					binding.saveOriginalState();

  				}

  			}

  			this._lendAction( action );

  		}

  	},

  	_deactivateAction: function ( action ) {

  		if ( this._isActiveAction( action ) ) {

  			var bindings = action._propertyBindings;

  			// decrement reference counts / sort out state
  			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  				var binding = bindings[ i ];

  				if ( -- binding.useCount === 0 ) {

  					binding.restoreOriginalState();
  					this._takeBackBinding( binding );

  				}

  			}

  			this._takeBackAction( action );

  		}

  	},

  	// Memory manager

  	_initMemoryManager: function () {

  		this._actions = []; // 'nActiveActions' followed by inactive ones
  		this._nActiveActions = 0;

  		this._actionsByClip = {};
  		// inside:
  		// {
  		// 	knownActions: Array< AnimationAction > - used as prototypes
  		// 	actionByRoot: AnimationAction - lookup
  		// }


  		this._bindings = []; // 'nActiveBindings' followed by inactive ones
  		this._nActiveBindings = 0;

  		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


  		this._controlInterpolants = []; // same game as above
  		this._nActiveControlInterpolants = 0;

  		var scope = this;

  		this.stats = {

  			actions: {
  				get total() {

  					return scope._actions.length;

  				},
  				get inUse() {

  					return scope._nActiveActions;

  				}
  			},
  			bindings: {
  				get total() {

  					return scope._bindings.length;

  				},
  				get inUse() {

  					return scope._nActiveBindings;

  				}
  			},
  			controlInterpolants: {
  				get total() {

  					return scope._controlInterpolants.length;

  				},
  				get inUse() {

  					return scope._nActiveControlInterpolants;

  				}
  			}

  		};

  	},

  	// Memory management for AnimationAction objects

  	_isActiveAction: function ( action ) {

  		var index = action._cacheIndex;
  		return index !== null && index < this._nActiveActions;

  	},

  	_addInactiveAction: function ( action, clipUuid, rootUuid ) {

  		var actions = this._actions,
  			actionsByClip = this._actionsByClip,
  			actionsForClip = actionsByClip[ clipUuid ];

  		if ( actionsForClip === undefined ) {

  			actionsForClip = {

  				knownActions: [ action ],
  				actionByRoot: {}

  			};

  			action._byClipCacheIndex = 0;

  			actionsByClip[ clipUuid ] = actionsForClip;

  		} else {

  			var knownActions = actionsForClip.knownActions;

  			action._byClipCacheIndex = knownActions.length;
  			knownActions.push( action );

  		}

  		action._cacheIndex = actions.length;
  		actions.push( action );

  		actionsForClip.actionByRoot[ rootUuid ] = action;

  	},

  	_removeInactiveAction: function ( action ) {

  		var actions = this._actions,
  			lastInactiveAction = actions[ actions.length - 1 ],
  			cacheIndex = action._cacheIndex;

  		lastInactiveAction._cacheIndex = cacheIndex;
  		actions[ cacheIndex ] = lastInactiveAction;
  		actions.pop();

  		action._cacheIndex = null;


  		var clipUuid = action._clip.uuid,
  			actionsByClip = this._actionsByClip,
  			actionsForClip = actionsByClip[ clipUuid ],
  			knownActionsForClip = actionsForClip.knownActions,

  			lastKnownAction =
  				knownActionsForClip[ knownActionsForClip.length - 1 ],

  			byClipCacheIndex = action._byClipCacheIndex;

  		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
  		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
  		knownActionsForClip.pop();

  		action._byClipCacheIndex = null;


  		var actionByRoot = actionsForClip.actionByRoot,
  			rootUuid = ( action._localRoot || this._root ).uuid;

  		delete actionByRoot[ rootUuid ];

  		if ( knownActionsForClip.length === 0 ) {

  			delete actionsByClip[ clipUuid ];

  		}

  		this._removeInactiveBindingsForAction( action );

  	},

  	_removeInactiveBindingsForAction: function ( action ) {

  		var bindings = action._propertyBindings;
  		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  			var binding = bindings[ i ];

  			if ( -- binding.referenceCount === 0 ) {

  				this._removeInactiveBinding( binding );

  			}

  		}

  	},

  	_lendAction: function ( action ) {

  		// [ active actions |  inactive actions  ]
  		// [  active actions >| inactive actions ]
  		//                 s        a
  		//                  <-swap->
  		//                 a        s

  		var actions = this._actions,
  			prevIndex = action._cacheIndex,

  			lastActiveIndex = this._nActiveActions ++,

  			firstInactiveAction = actions[ lastActiveIndex ];

  		action._cacheIndex = lastActiveIndex;
  		actions[ lastActiveIndex ] = action;

  		firstInactiveAction._cacheIndex = prevIndex;
  		actions[ prevIndex ] = firstInactiveAction;

  	},

  	_takeBackAction: function ( action ) {

  		// [  active actions  | inactive actions ]
  		// [ active actions |< inactive actions  ]
  		//        a        s
  		//         <-swap->
  		//        s        a

  		var actions = this._actions,
  			prevIndex = action._cacheIndex,

  			firstInactiveIndex = -- this._nActiveActions,

  			lastActiveAction = actions[ firstInactiveIndex ];

  		action._cacheIndex = firstInactiveIndex;
  		actions[ firstInactiveIndex ] = action;

  		lastActiveAction._cacheIndex = prevIndex;
  		actions[ prevIndex ] = lastActiveAction;

  	},

  	// Memory management for PropertyMixer objects

  	_addInactiveBinding: function ( binding, rootUuid, trackName ) {

  		var bindingsByRoot = this._bindingsByRootAndName,
  			bindingByName = bindingsByRoot[ rootUuid ],

  			bindings = this._bindings;

  		if ( bindingByName === undefined ) {

  			bindingByName = {};
  			bindingsByRoot[ rootUuid ] = bindingByName;

  		}

  		bindingByName[ trackName ] = binding;

  		binding._cacheIndex = bindings.length;
  		bindings.push( binding );

  	},

  	_removeInactiveBinding: function ( binding ) {

  		var bindings = this._bindings,
  			propBinding = binding.binding,
  			rootUuid = propBinding.rootNode.uuid,
  			trackName = propBinding.path,
  			bindingsByRoot = this._bindingsByRootAndName,
  			bindingByName = bindingsByRoot[ rootUuid ],

  			lastInactiveBinding = bindings[ bindings.length - 1 ],
  			cacheIndex = binding._cacheIndex;

  		lastInactiveBinding._cacheIndex = cacheIndex;
  		bindings[ cacheIndex ] = lastInactiveBinding;
  		bindings.pop();

  		delete bindingByName[ trackName ];

  		remove_empty_map: {

  			for ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars

  			delete bindingsByRoot[ rootUuid ];

  		}

  	},

  	_lendBinding: function ( binding ) {

  		var bindings = this._bindings,
  			prevIndex = binding._cacheIndex,

  			lastActiveIndex = this._nActiveBindings ++,

  			firstInactiveBinding = bindings[ lastActiveIndex ];

  		binding._cacheIndex = lastActiveIndex;
  		bindings[ lastActiveIndex ] = binding;

  		firstInactiveBinding._cacheIndex = prevIndex;
  		bindings[ prevIndex ] = firstInactiveBinding;

  	},

  	_takeBackBinding: function ( binding ) {

  		var bindings = this._bindings,
  			prevIndex = binding._cacheIndex,

  			firstInactiveIndex = -- this._nActiveBindings,

  			lastActiveBinding = bindings[ firstInactiveIndex ];

  		binding._cacheIndex = firstInactiveIndex;
  		bindings[ firstInactiveIndex ] = binding;

  		lastActiveBinding._cacheIndex = prevIndex;
  		bindings[ prevIndex ] = lastActiveBinding;

  	},


  	// Memory management of Interpolants for weight and time scale

  	_lendControlInterpolant: function () {

  		var interpolants = this._controlInterpolants,
  			lastActiveIndex = this._nActiveControlInterpolants ++,
  			interpolant = interpolants[ lastActiveIndex ];

  		if ( interpolant === undefined ) {

  			interpolant = new LinearInterpolant(
  				new Float32Array( 2 ), new Float32Array( 2 ),
  				1, this._controlInterpolantsResultBuffer );

  			interpolant.__cacheIndex = lastActiveIndex;
  			interpolants[ lastActiveIndex ] = interpolant;

  		}

  		return interpolant;

  	},

  	_takeBackControlInterpolant: function ( interpolant ) {

  		var interpolants = this._controlInterpolants,
  			prevIndex = interpolant.__cacheIndex,

  			firstInactiveIndex = -- this._nActiveControlInterpolants,

  			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

  		interpolant.__cacheIndex = firstInactiveIndex;
  		interpolants[ firstInactiveIndex ] = interpolant;

  		lastActiveInterpolant.__cacheIndex = prevIndex;
  		interpolants[ prevIndex ] = lastActiveInterpolant;

  	},

  	_controlInterpolantsResultBuffer: new Float32Array( 1 ),

  	// return an action for a clip optionally using a custom root target
  	// object (this method allocates a lot of dynamic memory in case a
  	// previously unknown clip/root combination is specified)
  	clipAction: function ( clip, optionalRoot ) {

  		var root = optionalRoot || this._root,
  			rootUuid = root.uuid,

  			clipObject = typeof clip === 'string' ?
  				AnimationClip.findByName( root, clip ) : clip,

  			clipUuid = clipObject !== null ? clipObject.uuid : clip,

  			actionsForClip = this._actionsByClip[ clipUuid ],
  			prototypeAction = null;

  		if ( actionsForClip !== undefined ) {

  			var existingAction =
  					actionsForClip.actionByRoot[ rootUuid ];

  			if ( existingAction !== undefined ) {

  				return existingAction;

  			}

  			// we know the clip, so we don't have to parse all
  			// the bindings again but can just copy
  			prototypeAction = actionsForClip.knownActions[ 0 ];

  			// also, take the clip from the prototype action
  			if ( clipObject === null )
  				clipObject = prototypeAction._clip;

  		}

  		// clip must be known when specified via string
  		if ( clipObject === null ) return null;

  		// allocate all resources required to run it
  		var newAction = new AnimationAction( this, clipObject, optionalRoot );

  		this._bindAction( newAction, prototypeAction );

  		// and make the action known to the memory manager
  		this._addInactiveAction( newAction, clipUuid, rootUuid );

  		return newAction;

  	},

  	// get an existing action
  	existingAction: function ( clip, optionalRoot ) {

  		var root = optionalRoot || this._root,
  			rootUuid = root.uuid,

  			clipObject = typeof clip === 'string' ?
  				AnimationClip.findByName( root, clip ) : clip,

  			clipUuid = clipObject ? clipObject.uuid : clip,

  			actionsForClip = this._actionsByClip[ clipUuid ];

  		if ( actionsForClip !== undefined ) {

  			return actionsForClip.actionByRoot[ rootUuid ] || null;

  		}

  		return null;

  	},

  	// deactivates all previously scheduled actions
  	stopAllAction: function () {

  		var actions = this._actions,
  			nActions = this._nActiveActions,
  			bindings = this._bindings,
  			nBindings = this._nActiveBindings;

  		this._nActiveActions = 0;
  		this._nActiveBindings = 0;

  		for ( var i = 0; i !== nActions; ++ i ) {

  			actions[ i ].reset();

  		}

  		for ( var i = 0; i !== nBindings; ++ i ) {

  			bindings[ i ].useCount = 0;

  		}

  		return this;

  	},

  	// advance the time and update apply the animation
  	update: function ( deltaTime ) {

  		deltaTime *= this.timeScale;

  		var actions = this._actions,
  			nActions = this._nActiveActions,

  			time = this.time += deltaTime,
  			timeDirection = Math.sign( deltaTime ),

  			accuIndex = this._accuIndex ^= 1;

  		// run active actions

  		for ( var i = 0; i !== nActions; ++ i ) {

  			var action = actions[ i ];

  			action._update( time, deltaTime, timeDirection, accuIndex );

  		}

  		// update scene graph

  		var bindings = this._bindings,
  			nBindings = this._nActiveBindings;

  		for ( var i = 0; i !== nBindings; ++ i ) {

  			bindings[ i ].apply( accuIndex );

  		}

  		return this;

  	},

  	// return this mixer's root target object
  	getRoot: function () {

  		return this._root;

  	},

  	// free all resources specific to a particular clip
  	uncacheClip: function ( clip ) {

  		var actions = this._actions,
  			clipUuid = clip.uuid,
  			actionsByClip = this._actionsByClip,
  			actionsForClip = actionsByClip[ clipUuid ];

  		if ( actionsForClip !== undefined ) {

  			// note: just calling _removeInactiveAction would mess up the
  			// iteration state and also require updating the state we can
  			// just throw away

  			var actionsToRemove = actionsForClip.knownActions;

  			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

  				var action = actionsToRemove[ i ];

  				this._deactivateAction( action );

  				var cacheIndex = action._cacheIndex,
  					lastInactiveAction = actions[ actions.length - 1 ];

  				action._cacheIndex = null;
  				action._byClipCacheIndex = null;

  				lastInactiveAction._cacheIndex = cacheIndex;
  				actions[ cacheIndex ] = lastInactiveAction;
  				actions.pop();

  				this._removeInactiveBindingsForAction( action );

  			}

  			delete actionsByClip[ clipUuid ];

  		}

  	},

  	// free all resources specific to a particular root target object
  	uncacheRoot: function ( root ) {

  		var rootUuid = root.uuid,
  			actionsByClip = this._actionsByClip;

  		for ( var clipUuid in actionsByClip ) {

  			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
  				action = actionByRoot[ rootUuid ];

  			if ( action !== undefined ) {

  				this._deactivateAction( action );
  				this._removeInactiveAction( action );

  			}

  		}

  		var bindingsByRoot = this._bindingsByRootAndName,
  			bindingByName = bindingsByRoot[ rootUuid ];

  		if ( bindingByName !== undefined ) {

  			for ( var trackName in bindingByName ) {

  				var binding = bindingByName[ trackName ];
  				binding.restoreOriginalState();
  				this._removeInactiveBinding( binding );

  			}

  		}

  	},

  	// remove a targeted clip from the cache
  	uncacheAction: function ( clip, optionalRoot ) {

  		var action = this.existingAction( clip, optionalRoot );

  		if ( action !== null ) {

  			this._deactivateAction( action );
  			this._removeInactiveAction( action );

  		}

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Uniform( value ) {

  	if ( typeof value === 'string' ) {

  		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
  		value = arguments[ 1 ];

  	}

  	this.value = value;

  }

  Uniform.prototype.clone = function () {

  	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

  };

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedBufferGeometry() {

  	BufferGeometry.call( this );

  	this.type = 'InstancedBufferGeometry';
  	this.maxInstancedCount = undefined;

  }

  InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

  	constructor: InstancedBufferGeometry,

  	isInstancedBufferGeometry: true,

  	copy: function ( source ) {

  		BufferGeometry.prototype.copy.call( this, source );

  		this.maxInstancedCount = source.maxInstancedCount;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

  	InterleavedBuffer.call( this, array, stride );

  	this.meshPerAttribute = meshPerAttribute || 1;

  }

  InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

  	constructor: InstancedInterleavedBuffer,

  	isInstancedInterleavedBuffer: true,

  	copy: function ( source ) {

  		InterleavedBuffer.prototype.copy.call( this, source );

  		this.meshPerAttribute = source.meshPerAttribute;

  		return this;

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {

  	if ( typeof ( normalized ) === 'number' ) {

  		meshPerAttribute = normalized;

  		normalized = false;

  		console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );

  	}

  	BufferAttribute.call( this, array, itemSize, normalized );

  	this.meshPerAttribute = meshPerAttribute || 1;

  }

  InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

  	constructor: InstancedBufferAttribute,

  	isInstancedBufferAttribute: true,

  	copy: function ( source ) {

  		BufferAttribute.prototype.copy.call( this, source );

  		this.meshPerAttribute = source.meshPerAttribute;

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author bhouston / http://clara.io/
   * @author stephomi / http://stephaneginier.com/
   */

  function Raycaster( origin, direction, near, far ) {

  	this.ray = new Ray( origin, direction );
  	// direction is assumed to be normalized (for accurate distance calculations)

  	this.near = near || 0;
  	this.far = far || Infinity;

  	this.params = {
  		Mesh: {},
  		Line: {},
  		LOD: {},
  		Points: { threshold: 1 },
  		Sprite: {}
  	};

  	Object.defineProperties( this.params, {
  		PointCloud: {
  			get: function () {

  				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
  				return this.Points;

  			}
  		}
  	} );

  }

  function ascSort( a, b ) {

  	return a.distance - b.distance;

  }

  function intersectObject( object, raycaster, intersects, recursive ) {

  	if ( object.visible === false ) return;

  	object.raycast( raycaster, intersects );

  	if ( recursive === true ) {

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			intersectObject( children[ i ], raycaster, intersects, true );

  		}

  	}

  }

  Object.assign( Raycaster.prototype, {

  	linePrecision: 1,

  	set: function ( origin, direction ) {

  		// direction is assumed to be normalized (for accurate distance calculations)

  		this.ray.set( origin, direction );

  	},

  	setFromCamera: function ( coords, camera ) {

  		if ( ( camera && camera.isPerspectiveCamera ) ) {

  			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
  			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

  		} else if ( ( camera && camera.isOrthographicCamera ) ) {

  			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
  			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

  		} else {

  			console.error( 'THREE.Raycaster: Unsupported camera type.' );

  		}

  	},

  	intersectObject: function ( object, recursive, optionalTarget ) {

  		var intersects = optionalTarget || [];

  		intersectObject( object, this, intersects, recursive );

  		intersects.sort( ascSort );

  		return intersects;

  	},

  	intersectObjects: function ( objects, recursive, optionalTarget ) {

  		var intersects = optionalTarget || [];

  		if ( Array.isArray( objects ) === false ) {

  			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
  			return intersects;

  		}

  		for ( var i = 0, l = objects.length; i < l; i ++ ) {

  			intersectObject( objects[ i ], this, intersects, recursive );

  		}

  		intersects.sort( ascSort );

  		return intersects;

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
   *
   * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
   * The azimuthal angle (theta) is measured from the positive z-axiz.
   */

  function Spherical( radius, phi, theta ) {

  	this.radius = ( radius !== undefined ) ? radius : 1.0;
  	this.phi = ( phi !== undefined ) ? phi : 0; // polar angle
  	this.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle

  	return this;

  }

  Object.assign( Spherical.prototype, {

  	set: function ( radius, phi, theta ) {

  		this.radius = radius;
  		this.phi = phi;
  		this.theta = theta;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( other ) {

  		this.radius = other.radius;
  		this.phi = other.phi;
  		this.theta = other.theta;

  		return this;

  	},

  	// restrict phi to be betwee EPS and PI-EPS
  	makeSafe: function () {

  		var EPS = 0.000001;
  		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

  		return this;

  	},

  	setFromVector3: function ( v ) {

  		return this.setFromCartesianCoords( v.x, v.y, v.z );

  	},

  	setFromCartesianCoords: function ( x, y, z ) {

  		this.radius = Math.sqrt( x * x + y * y + z * z );

  		if ( this.radius === 0 ) {

  			this.theta = 0;
  			this.phi = 0;

  		} else {

  			this.theta = Math.atan2( x, z );
  			this.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author Mugen87 / https://github.com/Mugen87
   *
   * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
   *
   */

  function Cylindrical( radius, theta, y ) {

  	this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
  	this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
  	this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

  	return this;

  }

  Object.assign( Cylindrical.prototype, {

  	set: function ( radius, theta, y ) {

  		this.radius = radius;
  		this.theta = theta;
  		this.y = y;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( other ) {

  		this.radius = other.radius;
  		this.theta = other.theta;
  		this.y = other.y;

  		return this;

  	},

  	setFromVector3: function ( v ) {

  		return this.setFromCartesianCoords( v.x, v.y, v.z );

  	},

  	setFromCartesianCoords: function ( x, y, z ) {

  		this.radius = Math.sqrt( x * x + z * z );
  		this.theta = Math.atan2( x, z );
  		this.y = y;

  		return this;

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  function Box2( min, max ) {

  	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
  	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

  }

  Object.assign( Box2.prototype, {

  	set: function ( min, max ) {

  		this.min.copy( min );
  		this.max.copy( max );

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		this.makeEmpty();

  		for ( var i = 0, il = points.length; i < il; i ++ ) {

  			this.expandByPoint( points[ i ] );

  		}

  		return this;

  	},

  	setFromCenterAndSize: function () {

  		var v1 = new Vector2();

  		return function setFromCenterAndSize( center, size ) {

  			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
  			this.min.copy( center ).sub( halfSize );
  			this.max.copy( center ).add( halfSize );

  			return this;

  		};

  	}(),

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( box ) {

  		this.min.copy( box.min );
  		this.max.copy( box.max );

  		return this;

  	},

  	makeEmpty: function () {

  		this.min.x = this.min.y = + Infinity;
  		this.max.x = this.max.y = - Infinity;

  		return this;

  	},

  	isEmpty: function () {

  		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

  		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getCenter() target is now required' );
  			target = new Vector2();

  		}

  		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  	},

  	getSize: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getSize() target is now required' );
  			target = new Vector2();

  		}

  		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

  	},

  	expandByPoint: function ( point ) {

  		this.min.min( point );
  		this.max.max( point );

  		return this;

  	},

  	expandByVector: function ( vector ) {

  		this.min.sub( vector );
  		this.max.add( vector );

  		return this;

  	},

  	expandByScalar: function ( scalar ) {

  		this.min.addScalar( - scalar );
  		this.max.addScalar( scalar );

  		return this;

  	},

  	containsPoint: function ( point ) {

  		return point.x < this.min.x || point.x > this.max.x ||
  			point.y < this.min.y || point.y > this.max.y ? false : true;

  	},

  	containsBox: function ( box ) {

  		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
  			this.min.y <= box.min.y && box.max.y <= this.max.y;

  	},

  	getParameter: function ( point, target ) {

  		// This can potentially have a divide by zero if the box
  		// has a size dimension of 0.

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getParameter() target is now required' );
  			target = new Vector2();

  		}

  		return target.set(
  			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
  			( point.y - this.min.y ) / ( this.max.y - this.min.y )
  		);

  	},

  	intersectsBox: function ( box ) {

  		// using 4 splitting planes to rule out intersections

  		return box.max.x < this.min.x || box.min.x > this.max.x ||
  			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

  	},

  	clampPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .clampPoint() target is now required' );
  			target = new Vector2();

  		}

  		return target.copy( point ).clamp( this.min, this.max );

  	},

  	distanceToPoint: function () {

  		var v1 = new Vector2();

  		return function distanceToPoint( point ) {

  			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
  			return clampedPoint.sub( point ).length();

  		};

  	}(),

  	intersect: function ( box ) {

  		this.min.max( box.min );
  		this.max.min( box.max );

  		return this;

  	},

  	union: function ( box ) {

  		this.min.min( box.min );
  		this.max.max( box.max );

  		return this;

  	},

  	translate: function ( offset ) {

  		this.min.add( offset );
  		this.max.add( offset );

  		return this;

  	},

  	equals: function ( box ) {

  		return box.min.equals( this.min ) && box.max.equals( this.max );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  function Line3( start, end ) {

  	this.start = ( start !== undefined ) ? start : new Vector3();
  	this.end = ( end !== undefined ) ? end : new Vector3();

  }

  Object.assign( Line3.prototype, {

  	set: function ( start, end ) {

  		this.start.copy( start );
  		this.end.copy( end );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( line ) {

  		this.start.copy( line.start );
  		this.end.copy( line.end );

  		return this;

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .getCenter() target is now required' );
  			target = new Vector3();

  		}

  		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

  	},

  	delta: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .delta() target is now required' );
  			target = new Vector3();

  		}

  		return target.subVectors( this.end, this.start );

  	},

  	distanceSq: function () {

  		return this.start.distanceToSquared( this.end );

  	},

  	distance: function () {

  		return this.start.distanceTo( this.end );

  	},

  	at: function ( t, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .at() target is now required' );
  			target = new Vector3();

  		}

  		return this.delta( target ).multiplyScalar( t ).add( this.start );

  	},

  	closestPointToPointParameter: function () {

  		var startP = new Vector3();
  		var startEnd = new Vector3();

  		return function closestPointToPointParameter( point, clampToLine ) {

  			startP.subVectors( point, this.start );
  			startEnd.subVectors( this.end, this.start );

  			var startEnd2 = startEnd.dot( startEnd );
  			var startEnd_startP = startEnd.dot( startP );

  			var t = startEnd_startP / startEnd2;

  			if ( clampToLine ) {

  				t = _Math.clamp( t, 0, 1 );

  			}

  			return t;

  		};

  	}(),

  	closestPointToPoint: function ( point, clampToLine, target ) {

  		var t = this.closestPointToPointParameter( point, clampToLine );

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
  			target = new Vector3();

  		}

  		return this.delta( target ).multiplyScalar( t ).add( this.start );

  	},

  	applyMatrix4: function ( matrix ) {

  		this.start.applyMatrix4( matrix );
  		this.end.applyMatrix4( matrix );

  		return this;

  	},

  	equals: function ( line ) {

  		return line.start.equals( this.start ) && line.end.equals( this.end );

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function ImmediateRenderObject( material ) {

  	Object3D.call( this );

  	this.material = material;
  	this.render = function ( /* renderCallback */ ) {};

  }

  ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
  ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

  ImmediateRenderObject.prototype.isImmediateRenderObject = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  function VertexNormalsHelper( object, size, hex, linewidth ) {

  	this.object = object;

  	this.size = ( size !== undefined ) ? size : 1;

  	var color = ( hex !== undefined ) ? hex : 0xff0000;

  	var width = ( linewidth !== undefined ) ? linewidth : 1;

  	//

  	var nNormals = 0;

  	var objGeometry = this.object.geometry;

  	if ( objGeometry && objGeometry.isGeometry ) {

  		nNormals = objGeometry.faces.length * 3;

  	} else if ( objGeometry && objGeometry.isBufferGeometry ) {

  		nNormals = objGeometry.attributes.normal.count;

  	}

  	//

  	var geometry = new BufferGeometry();

  	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

  	geometry.addAttribute( 'position', positions );

  	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

  	//

  	this.matrixAutoUpdate = false;

  	this.update();

  }

  VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
  VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

  VertexNormalsHelper.prototype.update = ( function () {

  	var v1 = new Vector3();
  	var v2 = new Vector3();
  	var normalMatrix = new Matrix3();

  	return function update() {

  		var keys = [ 'a', 'b', 'c' ];

  		this.object.updateMatrixWorld( true );

  		normalMatrix.getNormalMatrix( this.object.matrixWorld );

  		var matrixWorld = this.object.matrixWorld;

  		var position = this.geometry.attributes.position;

  		//

  		var objGeometry = this.object.geometry;

  		if ( objGeometry && objGeometry.isGeometry ) {

  			var vertices = objGeometry.vertices;

  			var faces = objGeometry.faces;

  			var idx = 0;

  			for ( var i = 0, l = faces.length; i < l; i ++ ) {

  				var face = faces[ i ];

  				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

  					var vertex = vertices[ face[ keys[ j ] ] ];

  					var normal = face.vertexNormals[ j ];

  					v1.copy( vertex ).applyMatrix4( matrixWorld );

  					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

  					position.setXYZ( idx, v1.x, v1.y, v1.z );

  					idx = idx + 1;

  					position.setXYZ( idx, v2.x, v2.y, v2.z );

  					idx = idx + 1;

  				}

  			}

  		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

  			var objPos = objGeometry.attributes.position;

  			var objNorm = objGeometry.attributes.normal;

  			var idx = 0;

  			// for simplicity, ignore index and drawcalls, and render every normal

  			for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

  				v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

  				v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

  				v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

  				position.setXYZ( idx, v1.x, v1.y, v1.z );

  				idx = idx + 1;

  				position.setXYZ( idx, v2.x, v2.y, v2.z );

  				idx = idx + 1;

  			}

  		}

  		position.needsUpdate = true;

  	};

  }() );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  function SpotLightHelper( light, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	var geometry = new BufferGeometry();

  	var positions = [
  		0, 0, 0, 	0, 0, 1,
  		0, 0, 0, 	1, 0, 1,
  		0, 0, 0,	- 1, 0, 1,
  		0, 0, 0, 	0, 1, 1,
  		0, 0, 0, 	0, - 1, 1
  	];

  	for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

  		var p1 = ( i / l ) * Math.PI * 2;
  		var p2 = ( j / l ) * Math.PI * 2;

  		positions.push(
  			Math.cos( p1 ), Math.sin( p1 ), 1,
  			Math.cos( p2 ), Math.sin( p2 ), 1
  		);

  	}

  	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

  	var material = new LineBasicMaterial( { fog: false } );

  	this.cone = new LineSegments( geometry, material );
  	this.add( this.cone );

  	this.update();

  }

  SpotLightHelper.prototype = Object.create( Object3D.prototype );
  SpotLightHelper.prototype.constructor = SpotLightHelper;

  SpotLightHelper.prototype.dispose = function () {

  	this.cone.geometry.dispose();
  	this.cone.material.dispose();

  };

  SpotLightHelper.prototype.update = function () {

  	var vector = new Vector3();

  	return function update() {

  		this.light.updateMatrixWorld();

  		var coneLength = this.light.distance ? this.light.distance : 1000;
  		var coneWidth = coneLength * Math.tan( this.light.angle );

  		this.cone.scale.set( coneWidth, coneWidth, coneLength );

  		vector.setFromMatrixPosition( this.light.target.matrixWorld );

  		this.cone.lookAt( vector );

  		if ( this.color !== undefined ) {

  			this.cone.material.color.set( this.color );

  		} else {

  			this.cone.material.color.copy( this.light.color );

  		}

  	};

  }();

  /**
   * @author Sean Griffin / http://twitter.com/sgrif
   * @author Michael Guerrero / http://realitymeltdown.com
   * @author mrdoob / http://mrdoob.com/
   * @author ikerr / http://verold.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  function getBoneList( object ) {

  	var boneList = [];

  	if ( object && object.isBone ) {

  		boneList.push( object );

  	}

  	for ( var i = 0; i < object.children.length; i ++ ) {

  		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

  	}

  	return boneList;

  }

  function SkeletonHelper( object ) {

  	var bones = getBoneList( object );

  	var geometry = new BufferGeometry();

  	var vertices = [];
  	var colors = [];

  	var color1 = new Color( 0, 0, 1 );
  	var color2 = new Color( 0, 1, 0 );

  	for ( var i = 0; i < bones.length; i ++ ) {

  		var bone = bones[ i ];

  		if ( bone.parent && bone.parent.isBone ) {

  			vertices.push( 0, 0, 0 );
  			vertices.push( 0, 0, 0 );
  			colors.push( color1.r, color1.g, color1.b );
  			colors.push( color2.r, color2.g, color2.b );

  		}

  	}

  	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

  	LineSegments.call( this, geometry, material );

  	this.root = object;
  	this.bones = bones;

  	this.matrix = object.matrixWorld;
  	this.matrixAutoUpdate = false;

  }

  SkeletonHelper.prototype = Object.create( LineSegments.prototype );
  SkeletonHelper.prototype.constructor = SkeletonHelper;

  SkeletonHelper.prototype.updateMatrixWorld = function () {

  	var vector = new Vector3();

  	var boneMatrix = new Matrix4();
  	var matrixWorldInv = new Matrix4();

  	return function updateMatrixWorld( force ) {

  		var bones = this.bones;

  		var geometry = this.geometry;
  		var position = geometry.getAttribute( 'position' );

  		matrixWorldInv.getInverse( this.root.matrixWorld );

  		for ( var i = 0, j = 0; i < bones.length; i ++ ) {

  			var bone = bones[ i ];

  			if ( bone.parent && bone.parent.isBone ) {

  				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
  				vector.setFromMatrixPosition( boneMatrix );
  				position.setXYZ( j, vector.x, vector.y, vector.z );

  				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
  				vector.setFromMatrixPosition( boneMatrix );
  				position.setXYZ( j + 1, vector.x, vector.y, vector.z );

  				j += 2;

  			}

  		}

  		geometry.getAttribute( 'position' ).needsUpdate = true;

  		Object3D.prototype.updateMatrixWorld.call( this, force );

  	};

  }();

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  function PointLightHelper( light, sphereSize, color ) {

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.color = color;

  	var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
  	var material = new MeshBasicMaterial( { wireframe: true, fog: false } );

  	Mesh.call( this, geometry, material );

  	this.matrix = this.light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.update();


  	/*
  	var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
  	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

  	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
  	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

  	var d = light.distance;

  	if ( d === 0.0 ) {

  		this.lightDistance.visible = false;

  	} else {

  		this.lightDistance.scale.set( d, d, d );

  	}

  	this.add( this.lightDistance );
  	*/

  }

  PointLightHelper.prototype = Object.create( Mesh.prototype );
  PointLightHelper.prototype.constructor = PointLightHelper;

  PointLightHelper.prototype.dispose = function () {

  	this.geometry.dispose();
  	this.material.dispose();

  };

  PointLightHelper.prototype.update = function () {

  	if ( this.color !== undefined ) {

  		this.material.color.set( this.color );

  	} else {

  		this.material.color.copy( this.light.color );

  	}

  	/*
  	var d = this.light.distance;

  	if ( d === 0.0 ) {

  		this.lightDistance.visible = false;

  	} else {

  		this.lightDistance.visible = true;
  		this.lightDistance.scale.set( d, d, d );

  	}
  	*/

  };

  /**
   * @author abelnation / http://github.com/abelnation
   * @author Mugen87 / http://github.com/Mugen87
   * @author WestLangley / http://github.com/WestLangley
   *
   *  This helper must be added as a child of the light
   */

  function RectAreaLightHelper( light, color ) {

  	this.type = 'RectAreaLightHelper';

  	this.light = light;

  	this.color = color; // optional hardwired color for the helper

  	var positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];

  	var geometry = new BufferGeometry();
  	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
  	geometry.computeBoundingSphere();

  	var material = new LineBasicMaterial( { fog: false } );

  	Line.call( this, geometry, material );

  	//

  	var positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];

  	var geometry2 = new BufferGeometry();
  	geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
  	geometry2.computeBoundingSphere();

  	this.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );

  	this.update();

  }

  RectAreaLightHelper.prototype = Object.create( Line.prototype );
  RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

  RectAreaLightHelper.prototype.update = function () {

  	this.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );

  	if ( this.color !== undefined ) {

  		this.material.color.set( this.color );
  		this.children[ 0 ].material.color.set( this.color );

  	} else {

  		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

  		// prevent hue shift
  		var c = this.material.color;
  		var max = Math.max( c.r, c.g, c.b );
  		if ( max > 1 ) c.multiplyScalar( 1 / max );

  		this.children[ 0 ].material.color.copy( this.material.color );

  	}

  };

  RectAreaLightHelper.prototype.dispose = function () {

  	this.geometry.dispose();
  	this.material.dispose();
  	this.children[ 0 ].geometry.dispose();
  	this.children[ 0 ].material.dispose();

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  function HemisphereLightHelper( light, size, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	var geometry = new OctahedronBufferGeometry( size );
  	geometry.rotateY( Math.PI * 0.5 );

  	this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
  	if ( this.color === undefined ) this.material.vertexColors = VertexColors;

  	var position = geometry.getAttribute( 'position' );
  	var colors = new Float32Array( position.count * 3 );

  	geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

  	this.add( new Mesh( geometry, this.material ) );

  	this.update();

  }

  HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
  HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

  HemisphereLightHelper.prototype.dispose = function () {

  	this.children[ 0 ].geometry.dispose();
  	this.children[ 0 ].material.dispose();

  };

  HemisphereLightHelper.prototype.update = function () {

  	var vector = new Vector3();

  	var color1 = new Color();
  	var color2 = new Color();

  	return function update() {

  		var mesh = this.children[ 0 ];

  		if ( this.color !== undefined ) {

  			this.material.color.set( this.color );

  		} else {

  			var colors = mesh.geometry.getAttribute( 'color' );

  			color1.copy( this.light.color );
  			color2.copy( this.light.groundColor );

  			for ( var i = 0, l = colors.count; i < l; i ++ ) {

  				var color = ( i < ( l / 2 ) ) ? color1 : color2;

  				colors.setXYZ( i, color.r, color.g, color.b );

  			}

  			colors.needsUpdate = true;

  		}

  		mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );

  	};

  }();

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function LightProbeHelper( lightProbe, size ) {

  	this.lightProbe = lightProbe;

  	this.size = size;

  	var defines = {};
  	defines[ 'GAMMA_OUTPUT' ] = "";

  	// material
  	var material = new ShaderMaterial( {

  		defines: defines,

  		uniforms: {

  			sh: { value: this.lightProbe.sh.coefficients }, // by reference

  			intensity: { value: this.lightProbe.intensity }

  		},

  		vertexShader: [

  			'varying vec3 vNormal;',

  			'void main() {',

  			'	vNormal = normalize( normalMatrix * normal );',

  			'	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',

  			'}',

  		].join( '\n' ),

  		fragmentShader: [

  			'#define RECIPROCAL_PI 0.318309886',

  			'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',

  			'	// matrix is assumed to be orthogonal',

  			'	return normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',

  			'}',

  			'vec3 linearToOutput( in vec3 a ) {',

  			'	#ifdef GAMMA_OUTPUT',

  			'		return pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',

  			'	#else',

  			'		return a;',

  			'	#endif',

  			'}',

  			'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',
  			'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',

  			'	// normal is assumed to have unit length',

  			'	float x = normal.x, y = normal.y, z = normal.z;',

  			'	// band 0',
  			'	vec3 result = shCoefficients[ 0 ] * 0.886227;',

  			'	// band 1',
  			'	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',
  			'	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',
  			'	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',

  			'	// band 2',
  			'	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',
  			'	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',
  			'	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',
  			'	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',
  			'	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',

  			'	return result;',

  			'}',

  			'uniform vec3 sh[ 9 ]; // sh coefficients',

  			'uniform float intensity; // light probe intensity',

  			'varying vec3 vNormal;',

  			'void main() {',

  			'	vec3 normal = normalize( vNormal );',

  			'	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',

  			'	vec3 irradiance = shGetIrradianceAt( worldNormal, sh );',

  			'	vec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',

  			'	outgoingLight = linearToOutput( outgoingLight );',

  			'	gl_FragColor = vec4( outgoingLight, 1.0 );',

  			'}'

  		].join( '\n' )

  	} );

  	var geometry = new SphereBufferGeometry( 1, 32, 16 );

  	Mesh.call( this, geometry, material );

  	this.onBeforeRender();

  }

  LightProbeHelper.prototype = Object.create( Mesh.prototype );
  LightProbeHelper.prototype.constructor = LightProbeHelper;

  LightProbeHelper.prototype.dispose = function () {

  	this.geometry.dispose();
  	this.material.dispose();

  };

  LightProbeHelper.prototype.onBeforeRender = function () {

  	return function update() {

  		this.position.copy( this.lightProbe.position );

  		this.scale.set( 1, 1, 1 ).multiplyScalar( this.size );

  		this.material.uniforms.intensity.value = this.lightProbe.intensity;

  	};

  }();

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function GridHelper( size, divisions, color1, color2 ) {

  	size = size || 10;
  	divisions = divisions || 10;
  	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
  	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

  	var center = divisions / 2;
  	var step = size / divisions;
  	var halfSize = size / 2;

  	var vertices = [], colors = [];

  	for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

  		vertices.push( - halfSize, 0, k, halfSize, 0, k );
  		vertices.push( k, 0, - halfSize, k, 0, halfSize );

  		var color = i === center ? color1 : color2;

  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;

  	}

  	var geometry = new BufferGeometry();
  	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

  	LineSegments.call( this, geometry, material );

  }

  GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {

  	constructor: GridHelper,

  	copy: function ( source ) {

  		LineSegments.prototype.copy.call( this, source );

  		this.geometry.copy( source.geometry );
  		this.material.copy( source.material );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / http://github.com/Mugen87
   * @author Hectate / http://www.github.com/Hectate
   */

  function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

  	radius = radius || 10;
  	radials = radials || 16;
  	circles = circles || 8;
  	divisions = divisions || 64;
  	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
  	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

  	var vertices = [];
  	var colors = [];

  	var x, z;
  	var v, i, j, r, color;

  	// create the radials

  	for ( i = 0; i <= radials; i ++ ) {

  		v = ( i / radials ) * ( Math.PI * 2 );

  		x = Math.sin( v ) * radius;
  		z = Math.cos( v ) * radius;

  		vertices.push( 0, 0, 0 );
  		vertices.push( x, 0, z );

  		color = ( i & 1 ) ? color1 : color2;

  		colors.push( color.r, color.g, color.b );
  		colors.push( color.r, color.g, color.b );

  	}

  	// create the circles

  	for ( i = 0; i <= circles; i ++ ) {

  		color = ( i & 1 ) ? color1 : color2;

  		r = radius - ( radius / circles * i );

  		for ( j = 0; j < divisions; j ++ ) {

  			// first vertex

  			v = ( j / divisions ) * ( Math.PI * 2 );

  			x = Math.sin( v ) * r;
  			z = Math.cos( v ) * r;

  			vertices.push( x, 0, z );
  			colors.push( color.r, color.g, color.b );

  			// second vertex

  			v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

  			x = Math.sin( v ) * r;
  			z = Math.cos( v ) * r;

  			vertices.push( x, 0, z );
  			colors.push( color.r, color.g, color.b );

  		}

  	}

  	var geometry = new BufferGeometry();
  	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

  	LineSegments.call( this, geometry, material );

  }

  PolarGridHelper.prototype = Object.create( LineSegments.prototype );
  PolarGridHelper.prototype.constructor = PolarGridHelper;

  /**
   * @author Mugen87 / http://github.com/Mugen87
   */

  function PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {

  	this.audio = audio;
  	this.range = range || 1;
  	this.divisionsInnerAngle = divisionsInnerAngle || 16;
  	this.divisionsOuterAngle = divisionsOuterAngle || 2;

  	var geometry = new BufferGeometry();
  	var divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;
  	var positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );
  	geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

  	var materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );
  	var materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );

  	Line.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );

  	this.update();

  }

  PositionalAudioHelper.prototype = Object.create( Line.prototype );
  PositionalAudioHelper.prototype.constructor = PositionalAudioHelper;

  PositionalAudioHelper.prototype.update = function () {

  	var audio = this.audio;
  	var range = this.range;
  	var divisionsInnerAngle = this.divisionsInnerAngle;
  	var divisionsOuterAngle = this.divisionsOuterAngle;

  	var coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );
  	var coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );

  	var halfConeInnerAngle = coneInnerAngle / 2;
  	var halfConeOuterAngle = coneOuterAngle / 2;

  	var start = 0;
  	var count = 0;
  	var i, stride;

  	var geometry = this.geometry;
  	var positionAttribute = geometry.attributes.position;

  	geometry.clearGroups();

  	//

  	function generateSegment( from, to, divisions, materialIndex ) {

  		var step = ( to - from ) / divisions;

  		positionAttribute.setXYZ( start, 0, 0, 0 );
  		count ++;

  		for ( i = from; i < to; i += step ) {

  			stride = start + count;

  			positionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );
  			positionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );
  			positionAttribute.setXYZ( stride + 2, 0, 0, 0 );

  			count += 3;

  		}

  		geometry.addGroup( start, count, materialIndex );

  		start += count;
  		count = 0;

  	}

  	//

  	generateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );
  	generateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );
  	generateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );

  	//

  	positionAttribute.needsUpdate = true;

  	if ( coneInnerAngle === coneOuterAngle ) this.material[ 0 ].visible = false;

  };

  PositionalAudioHelper.prototype.dispose = function () {

  	this.geometry.dispose();
  	this.material[ 0 ].dispose();
  	this.material[ 1 ].dispose();

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  function FaceNormalsHelper( object, size, hex, linewidth ) {

  	// FaceNormalsHelper only supports THREE.Geometry

  	this.object = object;

  	this.size = ( size !== undefined ) ? size : 1;

  	var color = ( hex !== undefined ) ? hex : 0xffff00;

  	var width = ( linewidth !== undefined ) ? linewidth : 1;

  	//

  	var nNormals = 0;

  	var objGeometry = this.object.geometry;

  	if ( objGeometry && objGeometry.isGeometry ) {

  		nNormals = objGeometry.faces.length;

  	} else {

  		console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

  	}

  	//

  	var geometry = new BufferGeometry();

  	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

  	geometry.addAttribute( 'position', positions );

  	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

  	//

  	this.matrixAutoUpdate = false;
  	this.update();

  }

  FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
  FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

  FaceNormalsHelper.prototype.update = ( function () {

  	var v1 = new Vector3();
  	var v2 = new Vector3();
  	var normalMatrix = new Matrix3();

  	return function update() {

  		this.object.updateMatrixWorld( true );

  		normalMatrix.getNormalMatrix( this.object.matrixWorld );

  		var matrixWorld = this.object.matrixWorld;

  		var position = this.geometry.attributes.position;

  		//

  		var objGeometry = this.object.geometry;

  		var vertices = objGeometry.vertices;

  		var faces = objGeometry.faces;

  		var idx = 0;

  		for ( var i = 0, l = faces.length; i < l; i ++ ) {

  			var face = faces[ i ];

  			var normal = face.normal;

  			v1.copy( vertices[ face.a ] )
  				.add( vertices[ face.b ] )
  				.add( vertices[ face.c ] )
  				.divideScalar( 3 )
  				.applyMatrix4( matrixWorld );

  			v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

  			position.setXYZ( idx, v1.x, v1.y, v1.z );

  			idx = idx + 1;

  			position.setXYZ( idx, v2.x, v2.y, v2.z );

  			idx = idx + 1;

  		}

  		position.needsUpdate = true;

  	};

  }() );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  function DirectionalLightHelper( light, size, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	if ( size === undefined ) size = 1;

  	var geometry = new BufferGeometry();
  	geometry.addAttribute( 'position', new Float32BufferAttribute( [
  		- size, size, 0,
  		size, size, 0,
  		size, - size, 0,
  		- size, - size, 0,
  		- size, size, 0
  	], 3 ) );

  	var material = new LineBasicMaterial( { fog: false } );

  	this.lightPlane = new Line( geometry, material );
  	this.add( this.lightPlane );

  	geometry = new BufferGeometry();
  	geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

  	this.targetLine = new Line( geometry, material );
  	this.add( this.targetLine );

  	this.update();

  }

  DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
  DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

  DirectionalLightHelper.prototype.dispose = function () {

  	this.lightPlane.geometry.dispose();
  	this.lightPlane.material.dispose();
  	this.targetLine.geometry.dispose();
  	this.targetLine.material.dispose();

  };

  DirectionalLightHelper.prototype.update = function () {

  	var v1 = new Vector3();
  	var v2 = new Vector3();
  	var v3 = new Vector3();

  	return function update() {

  		v1.setFromMatrixPosition( this.light.matrixWorld );
  		v2.setFromMatrixPosition( this.light.target.matrixWorld );
  		v3.subVectors( v2, v1 );

  		this.lightPlane.lookAt( v2 );

  		if ( this.color !== undefined ) {

  			this.lightPlane.material.color.set( this.color );
  			this.targetLine.material.color.set( this.color );

  		} else {

  			this.lightPlane.material.color.copy( this.light.color );
  			this.targetLine.material.color.copy( this.light.color );

  		}

  		this.targetLine.lookAt( v2 );
  		this.targetLine.scale.z = v3.length();

  	};

  }();

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author Mugen87 / https://github.com/Mugen87
   *
   *	- shows frustum, line of sight and up of the camera
   *	- suitable for fast updates
   * 	- based on frustum visualization in lightgl.js shadowmap example
   *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
   */

  function CameraHelper( camera ) {

  	var geometry = new BufferGeometry();
  	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

  	var vertices = [];
  	var colors = [];

  	var pointMap = {};

  	// colors

  	var colorFrustum = new Color( 0xffaa00 );
  	var colorCone = new Color( 0xff0000 );
  	var colorUp = new Color( 0x00aaff );
  	var colorTarget = new Color( 0xffffff );
  	var colorCross = new Color( 0x333333 );

  	// near

  	addLine( 'n1', 'n2', colorFrustum );
  	addLine( 'n2', 'n4', colorFrustum );
  	addLine( 'n4', 'n3', colorFrustum );
  	addLine( 'n3', 'n1', colorFrustum );

  	// far

  	addLine( 'f1', 'f2', colorFrustum );
  	addLine( 'f2', 'f4', colorFrustum );
  	addLine( 'f4', 'f3', colorFrustum );
  	addLine( 'f3', 'f1', colorFrustum );

  	// sides

  	addLine( 'n1', 'f1', colorFrustum );
  	addLine( 'n2', 'f2', colorFrustum );
  	addLine( 'n3', 'f3', colorFrustum );
  	addLine( 'n4', 'f4', colorFrustum );

  	// cone

  	addLine( 'p', 'n1', colorCone );
  	addLine( 'p', 'n2', colorCone );
  	addLine( 'p', 'n3', colorCone );
  	addLine( 'p', 'n4', colorCone );

  	// up

  	addLine( 'u1', 'u2', colorUp );
  	addLine( 'u2', 'u3', colorUp );
  	addLine( 'u3', 'u1', colorUp );

  	// target

  	addLine( 'c', 't', colorTarget );
  	addLine( 'p', 'c', colorCross );

  	// cross

  	addLine( 'cn1', 'cn2', colorCross );
  	addLine( 'cn3', 'cn4', colorCross );

  	addLine( 'cf1', 'cf2', colorCross );
  	addLine( 'cf3', 'cf4', colorCross );

  	function addLine( a, b, color ) {

  		addPoint( a, color );
  		addPoint( b, color );

  	}

  	function addPoint( id, color ) {

  		vertices.push( 0, 0, 0 );
  		colors.push( color.r, color.g, color.b );

  		if ( pointMap[ id ] === undefined ) {

  			pointMap[ id ] = [];

  		}

  		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

  	}

  	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	LineSegments.call( this, geometry, material );

  	this.camera = camera;
  	if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

  	this.matrix = camera.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.pointMap = pointMap;

  	this.update();

  }

  CameraHelper.prototype = Object.create( LineSegments.prototype );
  CameraHelper.prototype.constructor = CameraHelper;

  CameraHelper.prototype.update = function () {

  	var geometry, pointMap;

  	var vector = new Vector3();
  	var camera = new Camera();

  	function setPoint( point, x, y, z ) {

  		vector.set( x, y, z ).unproject( camera );

  		var points = pointMap[ point ];

  		if ( points !== undefined ) {

  			var position = geometry.getAttribute( 'position' );

  			for ( var i = 0, l = points.length; i < l; i ++ ) {

  				position.setXYZ( points[ i ], vector.x, vector.y, vector.z );

  			}

  		}

  	}

  	return function update() {

  		geometry = this.geometry;
  		pointMap = this.pointMap;

  		var w = 1, h = 1;

  		// we need just camera projection matrix inverse
  		// world matrix must be identity

  		camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );

  		// center / target

  		setPoint( 'c', 0, 0, - 1 );
  		setPoint( 't', 0, 0, 1 );

  		// near

  		setPoint( 'n1', - w, - h, - 1 );
  		setPoint( 'n2', w, - h, - 1 );
  		setPoint( 'n3', - w, h, - 1 );
  		setPoint( 'n4', w, h, - 1 );

  		// far

  		setPoint( 'f1', - w, - h, 1 );
  		setPoint( 'f2', w, - h, 1 );
  		setPoint( 'f3', - w, h, 1 );
  		setPoint( 'f4', w, h, 1 );

  		// up

  		setPoint( 'u1', w * 0.7, h * 1.1, - 1 );
  		setPoint( 'u2', - w * 0.7, h * 1.1, - 1 );
  		setPoint( 'u3', 0, h * 2, - 1 );

  		// cross

  		setPoint( 'cf1', - w, 0, 1 );
  		setPoint( 'cf2', w, 0, 1 );
  		setPoint( 'cf3', 0, - h, 1 );
  		setPoint( 'cf4', 0, h, 1 );

  		setPoint( 'cn1', - w, 0, - 1 );
  		setPoint( 'cn2', w, 0, - 1 );
  		setPoint( 'cn3', 0, - h, - 1 );
  		setPoint( 'cn4', 0, h, - 1 );

  		geometry.getAttribute( 'position' ).needsUpdate = true;

  	};

  }();

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / http://github.com/Mugen87
   */

  function BoxHelper( object, color ) {

  	this.object = object;

  	if ( color === undefined ) color = 0xffff00;

  	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
  	var positions = new Float32Array( 8 * 3 );

  	var geometry = new BufferGeometry();
  	geometry.setIndex( new BufferAttribute( indices, 1 ) );
  	geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

  	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

  	this.matrixAutoUpdate = false;

  	this.update();

  }

  BoxHelper.prototype = Object.create( LineSegments.prototype );
  BoxHelper.prototype.constructor = BoxHelper;

  BoxHelper.prototype.update = ( function () {

  	var box = new Box3();

  	return function update( object ) {

  		if ( object !== undefined ) {

  			console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

  		}

  		if ( this.object !== undefined ) {

  			box.setFromObject( this.object );

  		}

  		if ( box.isEmpty() ) return;

  		var min = box.min;
  		var max = box.max;

  		/*
  		  5____4
  		1/___0/|
  		| 6__|_7
  		2/___3/

  		0: max.x, max.y, max.z
  		1: min.x, max.y, max.z
  		2: min.x, min.y, max.z
  		3: max.x, min.y, max.z
  		4: max.x, max.y, min.z
  		5: min.x, max.y, min.z
  		6: min.x, min.y, min.z
  		7: max.x, min.y, min.z
  		*/

  		var position = this.geometry.attributes.position;
  		var array = position.array;

  		array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
  		array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
  		array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
  		array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
  		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
  		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
  		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
  		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

  		position.needsUpdate = true;

  		this.geometry.computeBoundingSphere();

  	};

  } )();

  BoxHelper.prototype.setFromObject = function ( object ) {

  	this.object = object;
  	this.update();

  	return this;

  };

  BoxHelper.prototype.copy = function ( source ) {

  	LineSegments.prototype.copy.call( this, source );

  	this.object = source.object;

  	return this;

  };

  BoxHelper.prototype.clone = function () {

  	return new this.constructor().copy( this );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function Box3Helper( box, hex ) {

  	this.type = 'Box3Helper';

  	this.box = box;

  	var color = ( hex !== undefined ) ? hex : 0xffff00;

  	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

  	var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

  	var geometry = new BufferGeometry();

  	geometry.setIndex( new BufferAttribute( indices, 1 ) );

  	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

  	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

  	this.geometry.computeBoundingSphere();

  }

  Box3Helper.prototype = Object.create( LineSegments.prototype );
  Box3Helper.prototype.constructor = Box3Helper;

  Box3Helper.prototype.updateMatrixWorld = function ( force ) {

  	var box = this.box;

  	if ( box.isEmpty() ) return;

  	box.getCenter( this.position );

  	box.getSize( this.scale );

  	this.scale.multiplyScalar( 0.5 );

  	Object3D.prototype.updateMatrixWorld.call( this, force );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function PlaneHelper( plane, size, hex ) {

  	this.type = 'PlaneHelper';

  	this.plane = plane;

  	this.size = ( size === undefined ) ? 1 : size;

  	var color = ( hex !== undefined ) ? hex : 0xffff00;

  	var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

  	var geometry = new BufferGeometry();
  	geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
  	geometry.computeBoundingSphere();

  	Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );

  	//

  	var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

  	var geometry2 = new BufferGeometry();
  	geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
  	geometry2.computeBoundingSphere();

  	this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );

  }

  PlaneHelper.prototype = Object.create( Line.prototype );
  PlaneHelper.prototype.constructor = PlaneHelper;

  PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

  	var scale = - this.plane.constant;

  	if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter

  	this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

  	this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

  	this.lookAt( this.plane.normal );

  	Object3D.prototype.updateMatrixWorld.call( this, force );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   * @author zz85 / http://github.com/zz85
   * @author bhouston / http://clara.io
   *
   * Creates an arrow for visualizing directions
   *
   * Parameters:
   *  dir - Vector3
   *  origin - Vector3
   *  length - Number
   *  color - color in hex value
   *  headLength - Number
   *  headWidth - Number
   */

  var lineGeometry, coneGeometry;

  function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

  	// dir is assumed to be normalized

  	Object3D.call( this );

  	if ( dir === undefined ) dir = new Vector3( 0, 0, 1 );
  	if ( origin === undefined ) origin = new Vector3( 0, 0, 0 );
  	if ( length === undefined ) length = 1;
  	if ( color === undefined ) color = 0xffff00;
  	if ( headLength === undefined ) headLength = 0.2 * length;
  	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

  	if ( lineGeometry === undefined ) {

  		lineGeometry = new BufferGeometry();
  		lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

  		coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
  		coneGeometry.translate( 0, - 0.5, 0 );

  	}

  	this.position.copy( origin );

  	this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
  	this.line.matrixAutoUpdate = false;
  	this.add( this.line );

  	this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
  	this.cone.matrixAutoUpdate = false;
  	this.add( this.cone );

  	this.setDirection( dir );
  	this.setLength( length, headLength, headWidth );

  }

  ArrowHelper.prototype = Object.create( Object3D.prototype );
  ArrowHelper.prototype.constructor = ArrowHelper;

  ArrowHelper.prototype.setDirection = ( function () {

  	var axis = new Vector3();
  	var radians;

  	return function setDirection( dir ) {

  		// dir is assumed to be normalized

  		if ( dir.y > 0.99999 ) {

  			this.quaternion.set( 0, 0, 0, 1 );

  		} else if ( dir.y < - 0.99999 ) {

  			this.quaternion.set( 1, 0, 0, 0 );

  		} else {

  			axis.set( dir.z, 0, - dir.x ).normalize();

  			radians = Math.acos( dir.y );

  			this.quaternion.setFromAxisAngle( axis, radians );

  		}

  	};

  }() );

  ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

  	if ( headLength === undefined ) headLength = 0.2 * length;
  	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

  	this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
  	this.line.updateMatrix();

  	this.cone.scale.set( headWidth, headLength, headWidth );
  	this.cone.position.y = length;
  	this.cone.updateMatrix();

  };

  ArrowHelper.prototype.setColor = function ( color ) {

  	this.line.material.color.copy( color );
  	this.cone.material.color.copy( color );

  };

  ArrowHelper.prototype.copy = function ( source ) {

  	Object3D.prototype.copy.call( this, source, false );

  	this.line.copy( source.line );
  	this.cone.copy( source.cone );

  	return this;

  };

  ArrowHelper.prototype.clone = function () {

  	return new this.constructor().copy( this );

  };

  /**
   * @author sroucheray / http://sroucheray.org/
   * @author mrdoob / http://mrdoob.com/
   */

  function AxesHelper( size ) {

  	size = size || 1;

  	var vertices = [
  		0, 0, 0,	size, 0, 0,
  		0, 0, 0,	0, size, 0,
  		0, 0, 0,	0, 0, size
  	];

  	var colors = [
  		1, 0, 0,	1, 0.6, 0,
  		0, 1, 0,	0.6, 1, 0,
  		0, 0, 1,	0, 0.6, 1
  	];

  	var geometry = new BufferGeometry();
  	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

  	LineSegments.call( this, geometry, material );

  }

  AxesHelper.prototype = Object.create( LineSegments.prototype );
  AxesHelper.prototype.constructor = AxesHelper;

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Face4( a, b, c, d, normal, color, materialIndex ) {

  	console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
  	return new Face3( a, b, c, normal, color, materialIndex );

  }

  var LineStrip = 0;

  var LinePieces = 1;

  function MeshFaceMaterial( materials ) {

  	console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
  	return materials;

  }

  function MultiMaterial( materials ) {

  	if ( materials === undefined ) materials = [];

  	console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
  	materials.isMultiMaterial = true;
  	materials.materials = materials;
  	materials.clone = function () {

  		return materials.slice();

  	};
  	return materials;

  }

  function PointCloud( geometry, material ) {

  	console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
  	return new Points( geometry, material );

  }

  function Particle( material ) {

  	console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
  	return new Sprite( material );

  }

  function ParticleSystem( geometry, material ) {

  	console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
  	return new Points( geometry, material );

  }

  function PointCloudMaterial( parameters ) {

  	console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
  	return new PointsMaterial( parameters );

  }

  function ParticleBasicMaterial( parameters ) {

  	console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
  	return new PointsMaterial( parameters );

  }

  function ParticleSystemMaterial( parameters ) {

  	console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
  	return new PointsMaterial( parameters );

  }

  function Vertex( x, y, z ) {

  	console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
  	return new Vector3( x, y, z );

  }

  //

  function DynamicBufferAttribute( array, itemSize ) {

  	console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
  	return new BufferAttribute( array, itemSize ).setDynamic( true );

  }

  function Int8Attribute( array, itemSize ) {

  	console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
  	return new Int8BufferAttribute( array, itemSize );

  }

  function Uint8Attribute( array, itemSize ) {

  	console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
  	return new Uint8BufferAttribute( array, itemSize );

  }

  function Uint8ClampedAttribute( array, itemSize ) {

  	console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
  	return new Uint8ClampedBufferAttribute( array, itemSize );

  }

  function Int16Attribute( array, itemSize ) {

  	console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
  	return new Int16BufferAttribute( array, itemSize );

  }

  function Uint16Attribute( array, itemSize ) {

  	console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
  	return new Uint16BufferAttribute( array, itemSize );

  }

  function Int32Attribute( array, itemSize ) {

  	console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
  	return new Int32BufferAttribute( array, itemSize );

  }

  function Uint32Attribute( array, itemSize ) {

  	console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
  	return new Uint32BufferAttribute( array, itemSize );

  }

  function Float32Attribute( array, itemSize ) {

  	console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
  	return new Float32BufferAttribute( array, itemSize );

  }

  function Float64Attribute( array, itemSize ) {

  	console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
  	return new Float64BufferAttribute( array, itemSize );

  }

  //

  Curve.create = function ( construct, getPoint ) {

  	console.log( 'THREE.Curve.create() has been deprecated' );

  	construct.prototype = Object.create( Curve.prototype );
  	construct.prototype.constructor = construct;
  	construct.prototype.getPoint = getPoint;

  	return construct;

  };

  //

  Object.assign( CurvePath.prototype, {

  	createPointsGeometry: function ( divisions ) {

  		console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		// generate geometry from path points (for Line or Points objects)

  		var pts = this.getPoints( divisions );
  		return this.createGeometry( pts );

  	},

  	createSpacedPointsGeometry: function ( divisions ) {

  		console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		// generate geometry from equidistant sampling along the path

  		var pts = this.getSpacedPoints( divisions );
  		return this.createGeometry( pts );

  	},

  	createGeometry: function ( points ) {

  		console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		var geometry = new Geometry();

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

  		}

  		return geometry;

  	}

  } );

  //

  Object.assign( Path$1.prototype, {

  	fromPoints: function ( points ) {

  		console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
  		this.setFromPoints( points );

  	}

  } );

  //

  function ClosedSplineCurve3( points ) {

  	console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

  	CatmullRomCurve3.call( this, points );
  	this.type = 'catmullrom';
  	this.closed = true;

  }

  ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

  //

  function SplineCurve3( points ) {

  	console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

  	CatmullRomCurve3.call( this, points );
  	this.type = 'catmullrom';

  }

  SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

  //

  function Spline( points ) {

  	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

  	CatmullRomCurve3.call( this, points );
  	this.type = 'catmullrom';

  }

  Spline.prototype = Object.create( CatmullRomCurve3.prototype );

  Object.assign( Spline.prototype, {

  	initFromArray: function ( /* a */ ) {

  		console.error( 'THREE.Spline: .initFromArray() has been removed.' );

  	},
  	getControlPointsArray: function ( /* optionalTarget */ ) {

  		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

  	},
  	reparametrizeByArcLength: function ( /* samplingCoef */ ) {

  		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

  	}

  } );

  //

  function AxisHelper( size ) {

  	console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
  	return new AxesHelper( size );

  }

  function BoundingBoxHelper( object, color ) {

  	console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
  	return new BoxHelper( object, color );

  }

  function EdgesHelper( object, hex ) {

  	console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
  	return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

  }

  GridHelper.prototype.setColors = function () {

  	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

  };

  SkeletonHelper.prototype.update = function () {

  	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

  };

  function WireframeHelper( object, hex ) {

  	console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
  	return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

  }

  //

  Object.assign( Loader.prototype, {

  	extractUrlBase: function ( url ) {

  		console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
  		return LoaderUtils.extractUrlBase( url );

  	}

  } );

  function XHRLoader( manager ) {

  	console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
  	return new FileLoader( manager );

  }

  function BinaryTextureLoader( manager ) {

  	console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
  	return new DataTextureLoader( manager );

  }

  Object.assign( ObjectLoader.prototype, {

  	setTexturePath: function ( value ) {

  		console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
  		return this.setResourcePath( value );

  	}

  } );

  //

  Object.assign( Box2.prototype, {

  	center: function ( optionalTarget ) {

  		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
  		return this.getCenter( optionalTarget );

  	},
  	empty: function () {

  		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
  		return this.isEmpty();

  	},
  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	size: function ( optionalTarget ) {

  		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
  		return this.getSize( optionalTarget );

  	}
  } );

  Object.assign( Box3.prototype, {

  	center: function ( optionalTarget ) {

  		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
  		return this.getCenter( optionalTarget );

  	},
  	empty: function () {

  		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
  		return this.isEmpty();

  	},
  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	isIntersectionSphere: function ( sphere ) {

  		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
  		return this.intersectsSphere( sphere );

  	},
  	size: function ( optionalTarget ) {

  		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
  		return this.getSize( optionalTarget );

  	}
  } );

  Line3.prototype.center = function ( optionalTarget ) {

  	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
  	return this.getCenter( optionalTarget );

  };

  Object.assign( _Math, {

  	random16: function () {

  		console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
  		return Math.random();

  	},

  	nearestPowerOfTwo: function ( value ) {

  		console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
  		return _Math.floorPowerOfTwo( value );

  	},

  	nextPowerOfTwo: function ( value ) {

  		console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
  		return _Math.ceilPowerOfTwo( value );

  	}

  } );

  Object.assign( Matrix3.prototype, {

  	flattenToArrayOffset: function ( array, offset ) {

  		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
  		return this.toArray( array, offset );

  	},
  	multiplyVector3: function ( vector ) {

  		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
  		return vector.applyMatrix3( this );

  	},
  	multiplyVector3Array: function ( /* a */ ) {

  		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

  	},
  	applyToBuffer: function ( buffer /*, offset, length */ ) {

  		console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
  		return this.applyToBufferAttribute( buffer );

  	},
  	applyToVector3Array: function ( /* array, offset, length */ ) {

  		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

  	}

  } );

  Object.assign( Matrix4.prototype, {

  	extractPosition: function ( m ) {

  		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
  		return this.copyPosition( m );

  	},
  	flattenToArrayOffset: function ( array, offset ) {

  		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
  		return this.toArray( array, offset );

  	},
  	getPosition: function () {

  		var v1;

  		return function getPosition() {

  			if ( v1 === undefined ) v1 = new Vector3();
  			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
  			return v1.setFromMatrixColumn( this, 3 );

  		};

  	}(),
  	setRotationFromQuaternion: function ( q ) {

  		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
  		return this.makeRotationFromQuaternion( q );

  	},
  	multiplyToArray: function () {

  		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

  	},
  	multiplyVector3: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	multiplyVector4: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	multiplyVector3Array: function ( /* a */ ) {

  		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

  	},
  	rotateAxis: function ( v ) {

  		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
  		v.transformDirection( this );

  	},
  	crossVector: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	translate: function () {

  		console.error( 'THREE.Matrix4: .translate() has been removed.' );

  	},
  	rotateX: function () {

  		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

  	},
  	rotateY: function () {

  		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

  	},
  	rotateZ: function () {

  		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

  	},
  	rotateByAxis: function () {

  		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

  	},
  	applyToBuffer: function ( buffer /*, offset, length */ ) {

  		console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
  		return this.applyToBufferAttribute( buffer );

  	},
  	applyToVector3Array: function ( /* array, offset, length */ ) {

  		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

  	},
  	makeFrustum: function ( left, right, bottom, top, near, far ) {

  		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
  		return this.makePerspective( left, right, top, bottom, near, far );

  	}

  } );

  Plane.prototype.isIntersectionLine = function ( line ) {

  	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
  	return this.intersectsLine( line );

  };

  Quaternion.prototype.multiplyVector3 = function ( vector ) {

  	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
  	return vector.applyQuaternion( this );

  };

  Object.assign( Ray.prototype, {

  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	isIntersectionPlane: function ( plane ) {

  		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
  		return this.intersectsPlane( plane );

  	},
  	isIntersectionSphere: function ( sphere ) {

  		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
  		return this.intersectsSphere( sphere );

  	}

  } );

  Object.assign( Triangle.prototype, {

  	area: function () {

  		console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
  		return this.getArea();

  	},
  	barycoordFromPoint: function ( point, target ) {

  		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
  		return this.getBarycoord( point, target );

  	},
  	midpoint: function ( target ) {

  		console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
  		return this.getMidpoint( target );

  	},
  	normal: function ( target ) {

  		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
  		return this.getNormal( target );

  	},
  	plane: function ( target ) {

  		console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
  		return this.getPlane( target );

  	}

  } );

  Object.assign( Triangle, {

  	barycoordFromPoint: function ( point, a, b, c, target ) {

  		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
  		return Triangle.getBarycoord( point, a, b, c, target );

  	},
  	normal: function ( a, b, c, target ) {

  		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
  		return Triangle.getNormal( a, b, c, target );

  	}

  } );

  Object.assign( Shape$1.prototype, {

  	extractAllPoints: function ( divisions ) {

  		console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
  		return this.extractPoints( divisions );

  	},
  	extrude: function ( options ) {

  		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
  		return new ExtrudeGeometry( this, options );

  	},
  	makeGeometry: function ( options ) {

  		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
  		return new ShapeGeometry( this, options );

  	}

  } );

  Object.assign( Vector2.prototype, {

  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	distanceToManhattan: function ( v ) {

  		console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
  		return this.manhattanDistanceTo( v );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  Object.assign( Vector3.prototype, {

  	setEulerFromRotationMatrix: function () {

  		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

  	},
  	setEulerFromQuaternion: function () {

  		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

  	},
  	getPositionFromMatrix: function ( m ) {

  		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
  		return this.setFromMatrixPosition( m );

  	},
  	getScaleFromMatrix: function ( m ) {

  		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
  		return this.setFromMatrixScale( m );

  	},
  	getColumnFromMatrix: function ( index, matrix ) {

  		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
  		return this.setFromMatrixColumn( matrix, index );

  	},
  	applyProjection: function ( m ) {

  		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
  		return this.applyMatrix4( m );

  	},
  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	distanceToManhattan: function ( v ) {

  		console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
  		return this.manhattanDistanceTo( v );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  Object.assign( Vector4.prototype, {

  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  //

  Object.assign( Geometry.prototype, {

  	computeTangents: function () {

  		console.error( 'THREE.Geometry: .computeTangents() has been removed.' );

  	},
  	computeLineDistances: function () {

  		console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );

  	}

  } );

  Object.assign( Object3D.prototype, {

  	getChildByName: function ( name ) {

  		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
  		return this.getObjectByName( name );

  	},
  	renderDepth: function () {

  		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

  	},
  	translate: function ( distance, axis ) {

  		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
  		return this.translateOnAxis( axis, distance );

  	},
  	getWorldRotation: function () {

  		console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );

  	}

  } );

  Object.defineProperties( Object3D.prototype, {

  	eulerOrder: {
  		get: function () {

  			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
  			return this.rotation.order;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
  			this.rotation.order = value;

  		}
  	},
  	useQuaternion: {
  		get: function () {

  			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

  		}
  	}

  } );

  Object.defineProperties( LOD.prototype, {

  	objects: {
  		get: function () {

  			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
  			return this.levels;

  		}
  	}

  } );

  Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

  	get: function () {

  		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

  	},
  	set: function () {

  		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

  	}

  } );

  SkinnedMesh.prototype.initBones = function () {

  	console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );

  };

  Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

  	get: function () {

  		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
  		return this.arcLengthDivisions;

  	},
  	set: function ( value ) {

  		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
  		this.arcLengthDivisions = value;

  	}

  } );

  //

  PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

  	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
  			"Use .setFocalLength and .filmGauge for a photographic setup." );

  	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
  	this.setFocalLength( focalLength );

  };

  //

  Object.defineProperties( Light.prototype, {
  	onlyShadow: {
  		set: function () {

  			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

  		}
  	},
  	shadowCameraFov: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
  			this.shadow.camera.fov = value;

  		}
  	},
  	shadowCameraLeft: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
  			this.shadow.camera.left = value;

  		}
  	},
  	shadowCameraRight: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
  			this.shadow.camera.right = value;

  		}
  	},
  	shadowCameraTop: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
  			this.shadow.camera.top = value;

  		}
  	},
  	shadowCameraBottom: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
  			this.shadow.camera.bottom = value;

  		}
  	},
  	shadowCameraNear: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
  			this.shadow.camera.near = value;

  		}
  	},
  	shadowCameraFar: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
  			this.shadow.camera.far = value;

  		}
  	},
  	shadowCameraVisible: {
  		set: function () {

  			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

  		}
  	},
  	shadowBias: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
  			this.shadow.bias = value;

  		}
  	},
  	shadowDarkness: {
  		set: function () {

  			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

  		}
  	},
  	shadowMapWidth: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
  			this.shadow.mapSize.width = value;

  		}
  	},
  	shadowMapHeight: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
  			this.shadow.mapSize.height = value;

  		}
  	}
  } );

  //

  Object.defineProperties( BufferAttribute.prototype, {

  	length: {
  		get: function () {

  			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
  			return this.array.length;

  		}
  	},
  	copyIndicesArray: function ( /* indices */ ) {

  		console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );

  	}

  } );

  Object.assign( BufferGeometry.prototype, {

  	addIndex: function ( index ) {

  		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
  		this.setIndex( index );

  	},
  	addDrawCall: function ( start, count, indexOffset ) {

  		if ( indexOffset !== undefined ) {

  			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

  		}
  		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
  		this.addGroup( start, count );

  	},
  	clearDrawCalls: function () {

  		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
  		this.clearGroups();

  	},
  	computeTangents: function () {

  		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

  	},
  	computeOffsets: function () {

  		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

  	}

  } );

  Object.defineProperties( BufferGeometry.prototype, {

  	drawcalls: {
  		get: function () {

  			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
  			return this.groups;

  		}
  	},
  	offsets: {
  		get: function () {

  			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
  			return this.groups;

  		}
  	}

  } );

  //

  Object.assign( ExtrudeBufferGeometry.prototype, {

  	getArrays: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );

  	},

  	addShapeList: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );

  	},

  	addShape: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );

  	}

  } );

  //

  Object.defineProperties( Uniform.prototype, {

  	dynamic: {
  		set: function () {

  			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

  		}
  	},
  	onUpdate: {
  		value: function () {

  			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
  			return this;

  		}
  	}

  } );

  //

  Object.defineProperties( Material.prototype, {

  	wrapAround: {
  		get: function () {

  			console.warn( 'THREE.Material: .wrapAround has been removed.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Material: .wrapAround has been removed.' );

  		}
  	},

  	overdraw: {
  		get: function () {

  			console.warn( 'THREE.Material: .overdraw has been removed.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Material: .overdraw has been removed.' );

  		}
  	},

  	wrapRGB: {
  		get: function () {

  			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
  			return new Color();

  		}
  	},

  	shading: {
  		get: function () {

  			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
  			this.flatShading = ( value === FlatShading );

  		}
  	}

  } );

  Object.defineProperties( MeshPhongMaterial.prototype, {

  	metal: {
  		get: function () {

  			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
  			return false;

  		},
  		set: function () {

  			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

  		}
  	}

  } );

  Object.defineProperties( ShaderMaterial.prototype, {

  	derivatives: {
  		get: function () {

  			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
  			return this.extensions.derivatives;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
  			this.extensions.derivatives = value;

  		}
  	}

  } );

  //

  Object.assign( WebGLRenderer.prototype, {

  	clearTarget: function ( renderTarget, color, depth, stencil ) {

  		console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
  		this.setRenderTarget( renderTarget );
  		this.clear( color, depth, stencil );

  	},
  	animate: function ( callback ) {

  		console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
  		this.setAnimationLoop( callback );

  	},
  	getCurrentRenderTarget: function () {

  		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
  		return this.getRenderTarget();

  	},
  	getMaxAnisotropy: function () {

  		console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
  		return this.capabilities.getMaxAnisotropy();

  	},
  	getPrecision: function () {

  		console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
  		return this.capabilities.precision;

  	},
  	resetGLState: function () {

  		console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
  		return this.state.reset();

  	},
  	supportsFloatTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
  		return this.extensions.get( 'OES_texture_float' );

  	},
  	supportsHalfFloatTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
  		return this.extensions.get( 'OES_texture_half_float' );

  	},
  	supportsStandardDerivatives: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
  		return this.extensions.get( 'OES_standard_derivatives' );

  	},
  	supportsCompressedTextureS3TC: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
  		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

  	},
  	supportsCompressedTexturePVRTC: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
  		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

  	},
  	supportsBlendMinMax: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
  		return this.extensions.get( 'EXT_blend_minmax' );

  	},
  	supportsVertexTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
  		return this.capabilities.vertexTextures;

  	},
  	supportsInstancedArrays: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
  		return this.extensions.get( 'ANGLE_instanced_arrays' );

  	},
  	enableScissorTest: function ( boolean ) {

  		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
  		this.setScissorTest( boolean );

  	},
  	initMaterial: function () {

  		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

  	},
  	addPrePlugin: function () {

  		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

  	},
  	addPostPlugin: function () {

  		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

  	},
  	updateShadowMap: function () {

  		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

  	},
  	setFaceCulling: function () {

  		console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );

  	},
  	allocTextureUnit: function () {

  		console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );

  	},
  	setTexture: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );

  	},
  	setTexture2D: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );

  	},
  	setTextureCube: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );

  	}

  } );

  Object.defineProperties( WebGLRenderer.prototype, {

  	shadowMapEnabled: {
  		get: function () {

  			return this.shadowMap.enabled;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
  			this.shadowMap.enabled = value;

  		}
  	},
  	shadowMapType: {
  		get: function () {

  			return this.shadowMap.type;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
  			this.shadowMap.type = value;

  		}
  	},
  	shadowMapCullFace: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );

  		}
  	}
  } );

  Object.defineProperties( WebGLShadowMap.prototype, {

  	cullFace: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function ( /* cullFace */ ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );

  		}
  	},
  	renderReverseSided: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );

  		}
  	},
  	renderSingleSided: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );

  		}
  	}

  } );

  //

  Object.defineProperties( WebGLRenderTargetCube.prototype, {

  	activeCubeFace: {
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );

  		}
  	},
  	activeMipMapLevel: {
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );

  		}
  	}

  } );

  //

  Object.defineProperties( WebGLRenderTarget.prototype, {

  	wrapS: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
  			return this.texture.wrapS;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
  			this.texture.wrapS = value;

  		}
  	},
  	wrapT: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
  			return this.texture.wrapT;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
  			this.texture.wrapT = value;

  		}
  	},
  	magFilter: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
  			return this.texture.magFilter;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
  			this.texture.magFilter = value;

  		}
  	},
  	minFilter: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
  			return this.texture.minFilter;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
  			this.texture.minFilter = value;

  		}
  	},
  	anisotropy: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
  			return this.texture.anisotropy;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
  			this.texture.anisotropy = value;

  		}
  	},
  	offset: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
  			return this.texture.offset;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
  			this.texture.offset = value;

  		}
  	},
  	repeat: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
  			return this.texture.repeat;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
  			this.texture.repeat = value;

  		}
  	},
  	format: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
  			return this.texture.format;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
  			this.texture.format = value;

  		}
  	},
  	type: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
  			return this.texture.type;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
  			this.texture.type = value;

  		}
  	},
  	generateMipmaps: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
  			return this.texture.generateMipmaps;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
  			this.texture.generateMipmaps = value;

  		}
  	}

  } );

  //

  Object.defineProperties( WebVRManager.prototype, {

  	standing: {
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.WebVRManager: .standing has been removed.' );

  		}
  	},
  	userHeight: {
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.WebVRManager: .userHeight has been removed.' );

  		}
  	}

  } );

  //

  Audio.prototype.load = function ( file ) {

  	console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
  	var scope = this;
  	var audioLoader = new AudioLoader();
  	audioLoader.load( file, function ( buffer ) {

  		scope.setBuffer( buffer );

  	} );
  	return this;

  };

  AudioAnalyser.prototype.getData = function () {

  	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
  	return this.getFrequencyData();

  };

  //

  CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

  	console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
  	return this.update( renderer, scene );

  };

  //

  var GeometryUtils = {

  	merge: function ( geometry1, geometry2, materialIndexOffset ) {

  		console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
  		var matrix;

  		if ( geometry2.isMesh ) {

  			geometry2.matrixAutoUpdate && geometry2.updateMatrix();

  			matrix = geometry2.matrix;
  			geometry2 = geometry2.geometry;

  		}

  		geometry1.merge( geometry2, matrix, materialIndexOffset );

  	},

  	center: function ( geometry ) {

  		console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
  		return geometry.center();

  	}

  };

  ImageUtils.crossOrigin = undefined;

  ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {

  	console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

  	var loader = new TextureLoader();
  	loader.setCrossOrigin( this.crossOrigin );

  	var texture = loader.load( url, onLoad, undefined, onError );

  	if ( mapping ) texture.mapping = mapping;

  	return texture;

  };

  ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {

  	console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

  	var loader = new CubeTextureLoader();
  	loader.setCrossOrigin( this.crossOrigin );

  	var texture = loader.load( urls, onLoad, undefined, onError );

  	if ( mapping ) texture.mapping = mapping;

  	return texture;

  };

  ImageUtils.loadCompressedTexture = function () {

  	console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

  };

  ImageUtils.loadCompressedTextureCube = function () {

  	console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

  };

  //

  function Projector() {

  	console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

  	this.projectVector = function ( vector, camera ) {

  		console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
  		vector.project( camera );

  	};

  	this.unprojectVector = function ( vector, camera ) {

  		console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
  		vector.unproject( camera );

  	};

  	this.pickingRay = function () {

  		console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

  	};

  }

  //

  function CanvasRenderer() {

  	console.error( 'THREE.CanvasRenderer has been removed' );

  }

  //

  function JSONLoader() {

  	console.error( 'THREE.JSONLoader has been removed.' );

  }

  //

  var SceneUtils = {

  	createMultiMaterialObject: function ( /* geometry, materials */ ) {

  		console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

  	},

  	detach: function ( /* child, parent, scene */ ) {

  		console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

  	},

  	attach: function ( /* child, scene, parent */ ) {

  		console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

  	}

  };

  //

  function LensFlare() {

  	console.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );

  }

  var THREE$1 = /*#__PURE__*/Object.freeze({
    WebGLMultisampleRenderTarget: WebGLMultisampleRenderTarget,
    WebGLRenderTargetCube: WebGLRenderTargetCube,
    WebGLRenderTarget: WebGLRenderTarget,
    WebGLRenderer: WebGLRenderer,
    ShaderLib: ShaderLib,
    UniformsLib: UniformsLib,
    UniformsUtils: UniformsUtils,
    ShaderChunk: ShaderChunk,
    FogExp2: FogExp2,
    Fog: Fog,
    Scene: Scene,
    Sprite: Sprite,
    LOD: LOD,
    SkinnedMesh: SkinnedMesh,
    Skeleton: Skeleton,
    Bone: Bone,
    Mesh: Mesh,
    LineSegments: LineSegments,
    LineLoop: LineLoop,
    Line: Line,
    Points: Points,
    Group: Group,
    VideoTexture: VideoTexture,
    DataTexture: DataTexture,
    DataTexture2DArray: DataTexture2DArray,
    DataTexture3D: DataTexture3D,
    CompressedTexture: CompressedTexture,
    CubeTexture: CubeTexture,
    CanvasTexture: CanvasTexture,
    DepthTexture: DepthTexture,
    Texture: Texture,
    AnimationLoader: AnimationLoader,
    CompressedTextureLoader: CompressedTextureLoader,
    DataTextureLoader: DataTextureLoader,
    CubeTextureLoader: CubeTextureLoader,
    TextureLoader: TextureLoader,
    ObjectLoader: ObjectLoader,
    MaterialLoader: MaterialLoader,
    BufferGeometryLoader: BufferGeometryLoader,
    DefaultLoadingManager: DefaultLoadingManager,
    LoadingManager: LoadingManager,
    ImageLoader: ImageLoader,
    ImageBitmapLoader: ImageBitmapLoader,
    FontLoader: FontLoader,
    FileLoader: FileLoader,
    Loader: Loader,
    LoaderUtils: LoaderUtils,
    Cache: Cache,
    AudioLoader: AudioLoader,
    SpotLightShadow: SpotLightShadow,
    SpotLight: SpotLight,
    PointLight: PointLight,
    RectAreaLight: RectAreaLight,
    HemisphereLight: HemisphereLight,
    HemisphereLightProbe: HemisphereLightProbe,
    DirectionalLightShadow: DirectionalLightShadow,
    DirectionalLight: DirectionalLight,
    AmbientLight: AmbientLight,
    AmbientLightProbe: AmbientLightProbe,
    LightShadow: LightShadow,
    Light: Light,
    LightProbe: LightProbe,
    StereoCamera: StereoCamera,
    PerspectiveCamera: PerspectiveCamera,
    OrthographicCamera: OrthographicCamera,
    CubeCamera: CubeCamera,
    ArrayCamera: ArrayCamera,
    Camera: Camera,
    AudioListener: AudioListener,
    PositionalAudio: PositionalAudio,
    AudioContext: AudioContext,
    AudioAnalyser: AudioAnalyser,
    Audio: Audio,
    VectorKeyframeTrack: VectorKeyframeTrack,
    StringKeyframeTrack: StringKeyframeTrack,
    QuaternionKeyframeTrack: QuaternionKeyframeTrack,
    NumberKeyframeTrack: NumberKeyframeTrack,
    ColorKeyframeTrack: ColorKeyframeTrack,
    BooleanKeyframeTrack: BooleanKeyframeTrack,
    PropertyMixer: PropertyMixer,
    PropertyBinding: PropertyBinding,
    KeyframeTrack: KeyframeTrack,
    AnimationUtils: AnimationUtils,
    AnimationObjectGroup: AnimationObjectGroup,
    AnimationMixer: AnimationMixer,
    AnimationClip: AnimationClip,
    Uniform: Uniform,
    InstancedBufferGeometry: InstancedBufferGeometry,
    BufferGeometry: BufferGeometry,
    Geometry: Geometry,
    InterleavedBufferAttribute: InterleavedBufferAttribute,
    InstancedInterleavedBuffer: InstancedInterleavedBuffer,
    InterleavedBuffer: InterleavedBuffer,
    InstancedBufferAttribute: InstancedBufferAttribute,
    Face3: Face3,
    Object3D: Object3D,
    Raycaster: Raycaster,
    Layers: Layers,
    EventDispatcher: EventDispatcher,
    Clock: Clock,
    QuaternionLinearInterpolant: QuaternionLinearInterpolant,
    LinearInterpolant: LinearInterpolant,
    DiscreteInterpolant: DiscreteInterpolant,
    CubicInterpolant: CubicInterpolant,
    Interpolant: Interpolant,
    Triangle: Triangle,
    Math: _Math,
    Spherical: Spherical,
    Cylindrical: Cylindrical,
    Plane: Plane,
    Frustum: Frustum,
    Sphere: Sphere,
    Ray: Ray,
    Matrix4: Matrix4,
    Matrix3: Matrix3,
    Box3: Box3,
    Box2: Box2,
    Line3: Line3,
    Euler: Euler,
    Vector4: Vector4,
    Vector3: Vector3,
    Vector2: Vector2,
    Quaternion: Quaternion,
    Color: Color,
    SphericalHarmonics3: SphericalHarmonics3,
    ImmediateRenderObject: ImmediateRenderObject,
    VertexNormalsHelper: VertexNormalsHelper,
    SpotLightHelper: SpotLightHelper,
    SkeletonHelper: SkeletonHelper,
    PointLightHelper: PointLightHelper,
    RectAreaLightHelper: RectAreaLightHelper,
    HemisphereLightHelper: HemisphereLightHelper,
    LightProbeHelper: LightProbeHelper,
    GridHelper: GridHelper,
    PolarGridHelper: PolarGridHelper,
    PositionalAudioHelper: PositionalAudioHelper,
    FaceNormalsHelper: FaceNormalsHelper,
    DirectionalLightHelper: DirectionalLightHelper,
    CameraHelper: CameraHelper,
    BoxHelper: BoxHelper,
    Box3Helper: Box3Helper,
    PlaneHelper: PlaneHelper,
    ArrowHelper: ArrowHelper,
    AxesHelper: AxesHelper,
    Shape: Shape$1,
    Path: Path$1,
    ShapePath: ShapePath,
    Font: Font$1,
    CurvePath: CurvePath,
    Curve: Curve,
    ImageUtils: ImageUtils,
    ShapeUtils: ShapeUtils,
    WebGLUtils: WebGLUtils,
    WireframeGeometry: WireframeGeometry,
    ParametricGeometry: ParametricGeometry,
    ParametricBufferGeometry: ParametricBufferGeometry,
    TetrahedronGeometry: TetrahedronGeometry,
    TetrahedronBufferGeometry: TetrahedronBufferGeometry,
    OctahedronGeometry: OctahedronGeometry,
    OctahedronBufferGeometry: OctahedronBufferGeometry,
    IcosahedronGeometry: IcosahedronGeometry,
    IcosahedronBufferGeometry: IcosahedronBufferGeometry,
    DodecahedronGeometry: DodecahedronGeometry,
    DodecahedronBufferGeometry: DodecahedronBufferGeometry,
    PolyhedronGeometry: PolyhedronGeometry,
    PolyhedronBufferGeometry: PolyhedronBufferGeometry,
    TubeGeometry: TubeGeometry,
    TubeBufferGeometry: TubeBufferGeometry,
    TorusKnotGeometry: TorusKnotGeometry,
    TorusKnotBufferGeometry: TorusKnotBufferGeometry,
    TorusGeometry: TorusGeometry,
    TorusBufferGeometry: TorusBufferGeometry,
    TextGeometry: TextGeometry,
    TextBufferGeometry: TextBufferGeometry,
    SphereGeometry: SphereGeometry,
    SphereBufferGeometry: SphereBufferGeometry,
    RingGeometry: RingGeometry,
    RingBufferGeometry: RingBufferGeometry,
    PlaneGeometry: PlaneGeometry,
    PlaneBufferGeometry: PlaneBufferGeometry,
    LatheGeometry: LatheGeometry,
    LatheBufferGeometry: LatheBufferGeometry,
    ShapeGeometry: ShapeGeometry,
    ShapeBufferGeometry: ShapeBufferGeometry,
    ExtrudeGeometry: ExtrudeGeometry,
    ExtrudeBufferGeometry: ExtrudeBufferGeometry,
    EdgesGeometry: EdgesGeometry,
    ConeGeometry: ConeGeometry,
    ConeBufferGeometry: ConeBufferGeometry,
    CylinderGeometry: CylinderGeometry,
    CylinderBufferGeometry: CylinderBufferGeometry,
    CircleGeometry: CircleGeometry,
    CircleBufferGeometry: CircleBufferGeometry,
    BoxGeometry: BoxGeometry,
    CubeGeometry: BoxGeometry,
    BoxBufferGeometry: BoxBufferGeometry,
    ShadowMaterial: ShadowMaterial,
    SpriteMaterial: SpriteMaterial,
    RawShaderMaterial: RawShaderMaterial,
    ShaderMaterial: ShaderMaterial,
    PointsMaterial: PointsMaterial,
    MeshPhysicalMaterial: MeshPhysicalMaterial,
    MeshStandardMaterial: MeshStandardMaterial,
    MeshPhongMaterial: MeshPhongMaterial,
    MeshToonMaterial: MeshToonMaterial,
    MeshNormalMaterial: MeshNormalMaterial,
    MeshLambertMaterial: MeshLambertMaterial,
    MeshDepthMaterial: MeshDepthMaterial,
    MeshDistanceMaterial: MeshDistanceMaterial,
    MeshBasicMaterial: MeshBasicMaterial,
    MeshMatcapMaterial: MeshMatcapMaterial,
    LineDashedMaterial: LineDashedMaterial,
    LineBasicMaterial: LineBasicMaterial,
    Material: Material,
    Float64BufferAttribute: Float64BufferAttribute,
    Float32BufferAttribute: Float32BufferAttribute,
    Uint32BufferAttribute: Uint32BufferAttribute,
    Int32BufferAttribute: Int32BufferAttribute,
    Uint16BufferAttribute: Uint16BufferAttribute,
    Int16BufferAttribute: Int16BufferAttribute,
    Uint8ClampedBufferAttribute: Uint8ClampedBufferAttribute,
    Uint8BufferAttribute: Uint8BufferAttribute,
    Int8BufferAttribute: Int8BufferAttribute,
    BufferAttribute: BufferAttribute,
    ArcCurve: ArcCurve,
    CatmullRomCurve3: CatmullRomCurve3,
    CubicBezierCurve: CubicBezierCurve,
    CubicBezierCurve3: CubicBezierCurve3,
    EllipseCurve: EllipseCurve,
    LineCurve: LineCurve,
    LineCurve3: LineCurve3,
    QuadraticBezierCurve: QuadraticBezierCurve,
    QuadraticBezierCurve3: QuadraticBezierCurve3,
    SplineCurve: SplineCurve,
    REVISION: REVISION,
    MOUSE: MOUSE,
    CullFaceNone: CullFaceNone,
    CullFaceBack: CullFaceBack,
    CullFaceFront: CullFaceFront,
    CullFaceFrontBack: CullFaceFrontBack,
    FrontFaceDirectionCW: FrontFaceDirectionCW,
    FrontFaceDirectionCCW: FrontFaceDirectionCCW,
    BasicShadowMap: BasicShadowMap,
    PCFShadowMap: PCFShadowMap,
    PCFSoftShadowMap: PCFSoftShadowMap,
    FrontSide: FrontSide,
    BackSide: BackSide,
    DoubleSide: DoubleSide,
    FlatShading: FlatShading,
    SmoothShading: SmoothShading,
    NoColors: NoColors,
    FaceColors: FaceColors,
    VertexColors: VertexColors,
    NoBlending: NoBlending,
    NormalBlending: NormalBlending,
    AdditiveBlending: AdditiveBlending,
    SubtractiveBlending: SubtractiveBlending,
    MultiplyBlending: MultiplyBlending,
    CustomBlending: CustomBlending,
    AddEquation: AddEquation,
    SubtractEquation: SubtractEquation,
    ReverseSubtractEquation: ReverseSubtractEquation,
    MinEquation: MinEquation,
    MaxEquation: MaxEquation,
    ZeroFactor: ZeroFactor,
    OneFactor: OneFactor,
    SrcColorFactor: SrcColorFactor,
    OneMinusSrcColorFactor: OneMinusSrcColorFactor,
    SrcAlphaFactor: SrcAlphaFactor,
    OneMinusSrcAlphaFactor: OneMinusSrcAlphaFactor,
    DstAlphaFactor: DstAlphaFactor,
    OneMinusDstAlphaFactor: OneMinusDstAlphaFactor,
    DstColorFactor: DstColorFactor,
    OneMinusDstColorFactor: OneMinusDstColorFactor,
    SrcAlphaSaturateFactor: SrcAlphaSaturateFactor,
    NeverDepth: NeverDepth,
    AlwaysDepth: AlwaysDepth,
    LessDepth: LessDepth,
    LessEqualDepth: LessEqualDepth,
    EqualDepth: EqualDepth,
    GreaterEqualDepth: GreaterEqualDepth,
    GreaterDepth: GreaterDepth,
    NotEqualDepth: NotEqualDepth,
    MultiplyOperation: MultiplyOperation,
    MixOperation: MixOperation,
    AddOperation: AddOperation,
    NoToneMapping: NoToneMapping,
    LinearToneMapping: LinearToneMapping,
    ReinhardToneMapping: ReinhardToneMapping,
    Uncharted2ToneMapping: Uncharted2ToneMapping,
    CineonToneMapping: CineonToneMapping,
    ACESFilmicToneMapping: ACESFilmicToneMapping,
    UVMapping: UVMapping,
    CubeReflectionMapping: CubeReflectionMapping,
    CubeRefractionMapping: CubeRefractionMapping,
    EquirectangularReflectionMapping: EquirectangularReflectionMapping,
    EquirectangularRefractionMapping: EquirectangularRefractionMapping,
    SphericalReflectionMapping: SphericalReflectionMapping,
    CubeUVReflectionMapping: CubeUVReflectionMapping,
    CubeUVRefractionMapping: CubeUVRefractionMapping,
    RepeatWrapping: RepeatWrapping,
    ClampToEdgeWrapping: ClampToEdgeWrapping,
    MirroredRepeatWrapping: MirroredRepeatWrapping,
    NearestFilter: NearestFilter,
    NearestMipMapNearestFilter: NearestMipMapNearestFilter,
    NearestMipMapLinearFilter: NearestMipMapLinearFilter,
    LinearFilter: LinearFilter,
    LinearMipMapNearestFilter: LinearMipMapNearestFilter,
    LinearMipMapLinearFilter: LinearMipMapLinearFilter,
    UnsignedByteType: UnsignedByteType,
    ByteType: ByteType,
    ShortType: ShortType,
    UnsignedShortType: UnsignedShortType,
    IntType: IntType,
    UnsignedIntType: UnsignedIntType,
    FloatType: FloatType,
    HalfFloatType: HalfFloatType,
    UnsignedShort4444Type: UnsignedShort4444Type,
    UnsignedShort5551Type: UnsignedShort5551Type,
    UnsignedShort565Type: UnsignedShort565Type,
    UnsignedInt248Type: UnsignedInt248Type,
    AlphaFormat: AlphaFormat,
    RGBFormat: RGBFormat,
    RGBAFormat: RGBAFormat,
    LuminanceFormat: LuminanceFormat,
    LuminanceAlphaFormat: LuminanceAlphaFormat,
    RGBEFormat: RGBEFormat,
    DepthFormat: DepthFormat,
    DepthStencilFormat: DepthStencilFormat,
    RedFormat: RedFormat,
    RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format,
    RGBA_S3TC_DXT1_Format: RGBA_S3TC_DXT1_Format,
    RGBA_S3TC_DXT3_Format: RGBA_S3TC_DXT3_Format,
    RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,
    RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,
    RGB_PVRTC_2BPPV1_Format: RGB_PVRTC_2BPPV1_Format,
    RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,
    RGBA_PVRTC_2BPPV1_Format: RGBA_PVRTC_2BPPV1_Format,
    RGB_ETC1_Format: RGB_ETC1_Format,
    RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,
    RGBA_ASTC_5x4_Format: RGBA_ASTC_5x4_Format,
    RGBA_ASTC_5x5_Format: RGBA_ASTC_5x5_Format,
    RGBA_ASTC_6x5_Format: RGBA_ASTC_6x5_Format,
    RGBA_ASTC_6x6_Format: RGBA_ASTC_6x6_Format,
    RGBA_ASTC_8x5_Format: RGBA_ASTC_8x5_Format,
    RGBA_ASTC_8x6_Format: RGBA_ASTC_8x6_Format,
    RGBA_ASTC_8x8_Format: RGBA_ASTC_8x8_Format,
    RGBA_ASTC_10x5_Format: RGBA_ASTC_10x5_Format,
    RGBA_ASTC_10x6_Format: RGBA_ASTC_10x6_Format,
    RGBA_ASTC_10x8_Format: RGBA_ASTC_10x8_Format,
    RGBA_ASTC_10x10_Format: RGBA_ASTC_10x10_Format,
    RGBA_ASTC_12x10_Format: RGBA_ASTC_12x10_Format,
    RGBA_ASTC_12x12_Format: RGBA_ASTC_12x12_Format,
    LoopOnce: LoopOnce,
    LoopRepeat: LoopRepeat,
    LoopPingPong: LoopPingPong,
    InterpolateDiscrete: InterpolateDiscrete,
    InterpolateLinear: InterpolateLinear,
    InterpolateSmooth: InterpolateSmooth,
    ZeroCurvatureEnding: ZeroCurvatureEnding,
    ZeroSlopeEnding: ZeroSlopeEnding,
    WrapAroundEnding: WrapAroundEnding,
    TrianglesDrawMode: TrianglesDrawMode,
    TriangleStripDrawMode: TriangleStripDrawMode,
    TriangleFanDrawMode: TriangleFanDrawMode,
    LinearEncoding: LinearEncoding,
    sRGBEncoding: sRGBEncoding,
    GammaEncoding: GammaEncoding,
    RGBEEncoding: RGBEEncoding,
    LogLuvEncoding: LogLuvEncoding,
    RGBM7Encoding: RGBM7Encoding,
    RGBM16Encoding: RGBM16Encoding,
    RGBDEncoding: RGBDEncoding,
    BasicDepthPacking: BasicDepthPacking,
    RGBADepthPacking: RGBADepthPacking,
    TangentSpaceNormalMap: TangentSpaceNormalMap,
    ObjectSpaceNormalMap: ObjectSpaceNormalMap,
    Face4: Face4,
    LineStrip: LineStrip,
    LinePieces: LinePieces,
    MeshFaceMaterial: MeshFaceMaterial,
    MultiMaterial: MultiMaterial,
    PointCloud: PointCloud,
    Particle: Particle,
    ParticleSystem: ParticleSystem,
    PointCloudMaterial: PointCloudMaterial,
    ParticleBasicMaterial: ParticleBasicMaterial,
    ParticleSystemMaterial: ParticleSystemMaterial,
    Vertex: Vertex,
    DynamicBufferAttribute: DynamicBufferAttribute,
    Int8Attribute: Int8Attribute,
    Uint8Attribute: Uint8Attribute,
    Uint8ClampedAttribute: Uint8ClampedAttribute,
    Int16Attribute: Int16Attribute,
    Uint16Attribute: Uint16Attribute,
    Int32Attribute: Int32Attribute,
    Uint32Attribute: Uint32Attribute,
    Float32Attribute: Float32Attribute,
    Float64Attribute: Float64Attribute,
    ClosedSplineCurve3: ClosedSplineCurve3,
    SplineCurve3: SplineCurve3,
    Spline: Spline,
    AxisHelper: AxisHelper,
    BoundingBoxHelper: BoundingBoxHelper,
    EdgesHelper: EdgesHelper,
    WireframeHelper: WireframeHelper,
    XHRLoader: XHRLoader,
    BinaryTextureLoader: BinaryTextureLoader,
    GeometryUtils: GeometryUtils,
    Projector: Projector,
    CanvasRenderer: CanvasRenderer,
    JSONLoader: JSONLoader,
    SceneUtils: SceneUtils,
    LensFlare: LensFlare
  });

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author julianwa / https://github.com/julianwa
   */

  const installProjector = ({ THREE }) => {
    const RenderableObject = function () {
    	this.id = 0;

    	this.object = null;
    	this.z = 0;
    	this.renderOrder = 0;
    };

    //

    const RenderableFace = function () {
    	this.id = 0;

    	this.v1 = new RenderableVertex();
    	this.v2 = new RenderableVertex();
    	this.v3 = new RenderableVertex();

    	this.normalModel = new THREE.Vector3();

    	this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];
    	this.vertexNormalsLength = 0;

    	this.color = new THREE.Color();
    	this.material = null;
    	this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];

    	this.z = 0;
    	this.renderOrder = 0;
    };

    //

    const RenderableVertex = function () {
    	this.position = new THREE.Vector3();
    	this.positionWorld = new THREE.Vector3();
    	this.positionScreen = new THREE.Vector4();

    	this.visible = true;
    };

    RenderableVertex.prototype.copy = function (vertex) {
    	this.positionWorld.copy(vertex.positionWorld);
    	this.positionScreen.copy(vertex.positionScreen);
    };

    //

    const RenderableLine = function () {
    	this.id = 0;

    	this.v1 = new RenderableVertex();
    	this.v2 = new RenderableVertex();

    	this.vertexColors = [ new THREE.Color(), new THREE.Color() ];
    	this.material = null;

    	this.z = 0;
    	this.renderOrder = 0;
    };

    //

    const RenderableSprite = function () {
    	this.id = 0;

    	this.object = null;

    	this.x = 0;
    	this.y = 0;
    	this.z = 0;

    	this.rotation = 0;
    	this.scale = new THREE.Vector2();

    	this.material = null;
    	this.renderOrder = 0;
    };

    //

    const Projector = function () {
    	var _object; var _objectCount; var _objectPool = []; var _objectPoolLength = 0;
    		var _vertex; var _vertexCount; var _vertexPool = []; var _vertexPoolLength = 0;
    		var _face; var _faceCount; var _facePool = []; var _facePoolLength = 0;
    		var _line; var _lineCount; var _linePool = []; var _linePoolLength = 0;
    		var _sprite; var _spriteCount; var _spritePool = []; var _spritePoolLength = 0;

    		var _renderData = { objects: [], lights: [], elements: [] };

    		var _vector3 = new THREE.Vector3();
    		var _vector4 = new THREE.Vector4();

    		var _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1));
    		var _boundingBox = new THREE.Box3();
    		var _points3 = new Array(3);

    		var _viewMatrix = new THREE.Matrix4();
    		var _viewProjectionMatrix = new THREE.Matrix4();

    		var _modelMatrix;
    		var _modelViewProjectionMatrix = new THREE.Matrix4();

    		var _normalMatrix = new THREE.Matrix3();

    		var _frustum = new THREE.Frustum();

    		var _clippedVertex1PositionScreen = new THREE.Vector4();
    		var _clippedVertex2PositionScreen = new THREE.Vector4();

    	//

    	this.projectVector = function (vector, camera) {
    		console.warn('THREE.Projector: .projectVector() is now vector.project().');
    		vector.project(camera);
    	};

    	this.unprojectVector = function (vector, camera) {
    		console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');
    		vector.unproject(camera);
    	};

    	this.pickingRay = function () {
    		console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');
    	};

    	//

    	var RenderList = function () {
    		var normals = [];
    		var colors = [];
    		var uvs = [];

    		var object = null;
    		var material = null;

    		var normalMatrix = new THREE.Matrix3();

    		function setObject (value) {
    			object = value;
    			material = object.material;

    			normalMatrix.getNormalMatrix(object.matrixWorld);

    			normals.length = 0;
    			colors.length = 0;
    			uvs.length = 0;
    		}

    		function projectVertex (vertex) {
    			var position = vertex.position;
    			var positionWorld = vertex.positionWorld;
    			var positionScreen = vertex.positionScreen;

    			positionWorld.copy(position).applyMatrix4(_modelMatrix);
    			positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);

    			var invW = 1 / positionScreen.w;

    			positionScreen.x *= invW;
    			positionScreen.y *= invW;
    			positionScreen.z *= invW;

    			vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 &&
    					 positionScreen.y >= -1 && positionScreen.y <= 1 &&
    					 positionScreen.z >= -1 && positionScreen.z <= 1;
    		}

    		function pushVertex (x, y, z) {
    			_vertex = getNextVertexInPool();
    			_vertex.position.set(x, y, z);

    			projectVertex(_vertex);
    		}

    		function pushNormal (x, y, z) {
    			normals.push(x, y, z);
    		}

    		function pushColor (r, g, b) {
    			colors.push(r, g, b);
    		}

    		function pushUv (x, y) {
    			uvs.push(x, y);
    		}

    		function checkTriangleVisibility (v1, v2, v3) {
    			if (v1.visible === true || v2.visible === true || v3.visible === true) return true;

    			_points3[ 0 ] = v1.positionScreen;
    			_points3[ 1 ] = v2.positionScreen;
    			_points3[ 2 ] = v3.positionScreen;

    			return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));
    		}

    		function checkBackfaceCulling (v1, v2, v3) {
    			return ((v3.positionScreen.x - v1.positionScreen.x) *
    				    (v2.positionScreen.y - v1.positionScreen.y) -
    				    (v3.positionScreen.y - v1.positionScreen.y) *
    				    (v2.positionScreen.x - v1.positionScreen.x)) < 0;
    		}

    		function pushLine (a, b) {
    			var v1 = _vertexPool[ a ];
    			var v2 = _vertexPool[ b ];

    			// Clip

    			v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);
    			v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);

    			if (clipLine(v1.positionScreen, v2.positionScreen) === true) {
    				// Perform the perspective divide
    				v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);
    				v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);

    				_line = getNextLineInPool();
    				_line.id = object.id;
    				_line.v1.copy(v1);
    				_line.v2.copy(v2);
    				_line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);
    				_line.renderOrder = object.renderOrder;

    				_line.material = object.material;

    				if (object.material.vertexColors === THREE.VertexColors) {
    					_line.vertexColors[ 0 ].fromArray(colors, a * 3);
    					_line.vertexColors[ 1 ].fromArray(colors, b * 3);
    				}

    				_renderData.elements.push(_line);
    			}
    		}

    		function pushTriangle (a, b, c, material) {
    			var v1 = _vertexPool[ a ];
    			var v2 = _vertexPool[ b ];
    			var v3 = _vertexPool[ c ];

    			if (checkTriangleVisibility(v1, v2, v3) === false) return;

    			if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {
    				_face = getNextFaceInPool();

    				_face.id = object.id;
    				_face.v1.copy(v1);
    				_face.v2.copy(v2);
    				_face.v3.copy(v3);
    				_face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;
    				_face.renderOrder = object.renderOrder;

    				// face normal
    				_vector3.subVectors(v3.position, v2.position);
    				_vector4.subVectors(v1.position, v2.position);
    				_vector3.cross(_vector4);
    				_face.normalModel.copy(_vector3);
    				_face.normalModel.applyMatrix3(normalMatrix).normalize();

    				for (var i = 0; i < 3; i++) {
    					var normal = _face.vertexNormalsModel[ i ];
    					normal.fromArray(normals, arguments[ i ] * 3);
    					normal.applyMatrix3(normalMatrix).normalize();

    					var uv = _face.uvs[ i ];
    					uv.fromArray(uvs, arguments[ i ] * 2);
    				}

    				_face.vertexNormalsLength = 3;

    				_face.material = material;

    				if (material.vertexColors === THREE.FaceColors || material.vertexColors === THREE.VertexColors) {
    					_face.color.fromArray(colors, a * 3);
    				}

    				_renderData.elements.push(_face);
    			}
    		}

    		return {
    			setObject: setObject,
    			projectVertex: projectVertex,
    			checkTriangleVisibility: checkTriangleVisibility,
    			checkBackfaceCulling: checkBackfaceCulling,
    			pushVertex: pushVertex,
    			pushNormal: pushNormal,
    			pushColor: pushColor,
    			pushUv: pushUv,
    			pushLine: pushLine,
    			pushTriangle: pushTriangle
    		};
    	};

    	var renderList = new RenderList();

    	function projectObject (object) {
    		if (object.visible === false) return;

    		if (object instanceof THREE.Light) {
    			_renderData.lights.push(object);
    		} else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points) {
    			if (object.material.visible === false) return;
    			if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;

    			addObject(object);
    		} else if (object instanceof THREE.Sprite) {
    			if (object.material.visible === false) return;
    			if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;

    			addObject(object);
    		}

    		var children = object.children;

    		for (var i = 0, l = children.length; i < l; i++) {
    			projectObject(children[ i ]);
    		}
    	}

    	function addObject (object) {
    		_object = getNextObjectInPool();
    		_object.id = object.id;
    		_object.object = object;

    		_vector3.setFromMatrixPosition(object.matrixWorld);
    		_vector3.applyMatrix4(_viewProjectionMatrix);
    		_object.z = _vector3.z;
    		_object.renderOrder = object.renderOrder;

    		_renderData.objects.push(_object);
    	}

    	this.projectScene = function (scene, camera, sortObjects, sortElements) {
    		_faceCount = 0;
    		_lineCount = 0;
    		_spriteCount = 0;

    		_renderData.elements.length = 0;

    		if (scene.autoUpdate === true) scene.updateMatrixWorld();
    		if (camera.parent === null) camera.updateMatrixWorld();

    		_viewMatrix.copy(camera.matrixWorldInverse);
    		_viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);

    		_frustum.setFromMatrix(_viewProjectionMatrix);

    		//

    		_objectCount = 0;

    		_renderData.objects.length = 0;
    		_renderData.lights.length = 0;

    		projectObject(scene);

    		if (sortObjects === true) {
    			_renderData.objects.sort(painterSort);
    		}

    		//

    		var objects = _renderData.objects;

    		for (var o = 0, ol = objects.length; o < ol; o++) {
    			var object = objects[ o ].object;
    			var geometry = object.geometry;

    			renderList.setObject(object);

    			_modelMatrix = object.matrixWorld;

    			_vertexCount = 0;

    			if (object instanceof THREE.Mesh) {
    				if (geometry instanceof THREE.BufferGeometry) {
    					var material = object.material;

    					var isMultiMaterial = Array.isArray(material);

    					var attributes = geometry.attributes;
    					var groups = geometry.groups;

    					if (attributes.position === undefined) continue;

    					var positions = attributes.position.array;

    					for (var i = 0, l = positions.length; i < l; i += 3) {
    						var x = positions[ i ];
    						var y = positions[ i + 1 ];
    						var z = positions[ i + 2 ];

    						if (material.morphTargets === true) {
    							var morphTargets = geometry.morphAttributes.position;
    							var morphInfluences = object.morphTargetInfluences;

    							for (var t = 0, tl = morphTargets.length; t < tl; t++) {
    								var influence = morphInfluences[ t ];

    								if (influence === 0) continue;

    								var target = morphTargets[ t ];

    								x += (target.getX(i / 3) - positions[ i ]) * influence;
    								y += (target.getY(i / 3) - positions[ i + 1 ]) * influence;
    								z += (target.getZ(i / 3) - positions[ i + 2 ]) * influence;
    							}
    						}

    						renderList.pushVertex(x, y, z);
    					}

    					if (attributes.normal !== undefined) {
    						var normals = attributes.normal.array;

    						for (var i = 0, l = normals.length; i < l; i += 3) {
    							renderList.pushNormal(normals[ i ], normals[ i + 1 ], normals[ i + 2 ]);
    						}
    					}

    					if (attributes.color !== undefined) {
    						var colors = attributes.color.array;

    						for (var i = 0, l = colors.length; i < l; i += 3) {
    							renderList.pushColor(colors[ i ], colors[ i + 1 ], colors[ i + 2 ]);
    						}
    					}

    					if (attributes.uv !== undefined) {
    						var uvs = attributes.uv.array;

    						for (var i = 0, l = uvs.length; i < l; i += 2) {
    							renderList.pushUv(uvs[ i ], uvs[ i + 1 ]);
    						}
    					}

    					if (geometry.index !== null) {
    						var indices = geometry.index.array;

    						if (groups.length > 0) {
    							for (var g = 0; g < groups.length; g++) {
    								var group = groups[ g ];

    								material = isMultiMaterial === true
    									 ? object.material[ group.materialIndex ]
    									 : object.material;

    								if (material === undefined) continue;

    								for (var i = group.start, l = group.start + group.count; i < l; i += 3) {
    									renderList.pushTriangle(indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material);
    								}
    							}
    						} else {
    							for (var i = 0, l = indices.length; i < l; i += 3) {
    								renderList.pushTriangle(indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material);
    							}
    						}
    					} else {
    						if (groups.length > 0) {
    							for (var g = 0; g < groups.length; g++) {
    								var group = groups[ g ];

    								material = isMultiMaterial === true
    									 ? object.material[ group.materialIndex ]
    									 : object.material;

    								if (material === undefined) continue;

    								for (var i = group.start, l = group.start + group.count; i < l; i += 3) {
    									renderList.pushTriangle(i, i + 1, i + 2, material);
    								}
    							}
    						} else {
    							for (var i = 0, l = positions.length / 3; i < l; i += 3) {
    								renderList.pushTriangle(i, i + 1, i + 2, material);
    							}
    						}
    					}
    				} else if (geometry instanceof THREE.Geometry) {
    					var vertices = geometry.vertices;
    					var faces = geometry.faces;
    					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];

    					_normalMatrix.getNormalMatrix(_modelMatrix);

    					var material = object.material;

    					var isMultiMaterial = Array.isArray(material);

    					for (var v = 0, vl = vertices.length; v < vl; v++) {
    						var vertex = vertices[ v ];

    						_vector3.copy(vertex);

    						if (material.morphTargets === true) {
    							var morphTargets = geometry.morphTargets;
    							var morphInfluences = object.morphTargetInfluences;

    							for (var t = 0, tl = morphTargets.length; t < tl; t++) {
    								var influence = morphInfluences[ t ];

    								if (influence === 0) continue;

    								var target = morphTargets[ t ];
    								var targetVertex = target.vertices[ v ];

    								_vector3.x += (targetVertex.x - vertex.x) * influence;
    								_vector3.y += (targetVertex.y - vertex.y) * influence;
    								_vector3.z += (targetVertex.z - vertex.z) * influence;
    							}
    						}

    						renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);
    					}

    					for (var f = 0, fl = faces.length; f < fl; f++) {
    						var face = faces[ f ];

    						material = isMultiMaterial === true
    							 ? object.material[ face.materialIndex ]
    							 : object.material;

    						if (material === undefined) continue;

    						var side = material.side;

    						var v1 = _vertexPool[ face.a ];
    						var v2 = _vertexPool[ face.b ];
    						var v3 = _vertexPool[ face.c ];

    						if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;

    						var visible = renderList.checkBackfaceCulling(v1, v2, v3);

    						if (side !== THREE.DoubleSide) {
    							if (side === THREE.FrontSide && visible === false) continue;
    							if (side === THREE.BackSide && visible === true) continue;
    						}

    						_face = getNextFaceInPool();

    						_face.id = object.id;
    						_face.v1.copy(v1);
    						_face.v2.copy(v2);
    						_face.v3.copy(v3);

    						_face.normalModel.copy(face.normal);

    						if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {
    							_face.normalModel.negate();
    						}

    						_face.normalModel.applyMatrix3(_normalMatrix).normalize();

    						var faceVertexNormals = face.vertexNormals;

    						for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {
    							var normalModel = _face.vertexNormalsModel[ n ];
    							normalModel.copy(faceVertexNormals[ n ]);

    							if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {
    								normalModel.negate();
    							}

    							normalModel.applyMatrix3(_normalMatrix).normalize();
    						}

    						_face.vertexNormalsLength = faceVertexNormals.length;

    						var vertexUvs = faceVertexUvs[ f ];

    						if (vertexUvs !== undefined) {
    							for (var u = 0; u < 3; u++) {
    								_face.uvs[ u ].copy(vertexUvs[ u ]);
    							}
    						}

    						_face.color = face.color;
    						_face.material = material;

    						_face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;
    						_face.renderOrder = object.renderOrder;

    						_renderData.elements.push(_face);
    					}
    				}
    			} else if (object instanceof THREE.Line) {
    				_modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);

    				if (geometry instanceof THREE.BufferGeometry) {
    					var attributes = geometry.attributes;

    					if (attributes.position !== undefined) {
    						var positions = attributes.position.array;

    						for (var i = 0, l = positions.length; i < l; i += 3) {
    							renderList.pushVertex(positions[ i ], positions[ i + 1 ], positions[ i + 2 ]);
    						}

    						if (attributes.color !== undefined) {
    							var colors = attributes.color.array;

    							for (var i = 0, l = colors.length; i < l; i += 3) {
    								renderList.pushColor(colors[ i ], colors[ i + 1 ], colors[ i + 2 ]);
    							}
    						}

    						if (geometry.index !== null) {
    							var indices = geometry.index.array;

    							for (var i = 0, l = indices.length; i < l; i += 2) {
    								renderList.pushLine(indices[ i ], indices[ i + 1 ]);
    							}
    						} else {
    							var step = object instanceof THREE.LineSegments ? 2 : 1;

    							for (var i = 0, l = (positions.length / 3) - 1; i < l; i += step) {
    								renderList.pushLine(i, i + 1);
    							}
    						}
    					}
    				} else if (geometry instanceof THREE.Geometry) {
    					var vertices = object.geometry.vertices;

    					if (vertices.length === 0) continue;

    					v1 = getNextVertexInPool();
    					v1.positionScreen.copy(vertices[ 0 ]).applyMatrix4(_modelViewProjectionMatrix);

    					var step = object instanceof THREE.LineSegments ? 2 : 1;

    					for (var v = 1, vl = vertices.length; v < vl; v++) {
    						v1 = getNextVertexInPool();
    						v1.positionScreen.copy(vertices[ v ]).applyMatrix4(_modelViewProjectionMatrix);

    						if ((v + 1) % step > 0) continue;

    						v2 = _vertexPool[ _vertexCount - 2 ];

    						_clippedVertex1PositionScreen.copy(v1.positionScreen);
    						_clippedVertex2PositionScreen.copy(v2.positionScreen);

    						if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {
    							// Perform the perspective divide
    							_clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);
    							_clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);

    							_line = getNextLineInPool();

    							_line.id = object.id;
    							_line.v1.positionScreen.copy(_clippedVertex1PositionScreen);
    							_line.v2.positionScreen.copy(_clippedVertex2PositionScreen);

    							_line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);
    							_line.renderOrder = object.renderOrder;

    							_line.material = object.material;

    							if (object.material.vertexColors === THREE.VertexColors) {
    								_line.vertexColors[ 0 ].copy(object.geometry.colors[ v ]);
    								_line.vertexColors[ 1 ].copy(object.geometry.colors[ v - 1 ]);
    							}

    							_renderData.elements.push(_line);
    						}
    					}
    				}
    			} else if (object instanceof THREE.Points) {
    				_modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);

    				if (geometry instanceof THREE.Geometry) {
    					var vertices = object.geometry.vertices;

    					for (var v = 0, vl = vertices.length; v < vl; v++) {
    						var vertex = vertices[ v ];

    						_vector4.set(vertex.x, vertex.y, vertex.z, 1);
    						_vector4.applyMatrix4(_modelViewProjectionMatrix);

    						pushPoint(_vector4, object, camera);
    					}
    				} else if (geometry instanceof THREE.BufferGeometry) {
    					var attributes = geometry.attributes;

    					if (attributes.position !== undefined) {
    						var positions = attributes.position.array;

    						for (var i = 0, l = positions.length; i < l; i += 3) {
    							_vector4.set(positions[ i ], positions[ i + 1 ], positions[ i + 2 ], 1);
    							_vector4.applyMatrix4(_modelViewProjectionMatrix);

    							pushPoint(_vector4, object, camera);
    						}
    					}
    				}
    			} else if (object instanceof THREE.Sprite) {
    				object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
    				_vector4.set(_modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1);
    				_vector4.applyMatrix4(_viewProjectionMatrix);

    				pushPoint(_vector4, object, camera);
    			}
    		}

    		if (sortElements === true) {
    			_renderData.elements.sort(painterSort);
    		}

    		return _renderData;
    	};

    	function pushPoint (_vector4, object, camera) {
    		var invW = 1 / _vector4.w;

    		_vector4.z *= invW;

    		if (_vector4.z >= -1 && _vector4.z <= 1) {
    			_sprite = getNextSpriteInPool();
    			_sprite.id = object.id;
    			_sprite.x = _vector4.x * invW;
    			_sprite.y = _vector4.y * invW;
    			_sprite.z = _vector4.z;
    			_sprite.renderOrder = object.renderOrder;
    			_sprite.object = object;

    			_sprite.rotation = object.rotation;

    			_sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[ 0 ]) / (_vector4.w + camera.projectionMatrix.elements[ 12 ]));
    			_sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[ 5 ]) / (_vector4.w + camera.projectionMatrix.elements[ 13 ]));

    			_sprite.material = object.material;

    			_renderData.elements.push(_sprite);
    		}
    	}

    	// Pools

    	function getNextObjectInPool () {
    		if (_objectCount === _objectPoolLength) {
    			var object = new RenderableObject();
    			_objectPool.push(object);
    			_objectPoolLength++;
    			_objectCount++;
    			return object;
    		}

    		return _objectPool[ _objectCount++ ];
    	}

    	function getNextVertexInPool () {
    		if (_vertexCount === _vertexPoolLength) {
    			var vertex = new RenderableVertex();
    			_vertexPool.push(vertex);
    			_vertexPoolLength++;
    			_vertexCount++;
    			return vertex;
    		}

    		return _vertexPool[ _vertexCount++ ];
    	}

    	function getNextFaceInPool () {
    		if (_faceCount === _facePoolLength) {
    			var face = new RenderableFace();
    			_facePool.push(face);
    			_facePoolLength++;
    			_faceCount++;
    			return face;
    		}

    		return _facePool[ _faceCount++ ];
    	}

    	function getNextLineInPool () {
    		if (_lineCount === _linePoolLength) {
    			var line = new RenderableLine();
    			_linePool.push(line);
    			_linePoolLength++;
    			_lineCount++;
    			return line;
    		}

    		return _linePool[ _lineCount++ ];
    	}

    	function getNextSpriteInPool () {
    		if (_spriteCount === _spritePoolLength) {
    			var sprite = new RenderableSprite();
    			_spritePool.push(sprite);
    			_spritePoolLength++;
    			_spriteCount++;
    			return sprite;
    		}

    		return _spritePool[ _spriteCount++ ];
    	}

    	//

    	function painterSort (a, b) {
    		if (a.renderOrder !== b.renderOrder) {
    			return a.renderOrder - b.renderOrder;
    		} else if (a.z !== b.z) {
    			return b.z - a.z;
    		} else if (a.id !== b.id) {
    			return a.id - b.id;
    		} else {
    			return 0;
    		}
    	}

    	function clipLine (s1, s2) {
    		var alpha1 = 0; var alpha2 = 1;

    			// Calculate the boundary coordinate of each vertex for the near and far clip planes,
    			// Z = -1 and Z = +1, respectively.

    			var bc1near = s1.z + s1.w;
    			var bc2near = s2.z + s2.w;
    			var bc1far = -s1.z + s1.w;
    			var bc2far = -s2.z + s2.w;

    		if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {
    			// Both vertices lie entirely within all clip planes.
    			return true;
    		} else if ((bc1near < 0 && bc2near < 0) || (bc1far < 0 && bc2far < 0)) {
    			// Both vertices lie entirely outside one of the clip planes.
    			return false;
    		} else {
    			// The line segment spans at least one clip plane.

    			if (bc1near < 0) {
    				// v1 lies outside the near plane, v2 inside
    				alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));
    			} else if (bc2near < 0) {
    				// v2 lies outside the near plane, v1 inside
    				alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));
    			}

    			if (bc1far < 0) {
    				// v1 lies outside the far plane, v2 inside
    				alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));
    			} else if (bc2far < 0) {
    				// v2 lies outside the far plane, v2 inside
    				alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));
    			}

    			if (alpha2 < alpha1) {
    				// The line segment spans two boundaries, but is outside both of them.
    				// (This can't happen when we're only clipping against just near/far but good
    				//  to leave the check here for future usage if other clip planes are added.)
    				return false;
    			} else {
    				// Update the s1 and s2 vertices to match the clipped line segment.
    				s1.lerp(s2, alpha1);
    				s2.lerp(s1, 1 - alpha2);

    				return true;
    			}
    		}
    	}
    };

    return { Projector, RenderableObject, RenderableFace, RenderableVertex, RenderableLine, RenderableSprite };
  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  const installSVGRenderer = ({ THREE, Projector, RenderableSprite, RenderableLine, RenderableFace, document }) => {
    const SVGObject = function (node) {
    	THREE.Object3D.call(this);

    	this.node = node;
    };

    SVGObject.prototype = Object.create(THREE.Object3D.prototype);
    SVGObject.prototype.constructor = SVGObject;

    const SVGRenderer = function () {
    	console.log('THREE.SVGRenderer', THREE.REVISION);

    	var _this = this;
    		var _renderData; var _elements; var _lights;
    		var _projector = new Projector();
    		var _svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    		var _svgWidth; var _svgHeight; var _svgWidthHalf; var _svgHeightHalf;

    		var _v1; var _v2; var _v3;

    		var _clipBox = new THREE.Box2();
    		var _elemBox = new THREE.Box2();

    		var _color = new THREE.Color();
    		var _diffuseColor = new THREE.Color();
    		var _ambientLight = new THREE.Color();
    		var _directionalLights = new THREE.Color();
    		var _pointLights = new THREE.Color();
    		var _clearColor = new THREE.Color();
    		var _clearAlpha = 1;

    		var _vector3 = new THREE.Vector3(); // Needed for PointLight
    		var _centroid = new THREE.Vector3();
    		var _normal = new THREE.Vector3();
    		var _normalViewMatrix = new THREE.Matrix3();

    		var _viewMatrix = new THREE.Matrix4();
    		var _viewProjectionMatrix = new THREE.Matrix4();

    		var _svgPathPool = [];
    		var _svgNode; var _pathCount = 0;

    		var _currentPath; var _currentStyle;

    		var _quality = 1; var _precision = null;

      if (_svg.style === undefined) {
        // FIX: Is this correct?
        _svg.style = {};
      }

    	this.domElement = _svg;

    	this.autoClear = true;
    	this.sortObjects = true;
    	this.sortElements = true;

    	this.info = {

    		render: {

    			vertices: 0,
    			faces: 0

    		}

    	};

    	this.setQuality = function (quality) {
    		switch (quality) {
    			case 'high': _quality = 1; break;
    			case 'low': _quality = 0; break;
    		}
    	};

    	this.setClearColor = function (color, alpha) {
    		_clearColor.set(color);
    		_clearAlpha = alpha !== undefined ? alpha : 1;
    	};

    	this.setPixelRatio = function () {};

    	this.setSize = function (width, height) {
    		_svgWidth = width; _svgHeight = height;
    		_svgWidthHalf = _svgWidth / 2; _svgHeightHalf = _svgHeight / 2;

    		_svg.setAttribute('viewBox', (-_svgWidthHalf) + ' ' + (-_svgHeightHalf) + ' ' + _svgWidth + ' ' + _svgHeight);
    		_svg.setAttribute('width', _svgWidth);
    		_svg.setAttribute('height', _svgHeight);

    		_clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);
    		_clipBox.max.set(_svgWidthHalf, _svgHeightHalf);
    	};

    	this.setPrecision = function (precision) {
    		_precision = precision;
    	};

    	function removeChildNodes () {
    		_pathCount = 0;

    		while (_svg.childNodes.length > 0) {
    			_svg.removeChild(_svg.childNodes[ 0 ]);
    		}
    	}

    	function getSvgColor (color, opacity) {
    		var arg = Math.floor(color.r * 255) + ',' + Math.floor(color.g * 255) + ',' + Math.floor(color.b * 255);

    		if (opacity === undefined || opacity === 1) return 'rgb(' + arg + ')';

    		return 'rgb(' + arg + '); fill-opacity: ' + opacity;
    	}

    	function convert (c) {
    		return _precision !== null ? c.toFixed(_precision) : c;
    	}

    	this.clear = function () {
    		removeChildNodes();
    		_svg.style.backgroundColor = getSvgColor(_clearColor, _clearAlpha);
    	};

    	this.render = function (scene, camera) {
    		if (camera instanceof THREE.Camera === false) {
    			console.error('THREE.SVGRenderer.render: camera is not an instance of THREE.Camera.');
    			return;
    		}

    		var background = scene.background;

    		if (background && background.isColor) {
    			removeChildNodes();
    			_svg.style.backgroundColor = getSvgColor(background);
    		} else if (this.autoClear === true) {
    			this.clear();
    		}

    		_this.info.render.vertices = 0;
    		_this.info.render.faces = 0;

    		_viewMatrix.copy(camera.matrixWorldInverse);
    		_viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);

    		_renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);
    		_elements = _renderData.elements;
    		_lights = _renderData.lights;

    		_normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);

    		calculateLights(_lights);

    		 // reset accumulated path

    		_currentPath = '';
    		_currentStyle = '';

    		for (var e = 0, el = _elements.length; e < el; e++) {
    			var element = _elements[ e ];
    			var material = element.material;

    			if (material === undefined || material.opacity === 0) continue;

    			_elemBox.makeEmpty();

    			if (element instanceof RenderableSprite) {
    				_v1 = element;
    				_v1.x *= _svgWidthHalf; _v1.y *= -_svgHeightHalf;

    				renderSprite(_v1, element, material);
    			} else if (element instanceof RenderableLine) {
    				_v1 = element.v1; _v2 = element.v2;

    				_v1.positionScreen.x *= _svgWidthHalf; _v1.positionScreen.y *= -_svgHeightHalf;
    				_v2.positionScreen.x *= _svgWidthHalf; _v2.positionScreen.y *= -_svgHeightHalf;

    				_elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);

    				if (_clipBox.intersectsBox(_elemBox) === true) {
    					renderLine(_v1, _v2, element, material);
    				}
    			} else if (element instanceof RenderableFace) {
    				_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;

    				if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;
    				if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;
    				if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;

    				_v1.positionScreen.x *= _svgWidthHalf; _v1.positionScreen.y *= -_svgHeightHalf;
    				_v2.positionScreen.x *= _svgWidthHalf; _v2.positionScreen.y *= -_svgHeightHalf;
    				_v3.positionScreen.x *= _svgWidthHalf; _v3.positionScreen.y *= -_svgHeightHalf;

    				_elemBox.setFromPoints([
    					_v1.positionScreen,
    					_v2.positionScreen,
    					_v3.positionScreen
    				]);

    				if (_clipBox.intersectsBox(_elemBox) === true) {
    					renderFace3(_v1, _v2, _v3, element, material);
    				}
    			}
    		}

    		flushPath(); // just to flush last svg:path

    		scene.traverseVisible(function (object) {
    			 if (object instanceof SVGObject) {
    				_vector3.setFromMatrixPosition(object.matrixWorld);
    				_vector3.applyMatrix4(_viewProjectionMatrix);

    				if (_vector3.z < -1 || _vector3.z > 1) return;

    				var x = _vector3.x * _svgWidthHalf;
    				var y = -_vector3.y * _svgHeightHalf;

    				var node = object.node;
    				node.setAttribute('transform', 'translate(' + x + ',' + y + ')');

    				_svg.appendChild(node);
    			}
    		});
    	};

    	function calculateLights (lights) {
    		_ambientLight.setRGB(0, 0, 0);
    		_directionalLights.setRGB(0, 0, 0);
    		_pointLights.setRGB(0, 0, 0);

    		for (var l = 0, ll = lights.length; l < ll; l++) {
    			var light = lights[ l ];
    			var lightColor = light.color;

    			if (light.isAmbientLight) {
    				_ambientLight.r += lightColor.r;
    				_ambientLight.g += lightColor.g;
    				_ambientLight.b += lightColor.b;
    			} else if (light.isDirectionalLight) {
    				_directionalLights.r += lightColor.r;
    				_directionalLights.g += lightColor.g;
    				_directionalLights.b += lightColor.b;
    			} else if (light.isPointLight) {
    				_pointLights.r += lightColor.r;
    				_pointLights.g += lightColor.g;
    				_pointLights.b += lightColor.b;
    			}
    		}
    	}

    	function calculateLight (lights, position, normal, color) {
    		for (var l = 0, ll = lights.length; l < ll; l++) {
    			var light = lights[ l ];
    			var lightColor = light.color;

    			if (light.isDirectionalLight) {
    				var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();

    				var amount = normal.dot(lightPosition);

    				if (amount <= 0) continue;

    				amount *= light.intensity;

    				color.r += lightColor.r * amount;
    				color.g += lightColor.g * amount;
    				color.b += lightColor.b * amount;
    			} else if (light.isPointLight) {
    				var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);

    				var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());

    				if (amount <= 0) continue;

    				amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);

    				if (amount == 0) continue;

    				amount *= light.intensity;

    				color.r += lightColor.r * amount;
    				color.g += lightColor.g * amount;
    				color.b += lightColor.b * amount;
    			}
    		}
    	}

    	function renderSprite (v1, element, material) {
    		var scaleX = element.scale.x * _svgWidthHalf;
    		var scaleY = element.scale.y * _svgHeightHalf;

    		if (material.isPointsMaterial) {
    			scaleX *= material.size;
    			scaleY *= material.size;
    		}

    		var path = 'M' + convert(v1.x - scaleX * 0.5) + ',' + convert(v1.y - scaleY * 0.5) + 'h' + convert(scaleX) + 'v' + convert(scaleY) + 'h' + convert(-scaleX) + 'z';
    		var style = '';

    		if (material.isSpriteMaterial || material.isPointsMaterial) {
    			style = 'fill:' + getSvgColor(material.color, material.opacity);
    		}

    		addPath(style, path);
    	}

    	function renderLine (v1, v2, element, material) {
    		var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y);

    		if (material.isLineBasicMaterial) {
    			var style = 'fill:none;stroke:' + getSvgColor(material.color, material.opacity) + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;

    			if (material.isLineDashedMaterial) {
    				style = style + ';stroke-dasharray:' + material.dashSize + ',' + material.gapSize;
    			}

    			addPath(style, path);
    		}
    	}

    	function renderFace3 (v1, v2, v3, element, material) {
    		_this.info.render.vertices += 3;
    		_this.info.render.faces++;

    		var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y) + 'L' + convert(v3.positionScreen.x) + ',' + convert(v3.positionScreen.y) + 'z';
    		var style = '';

    		if (material.isMeshBasicMaterial) {
    			_color.copy(material.color);

    			if (material.vertexColors === THREE.FaceColors || material.vertexColors === THREE.VertexColors) {
    				_color.multiply(element.color);
    			}
    		} else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {
    			_diffuseColor.copy(material.color);

    			if (material.vertexColors === THREE.FaceColors || material.vertexColors === THREE.VertexColors) {
    				_diffuseColor.multiply(element.color);
    			}

    			_color.copy(_ambientLight);

    			_centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);

    			calculateLight(_lights, _centroid, element.normalModel, _color);

    			_color.multiply(_diffuseColor).add(material.emissive);
    		} else if (material.isMeshNormalMaterial) {
    			_normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);

    			_color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);
    		}

    		if (material.wireframe) {
    			style = 'fill:none;stroke:' + getSvgColor(_color, material.opacity) + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;
    		} else {
    			style = 'fill:' + getSvgColor(_color, material.opacity);
    		}

    		addPath(style, path);
    	}

    	function addPath (style, path) {
    		if (_currentStyle === style) {
    			_currentPath += path;
    		} else {
    			flushPath();

    			_currentStyle = style;
    			_currentPath = path;
    		}
    	}

    	function flushPath () {
    		if (_currentPath) {
    			_svgNode = getPathNode(_pathCount++);
    			_svgNode.setAttribute('d', _currentPath);
    			_svgNode.setAttribute('style', _currentStyle);
    			_svg.appendChild(_svgNode);
    		}

    		_currentPath = '';
    		_currentStyle = '';
    	}

    	function getPathNode (id) {
    		if (_svgPathPool[ id ] == null) {
    			_svgPathPool[ id ] = document.createElementNS('http://www.w3.org/2000/svg', 'path');

    			if (_quality == 0) {
    				_svgPathPool[ id ].setAttribute('shape-rendering', 'crispEdges'); // optimizeSpeed
    			}

    			return _svgPathPool[ id ];
    		}

    		return _svgPathPool[ id ];
    	}
    };

    return { SVGRenderer };
  };

  const pathsToThreejsSegments = (geometry) => {
    const segments = [];
    for (const path of geometry) {
      for (const [start, end] of toSegments({}, path)) {
        segments.push([start, end]);
      }
    }
    return segments;
  };

  const solidToThreejsSolid = (geometry) => {
    const normals = [];
    const positions = [];
    for (const triangle of canonicalize$2(toTriangles({}, toPolygons({}, geometry)))) {
      for (const point of triangle) {
        const [x, y, z] = toPlane(triangle);
        normals.push(x, y, z);
        positions.push(...point);
      }
    }
    return { normals, positions };
  };

  const z0SurfaceToThreejsSurface = (geometry) => {
    const normals = [];
    const positions = [];
    const outputTriangle = (triangle) => {
      for (const point of triangle) {
        const [x, y, z] = toPlane(triangle);
        normals.push(x, y, z);
        positions.push(...point);
      }
    };
    for (const triangle of toTriangles({}, makeConvex$2({}, geometry))) {
      outputTriangle(triangle);
      outputTriangle(flip(triangle));
    }
    return { normals, positions };
  };

  const toThreejsGeometry = (geometry) => {
    if (geometry.isThreejsGeometry) {
      return geometry;
    } else if (geometry.assembly) {
      return { assembly: geometry.assembly.map(toThreejsGeometry), tags: geometry.tags, isThreejsGeometry: true };
    } else if (geometry.paths) {
      return { threejsSegments: pathsToThreejsSegments(geometry.paths), tags: geometry.tags, isThreejsGeometry: true };
    } else if (geometry.solid) {
      return { threejsSolid: solidToThreejsSolid(geometry.solid), tags: geometry.tags, isThreejsGeometry: true };
    } else if (geometry.z0Surface) {
      return { threejsSurface: z0SurfaceToThreejsSurface(geometry.z0Surface), tags: geometry.tags, isThreejsGeometry: true };
    }
  };

  // Bootstrap start.
  const { Projector: Projector$1, RenderableFace, RenderableLine, RenderableSprite } = installProjector({ THREE: THREE$1 });

  const { SVGRenderer } = installSVGRenderer({ THREE: THREE$1, Projector: Projector$1, RenderableFace, RenderableLine, RenderableSprite, document: new domParser_3().parseFromString('<xml></xml>', 'text/xml') });
  // Bootstrap done.

  const build$1 = ({ cameraPosition = [0, 0, 16], pageSize = [100, 100] }, geometry) => {
    const [pageWidth, pageHeight] = pageSize;
    const camera = new PerspectiveCamera(27, pageWidth / pageHeight, 1, 3500);
    [camera.position.x, camera.position.y, camera.position.z] = cameraPosition;
    const scene = new Scene();
    scene.background = new Color(0x050505);
    scene.add(camera);
    //
    var ambientLight = new AmbientLight(0x222222);
    scene.add(ambientLight);
    var light = new DirectionalLight(0xffffff, 1);
    light.position.set(1, 1, 1);
    camera.add(light);

    const walk = (geometry) => {
      if (geometry.assembly) {
        geometry.assembly.forEach(walk);
      } else if (geometry.threejsSegments) {
        const segments = geometry.threejsSegments;
        const threejsGeometry = new Geometry();
        const material = new LineBasicMaterial({ color: 0xff0000 });
        for (const [[aX, aY, aZ], [bX, bY, bZ]] of segments) {
          threejsGeometry.vertices.push(new Vector3(aX, aY, aZ), new Vector3(bX, bY, bZ));
        }
        scene.add(new LineSegments(threejsGeometry, material));
      } else if (geometry.threejsSolid) {
        const { positions, normals } = geometry.threejsSolid;
        const threejsGeometry = new BufferGeometry();
        threejsGeometry.addAttribute('position', new Float32BufferAttribute(positions, 3));
        threejsGeometry.addAttribute('normal', new Float32BufferAttribute(normals, 3));
        const material = new MeshNormalMaterial();
        scene.add(new Mesh(threejsGeometry, material));
      } else if (geometry.threejsSurface) {
        const { positions, normals } = geometry.threejsSurface;
        const threejsGeometry = new BufferGeometry();
        threejsGeometry.addAttribute('position', new Float32BufferAttribute(positions, 3));
        threejsGeometry.addAttribute('normal', new Float32BufferAttribute(normals, 3));
        const material = new MeshNormalMaterial();
        scene.add(new Mesh(threejsGeometry, material));
      }
    };
    walk(toThreejsGeometry(geometry));

    return [scene, camera];
  };

  const toSvg$1 = async (options = {}, geometry) => {
    const [scene, camera] = build$1(options, geometry);
    const { pageSize = [500, 500] } = options;
    const [pageWidth, pageHeight] = pageSize;

    const renderer = new SVGRenderer({});
    renderer.setSize(pageWidth, pageHeight);
    renderer.render(scene, camera);

    const serializer = new domParser_2();
    return serializer.serializeToString(renderer.domElement);
  };

  const toThreejsPage = async ({ cameraPosition = [0, 0, 16], title = 'JSxCAD Viewer', includeEditor = false, includeEvaluator = false, initialScript = '', initialPage = 'editor', previewPage = 'default' }, geometry) => {
    const threejsGeometry = toThreejsGeometry(geometry);
    // FIX: Avoid injection issues.
    const head = [
      `<title>${title}</title>`,
      `<meta charset="utf-8">`,
      `<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">`,
      `<style>`,
      `body { color: #cccccc; font-family: Monospace; font-size: 13px; text-align: left; background-color: #0.73505; margin: 0px; overflow: hidden; }`,
      `.dg { position: absolute; top: 2px; left: 2px }`,
      `.CodeMirror { border-top: 1px solid black; border-bottom: 1px solid black; font-family: Arial, monospace; font-size: 16px; }`,
      `.Console { border-top: 1px solid black; border-bottom: 1px solid black; font-family: Arial, monospace; font-size: 16px; color: black; }`,
      `</style>`,
      `<link href="https://codemirror.net/lib/codemirror.css" rel="stylesheet">`
    ].join('\n');

    const body = [
      `<!-- CodeMirror -->`,
      includeEditor ? `<script src="https://codemirror.net/lib/codemirror.js"><\\/script>`.replace('\\/', '/') : '',
      includeEditor ? `<script src="https://codemirror.net/addon/display/autorefresh.js"><\\/script>`.replace('\\/', '/') : '',
      includeEditor ? `<script src="https://codemirror.net/addon/display/fullscreen.js"><\\/script>`.replace('\\/', '/') : '',
      includeEditor ? `<script src="https://codemirror.net/mode/javascript/javascript.js"><\\/script>`.replace('\\/', '/') : '',
      includeEditor ? `<script src="https://riversun.github.io/jsframe/jsframe.js"><\\/script>`.replace('\\/', '/') : '',
      `<!-- ThreeJS -->`,
      `<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/three.js/87/three.min.js"><\\/script>`.replace('\\/', '/'),
      `<script type="text/javascript" src="https://cdn.rawgit.com/mrdoob/stats.js/master/build/stats.min.js"><\\/script>`.replace('\\/', '/'),
      `<script type="text/javascript" src="https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js"><\\/script>`.replace('\\/', '/'),
      `<script type="text/javascript" src="https://cdn.rawgit.com/dataarts/dat.gui/master/build/dat.gui.min.js"><\\/script>`.replace('\\/', '/'),
      `<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/ami.js//0.0.20/ami.min.js"><\\/script>`.replace('\\/', '/'),
      `<!-- FileSaver -->`,
      `<script type="module">`,
      // `import { api, sys, toThreejsGeometry } from 'https://unpkg.com/@jsxcad/api-v1-bundle@^0.0.74/dist/bundle?module';`,
      `import { api, sys, toThreejsGeometry } from './bundle.js'`,
      `const { readFile, watchFile, watchFileCreation, writeFile } = sys;`,
      initialScript !== '' ? `const initialScript = ${JSON.stringify(initialScript)};` : '',
      // `import { display } from 'https://unpkg.com/@jsxcad/convert-threejs@^0.0.74/display.js?module';`,
      `import { display } from './display.js';`,
      `const jsFrame = new JSFrame();`,
      `const { addPage, nextPage, lastPage } = display({ Blob, THREE, dat, jsFrame, readFile, requestAnimationFrame, toThreejsGeometry, watchFile, watchFileCreation });`,
      // includeEditor ? `import { editor } from 'https://unpkg.com/@jsxcad/convert-threejs@^0.0.74/editor.js?module'` : '',
      includeEditor ? `import { editor } from './editor.js';` : '',
      includeEditor ? `editor({ CodeMirror, addPage, api, initialScript, nextPage, lastPage });` : '',
      includeEditor ? `import { console } from './console.js';` : '',
      includeEditor ? `console({ addPage, watchFile });` : '',
      `const runApp = () => {`,
      threejsGeometry ? `  writeFile({ geometry: ${JSON.stringify(threejsGeometry)} }, ${JSON.stringify(previewPage)}, '').then(_ => nextPage());` : '',
      `}`,
      `document.addEventListener("DOMContentLoaded", runApp);`,
      `<\\/script>`.replace('\\/', '/')
    ].join('\n');

    return `<html><head>${head}</head><body id="body">${body}</body></html>`;
  };

  const writeSvgPhoto = async (options, shape) => {
    const { path } = options;
    const geometry = shape.toDisjointGeometry();
    return writeFile({ geometry, preview: true }, path, toSvg$1(options, geometry));
  };

  const method$g = function (options = {}) { writeSvgPhoto(options, this); return this; };

  Shape.prototype.writeSvgPhoto = method$g;

  const writeThreejsPage = async (options, shape) => {
    const { path } = options;
    const geometry = shape.toDisjointGeometry();
    return writeFile({ geometry, preview: true }, path, toThreejsPage(options, shape.toDisjointGeometry()));
  };

  /**
   *
   * Defines the interface used by the api to access the rest of the system on
   * behalf of a user. e.g., algorithms and geometries.
   *
   * A user can destructively update this mapping in their code to change what
   * the api uses.
   */

  var api = /*#__PURE__*/Object.freeze({
    Shape: Shape,
    acos: acos$1,
    assemble: assemble$1,
    center: center,
    circle: circle,
    crossSection: crossSection,
    cos: cos$1,
    cube: cube,
    cylinder: cylinder,
    difference: difference$5,
    extrude: extrude,
    hull: hull,
    intersection: intersection$5,
    loadFont: loadFont,
    log: log$1,
    max: max$2,
    measureBoundingBox: measureBoundingBox$3,
    minkowski: minkowski,
    polygon: polygon,
    polyhedron: polyhedron,
    readDst: readDst,
    readLDraw: readLDraw,
    readStl: readStl,
    rotate: rotate,
    rotateX: rotateX$1,
    rotateY: rotateY,
    rotateZ: rotateZ,
    scale: scale$5,
    sin: sin$2,
    sphere: sphere,
    sqrt: sqrt$1,
    square: square,
    svgPath: svgPath,
    tetrahedron: tetrahedron,
    text: text,
    translate: translate$3,
    union: union$5,
    writePdf: writePdf,
    writeStl: writeStl,
    writeSvg: writeSvg,
    writeSvgPhoto: writeSvgPhoto,
    writeThreejsPage: writeThreejsPage
  });

  /* global postMessage, onmessage:writable, self */

  const say = (message) => postMessage(message);
  const agent = async ({ ask, question }) => {
    try {
      if (question.evaluate) {
        const code = new Function(`{ ${Object.keys(api).join(', ')} }`,
                                  `${question.evaluate}; return main;`);
        return code(api)();
      }
    } catch (error) {
      await ask({ writeFile: { options: { ephemeral: true }, path: 'console/out', data: error.toString() } });
    }
  };
  const { ask, hear } = conversation({ agent, say });
  self.ask = ask;
  onmessage = ({ data }) => hear(data);
  if (onmessage === undefined) throw Error('die');

});
