Arc(5)
  .hasAngle(45 / 360, 270 / 360)
  .gridView()
  .md(`Arc(5).angle(45/360, 270/360)`);

Assembly(Box(10), Arc(8), Triangle(5))
  .pack()
  .gridView(undefined, { size: 801, triangles: false, wireframe: false })
  .md(`Assembly(Box(10), Arc(8), Triangle(5))`);

Box(5, 7, 8).view().md(`Box(5, 7, 8)`);

ChainHull(Point(), Box(5).z(5), Arc(3).z(8))
  .view()
  .md(`ChainHull(Point(), Box(5).z(5), Arc(3).z(8))`);

Empty().view().md(`Empty()`);

Group(Box(10), Arc(8), Triangle(5))
  .pack()
  .gridView()
  .md(`Group(Box(10), Arc(8), Triangle(5))`);

Hershey('Hershey', 10)
  .by(align('xy'))
  .gridView()
  .md(`Hershey(10)('Hershey').by(align('xy'))`);

Hexagon(10).gridView().md(`Hexagon(10)`);

Hull(Arc(5), Box(5).z(5)).view().md(`Hull(Arc(5), Box(5).z(5))`);

Icosahedron(5).view().md(`Icosahedron(5)`);

const torusFn = (x, y, z) => {
  const x2 = x * x,
    y2 = y * y,
    z2 = z * z;
  const x4 = x2 * x2,
    y4 = y2 * y2,
    z4 = z2 * z2;
  return (
    x4 +
    y4 +
    z4 +
    2 * x2 * y2 +
    2 * x2 * z2 +
    2 * y2 * z2 -
    5 * x2 +
    4 * y2 -
    5 * z2 +
    4
  );
};

// Determine why Implicit seems non-deterministic.
Implicit(torusFn, 2).view({ withGrid: false }).md('Implicit(torusFn, 2');

Line(5, -1).rz(45).gridView().md(`Line(5, -1)`);

Octagon(5).gridView().md(`Octagon(5)`);

Orb(1).view().md(`Orb(1)`);

Link(Point(0), Point(5), Point(5, 5), Point(0))
  .rz(45 / 2)
  .gridView()
  .md(`Link(Point(0), Point(5), Point(5, 5), Point(0)).rz(45 / 2)`);

Pentagon(5).gridView().md(`Pentagon(5)`);

Point(0.5, 0.5).gridView().md(`Point(0.5, 0.5)`);

Points([0.5, 0.5], [-0.5, -0.5])
  .gridView()
  .md(`Points([0.5, 0.5], [-0.5, -0.5])`);

Polygon(Point(0), Point(5), Point(5, 5))
  .rz(1 / 16)
  .gridView()
  .md(`Polygon(Point(0), Point(5), Point(5, 5)).rz(1 / 16)`);

Polyhedron(
  [
    [10, 10, 0],
    [10, -10, 0],
    [-10, -10, 0],
    [-10, 10, 0],
    [0, 0, 10],
  ],
  [
    [4, 1, 0],
    [4, 2, 1],
    [4, 3, 2],
    [4, 0, 3],
    [3, 0, 1],
    [3, 1, 2],
  ]
)
  .view()
  .md(
    `Polyhedron(  
      [[10, 10, 0], [10, -10, 0], [-10, -10, 0], [-10, 10, 0], [0, 0, 10]],  
      [[4, 1, 0], [4, 2, 1], [4, 3, 2], [4, 0, 3], [3, 0, 1], [3, 1, 2]])`
  );

Arc(5).hasSides(7).gridView().md(`Septagon(5)`);

Spiral().gridView().md(`Spiral()`);

Triangle(5).gridView().md(`Triangle(5)`);

Wave((t) => Point(0, sin(t * 3) * 100), { to: 360 })
  .by(align('xy'))
  .gridView()
  .md(`Wave((t) => Point(0, sin(t * 3) * 100), { to: 360 })`);

Group(Arc(4).x(-1), Box(5).x(1))
  .fill()
  .gridView()
  .md(`Group(Arc(5).x(-1), Box(5).x(1)).fill()`);

const extentsA = [
  [2, 5],
  [2, 3],
  [2, 4],
];

const extentsB = [
  [0, 1],
  [0, 5],
  [0, 5],
];

const extentsC = [
  [-2, 2],
  [-2, 2],
  [-2, -1],
];
const q = Group(
  ArcY(...extentsA).and(Box(...extentsA).material('glass')),
  ArcX(...extentsB).and(Box(...extentsB).material('glass')),
  ArcZ(...extentsC).and(Box(...extentsC).material('glass'))
).view().md`Boxes and Arcs from extents`;

Line(15, -15)
  .seq({ from: -10, to: 11 }, y, Group)
  .clip(Arc(20).cut(Arc(10)))
  .view();

Line(15, -15)
  .seq({ from: -10, to: 11 }, y, Group)
  .clip(Arc(20).cut(Arc(10)).ez(1))
  .view();

Line(-15, 15)
  .seq({ from: -15, to: 15 }, y, Group)
  .cut(Arc(20).cut(Arc(10)))
  .view();

Line(-15, 15)
  .seq({ from: -15, to: 15 }, y, Group)
  .cut(Arc(20).cut(Arc(10)).ez(1))
  .view();

Box(12)
  .cut(
    Arc(3)
      .y(3)
      .rz(1 / 4, 3 / 4)
  )
  .color('black')
  .fit(separate({ keepHolesInShapes: true }).offset(1).fuse().color('yellow'))
  .view();

Box(12)
  .cut(
    Arc(3)
      .y(3)
      .rz(1 / 4, 3 / 4)
  )
  .color('black')
  .fit(separate({ keepHolesInShapes: false }).offset(1).fuse().color('yellow'))
  .view();

Group(Box(1), Box(1).rx(1 / 4))
  .each(e(2))
  .view();

Orb(10)
  .op(lowerEnvelope().ez(-1).z(-5), upperEnvelope().ez(1).z(5))
  .by(align('z>'))
  .view(1);

// Show a section with a hole in it.
Box(10).cut(Box(5)).ez(1, -1).section().view();

Box(10, 10, 20)
  .cutOut(Box(20, 20, [8, 100]), noOp(), grow(2, 'xy'))
  .view();

Box(10, 10, 20)
  .grow(2, Box(10, 10, [7, 10]))
  .view(3);

Box(10, 10, 20)
  .seam(Box(10, 10, [6, 11]))
  .grow(1, Box(10, 10, [7, 10]))
  .view(3, rx(1 / 2).by(align('z>')));

const red = Arc(2).color('red');
const blue = Box(10).x(10).color('blue');

blue.fitTo(red.to(blue)).view();
red.at(blue, cut(Box([10, 20], 20))).view();
red.by(blue).view();

Box(5)
  .as('b')
  .and(Triangle(5).as('t'))
  .on(get('b'), rz(1 / 8))
  .view();

Box(10).cut(Box(5, 50, 5)).view();

Box(10).clip(Box(5, 50, 5)).view();

Box(10).join(Box(5, 50, 5)).view();

Box(10).and(Box(5, 50, 5)).disjoint().pack().view();

Box(10)
  .rz(1 / 8)
  .cut(eachPoint(Arc(5)))
  .view();

Triangle(10)
  .cut(inset(2))
  .cut(eachPoint(Arc(1)))
  .view();

Triangle(10)
  .cut(inset(4))
  .rz(1 / 8)
  .cut(eachPoint(Arc(5)))
  .view();

Curve(Point(0, 0), Point(10, 0), Point(10, 10), Point(20, 10))
  .rx(1 / 4)
  .eachEdge(ArcX(0, 10).hasSides(6), Loft)
  .view();

Curve(Point(0, 0), Point(10, 0), Point(10, 10), Point(20, 10))
  .rx(1 / 4)
  .eachPoint(ArcX(0, 10).hasSides(6), Loft)
  .view();

Orb(6)
  .hasZag(2)
  .faces(cut(inset(0.2)))
  .view();

Box(10, 10, 10)
  .cut(faces(Box(4, 4, 4)))
  .faces(cut(inset(1)))
  .view();

Box(10).cut(Triangle(11)).view(1);

Box(10).cut(Triangle(11)).clean().view(2);

Triangle(11).eachPoint(Arc(5), cut).view(5);

Box(10)
  .cut(Arc(5))
  .ez(5)
  .grow(1, 'xy', Box(8).ez(1, 4))
  .grow(1.5, 'xy', Box(16).cut(Box(8)).ez(2, 3))
  .view();

Box(10, 10, [0, 3])
  .smooth(1, Box(11).cut(Box(5)).ez(1.5, 3.1), { iterations: 1, time: 1 })
  .view();

Box(5, 5, 20)
  .rx(0 / 4, 1 / 6)
  .fuse()
  .smooth(1, ArcX(5, 16, 16))
  .view();

Box(10)
  .cut(Box(5).cut(Box(3).cut(Box(1))))
  .ez(3)
  .section()
  .view();
