md`
# Lego compatible blocks

[Examples](#https://raw.githubusercontent.com/jsxcad/JSxCAD/master/nb/projects/lego/examples.nb)
`;

export const SocketBoard = (length, width, height, { sockets = [] } = {}) => {
  const isFlat = (x, y) => {
    if (sockets === undefined) return false;
    if (sockets[y] === undefined) return false;
    return sockets[y][x] === '_';
  };
  const pieces = [];
  const socket = Arc(5).x(4).y(4);
  for (let x = 0; x < length; x++) {
    for (let y = 0; y < width; y++) {
      if (!isFlat(x, y)) {
        pieces.push(socket.x(x * 8).y(y * 8));
      }
    }
  }
  return Group(Box(length * 8, width * 8).by(align('x>y>')), ...pieces)
    .fill()
    .ez(height)
    .by(align('xy'))
    .as(`SocketBoard ${length} x ${width} x ${height}`);
};

export const StudBoard = (length, width, height, { studs = [] } = {}) => {
  const isFlat = (x, y) => {
    if (studs === undefined) return false;
    if (studs[y] === undefined) return false;
    return studs[y][x] === '_';
  };
  const board = [];
  const flat = Box(8).ez(height);
  const stud = Box(8)
    .ez(height)
    .add(Arc(5).ez(height, height + 1.6))
    .add(Arc(4.8).ez(height + 1.6, height + 1.8));
  for (let x = 0; x < length; x++) {
    for (let y = 0; y < width; y++) {
      const part = isFlat(x, y) ? flat : stud;
      board.push(part.x(x * 8).y(y * 8));
    }
  }
  return Group(...board)
    .by(align('xy'))
    .as(`StudBoard ${length} x ${width} x ${height}`);
};

export const Block = (
  length,
  width,
  height,
  { sockets = [], studs = [] } = {}
) =>
  Group(
    SocketBoard(length, width, 2.1, { sockets }),
    StudBoard(length, width, height - 2.1, { studs }).z(2.1)
  );
